var app = (function (_xTextdecoder, _xTextencoder, _xRandomvalues, _wasmCryptoAsmjs, _wasmCryptoWasm, buffer$3, crypto$2, _xFetch, _xWs) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var _xTextdecoder__default = /*#__PURE__*/_interopDefaultLegacy(_xTextdecoder);
	var _xTextencoder__default = /*#__PURE__*/_interopDefaultLegacy(_xTextencoder);
	var _xRandomvalues__default = /*#__PURE__*/_interopDefaultLegacy(_xRandomvalues);
	var _wasmCryptoAsmjs__default = /*#__PURE__*/_interopDefaultLegacy(_wasmCryptoAsmjs);
	var _wasmCryptoWasm__default = /*#__PURE__*/_interopDefaultLegacy(_wasmCryptoWasm);
	var buffer__default = /*#__PURE__*/_interopDefaultLegacy(buffer$3);
	var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto$2);
	var _xFetch__default = /*#__PURE__*/_interopDefaultLegacy(_xFetch);
	var _xWs__default = /*#__PURE__*/_interopDefaultLegacy(_xWs);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	function commonjsRequire (target) {
		throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
	}

	var packageInfo_1$d = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/api-derive',
	  version: '5.8.3'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$c = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/rpc-core',
	  version: '5.8.3'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$b = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/rpc-provider',
	  version: '5.8.3'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$a = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/types',
	  version: '5.8.3'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$9 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/types-known',
	  version: '5.8.3'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/util',
	  version: '7.3.1'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/x-global authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/x-global',
	  version: '7.3.1'
	};
	exports.packageInfo = packageInfo;
	});

	var _packageInfo$b = packageInfo_1$7;

	var xGlobal = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$b.packageInfo;
	  }
	});
	exports.xglobal = void 0;



	// Copyright 2017-2021 @polkadot/x-global authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : void 0;
	exports.xglobal = xglobal;
	});

	var isFunction_1 = isFunction$1;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// eslint-disable-next-line @typescript-eslint/ban-types

	/**
	 * @name isFunction
	 * @summary Tests for a `function`.
	 * @description
	 * Checks to see if the input value is a JavaScript function.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isFunction } from '@polkadot/util';
	 *
	 * isFunction(() => false); // => true
	 * ```
	 */
	function isFunction$1(value) {
	  return typeof value === 'function';
	}

	var _function$1 = /*#__PURE__*/Object.defineProperty({
		isFunction: isFunction_1
	}, '__esModule', {value: true});

	var isString_1 = isString;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isString
	 * @summary Tests for a string.
	 * @description
	 * Checks to see if the input value is a JavaScript string.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isString } from '@polkadot/util';
	 *
	 * console.log('isString', isString('test')); // => true
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function isString(value) {
	  return typeof value === 'string' || value instanceof String;
	}

	var string$1 = /*#__PURE__*/Object.defineProperty({
		isString: isString_1
	}, '__esModule', {value: true});

	var isUndefined_1 = isUndefined;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isUndefined
	 * @summary Tests for a `undefined` values.
	 * @description
	 * Checks to see if the input value is `undefined`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isUndefined } from '@polkadot/util';
	 *
	 * console.log('isUndefined', isUndefined(void(0))); // => true
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function isUndefined(value) {
	  return typeof value === 'undefined';
	}

	var _undefined$1 = /*#__PURE__*/Object.defineProperty({
		isUndefined: isUndefined_1
	}, '__esModule', {value: true});

	var _function = _function$1;

	var _undefined = _undefined$1;

	var assert_2 = assert$a;
	var assertReturn_1 = assertReturn;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name assert
	 * @summary Checks for a valid test, if not Error is thrown.
	 * @description
	 * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const { assert } from '@polkadot/util';
	 *
	 * assert(true, 'True should be true'); // passes
	 * assert(false, 'False should not be true'); // Error thrown
	 * assert(false, () => 'message'); // Error with 'message'
	 * ```
	 */
	function assert$a(condition, message) {
	  if (!condition) {
	    throw new Error((0, _function.isFunction)(message) ? message() : message);
	  }
	}
	/**
	 * @name assertReturn
	 * @summart Returns when the value is not undefined, otherwise throws assertion error
	 */


	function assertReturn(value, message) {
	  assert$a(!(0, _undefined.isUndefined)(value), message);
	  return value;
	}

	var assert_1 = /*#__PURE__*/Object.defineProperty({
		assert: assert_2,
		assertReturn: assertReturn_1
	}, '__esModule', {value: true});

	var _xGlobal = xGlobal;

	var _string = string$1;

	var _assert = assert_1;

	var detectPackage_1 = detectPackage;









	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:';
	/** @internal */

	function getEntry(name) {
	  const _global = _xGlobal.xglobal;

	  if (!_global.__polkadotjs) {
	    _global.__polkadotjs = {};
	  }

	  if (!_global.__polkadotjs[name]) {
	    _global.__polkadotjs[name] = [];
	  }

	  return _global.__polkadotjs[name];
	}

	function getVersionLength(all) {
	  return all.reduce((max, {
	    version
	  }) => Math.max(max, version.length), 0);
	}
	/** @internal */


	function flattenInfos(all) {
	  const verLength = getVersionLength(all);
	  return all.map(({
	    name,
	    version
	  }) => `\t${version.padEnd(verLength)}\t${name}`).join('\n');
	}
	/** @internal */


	function flattenVersions(entry) {
	  const all = entry.map(version => (0, _string.isString)(version) ? {
	    version
	  } : version);
	  const verLength = getVersionLength(all);
	  return all.map(({
	    path,
	    version
	  }) => `\t${version.padEnd(verLength)}\t${!path || path.length < 5 ? '<unknown>' : path}`).join('\n');
	}
	/** @internal */


	function getPath(pathOrFn) {
	  if ((0, _function.isFunction)(pathOrFn)) {
	    try {
	      return pathOrFn() || '';
	    } catch (error) {
	      return '';
	    }
	  }

	  return pathOrFn || '';
	}
	/**
	 * @name detectPackage
	 * @summary Checks that a specific package is only imported once
	 */


	function detectPackage({
	  name,
	  version
	}, pathOrFn, deps = []) {
	  (0, _assert.assert)(name.startsWith('@polkadot'), () => `Invalid package descriptor ${name}`);
	  const entry = getEntry(name);
	  entry.push({
	    path: getPath(pathOrFn),
	    version
	  });

	  if (entry.length !== 1) {
	    console.warn(`${name} has multiple versions, ensure that there is only one installed.\n${DEDUPE}\n${flattenVersions(entry)}`);
	  } else {
	    const mismatches = deps.filter(d => d && d.version !== version);

	    if (mismatches.length) {
	      console.warn(`${name} requires direct dependencies exactly matching version ${version}.\n${DEDUPE}\n${flattenInfos(mismatches)}`);
	    }
	  }
	}

	var versionDetect = /*#__PURE__*/Object.defineProperty({
		detectPackage: detectPackage_1
	}, '__esModule', {value: true});

	var _packageInfo$a = packageInfo_1$8;

	var _versionDetect = versionDetect;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// For esm, this should be import.meta.url or to get the same behavior as __dirname, we can use
	//
	//   new URL(import.meta.url).pathname)
	//
	// The issue is the WP4 has "some" issues with import.meta.url. So because of bundlers, we can't have
	// nice things... In this case it is even worse since import.meta.url won't even make it compile, so
	// there is a complete dead end with usage thereof
	//
	// When that is fixed, a solution is to have both .js & .mjs files, with the following content -
	//
	// cjs: util.detectPackage(packageInfo, () => __dirname);
	// esm: detectPackage(packageInfo, () => import.meta.url);
	//
	// With the above we additionally need a .d.ts to just export the packageInfo
	(0, _versionDetect.detectPackage)(_packageInfo$a.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_xTextdecoder__default['default'].packageInfo, _xTextencoder__default['default'].packageInfo]);

	var arrayChunk_1 = arrayChunk;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name arrayChunk
	 * @summary Split T[] into T[][] based on the defind size
	 * @description
	 * Returns a set ao arrays based on the chunksize
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { arrayChunk } from '@polkadot/util';
	 *
	 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
	 * ```
	 */
	function arrayChunk(array, chunkSize) {
	  const outputSize = Math.ceil(array.length / chunkSize);
	  const output = Array(outputSize);

	  for (let index = 0; index < outputSize; index++) {
	    const offset = index * chunkSize;
	    output[index] = array.slice(offset, offset + chunkSize);
	  }

	  return output;
	}

	var chunk = /*#__PURE__*/Object.defineProperty({
		arrayChunk: arrayChunk_1
	}, '__esModule', {value: true});

	var isNull_1 = isNull;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isNull
	 * @summary Tests for a `null` values.
	 * @description
	 * Checks to see if the input value is `null`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isNull } from '@polkadot/util';
	 *
	 * console.log('isNull', isNull(null)); // => true
	 * ```
	 */
	function isNull(value) {
	  return value === null;
	}

	var _null$1 = /*#__PURE__*/Object.defineProperty({
		isNull: isNull_1
	}, '__esModule', {value: true});

	var _null = _null$1;

	var arrayFilter_1 = arrayFilter;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name arrayFilter
	 * @summary Filters undefined and (optionally) null values from an array
	 * @description
	 * Returns a new array with all `undefined` values removed. Optionally, when `allowNulls = false`, it removes the `null` values as well
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { arrayFilter } from '@polkadot/util';
	 *
	 * arrayFilter([0, void 0, true, null, false, '']); // [0, true, null, false, '']
	 * arrayFilter([0, void 0, true, null, false, ''], false); // [0, true, false, '']
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function arrayFilter(array, allowNulls = true) {
	  return array.filter(value => !(0, _undefined.isUndefined)(value) && (allowNulls || !(0, _null.isNull)(value)));
	}

	var filter$1 = /*#__PURE__*/Object.defineProperty({
		arrayFilter: arrayFilter_1
	}, '__esModule', {value: true});

	var arrayFlatten_1 = arrayFlatten;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// This is supposed to be a faster concat...
	// https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki

	/**
	 * @name arrayFlatten
	 * @summary Merge T[][] into T[]
	 * @description
	 * Returns a new array with all arrays merged into one
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { arrayFlatten } from '@polkadot/util';
	 *
	 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
	 * ```
	 */
	function arrayFlatten(arrays) {
	  // pre-allocate based on the combined size
	  const output = new Array(arrays.reduce((length, array) => length + array.length, 0));
	  let index = -1;

	  for (let a = 0; a < arrays.length; a++) {
	    const array = arrays[a]; // instead of pushing, we just set the entries

	    for (let e = 0; e < array.length; e++) {
	      output[++index] = array[e];
	    }
	  }

	  return output;
	}

	var flatten = /*#__PURE__*/Object.defineProperty({
		arrayFlatten: arrayFlatten_1
	}, '__esModule', {value: true});

	var arrayRange_1 = arrayRange;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name arrayRange
	 * @summary Returns a range of numbers ith the size and the specified offset
	 * @description
	 * Returns a new array of numbers with the specific size. Optionally, when `startAt`, is provided, it generates the range to start at a specific value.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { arrayRange } from '@polkadot/util';
	 *
	 * arrayRange(5); // [0, 1, 2, 3, 4]
	 * arrayRange(3, 5); // [5, 6, 7]
	 * ```
	 */
	function arrayRange(size, startAt = 0) {
	  (0, _assert.assert)(size > 0, 'Expected non-zero, positive number as a range size');
	  return new Array(size).fill(0).map((_, i) => i + startAt);
	}

	var range$1 = /*#__PURE__*/Object.defineProperty({
		arrayRange: arrayRange_1
	}, '__esModule', {value: true});

	var arrayShuffle_1 = arrayShuffle;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function arrayShuffle(input) {
	  const result = [...input];
	  let curr = result.length;

	  if (curr === 1) {
	    return result;
	  }

	  while (curr !== 0) {
	    const rand = Math.floor(Math.random() * curr);
	    curr--;
	    [result[curr], result[rand]] = [result[rand], result[curr]];
	  }

	  return result;
	}

	var shuffle = /*#__PURE__*/Object.defineProperty({
		arrayShuffle: arrayShuffle_1
	}, '__esModule', {value: true});

	var _chunk = chunk;

	var _filter = filter$1;

	var _flatten = flatten;

	var _range = range$1;

	var _shuffle = shuffle;

	var array = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "arrayChunk", {
	  enumerable: true,
	  get: function () {
	    return _chunk.arrayChunk;
	  }
	});
	Object.defineProperty(exports, "arrayFilter", {
	  enumerable: true,
	  get: function () {
	    return _filter.arrayFilter;
	  }
	});
	Object.defineProperty(exports, "arrayFlatten", {
	  enumerable: true,
	  get: function () {
	    return _flatten.arrayFlatten;
	  }
	});
	Object.defineProperty(exports, "arrayRange", {
	  enumerable: true,
	  get: function () {
	    return _range.arrayRange;
	  }
	});
	Object.defineProperty(exports, "arrayShuffle", {
	  enumerable: true,
	  get: function () {
	    return _shuffle.arrayShuffle;
	  }
	});
	});

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	});

	var _nodeResolve_empty = {};

	var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': _nodeResolve_empty
	});

	var require$$0$a = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

	var bn$3 = createCommonjsModule(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require$$0$a.Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // 'A' - 'F'
	    if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    // '0' - '9'
	    } else {
	      return (c - 48) & 0xf;
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this.strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is BN v4 instance
	        r.strip();
	      } else {
	        // r is BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	});

	var bn$2 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "BN", {
	  enumerable: true,
	  get: function () {
	    return _bn.default;
	  }
	});

	var _bn = interopRequireDefault(bn$3);
	});

	var _bn$1 = bn$2;

	var consts = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BN_MAX_INTEGER = exports.BN_QUINTILL = exports.BN_BILLION = exports.BN_MILLION = exports.BN_THOUSAND = exports.BN_HUNDRED = exports.BN_TEN = exports.BN_NINE = exports.BN_EIGHT = exports.BN_SEVEN = exports.BN_SIX = exports.BN_FIVE = exports.BN_FOUR = exports.BN_THREE = exports.BN_TWO = exports.BN_ONE = exports.BN_ZERO = void 0;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name BN_ZERO
	 * @summary BN constant for 0.
	 */
	const BN_ZERO = new _bn$1.BN(0);
	/**
	 * @name BN_ONE
	 * @summary BN constant for 1.
	 */

	exports.BN_ZERO = BN_ZERO;
	const BN_ONE = new _bn$1.BN(1);
	/**
	 * @name BN_TWO
	 * @summary BN constant for 2.
	 */

	exports.BN_ONE = BN_ONE;
	const BN_TWO = new _bn$1.BN(2);
	/**
	 * @name BN_THREE
	 * @summary BN constant for 3.
	 */

	exports.BN_TWO = BN_TWO;
	const BN_THREE = new _bn$1.BN(3);
	/**
	 * @name BN_FOUR
	 * @summary BN constant for 4.
	 */

	exports.BN_THREE = BN_THREE;
	const BN_FOUR = new _bn$1.BN(4);
	/**
	 * @name BN_FIVE
	 * @summary BN constant for 5.
	 */

	exports.BN_FOUR = BN_FOUR;
	const BN_FIVE = new _bn$1.BN(5);
	/**
	 * @name BN_SIX
	 * @summary BN constant for 6.
	 */

	exports.BN_FIVE = BN_FIVE;
	const BN_SIX = new _bn$1.BN(6);
	/**
	 * @name BN_SEVEN
	 * @summary BN constant for 7.
	 */

	exports.BN_SIX = BN_SIX;
	const BN_SEVEN = new _bn$1.BN(7);
	/**
	 * @name BN_EIGHT
	 * @summary BN constant for 8.
	 */

	exports.BN_SEVEN = BN_SEVEN;
	const BN_EIGHT = new _bn$1.BN(8);
	/**
	 * @name BN_NINE
	 * @summary BN constant for 9.
	 */

	exports.BN_EIGHT = BN_EIGHT;
	const BN_NINE = new _bn$1.BN(9);
	/**
	 * @name BN_TEN
	 * @summary BN constant for 10.
	 */

	exports.BN_NINE = BN_NINE;
	const BN_TEN = new _bn$1.BN(10);
	/**
	 * @name BN_HUNDRED
	 * @summary BN constant for 100.
	 */

	exports.BN_TEN = BN_TEN;
	const BN_HUNDRED = new _bn$1.BN(100);
	/**
	 * @name BN_THOUSAND
	 * @summary BN constant for 1,000.
	 */

	exports.BN_HUNDRED = BN_HUNDRED;
	const BN_THOUSAND = new _bn$1.BN(1000);
	/**
	 * @name BN_MILLION
	 * @summary BN constant for 1,000,000.
	 */

	exports.BN_THOUSAND = BN_THOUSAND;
	const BN_MILLION = new _bn$1.BN(1000000);
	/**
	 * @name BN_BILLION
	 * @summary BN constant for 1,000,000,000.
	 */

	exports.BN_MILLION = BN_MILLION;
	const BN_BILLION = new _bn$1.BN(1000000000);
	/**
	 * @name BN_QUINTILL
	 * @summary BN constant for 1,000,000,000,000,000,000.
	 */

	exports.BN_BILLION = BN_BILLION;
	const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
	/**
	 * @name BN_MAX_INTEGER
	 * @summary BN constant for MAX_SAFE_INTEGER
	 */

	exports.BN_QUINTILL = BN_QUINTILL;
	const BN_MAX_INTEGER = new _bn$1.BN(Number.MAX_SAFE_INTEGER);
	exports.BN_MAX_INTEGER = BN_MAX_INTEGER;
	});

	var defineProperty = createCommonjsModule(function (module) {
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	module.exports = _defineProperty;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	});

	var isBoolean_1 = isBoolean;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isBoolean
	 * @summary Tests for a boolean value.
	 * @description
	 * Checks to see if the input value is a JavaScript boolean.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isBoolean } from '@polkadot/util';
	 *
	 * isBoolean(false); // => true
	 * ```
	 */
	function isBoolean(value) {
	  return typeof value === 'boolean';
	}

	var boolean = /*#__PURE__*/Object.defineProperty({
		isBoolean: isBoolean_1
	}, '__esModule', {value: true});

	var isHex_1 = isHex;
	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HEX_REGEX = /^0x[a-fA-F0-9]+$/;
	/**
	 * @name isHex
	 * @summary Tests for a hex string.
	 * @description
	 * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isHex } from '@polkadot/util';
	 *
	 * isHex('0x1234'); // => true
	 * isHex('0x1234', 8); // => false
	 * ```
	 */

	function isHex(value, bitLength = -1, ignoreLength = false) {
	  return typeof value === 'string' && (value === '0x' || HEX_REGEX.test(value)) ? bitLength === -1 ? value.length % 2 === 0 || ignoreLength : value.length === 2 + Math.ceil(bitLength / 4) : false;
	}

	var hex$1 = /*#__PURE__*/Object.defineProperty({
		isHex: isHex_1
	}, '__esModule', {value: true});

	var _hex = hex$1;

	var hexHasPrefix_1 = hexHasPrefix;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name hexHasPrefix
	 * @summary Tests for the existence of a `0x` prefix.
	 * @description
	 * Checks for a valid hex input value and if the start matched `0x`
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexHasPrefix } from '@polkadot/util';
	 *
	 * console.log('has prefix', hexHasPrefix('0x1234')); // => true
	 * ```
	 */
	function hexHasPrefix(value) {
	  return !!(value && (0, _hex.isHex)(value, -1, true) && value.substr(0, 2) === '0x');
	}

	var hasPrefix = /*#__PURE__*/Object.defineProperty({
		hexHasPrefix: hexHasPrefix_1
	}, '__esModule', {value: true});

	var _hasPrefix = hasPrefix;

	var hexStripPrefix_1 = hexStripPrefix;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const UNPREFIX_HEX_REGEX = /^[a-fA-F0-9]+$/;
	/**
	 * @name hexStripPrefix
	 * @summary Strips any leading `0x` prefix.
	 * @description
	 * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexStripPrefix } from '@polkadot/util';
	 *
	 * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
	 * ```
	 */

	function hexStripPrefix(value) {
	  if (!value) {
	    return '';
	  } else if ((0, _hasPrefix.hexHasPrefix)(value)) {
	    return value.substr(2);
	  } else if (UNPREFIX_HEX_REGEX.test(value)) {
	    return value;
	  }

	  throw new Error(`Invalid hex ${value} passed to hexStripPrefix`);
	}

	var stripPrefix = /*#__PURE__*/Object.defineProperty({
		hexStripPrefix: hexStripPrefix_1
	}, '__esModule', {value: true});

	var _boolean = boolean;

	var _stripPrefix = stripPrefix;

	var hexToBn_1 = hexToBn;

	var _defineProperty2$t = interopRequireDefault(defineProperty);







	function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$t(Object(source), true).forEach(function (key) { (0, _defineProperty2$t.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function reverse(value) {
	  return (value.match(/.{1,2}/g) || []).reverse().join('');
	}
	/**
	 * @name hexToBn
	 * @summary Creates a BN.js object from a hex string.
	 * @description
	 * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
	 * @param _value The value to convert
	 * @param _options Options to pass while converting
	 * @param _options.isLe Convert using Little Endian
	 * @param _options.isNegative Convert using two's complement
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexToBn } from '@polkadot/util';
	 *
	 * hexToBn('0x123480001f'); // => BN(0x123480001f)
	 * ```
	 */


	function hexToBn(value, options = {
	  isLe: false,
	  isNegative: false
	}) {
	  if (!value) {
	    return new _bn$1.BN(0);
	  }

	  const _options = _objectSpread$t({
	    isLe: false,
	    isNegative: false
	  }, (0, _boolean.isBoolean)(options) ? {
	    isLe: options
	  } : options);

	  const _value = (0, _stripPrefix.hexStripPrefix)(value); // FIXME: Use BN's 3rd argument `isLe` once this issue is fixed
	  // https://github.com/indutny/bn.js/issues/208


	  const bn = new _bn$1.BN((_options.isLe ? reverse(_value) : _value) || '00', 16); // fromTwos takes as parameter the number of bits, which is the hex length
	  // multiplied by 4.

	  return _options.isNegative ? bn.fromTwos(_value.length * 4) : bn;
	}

	var toBn$3 = /*#__PURE__*/Object.defineProperty({
		hexToBn: hexToBn_1
	}, '__esModule', {value: true});

	var _toBn$3 = toBn$3;

	var fromHex = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "bnFromHex", {
	  enumerable: true,
	  get: function () {
	    return _toBn$3.hexToBn;
	  }
	});
	});

	var checkMaxMin_1 = checkMaxMin;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function checkMaxMin(type, items) {
	  (0, _assert.assert)(items.length >= 1, 'Must provide one or more BN arguments');
	  return items.reduce((a, v) => _bn$1.BN[type](a, v), items[0]);
	}

	var util$d = /*#__PURE__*/Object.defineProperty({
		checkMaxMin: checkMaxMin_1
	}, '__esModule', {value: true});

	var _util$6 = util$d;

	var bnMax_1 = bnMax;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bnMax
	 * @summary Finds and returns the highest value in an array of BNs.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import BN from 'bn.js';
	 * import { bnMax } from '@polkadot/util';
	 *
	 * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
	 * ```
	 */
	function bnMax(...items) {
	  return (0, _util$6.checkMaxMin)('max', items);
	}

	var max$1 = /*#__PURE__*/Object.defineProperty({
		bnMax: bnMax_1
	}, '__esModule', {value: true});

	var bnMin_1 = bnMin;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bnMin
	 * @summary Finds and returns the smallest value in an array of BNs.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import BN from 'bn.js';
	 * import { bnMin } from '@polkadot/util';
	 *
	 * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
	 * ```
	 */
	function bnMin(...items) {
	  return (0, _util$6.checkMaxMin)('min', items);
	}

	var min$1 = /*#__PURE__*/Object.defineProperty({
		bnMin: bnMin_1
	}, '__esModule', {value: true});

	var isBigInt_1 = isBigInt;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isBigInt
	 * @summary Tests for a `BigInt` object instance.
	 * @description
	 * Checks to see if the input object is an instance of `BigInt`
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isBigInt } from '@polkadot/util';
	 *
	 * console.log('isBigInt', isBigInt(123_456n)); // => true
	 * ```
	 */
	function isBigInt(value) {
	  return typeof value === 'bigint';
	}

	var bigInt = /*#__PURE__*/Object.defineProperty({
		isBigInt: isBigInt_1
	}, '__esModule', {value: true});

	var isToBn_1 = isToBn;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isToBn(value) {
	  return !!value && (0, _function.isFunction)(value.toBn);
	}

	var toBn$2 = /*#__PURE__*/Object.defineProperty({
		isToBn: isToBn_1
	}, '__esModule', {value: true});

	var _bigInt = bigInt;

	var _toBn$2 = toBn$2;

	var bnToBn_1 = bnToBn;











	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bnToBn
	 * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
	 * @description
	 * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import BN from 'bn.js';
	 * import { bnToBn } from '@polkadot/util';
	 *
	 * bnToBn(0x1234); // => BN(0x1234)
	 * bnToBn(new BN(0x1234)); // => BN(0x1234)
	 * ```
	 */
	function bnToBn(value) {
	  if (!value) {
	    return new _bn$1.BN(0);
	  } else if ((0, _hex.isHex)(value)) {
	    return (0, _toBn$3.hexToBn)(value.toString());
	  } else if ((0, _bigInt.isBigInt)(value)) {
	    return new _bn$1.BN(value.toString());
	  }

	  return _bn$1.BN.isBN(value) ? value : (0, _toBn$2.isToBn)(value) ? value.toBn() : new _bn$1.BN(value);
	}

	var toBn$1 = /*#__PURE__*/Object.defineProperty({
		bnToBn: bnToBn_1
	}, '__esModule', {value: true});

	var _consts = consts;

	var _toBn$1 = toBn$1;

	var bnSqrt_1 = bnSqrt;









	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const SQRT_MAX_SAFE_INTEGER = new _bn$1.BN(94906265);
	/**
	 * @name bnSqrt
	 * @summary Calculates the integer square root of a BN
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import BN from 'bn.js';
	 * import { bnSqrt } from '@polkadot/util';
	 *
	 * bnSqrt(new BN(16)).toString(); // => '4'
	 * ```
	 */

	function bnSqrt(value) {
	  const n = (0, _toBn$1.bnToBn)(value);
	  (0, _assert.assert)(n.gte(_consts.BN_ZERO), 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
	  // shortcut <= 2^53 - 1 to use the JS utils

	  if (n.lte(_consts.BN_MAX_INTEGER)) {
	    return new _bn$1.BN(Math.floor(Math.sqrt(n.toNumber())));
	  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
	  // output will be larger than this, we expect this to be a safe start


	  let x0 = SQRT_MAX_SAFE_INTEGER.clone();

	  while (true) {
	    const x1 = n.div(x0).iadd(x0).ishrn(1);

	    if (x0.eq(x1) || x0.eq(x1.sub(_consts.BN_ONE))) {
	      return x0;
	    }

	    x0 = x1;
	  }
	}

	var sqrt = /*#__PURE__*/Object.defineProperty({
		bnSqrt: bnSqrt_1
	}, '__esModule', {value: true});

	var isNumber_1 = isNumber;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isNumber
	 * @summary Tests for a JavaScript number.
	 * @description
	 * Checks to see if the input value is a valid number.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isNumber } from '@polkadot/util';
	 *
	 * console.log('isNumber', isNumber(1234)); // => true
	 * ```
	 */
	function isNumber(value) {
	  return typeof value === 'number';
	}

	var number$1 = /*#__PURE__*/Object.defineProperty({
		isNumber: isNumber_1
	}, '__esModule', {value: true});

	var hexToU8a_1 = hexToU8a;







	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name hexToU8a
	 * @summary Creates a Uint8Array object from a hex string.
	 * @description
	 * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexToU8a } from '@polkadot/util';
	 *
	 * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
	 * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
	 * ```
	 */
	function hexToU8a(_value, bitLength = -1) {
	  if (!_value) {
	    return new Uint8Array();
	  }

	  (0, _assert.assert)((0, _hex.isHex)(_value), () => `Expected hex value to convert, found '${_value}'`);
	  const value = (0, _stripPrefix.hexStripPrefix)(_value);
	  const valLength = value.length / 2;
	  const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);
	  const result = new Uint8Array(bufLength);
	  const offset = Math.max(0, bufLength - valLength);

	  for (let index = 0; index < bufLength; index++) {
	    result[index + offset] = parseInt(value.substr(index * 2, 2), 16);
	  }

	  return result;
	}

	var toU8a$8 = /*#__PURE__*/Object.defineProperty({
		hexToU8a: hexToU8a_1
	}, '__esModule', {value: true});

	var isBuffer_1 = isBuffer;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isBuffer
	 * @summary Tests for a `Buffer` object instance.
	 * @description
	 * Checks to see if the input object is an instance of `Buffer`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isBuffer } from '@polkadot/util';
	 *
	 * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
	 * ```
	 */
	function isBuffer(value) {
	  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);
	}

	var buffer$2 = /*#__PURE__*/Object.defineProperty({
		isBuffer: isBuffer_1
	}, '__esModule', {value: true});

	var isInstanceOf_1 = isInstanceOf;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isInstanceOf
	 * @summary Tests for a instance of a class.
	 * @description
	 * Checks to see if the input value is an instance of the test class.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isInstanceOf } from '@polkadot/util';
	 *
	 * console.log('isInstanceOf', isInstanceOf(new Array(0), Array)); // => true
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function isInstanceOf(value, clazz) {
	  return value instanceof clazz;
	}

	var instanceOf = /*#__PURE__*/Object.defineProperty({
		isInstanceOf: isInstanceOf_1
	}, '__esModule', {value: true});

	var _instanceOf = instanceOf;

	var isU8a_1 = isU8a;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isU8a
	 * @summary Tests for a `Uint8Array` object instance.
	 * @description
	 * Checks to see if the input object is an instance of `Uint8Array`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isUint8Array } from '@polkadot/util';
	 *
	 * console.log('isU8a', isU8a([])); // => false
	 * ```
	 */
	function isU8a(value) {
	  return (0, _instanceOf.isInstanceOf)(value, Uint8Array);
	}

	var u8a$1 = /*#__PURE__*/Object.defineProperty({
		isU8a: isU8a_1
	}, '__esModule', {value: true});

	var stringToU8a_1 = stringToU8a;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const encoder = new _xTextencoder__default['default'].TextEncoder();
	/**
	 * @name stringToU8a
	 * @summary Creates a Uint8Array object from a utf-8 string.
	 * @description
	 * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { stringToU8a } from '@polkadot/util';
	 *
	 * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types

	function stringToU8a(value) {
	  return value ? encoder.encode(value.toString()) : new Uint8Array();
	}

	var toU8a$7 = /*#__PURE__*/Object.defineProperty({
		stringToU8a: stringToU8a_1
	}, '__esModule', {value: true});

	var _toU8a$8 = toU8a$8;

	var _buffer = buffer$2;

	var _u8a = u8a$1;

	var _toU8a$7 = toU8a$7;

	var u8aToU8a_1 = u8aToU8a;















	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aToU8a
	 * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
	 * @description
	 * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aToU8a } from '@polkadot/util';
	 *
	 * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
	 * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
	 * ```
	 */
	function u8aToU8a(value) {
	  if (!value) {
	    return new Uint8Array();
	  } else if ((0, _hex.isHex)(value)) {
	    return (0, _toU8a$8.hexToU8a)(value);
	  } else if ((0, _string.isString)(value)) {
	    return (0, _toU8a$7.stringToU8a)(value);
	  } else if (Array.isArray(value) || (0, _buffer.isBuffer)(value)) {
	    return new Uint8Array(value);
	  }

	  (0, _assert.assert)((0, _u8a.isU8a)(value), () => `Unable to convert ${value.toString()} (typeof ${typeof value}) to a Uint8Array`);
	  return value;
	}

	var toU8a$6 = /*#__PURE__*/Object.defineProperty({
		u8aToU8a: u8aToU8a_1
	}, '__esModule', {value: true});

	var _toU8a$6 = toU8a$6;

	var u8aCmp_1 = u8aCmp;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function compare(a, b) {
	  let i = 0;

	  while (true) {
	    const overA = i >= a.length;
	    const overB = i >= b.length;

	    if (overA && overB) {
	      // both ends reached
	      return 0;
	    } else if (overA) {
	      // a has no more data, b has data
	      return -1;
	    } else if (overB) {
	      // b has no more data, a has data
	      return 1;
	    } else if (a[i] !== b[i]) {
	      // the number in this index doesn't match
	      return a[i] > b[i] ? 1 : -1;
	    }

	    i++;
	  }
	}
	/**
	 * @name u8aCmp
	 * @summary Compares two Uint8Arrays for sorting.
	 * @description
	 * For `UInt8Array` (or hex string) input values returning -1, 0 or +1
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aCmp } from '@polkadot/util';
	 *
	 * u8aCmp(new Uint8Array([0x67, 0x65]), new Uint8Array([0x68, 0x65])); // -1
	 * u8aCmp(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // 0
	 * u8aCmp(new Uint8Array([0x69, 0x65]), new Uint8Array([0x68, 0x65])); // +1
	 * ```
	 */


	function u8aCmp(a, b) {
	  return compare((0, _toU8a$6.u8aToU8a)(a), (0, _toU8a$6.u8aToU8a)(b));
	}

	var cmp = /*#__PURE__*/Object.defineProperty({
		u8aCmp: u8aCmp_1
	}, '__esModule', {value: true});

	var u8aConcat_1 = u8aConcat;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aConcat
	 * @summary Creates a concatenated Uint8Array from the inputs.
	 * @description
	 * Concatenates the input arrays into a single `UInt8Array`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { { u8aConcat } from '@polkadot/util';
	 *
	 * u8aConcat(
	 *   new Uint8Array([1, 2, 3]),
	 *   new Uint8Array([4, 5, 6])
	 * ); // [1, 2, 3, 4, 5, 6]
	 * ```
	 */
	function u8aConcat(...list) {
	  let length = 0;
	  let offset = 0;
	  const u8as = new Array(list.length);

	  for (let i = 0; i < list.length; i++) {
	    u8as[i] = (0, _toU8a$6.u8aToU8a)(list[i]);
	    length += u8as[i].length;
	  }

	  const result = new Uint8Array(length);

	  for (let i = 0; i < u8as.length; i++) {
	    result.set(u8as[i], offset);
	    offset += u8as[i].length;
	  }

	  return result;
	}

	var concat$2 = /*#__PURE__*/Object.defineProperty({
		u8aConcat: u8aConcat_1
	}, '__esModule', {value: true});

	var u8aEmpty_1 = u8aEmpty;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aEmpty
	 * @summary Tests for a `Uint8Array` for emptyness
	 * @description
	 * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.
	 */
	function u8aEmpty(value) {
	  return value.length === 0 || value.every(v => !v);
	}

	var empty$2 = /*#__PURE__*/Object.defineProperty({
		u8aEmpty: u8aEmpty_1
	}, '__esModule', {value: true});

	var _cmp = cmp;

	var u8aEq_1 = u8aEq;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function equals(a, b) {
	  return a.length === b.length && (0, _cmp.u8aCmp)(a, b) === 0;
	}
	/**
	 * @name u8aEq
	 * @summary Compares two Uint8Arrays for equality.
	 * @description
	 * For `UInt8Array` (or hex string) input values true if there is a match.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aEq } from '@polkadot/util';
	 *
	 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
	 * ```
	 */


	function u8aEq(a, b) {
	  return equals((0, _toU8a$6.u8aToU8a)(a), (0, _toU8a$6.u8aToU8a)(b));
	}

	var eq$1 = /*#__PURE__*/Object.defineProperty({
		u8aEq: u8aEq_1
	}, '__esModule', {value: true});

	var u8aFixLength_1 = u8aFixLength;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aFixLength
	 * @summary Shifts a Uint8Array to a specific bitLength
	 * @description
	 * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aFixLength } from '@polkadot/util';
	 *
	 * u8aFixLength('0x12') // => 0x12
	 * u8aFixLength('0x12', 16) // => 0x0012
	 * u8aFixLength('0x1234', 8) // => 0x12
	 * ```
	 */
	function u8aFixLength(value, bitLength = -1, atStart = false) {
	  const byteLength = Math.ceil(bitLength / 8);

	  if (bitLength === -1 || value.length === byteLength) {
	    return value;
	  } else if (value.length > byteLength) {
	    return value.subarray(0, byteLength);
	  }

	  const result = new Uint8Array(byteLength);

	  if (atStart) {
	    result.set(value, 0);
	  } else {
	    result.set(value, byteLength - value.length);
	  }

	  return result;
	}

	var fixLength$1 = /*#__PURE__*/Object.defineProperty({
		u8aFixLength: u8aFixLength_1
	}, '__esModule', {value: true});

	var u8aSorted_1 = u8aSorted;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aSorted
	 * @summary Sorts an array of Uint8Arrays
	 * @description
	 * For input `UInt8Array[]` return the sorted result
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aSorted} from '@polkadot/util';
	 *
	 * u8aSorted([new Uint8Array([0x69]), new Uint8Array([0x68])]); // [0x68, 0x69]
	 * ```
	 */
	function u8aSorted(u8as) {
	  return u8as.sort(_cmp.u8aCmp);
	}

	var sorted = /*#__PURE__*/Object.defineProperty({
		u8aSorted: u8aSorted_1
	}, '__esModule', {value: true});

	var _index$l = array;

	var u8aToHex_1 = u8aToHex;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const ALPHABET = (0, _index$l.arrayRange)(256).map(n => n.toString(16).padStart(2, '0'));
	/** @internal */

	function extract(value) {
	  const result = new Array(value.length);

	  for (let i = 0; i < value.length; i++) {
	    result[i] = ALPHABET[value[i]];
	  }

	  return result.join('');
	}
	/** @internal */


	function trim$1(value, halfLength) {
	  return `${u8aToHex(value.subarray(0, halfLength), -1, false)}…${u8aToHex(value.subarray(value.length - halfLength), -1, false)}`;
	}
	/**
	 * @name u8aToHex
	 * @summary Creates a hex string from a Uint8Array object.
	 * @description
	 * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aToHex } from '@polkadot/util';
	 *
	 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
	 * ```
	 */


	function u8aToHex(value, bitLength = -1, isPrefixed = true) {
	  const prefix = isPrefixed ? '0x' : '';

	  if (!(value !== null && value !== void 0 && value.length)) {
	    return prefix;
	  }

	  const byteLength = Math.ceil(bitLength / 8);
	  return prefix + (byteLength > 0 && value.length > byteLength ? trim$1(value, Math.ceil(byteLength / 2)) : extract(value));
	}

	var toHex$5 = /*#__PURE__*/Object.defineProperty({
		u8aToHex: u8aToHex_1
	}, '__esModule', {value: true});

	var _toHex$3 = toHex$5;

	var u8aToBn_1 = u8aToBn;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aToBn
	 * @summary Creates a BN from a Uint8Array object.
	 * @description
	 * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
	 * @param value The value to convert
	 * @param options Options to pass while converting
	 * @param options.isLe Convert using Little Endian
	 * @param options.isNegative Convert using two's complement
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aToBn } from '@polkadot/util';
	 *
	 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
	 * ```
	 */
	function u8aToBn(value, options = {
	  isLe: true,
	  isNegative: false
	}) {
	  return (0, _toBn$3.hexToBn)((0, _toHex$3.u8aToHex)(value), options);
	}

	var toBn = /*#__PURE__*/Object.defineProperty({
		u8aToBn: u8aToBn_1
	}, '__esModule', {value: true});

	var u8aToBuffer_1 = u8aToBuffer;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8aToBuffer
	 * @summary Creates a Buffer object from a hex string.
	 * @description
	 * `null` inputs returns an empty `Buffer` result. `UInt8Array` input values return the actual bytes value converted to a `Buffer`. Anything that is not a `UInt8Array` throws an error.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aToBuffer } from '@polkadot/util';
	 *
	 * console.log('Buffer', u8aToBuffer('0x123480001f'));
	 * ```
	 */
	function u8aToBuffer(value) {
	  return Buffer.from(value || []);
	}

	var toBuffer = /*#__PURE__*/Object.defineProperty({
		u8aToBuffer: u8aToBuffer_1
	}, '__esModule', {value: true});

	var u8aToString_1 = u8aToString;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const decoder = new _xTextdecoder__default['default'].TextDecoder('utf-8');
	/**
	 * @name u8aToString
	 * @summary Creates a utf-8 string from a Uint8Array object.
	 * @description
	 * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aToString } from '@polkadot/util';
	 *
	 * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
	 * ```
	 */

	function u8aToString(value) {
	  return !(value !== null && value !== void 0 && value.length) ? '' : decoder.decode(value);
	}

	var toString$1 = /*#__PURE__*/Object.defineProperty({
		u8aToString: u8aToString_1
	}, '__esModule', {value: true});

	var _concat = concat$2;

	var _empty = empty$2;

	var _eq$1 = eq$1;

	var _fixLength$1 = fixLength$1;

	var _sorted = sorted;

	var _toBn = toBn;

	var _toBuffer = toBuffer;

	var _toString$1 = toString$1;

	var u8a = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "u8aCmp", {
	  enumerable: true,
	  get: function () {
	    return _cmp.u8aCmp;
	  }
	});
	Object.defineProperty(exports, "u8aConcat", {
	  enumerable: true,
	  get: function () {
	    return _concat.u8aConcat;
	  }
	});
	Object.defineProperty(exports, "u8aEmpty", {
	  enumerable: true,
	  get: function () {
	    return _empty.u8aEmpty;
	  }
	});
	Object.defineProperty(exports, "u8aEq", {
	  enumerable: true,
	  get: function () {
	    return _eq$1.u8aEq;
	  }
	});
	Object.defineProperty(exports, "u8aFixLength", {
	  enumerable: true,
	  get: function () {
	    return _fixLength$1.u8aFixLength;
	  }
	});
	Object.defineProperty(exports, "u8aSorted", {
	  enumerable: true,
	  get: function () {
	    return _sorted.u8aSorted;
	  }
	});
	Object.defineProperty(exports, "u8aToBn", {
	  enumerable: true,
	  get: function () {
	    return _toBn.u8aToBn;
	  }
	});
	Object.defineProperty(exports, "u8aToBuffer", {
	  enumerable: true,
	  get: function () {
	    return _toBuffer.u8aToBuffer;
	  }
	});
	Object.defineProperty(exports, "u8aToHex", {
	  enumerable: true,
	  get: function () {
	    return _toHex$3.u8aToHex;
	  }
	});
	Object.defineProperty(exports, "u8aToString", {
	  enumerable: true,
	  get: function () {
	    return _toString$1.u8aToString;
	  }
	});
	Object.defineProperty(exports, "u8aToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$6.u8aToU8a;
	  }
	});
	});

	var _number = number$1;

	var bnToU8a_1 = bnToU8a;

	var _defineProperty2$s = interopRequireDefault(defineProperty);





	function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$s(Object(source), true).forEach(function (key) { (0, _defineProperty2$s.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function createEmpty(byteLength, options) {
	  return options.bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
	}

	function createValue(valueBn, byteLength, {
	  isLe,
	  isNegative
	}) {
	  const output = new Uint8Array(byteLength);
	  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
	  output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
	  return output;
	}
	/**
	 * @name bnToU8a
	 * @summary Creates a Uint8Array object from a BN.
	 * @description
	 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { bnToU8a } from '@polkadot/util';
	 *
	 * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
	 * ```
	 */


	function bnToU8a(value, arg1 = {
	  bitLength: -1,
	  isLe: true,
	  isNegative: false
	}, arg2) {
	  const options = _objectSpread$s({
	    bitLength: -1,
	    isLe: true,
	    isNegative: false
	  }, (0, _number.isNumber)(arg1) ? {
	    bitLength: arg1,
	    isLe: arg2
	  } : arg1);

	  const valueBn = (0, _toBn$1.bnToBn)(value);
	  const byteLength = options.bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((options.bitLength || 0) / 8);
	  return value ? createValue(valueBn, byteLength, options) : createEmpty(byteLength, options);
	}

	var toU8a$5 = /*#__PURE__*/Object.defineProperty({
		bnToU8a: bnToU8a_1
	}, '__esModule', {value: true});

	var _index10$1 = u8a;

	var _toU8a$5 = toU8a$5;

	var bnToHex_1 = bnToHex;

	var _defineProperty2$r = interopRequireDefault(defineProperty);







	function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$r(Object(source), true).forEach(function (key) { (0, _defineProperty2$r.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const ZERO_STR = '0x00';

	function bnToHex(value, arg1 = {
	  bitLength: -1,
	  isLe: false,
	  isNegative: false
	}, arg2) {
	  if (!value) {
	    return ZERO_STR;
	  }

	  const _options = _objectSpread$r({
	    isLe: false,
	    isNegative: false
	  }, (0, _number.isNumber)(arg1) ? {
	    bitLength: arg1,
	    isLe: arg2
	  } : arg1);

	  return (0, _index10$1.u8aToHex)((0, _toU8a$5.bnToU8a)(value, _options));
	}

	var toHex$4 = /*#__PURE__*/Object.defineProperty({
		bnToHex: bnToHex_1
	}, '__esModule', {value: true});

	var _fromHex = fromHex;

	var _max = max$1;

	var _min = min$1;

	var _sqrt = sqrt;

	var _toHex$2 = toHex$4;

	var bn$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  BN: true,
	  bnFromHex: true,
	  bnMax: true,
	  bnMin: true,
	  bnSqrt: true,
	  bnToBn: true,
	  bnToHex: true,
	  bnToU8a: true
	};
	Object.defineProperty(exports, "BN", {
	  enumerable: true,
	  get: function () {
	    return _bn$1.BN;
	  }
	});
	Object.defineProperty(exports, "bnFromHex", {
	  enumerable: true,
	  get: function () {
	    return _fromHex.bnFromHex;
	  }
	});
	Object.defineProperty(exports, "bnMax", {
	  enumerable: true,
	  get: function () {
	    return _max.bnMax;
	  }
	});
	Object.defineProperty(exports, "bnMin", {
	  enumerable: true,
	  get: function () {
	    return _min.bnMin;
	  }
	});
	Object.defineProperty(exports, "bnSqrt", {
	  enumerable: true,
	  get: function () {
	    return _sqrt.bnSqrt;
	  }
	});
	Object.defineProperty(exports, "bnToBn", {
	  enumerable: true,
	  get: function () {
	    return _toBn$1.bnToBn;
	  }
	});
	Object.defineProperty(exports, "bnToHex", {
	  enumerable: true,
	  get: function () {
	    return _toHex$2.bnToHex;
	  }
	});
	Object.defineProperty(exports, "bnToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$5.bnToU8a;
	  }
	});



	Object.keys(_consts).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _consts[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _consts[key];
	    }
	  });
	});
	});

	var bufferToU8a_1 = bufferToU8a;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bufferToU8a
	 * @summary Creates a Uint8Array value from a Buffer object.
	 * @description
	 * `null` inputs returns an empty result, `Buffer` values return the actual value as a `Uint8Array`. Anything that is not a `Buffer` object throws an error.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { bufferToU8a } from '@polkadot/util';
	 *
	 * bufferToU8a(Buffer.from([1, 2, 3]));
	 * ```
	 */
	function bufferToU8a(buffer) {
	  return new Uint8Array(buffer || []);
	}

	var toU8a$4 = /*#__PURE__*/Object.defineProperty({
		bufferToU8a: bufferToU8a_1
	}, '__esModule', {value: true});

	var _toU8a$4 = toU8a$4;

	var buffer$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "bufferToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$4.bufferToU8a;
	  }
	});
	});

	var _index2$8 = bn$1;

	var compactToU8a_1 = compactToU8a;







	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const MAX_U8 = new _index2$8.BN(2).pow(new _index2$8.BN(8 - 2)).subn(1);
	const MAX_U16 = new _index2$8.BN(2).pow(new _index2$8.BN(16 - 2)).subn(1);
	const MAX_U32 = new _index2$8.BN(2).pow(new _index2$8.BN(32 - 2)).subn(1);
	/**
	 * @name compactToU8a
	 * @description Encodes a number into a compact representation
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { compactToU8a } from '@polkadot/util';
	 *
	 * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
	 * ```
	 */

	function compactToU8a(_value) {
	  const value = (0, _index2$8.bnToBn)(_value);

	  if (value.lte(MAX_U8)) {
	    return new Uint8Array([value.toNumber() << 2]);
	  } else if (value.lte(MAX_U16)) {
	    return (0, _index2$8.bnToU8a)(value.shln(2).iadd(_index2$8.BN_ONE), 16, true);
	  } else if (value.lte(MAX_U32)) {
	    return (0, _index2$8.bnToU8a)(value.shln(2).iadd(_index2$8.BN_TWO), 32, true);
	  }

	  const u8a = (0, _index2$8.bnToU8a)(value);
	  let length = u8a.length; // adjust to the minimum number of bytes

	  while (u8a[length - 1] === 0) {
	    length--;
	  }

	  (0, _assert.assert)(length >= 4, 'Invalid length, previous checks match anything less than 2^30');
	  return (0, _index10$1.u8aConcat)( // subtract 4 as minimum (also catered for in decoding)
	  [(length - 4 << 2) + 0b11], u8a.subarray(0, length));
	}

	var toU8a$3 = /*#__PURE__*/Object.defineProperty({
		compactToU8a: compactToU8a_1
	}, '__esModule', {value: true});

	var _toU8a$3 = toU8a$3;

	var compactAddLength_1 = compactAddLength;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name compactAddLength
	 * @description Adds a length prefix to the input value
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { compactAddLength } from '@polkadot/util';
	 *
	 * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
	 * ```
	 */
	function compactAddLength(input) {
	  return (0, _index10$1.u8aConcat)((0, _toU8a$3.compactToU8a)(input.length), input);
	}

	var addLength = /*#__PURE__*/Object.defineProperty({
		compactAddLength: compactAddLength_1
	}, '__esModule', {value: true});

	var compactFromU8a_1 = compactFromU8a;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name compactFromU8a
	 * @description Retrievs the offset and encoded length from a compact-prefixed value
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { compactFromU8a } from '@polkadot/util';
	 *
	 * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
	 *
	 * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
	 * ```
	 */
	function compactFromU8a(_input) {
	  const input = (0, _index10$1.u8aToU8a)(_input);
	  const flag = input[0] & 0b11;

	  if (flag === 0b00) {
	    return [1, new _index2$8.BN(input[0]).ishrn(2)];
	  } else if (flag === 0b01) {
	    return [2, (0, _index10$1.u8aToBn)(input.slice(0, 2), true).ishrn(2)];
	  } else if (flag === 0b10) {
	    return [4, (0, _index10$1.u8aToBn)(input.slice(0, 4), true).ishrn(2)];
	  }

	  const offset = 1 + new _index2$8.BN(input[0]).ishrn(2) // clear flag
	  .iadd(_index2$8.BN_FOUR) // add 4 for base length
	  .toNumber();
	  return [offset, (0, _index10$1.u8aToBn)(input.subarray(1, offset), true)];
	}

	var fromU8a$2 = /*#__PURE__*/Object.defineProperty({
		compactFromU8a: compactFromU8a_1
	}, '__esModule', {value: true});

	var _fromU8a$2 = fromU8a$2;

	var compactStripLength_1 = compactStripLength;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name compactStripLength
	 * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { compactStripLength } from '@polkadot/util';
	 *
	 * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
	 * ```
	 */
	function compactStripLength(input) {
	  const [offset, length] = (0, _fromU8a$2.compactFromU8a)(input);
	  const total = offset + length.toNumber();
	  return [total, input.subarray(offset, total)];
	}

	var stripLength = /*#__PURE__*/Object.defineProperty({
		compactStripLength: compactStripLength_1
	}, '__esModule', {value: true});

	var _addLength = addLength;

	var _stripLength = stripLength;

	var compact$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "compactAddLength", {
	  enumerable: true,
	  get: function () {
	    return _addLength.compactAddLength;
	  }
	});
	Object.defineProperty(exports, "compactStripLength", {
	  enumerable: true,
	  get: function () {
	    return _stripLength.compactStripLength;
	  }
	});
	Object.defineProperty(exports, "compactFromU8a", {
	  enumerable: true,
	  get: function () {
	    return _fromU8a$2.compactFromU8a;
	  }
	});
	Object.defineProperty(exports, "compactToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$3.compactToU8a;
	  }
	});
	});

	var extractTime_2 = extractTime;

	var _defineProperty2$q = interopRequireDefault(defineProperty);

	function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$q(Object(source), true).forEach(function (key) { (0, _defineProperty2$q.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HRS = 60 * 60;
	const DAY = HRS * 24;
	/**
	 * @name addTime
	 * @summary Add together two Time arrays
	 */

	function addTime(a, b) {
	  return {
	    days: a.days + b.days,
	    hours: a.hours + b.hours,
	    milliseconds: a.milliseconds + b.milliseconds,
	    minutes: a.minutes + b.minutes,
	    seconds: a.seconds + b.seconds
	  };
	}

	const ZERO = {
	  days: 0,
	  hours: 0,
	  milliseconds: 0,
	  minutes: 0,
	  seconds: 0
	};

	function extractDays(milliseconds, hrs) {
	  const days = Math.floor(hrs / 24);
	  return addTime(_objectSpread$q(_objectSpread$q({}, ZERO), {}, {
	    days
	  }), extractTime(milliseconds - days * DAY * 1000));
	}

	function extractHrs(milliseconds, mins) {
	  const hrs = mins / 60;

	  if (hrs < 24) {
	    const hours = Math.floor(hrs);
	    return addTime(_objectSpread$q(_objectSpread$q({}, ZERO), {}, {
	      hours
	    }), extractTime(milliseconds - hours * HRS * 1000));
	  }

	  return extractDays(milliseconds, hrs);
	}

	function extractMins(milliseconds, secs) {
	  const mins = secs / 60;

	  if (mins < 60) {
	    const minutes = Math.floor(mins);
	    return addTime(_objectSpread$q(_objectSpread$q({}, ZERO), {}, {
	      minutes
	    }), extractTime(milliseconds - minutes * 60 * 1000));
	  }

	  return extractHrs(milliseconds, mins);
	}

	function extractSecs(milliseconds) {
	  const secs = milliseconds / 1000;

	  if (secs < 60) {
	    const seconds = Math.floor(secs);
	    return addTime(_objectSpread$q(_objectSpread$q({}, ZERO), {}, {
	      seconds
	    }), extractTime(milliseconds - seconds * 1000));
	  }

	  return extractMins(milliseconds, secs);
	}
	/**
	 * @name extractTime
	 * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { extractTime } from '@polkadot/util';
	 *
	 * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0
	 * ```
	 */


	function extractTime(milliseconds) {
	  if (!milliseconds) {
	    return ZERO;
	  } else if (milliseconds < 1000) {
	    return _objectSpread$q(_objectSpread$q({}, ZERO), {}, {
	      milliseconds
	    });
	  }

	  return extractSecs(milliseconds);
	}

	var extractTime_1 = /*#__PURE__*/Object.defineProperty({
		extractTime: extractTime_2
	}, '__esModule', {value: true});

	var formatDecimal_2 = formatDecimal;
	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// eslint-disable-next-line prefer-regex-literals
	const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');

	function formatDecimal(value) {
	  // We can do this by adjusting the regx, however for the sake of clarity
	  // we rather strip and re-add the negative sign in the output
	  const isNegative = value[0].startsWith('-');
	  const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
	  return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;
	}

	var formatDecimal_1 = /*#__PURE__*/Object.defineProperty({
		formatDecimal: formatDecimal_2
	}, '__esModule', {value: true});

	var si = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.findSi = findSi;
	exports.calcSi = calcSi;
	exports.SI = exports.SI_MID = void 0;
	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const SI_MID = 8;
	exports.SI_MID = SI_MID;
	const SI = [{
	  power: -24,
	  text: 'yocto',
	  value: 'y'
	}, {
	  power: -21,
	  text: 'zepto',
	  value: 'z'
	}, {
	  power: -18,
	  text: 'atto',
	  value: 'a'
	}, {
	  power: -15,
	  text: 'femto',
	  value: 'f'
	}, {
	  power: -12,
	  text: 'pico',
	  value: 'p'
	}, {
	  power: -9,
	  text: 'nano',
	  value: 'n'
	}, {
	  power: -6,
	  text: 'micro',
	  value: 'µ'
	}, {
	  power: -3,
	  text: 'milli',
	  value: 'm'
	}, {
	  power: 0,
	  text: 'Unit',
	  value: '-'
	}, // position 8
	{
	  power: 3,
	  text: 'Kilo',
	  value: 'k'
	}, {
	  power: 6,
	  text: 'Mill',
	  value: 'M'
	}, // Mega, M
	{
	  power: 9,
	  text: 'Bill',
	  value: 'B'
	}, // Giga, G
	{
	  power: 12,
	  text: 'Tril',
	  value: 'T'
	}, // Tera, T
	{
	  power: 15,
	  text: 'Peta',
	  value: 'P'
	}, {
	  power: 18,
	  text: 'Exa',
	  value: 'E'
	}, {
	  power: 21,
	  text: 'Zeta',
	  value: 'Z'
	}, {
	  power: 24,
	  text: 'Yotta',
	  value: 'Y'
	}]; // Given a SI type (e.g. k, m, Y) find the SI definition

	exports.SI = SI;

	function findSi(type) {
	  // use a loop here, better RN support (which doesn't have [].find)
	  for (let i = 0; i < SI.length; i++) {
	    if (SI[i].value === type) {
	      return SI[i];
	    }
	  }

	  return SI[SI_MID];
	}

	function calcSi(text, decimals, forceUnit) {
	  if (forceUnit) {
	    return findSi(forceUnit);
	  }

	  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
	  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
	}
	});

	var _formatDecimal = formatDecimal_1;

	var _si = si;

	var formatBalance_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.formatBalance = void 0;











	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEFAULT_DECIMALS = 0;
	const DEFAULT_UNIT = _si.SI[_si.SI_MID].text;
	let defaultDecimals = DEFAULT_DECIMALS;
	let defaultUnit = DEFAULT_UNIT; // Formats a string/number with <prefix>.<postfix><type> notation

	function _formatBalance(input, options = true, optDecimals = defaultDecimals) {
	  let text = (0, _toBn$1.bnToBn)(input).toString();

	  if (text.length === 0 || text === '0') {
	    return '0';
	  } // strip the negative sign so we can work with clean groupings, re-add this in the
	  // end when we return the result (from here on we work with positive numbers)


	  const isNegative = text[0].startsWith('-');

	  if (isNegative) {
	    text = text.substr(1);
	  } // extract options - the boolean case is for backwards-compat


	  const {
	    decimals = optDecimals,
	    forceUnit = undefined,
	    withSi = true,
	    withSiFull = false,
	    withUnit = true
	  } = (0, _boolean.isBoolean)(options) ? {
	    withSi: options
	  } : options; // NOTE We start at midpoint (8) minus 1 - this means that values display as
	  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil
	  // so there are at most 3 decimal before the decimal separator

	  const si = (0, _si.calcSi)(text, decimals, forceUnit);
	  const mid = text.length - (decimals + si.power);
	  const prefix = text.substr(0, mid);
	  const padding = mid < 0 ? 0 - mid : 0;
	  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substr(mid < 0 ? 0 : mid)}0000`.substr(0, 4);
	  const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${(0, _boolean.isBoolean)(withUnit) ? si.text : withUnit}` : '' : ` ${withSiFull ? si.text : si.value}${withUnit ? `${withSiFull ? ' ' : ''}${(0, _boolean.isBoolean)(withUnit) ? _si.SI[_si.SI_MID].text : withUnit}` : ''}` : '';
	  return `${isNegative ? '-' : ''}${(0, _formatDecimal.formatDecimal)(prefix || '0')}.${postfix}${units}`;
	}

	const formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method

	exports.formatBalance = formatBalance;

	formatBalance.calcSi = (text, decimals = defaultDecimals) => (0, _si.calcSi)(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method


	formatBalance.findSi = _si.findSi; // eslint-disable-next-line @typescript-eslint/unbound-method

	formatBalance.getDefaults = () => {
	  return {
	    decimals: defaultDecimals,
	    unit: defaultUnit
	  };
	}; // get allowable options to display in a dropdown
	// eslint-disable-next-line @typescript-eslint/unbound-method


	formatBalance.getOptions = (decimals = defaultDecimals) => {
	  return _si.SI.filter(({
	    power
	  }) => power < 0 ? decimals + power >= 0 : true);
	}; // Sets the default decimals to use for formatting (ui-wide)
	// eslint-disable-next-line @typescript-eslint/unbound-method


	formatBalance.setDefaults = ({
	  decimals,
	  unit
	}) => {
	  defaultDecimals = (0, _undefined.isUndefined)(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
	  defaultUnit = (0, _undefined.isUndefined)(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
	  _si.SI[_si.SI_MID].text = defaultUnit;
	};
	});

	var formatDate_2 = formatDate;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function zeroPad(value) {
	  return value.toString().padStart(2, '0');
	}

	function formatDate(date) {
	  const year = date.getFullYear().toString();
	  const month = zeroPad(date.getMonth() + 1);
	  const day = zeroPad(date.getDate());
	  const hour = zeroPad(date.getHours());
	  const minute = zeroPad(date.getMinutes());
	  const second = zeroPad(date.getSeconds());
	  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
	}

	var formatDate_1 = /*#__PURE__*/Object.defineProperty({
		formatDate: formatDate_2
	}, '__esModule', {value: true});

	var formatElapsed_2 = formatElapsed;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function formatValue(elapsed) {
	  if (elapsed < 15) {
	    return `${elapsed.toFixed(1)}s`;
	  } else if (elapsed < 60) {
	    return `${elapsed | 0}s`;
	  } else if (elapsed < 3600) {
	    return `${elapsed / 60 | 0}m`;
	  }

	  return `${elapsed / 3600 | 0}h`;
	}

	function formatElapsed(now, value) {
	  const tsNow = now && now.getTime() || 0;
	  const tsValue = value instanceof Date ? value.getTime() : (0, _toBn$1.bnToBn)(value).toNumber();
	  return tsNow && tsValue ? formatValue(Math.max(Math.abs(tsNow - tsValue), 0) / 1000) : '0.0s';
	}

	var formatElapsed_1 = /*#__PURE__*/Object.defineProperty({
		formatElapsed: formatElapsed_2
	}, '__esModule', {value: true});

	var formatNumber_2 = formatNumber;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function formatNumber(value) {
	  return (0, _formatDecimal.formatDecimal)((0, _toBn$1.bnToBn)(value).toString());
	}

	var formatNumber_1 = /*#__PURE__*/Object.defineProperty({
		formatNumber: formatNumber_2
	}, '__esModule', {value: true});

	var _formatBalance = formatBalance_1;

	var _formatDate = formatDate_1;

	var _formatElapsed = formatElapsed_1;

	var _formatNumber = formatNumber_1;

	var format = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "formatBalance", {
	  enumerable: true,
	  get: function () {
	    return _formatBalance.formatBalance;
	  }
	});
	Object.defineProperty(exports, "formatDate", {
	  enumerable: true,
	  get: function () {
	    return _formatDate.formatDate;
	  }
	});
	Object.defineProperty(exports, "formatDecimal", {
	  enumerable: true,
	  get: function () {
	    return _formatDecimal.formatDecimal;
	  }
	});
	Object.defineProperty(exports, "formatElapsed", {
	  enumerable: true,
	  get: function () {
	    return _formatElapsed.formatElapsed;
	  }
	});
	Object.defineProperty(exports, "formatNumber", {
	  enumerable: true,
	  get: function () {
	    return _formatNumber.formatNumber;
	  }
	});
	Object.defineProperty(exports, "calcSi", {
	  enumerable: true,
	  get: function () {
	    return _si.calcSi;
	  }
	});
	Object.defineProperty(exports, "findSi", {
	  enumerable: true,
	  get: function () {
	    return _si.findSi;
	  }
	});
	});

	var hexAddPrefix_1 = hexAddPrefix;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name hexAddPrefix
	 * @summary Adds the `0x` prefix to string values.
	 * @description
	 * Returns a `0x` prefixed string from the input value. If the input is already prefixed, it is returned unchanged.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexAddPrefix } from '@polkadot/util';
	 *
	 * console.log('With prefix', hexAddPrefix('0a0b12')); // => 0x0a0b12
	 * ```
	 */
	function hexAddPrefix(value) {
	  if (value && (0, _hasPrefix.hexHasPrefix)(value)) {
	    return value;
	  }

	  return `0x${value && value.length % 2 === 1 ? '0' : ''}${value || ''}`;
	}

	var addPrefix = /*#__PURE__*/Object.defineProperty({
		hexAddPrefix: hexAddPrefix_1
	}, '__esModule', {value: true});

	var _addPrefix = addPrefix;

	var hexFixLength_1 = hexFixLength;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name hexFixLength
	 * @summary Shifts a hex string to a specific bitLength
	 * @description
	 * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexFixLength } from '@polkadot/util';
	 *
	 * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12
	 * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012
	 * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12
	 * ```
	 */
	function hexFixLength(value, bitLength = -1, withPadding = false) {
	  const strLength = Math.ceil(bitLength / 4);
	  const hexLength = strLength + 2;
	  return (0, _addPrefix.hexAddPrefix)(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? (0, _stripPrefix.hexStripPrefix)(value) : value.length > hexLength ? (0, _stripPrefix.hexStripPrefix)(value).slice(-1 * strLength) : `${'0'.repeat(strLength)}${(0, _stripPrefix.hexStripPrefix)(value)}`.slice(-1 * strLength));
	}

	var fixLength = /*#__PURE__*/Object.defineProperty({
		hexFixLength: hexFixLength_1
	}, '__esModule', {value: true});

	var hexToNumber_1 = hexToNumber;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name hexToNumber
	 * @summary Creates a Number value from a Buffer object.
	 * @description
	 * `null` inputs returns an NaN result, `hex` values return the actual value as a `Number`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexToNumber } from '@polkadot/util';
	 *
	 * hexToNumber('0x1234'); // => 0x1234
	 * ```
	 */
	function hexToNumber(value) {
	  return value ? (0, _toBn$3.hexToBn)(value).toNumber() : NaN;
	}

	var toNumber = /*#__PURE__*/Object.defineProperty({
		hexToNumber: hexToNumber_1
	}, '__esModule', {value: true});

	var hexToString_1 = hexToString;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name hexToU8a
	 * @summary Creates a Uint8Array object from a hex string.
	 * @description
	 * Hex input values return the actual bytes value converted to a string. Anything that is not a hex string (including the `0x` prefix) throws an error.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { hexToString } from '@polkadot/util';
	 *
	 * hexToU8a('0x68656c6c6f'); // hello
	 * ```
	 */
	function hexToString(_value) {
	  return (0, _toString$1.u8aToString)((0, _toU8a$8.hexToU8a)(_value));
	}

	var toString = /*#__PURE__*/Object.defineProperty({
		hexToString: hexToString_1
	}, '__esModule', {value: true});

	var _fixLength = fixLength;

	var _toNumber = toNumber;

	var _toString = toString;

	var hex = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "hexAddPrefix", {
	  enumerable: true,
	  get: function () {
	    return _addPrefix.hexAddPrefix;
	  }
	});
	Object.defineProperty(exports, "hexFixLength", {
	  enumerable: true,
	  get: function () {
	    return _fixLength.hexFixLength;
	  }
	});
	Object.defineProperty(exports, "hexHasPrefix", {
	  enumerable: true,
	  get: function () {
	    return _hasPrefix.hexHasPrefix;
	  }
	});
	Object.defineProperty(exports, "hexStripPrefix", {
	  enumerable: true,
	  get: function () {
	    return _stripPrefix.hexStripPrefix;
	  }
	});
	Object.defineProperty(exports, "hexToBn", {
	  enumerable: true,
	  get: function () {
	    return _toBn$3.hexToBn;
	  }
	});
	Object.defineProperty(exports, "hexToNumber", {
	  enumerable: true,
	  get: function () {
	    return _toNumber.hexToNumber;
	  }
	});
	Object.defineProperty(exports, "hexToString", {
	  enumerable: true,
	  get: function () {
	    return _toString.hexToString;
	  }
	});
	Object.defineProperty(exports, "hexToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$8.hexToU8a;
	  }
	});
	});

	var isAscii_1 = isAscii;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const FORMAT = [9, 10, 13];
	/**
	 * @name isAscii
	 * @summary Tests if the input is printable ASCII
	 * @description
	 * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
	 */

	function isAscii(value) {
	  return value ? !(0, _toU8a$6.u8aToU8a)(value).some(byte => byte >= 127 || byte < 32 && !FORMAT.includes(byte)) : (0, _string.isString)(value);
	}

	var ascii = /*#__PURE__*/Object.defineProperty({
		isAscii: isAscii_1
	}, '__esModule', {value: true});

	var isBn_1 = isBn;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isBn
	 * @summary Tests for a `BN` object instance.
	 * @description
	 * Checks to see if the input object is an instance of `BN` (bn.js).
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import BN from 'bn.js';
	 * import { isBn } from '@polkadot/util';
	 *
	 * console.log('isBn', isBn(new BN(1))); // => true
	 * ```
	 */
	function isBn(value) {
	  return _bn$1.BN.isBN(value);
	}

	var bn = /*#__PURE__*/Object.defineProperty({
		isBn: isBn_1
	}, '__esModule', {value: true});

	var isChildClass_1 = isChildClass;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isChildClass
	 * @summary Tests if the child extends the parent Class
	 * @description
	 * Checks to see if the child Class extends the parent Class
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isChildClass } from '@polkadot/util';
	 *
	 * console.log('isChildClass', isChildClass(BN, BN); // => true
	 * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
	 * ```
	 */
	function isChildClass(Parent, Child) {
	  // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
	  return Child // eslint-disable-next-line no-prototype-builtins
	  ? Parent === Child || Parent.isPrototypeOf(Child) : false;
	}

	var childClass = /*#__PURE__*/Object.defineProperty({
		isChildClass: isChildClass_1
	}, '__esModule', {value: true});

	var isCompact_1 = isCompact;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isCompact
	 * @summary Tests for SCALE-Compact-like object instance.
	 */
	function isCompact(value) {
	  return (0, _function.isFunction)(value.toBigInt) && (0, _function.isFunction)(value.toBn) && (0, _function.isFunction)(value.toNumber) && (0, _function.isFunction)(value.unwrap);
	}

	var compact = /*#__PURE__*/Object.defineProperty({
		isCompact: isCompact_1
	}, '__esModule', {value: true});

	var isError_1 = isError$1;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isError
	 * @summary Tests for a `Error` object instance.
	 * @description
	 * Checks to see if the input object is an instance of `Error`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isError } from '@polkadot/util';
	 *
	 * console.log('isError', isError(new Error('message'))); // => true
	 * ```
	 */
	function isError$1(value) {
	  return (0, _instanceOf.isInstanceOf)(value, Error);
	}

	var error = /*#__PURE__*/Object.defineProperty({
		isError: isError_1
	}, '__esModule', {value: true});

	const word = '[a-fA-F\\d:]';
	const b = options => options && options.includeBoundaries ?
		`(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` :
		'';

	const v4$1 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';

	const v6seg = '[a-fA-F\\d]{1,4}';
	const v6 = `
(?:
(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4$1}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4$1}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4$1}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4$1}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4$1}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4$1}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6seg}){0,5}:${v4$1}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

	// Pre-compile only the exact regexes because adding a global flag make regexes stateful
	const v46Exact = new RegExp(`(?:^${v4$1}$)|(?:^${v6}$)`);
	const v4exact = new RegExp(`^${v4$1}$`);
	const v6exact = new RegExp(`^${v6}$`);

	const ip$1 = options => options && options.exact ?
		v46Exact :
		new RegExp(`(?:${b(options)}${v4$1}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');

	ip$1.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4$1}${b(options)}`, 'g');
	ip$1.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');

	var ipRegex = ip$1;

	var isIp_1 = isIp;

	var _ipRegex = interopRequireDefault(ipRegex);

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isIp
	 * @summary Tests if the value is a valid IP address
	 * @description
	 * Checks to see if the value is a valid IP address. Optionally check for either v4/v6
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isIp } from '@polkadot/util';
	 *
	 * isIp('192.168.0.1')); // => true
	 * isIp('1:2:3:4:5:6:7:8'); // => true
	 * isIp('192.168.0.1', 'v6')); // => false
	 * isIp('1:2:3:4:5:6:7:8', 'v4'); // => false
	 * ```
	 */
	function isIp(value, type) {
	  if (type === 'v4') {
	    return _ipRegex.default.v4({
	      exact: true
	    }).test(value);
	  } else if (type === 'v6') {
	    return _ipRegex.default.v6({
	      exact: true
	    }).test(value);
	  }

	  return (0, _ipRegex.default)({
	    exact: true
	  }).test(value);
	}

	var ip = /*#__PURE__*/Object.defineProperty({
		isIp: isIp_1
	}, '__esModule', {value: true});

	var stringify_2 = stringify;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function stringify(args, space) {
	  return JSON.stringify(args, (_, value) => (0, _bigInt.isBigInt)(value) ? value.toString() : value, space);
	}

	var stringify_1 = /*#__PURE__*/Object.defineProperty({
		stringify: stringify_2
	}, '__esModule', {value: true});

	var _stringify = stringify_1;

	var isJsonObject_1 = isJsonObject;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isJsonObject
	 * @summary Tests for a valid JSON `object`.
	 * @description
	 * Checks to see if the input value is a valid JSON object.
	 * It returns false if the input is JSON parsable, but not an Javascript object.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isJsonObject } from '@polkadot/util';
	 *
	 * isJsonObject({}); // => true
	 * isJsonObject({
	 *  "Test": "1234",
	 *  "NestedTest": {
	 *   "Test": "5678"
	 *  }
	 * }); // => true
	 * isJsonObject(1234); // JSON parsable, but not an object =>  false
	 * isJsonObject(null); // JSON parsable, but not an object => false
	 * isJsonObject('not an object'); // => false
	 * ```
	 */
	function isJsonObject(value) {
	  const str = typeof value !== 'string' ? (0, _stringify.stringify)(value) : value;

	  try {
	    const obj = JSON.parse(str);
	    return typeof obj === 'object' && obj !== null;
	  } catch (e) {
	    return false;
	  }
	}

	var jsonObject = /*#__PURE__*/Object.defineProperty({
		isJsonObject: isJsonObject_1
	}, '__esModule', {value: true});

	var isObject_1 = isObject;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isObject
	 * @summary Tests for an `object`.
	 * @description
	 * Checks to see if the input value is a JavaScript object.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isObject } from '@polkadot/util';
	 *
	 * isObject({}); // => true
	 * isObject('something'); // => false
	 * ```
	 */
	function isObject(value) {
	  return typeof value === 'object';
	}

	var object = /*#__PURE__*/Object.defineProperty({
		isObject: isObject_1
	}, '__esModule', {value: true});

	var _object = object;

	var isObservable_1 = isObservable$1;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name isBObservable
	 * @summary Tests for a `Observable` object instance.
	 * @description
	 * Checks to see if the input object is an instance of `BN` (bn.js).
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { isObservable } from '@polkadot/util';
	 *
	 * console.log('isObservable', isObservable(...));
	 * ```
	 */
	function isObservable$1(value) {
	  return (0, _object.isObject)(value) && (0, _function.isFunction)(value.next);
	}

	var observable$1 = /*#__PURE__*/Object.defineProperty({
		isObservable: isObservable_1
	}, '__esModule', {value: true});

	var isTestChain_1 = isTestChain;
	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const re = /(Development|Local Testnet)$/;

	function isTestChain(chain) {
	  if (!chain) {
	    return false;
	  }

	  return !!re.test(chain.toString());
	}

	var testChain = /*#__PURE__*/Object.defineProperty({
		isTestChain: isTestChain_1
	}, '__esModule', {value: true});

	var isUtf8_1 = isUtf8;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Adapted from https://github.com/JulienPalard/is_utf8/blob/master/is_utf8.c

	/**
	 * @name isUtf8
	 * @summary Tests if the input is valid Utf8
	 * @description
	 * Checks to see if the input string or Uint8Array is valid Utf8
	 */
	function isUtf8(value) {
	  if (!value) {
	    return (0, _string.isString)(value);
	  }

	  const u8a = (0, _toU8a$6.u8aToU8a)(value);
	  const len = u8a.length;
	  let i = 0;

	  while (i < len) {
	    if (u8a[i] <= 0x7F)
	      /* 00..7F */
	      {
	        i += 1;
	      } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF)
	      /* C2..DF 80..BF */
	      {
	        if (i + 1 < len)
	          /* Expect a 2nd byte */
	          {
	            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
	              // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
	              // *faulty_bytes = 2;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 2;
	      } else if (u8a[i] === 0xE0)
	      /* E0 A0..BF 80..BF */
	      {
	        if (i + 2 < len)
	          /* Expect a 2nd and 3rd byte */
	          {
	            if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
	              // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte of E0, expecting two following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 3;
	      } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC)
	      /* E1..EC 80..BF 80..BF */
	      {
	        if (i + 2 < len)
	          /* Expect a 2nd and 3rd byte */
	          {
	            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
	              // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte between E1 and EC, expecting two following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 3;
	      } else if (u8a[i] === 0xED)
	      /* ED 80..9F 80..BF */
	      {
	        if (i + 2 < len)
	          /* Expect a 2nd and 3rd byte */
	          {
	            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
	              // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte of ED, expecting two following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 3;
	      } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF)
	      /* EE..EF 80..BF 80..BF */
	      {
	        if (i + 2 < len)
	          /* Expect a 2nd and 3rd byte */
	          {
	            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
	              // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte between EE and EF, two following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 3;
	      } else if (u8a[i] === 0xF0)
	      /* F0 90..BF 80..BF 80..BF */
	      {
	        if (i + 3 < len)
	          /* Expect a 2nd, 3rd 3th byte */
	          {
	            if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
	              // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }

	            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
	              // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
	              // *faulty_bytes = 4;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte of F0, expecting three following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 4;
	      } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3)
	      /* F1..F3 80..BF 80..BF 80..BF */
	      {
	        if (i + 3 < len)
	          /* Expect a 2nd, 3rd 3th byte */
	          {
	            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
	              // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }

	            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
	              // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
	              // *faulty_bytes = 4;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 4;
	      } else if (u8a[i] === 0xF4)
	      /* F4 80..8F 80..BF 80..BF */
	      {
	        if (i + 3 < len)
	          /* Expect a 2nd, 3rd 3th byte */
	          {
	            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
	              // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
	              // *faulty_bytes = 2;
	              return false;
	            }

	            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
	              // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
	              // *faulty_bytes = 3;
	              return false;
	            }

	            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
	              // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
	              // *faulty_bytes = 4;
	              return false;
	            }
	          } else {
	          // *message = "After a first byte of F4, expecting three following bytes.";
	          // *faulty_bytes = 1;
	          return false;
	        }

	        i += 4;
	      } else {
	      // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
	      // *faulty_bytes = 1;
	      return false;
	    }
	  }

	  return true;
	}

	var utf8 = /*#__PURE__*/Object.defineProperty({
		isUtf8: isUtf8_1
	}, '__esModule', {value: true});

	var isWasm_1 = isWasm;



	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const WASM_MAGIC = new Uint8Array([0, 97, 115, 109]); // \0asm

	/**
	 * @name isWasm
	 * @summary Tests if the input has a WASM header
	 * @description
	 * Checks to see if the input Uint8Array contains a valid WASM header
	 */

	function isWasm(value) {
	  return !!value && (0, _eq$1.u8aEq)(value.subarray(0, 4), WASM_MAGIC);
	}

	var wasm$1 = /*#__PURE__*/Object.defineProperty({
		isWasm: isWasm_1
	}, '__esModule', {value: true});

	var _ascii = ascii;

	var _bn = bn;

	var _childClass = childClass;

	var _compact = compact;

	var _error = error;

	var _ip = ip;

	var _jsonObject = jsonObject;

	var _observable = observable$1;

	var _testChain = testChain;

	var _utf = utf8;

	var _wasm = wasm$1;

	var is$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "isAscii", {
	  enumerable: true,
	  get: function () {
	    return _ascii.isAscii;
	  }
	});
	Object.defineProperty(exports, "isBigInt", {
	  enumerable: true,
	  get: function () {
	    return _bigInt.isBigInt;
	  }
	});
	Object.defineProperty(exports, "isBn", {
	  enumerable: true,
	  get: function () {
	    return _bn.isBn;
	  }
	});
	Object.defineProperty(exports, "isBuffer", {
	  enumerable: true,
	  get: function () {
	    return _buffer.isBuffer;
	  }
	});
	Object.defineProperty(exports, "isBoolean", {
	  enumerable: true,
	  get: function () {
	    return _boolean.isBoolean;
	  }
	});
	Object.defineProperty(exports, "isChildClass", {
	  enumerable: true,
	  get: function () {
	    return _childClass.isChildClass;
	  }
	});
	Object.defineProperty(exports, "isCompact", {
	  enumerable: true,
	  get: function () {
	    return _compact.isCompact;
	  }
	});
	Object.defineProperty(exports, "isError", {
	  enumerable: true,
	  get: function () {
	    return _error.isError;
	  }
	});
	Object.defineProperty(exports, "isFunction", {
	  enumerable: true,
	  get: function () {
	    return _function.isFunction;
	  }
	});
	Object.defineProperty(exports, "isHex", {
	  enumerable: true,
	  get: function () {
	    return _hex.isHex;
	  }
	});
	Object.defineProperty(exports, "isInstanceOf", {
	  enumerable: true,
	  get: function () {
	    return _instanceOf.isInstanceOf;
	  }
	});
	Object.defineProperty(exports, "isIp", {
	  enumerable: true,
	  get: function () {
	    return _ip.isIp;
	  }
	});
	Object.defineProperty(exports, "isJsonObject", {
	  enumerable: true,
	  get: function () {
	    return _jsonObject.isJsonObject;
	  }
	});
	Object.defineProperty(exports, "isNull", {
	  enumerable: true,
	  get: function () {
	    return _null.isNull;
	  }
	});
	Object.defineProperty(exports, "isNumber", {
	  enumerable: true,
	  get: function () {
	    return _number.isNumber;
	  }
	});
	Object.defineProperty(exports, "isObject", {
	  enumerable: true,
	  get: function () {
	    return _object.isObject;
	  }
	});
	Object.defineProperty(exports, "isObservable", {
	  enumerable: true,
	  get: function () {
	    return _observable.isObservable;
	  }
	});
	Object.defineProperty(exports, "isString", {
	  enumerable: true,
	  get: function () {
	    return _string.isString;
	  }
	});
	Object.defineProperty(exports, "isTestChain", {
	  enumerable: true,
	  get: function () {
	    return _testChain.isTestChain;
	  }
	});
	Object.defineProperty(exports, "isToBn", {
	  enumerable: true,
	  get: function () {
	    return _toBn$2.isToBn;
	  }
	});
	Object.defineProperty(exports, "isU8a", {
	  enumerable: true,
	  get: function () {
	    return _u8a.isU8a;
	  }
	});
	Object.defineProperty(exports, "isUndefined", {
	  enumerable: true,
	  get: function () {
	    return _undefined.isUndefined;
	  }
	});
	Object.defineProperty(exports, "isUtf8", {
	  enumerable: true,
	  get: function () {
	    return _utf.isUtf8;
	  }
	});
	Object.defineProperty(exports, "isWasm", {
	  enumerable: true,
	  get: function () {
	    return _wasm.isWasm;
	  }
	});
	});

	var loggerFormat_1 = loggerFormat;
	var logger_2 = logger;

















	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const logTo = {
	  debug: 'log',
	  error: 'error',
	  log: 'log',
	  warn: 'warn'
	};

	function formatOther(value) {
	  if (value && (0, _object.isObject)(value) && value.constructor === Object) {
	    return Object.keys(value).reduce((result, key) => {
	      result[key] = loggerFormat(value[key]);
	      return result;
	    }, {});
	  }

	  return value;
	}

	function loggerFormat(value) {
	  if (Array.isArray(value)) {
	    return value.map(loggerFormat);
	  } else if ((0, _bn.isBn)(value)) {
	    return value.toString();
	  } else if ((0, _u8a.isU8a)(value) || (0, _buffer.isBuffer)(value)) {
	    return (0, _toHex$3.u8aToHex)((0, _toU8a$6.u8aToU8a)(value));
	  }

	  return formatOther(value);
	}

	function apply(log, type, values, maxSize = -1) {
	  if (values.length === 1 && (0, _function.isFunction)(values[0])) {
	    const fnResult = values[0]();
	    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
	  }

	  console[logTo[log]]((0, _formatDate.formatDate)(new Date()), type, ...values.map(loggerFormat).map(v => {
	    if (maxSize <= 0) {
	      return v;
	    }

	    const r = `${v}`;
	    return r.length < maxSize ? v : `${r.substr(0, maxSize)} ...`;
	  }));
	}

	function noop$1() {// noop
	}

	function parseEnv(type) {
	  const env = (typeof process === 'object' ? process : {}).env || {};
	  const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);
	  let isDebugOn = false;
	  (env.DEBUG || '').toLowerCase().split(',').forEach(e => {
	    if (!!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)))) {
	      isDebugOn = true;
	    }

	    if (!!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)))) {
	      isDebugOn = false;
	    }
	  });
	  return [isDebugOn, isNaN(maxSize) ? -1 : maxSize];
	}
	/**
	 * @name Logger
	 * @summary Creates a consistent log interface for messages
	 * @description
	 * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { logger } from '@polkadot';
	 *
	 * const l = logger('test');
	 * ```
	 */


	function logger(_type) {
	  const type = `${_type.toUpperCase()}:`.padStart(16);
	  const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
	  return {
	    debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop$1,
	    error: (...values) => apply('error', type, values),
	    log: (...values) => apply('log', type, values),
	    noop: noop$1,
	    warn: (...values) => apply('warn', type, values)
	  };
	}

	var logger_1 = /*#__PURE__*/Object.defineProperty({
		loggerFormat: loggerFormat_1,
		logger: logger_2
	}, '__esModule', {value: true});

	var memoize_2 = memoize;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function defaultGetId() {
	  return 'none';
	} // eslint-disable-next-line @typescript-eslint/no-explicit-any


	function memoize(fn, {
	  getInstanceId = defaultGetId
	} = {}) {
	  const cache = {};

	  const memoized = (...args) => {
	    const stringParams = (0, _stringify.stringify)(args);
	    const instanceId = getInstanceId();

	    if (!cache[instanceId]) {
	      cache[instanceId] = {};
	    }

	    if ((0, _undefined.isUndefined)(cache[instanceId][stringParams])) {
	      cache[instanceId][stringParams] = fn(...args);
	    }

	    return cache[instanceId][stringParams];
	  };

	  memoized.unmemoize = (...args) => {
	    const stringParams = (0, _stringify.stringify)(args);
	    const instanceId = getInstanceId();

	    if (cache[instanceId] && !(0, _undefined.isUndefined)(cache[instanceId][stringParams])) {
	      delete cache[instanceId][stringParams];
	    }
	  };

	  return memoized;
	}

	var memoize_1 = /*#__PURE__*/Object.defineProperty({
		memoize: memoize_2
	}, '__esModule', {value: true});

	var numberToHex_1 = numberToHex;







	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name numberToHex
	 * @summary Creates a hex value from a number.
	 * @description
	 * `null`/`undefined`/`NaN` inputs returns an empty `0x` result. `number` input values return the actual bytes value converted to a `hex`. With `bitLength` set, it converts the number to the equivalent size.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { numberToHex } from '@polkadot/util';
	 *
	 * numberToHex(0x1234); // => '0x1234'
	 * numberToHex(0x1234, 32); // => 0x00001234
	 * ```
	 */
	function numberToHex(value, bitLength = -1) {
	  if ((0, _undefined.isUndefined)(value) || (0, _null.isNull)(value) || isNaN(value)) {
	    return '0x';
	  }

	  return (0, _fixLength.hexFixLength)(value.toString(16), bitLength, true);
	}

	var toHex$3 = /*#__PURE__*/Object.defineProperty({
		numberToHex: numberToHex_1
	}, '__esModule', {value: true});

	var _toHex$1 = toHex$3;

	var numberToU8a_1 = numberToU8a;









	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name numberToU8a
	 * @summary Creates a Uint8Array object from a number.
	 * @description
	 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `number` input values return the actual bytes value converted to a `Uint8Array`. With `bitLength`, it converts the value to the equivalent size.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { numberToU8a } from '@polkadot/util';
	 *
	 * numberToU8a(0x1234); // => [0x12, 0x34]
	 * ```
	 */
	function numberToU8a(value, bitLength = -1) {
	  if ((0, _undefined.isUndefined)(value) || (0, _null.isNull)(value) || isNaN(value)) {
	    return new Uint8Array();
	  }

	  return (0, _toU8a$8.hexToU8a)((0, _toHex$1.numberToHex)(value, bitLength));
	}

	var toU8a$2 = /*#__PURE__*/Object.defineProperty({
		numberToU8a: numberToU8a_1
	}, '__esModule', {value: true});

	var _toU8a$2 = toU8a$2;

	var number = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "numberToHex", {
	  enumerable: true,
	  get: function () {
	    return _toHex$1.numberToHex;
	  }
	});
	Object.defineProperty(exports, "numberToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$2.numberToU8a;
	  }
	});
	});

	var promisify_2 = promisify;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name promisify
	 * @summary Wraps an async callback into a `Promise`
	 * @description
	 * Wraps the supplied async function `fn` that has a standard JS callback `(error: Error, result: any)` into a `Promise`, passing the supplied parameters. When `error` is set, the Promise is rejected, else the Promise resolves with the `result` value.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const { promisify } from '@polkadot/util';
	 *
	 * await promisify(null, ((a, cb) => cb(null, a), true); // resolves with `true`
	 * await promisify(null, (cb) => cb(new Error('error!'))); // rejects with `error!`
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function promisify(self, fn, ...params) {
	  return new Promise((resolve, reject) => {
	    const handler = (error, result) => {
	      if (error) {
	        reject(error);
	      } else {
	        resolve(result);
	      }
	    };

	    fn.apply(self, params.concat(handler));
	  });
	}

	var promisify_1 = /*#__PURE__*/Object.defineProperty({
		promisify: promisify_2
	}, '__esModule', {value: true});

	const preserveCamelCase = (string, locale) => {
		let isLastCharLower = false;
		let isLastCharUpper = false;
		let isLastLastCharUpper = false;

		for (let i = 0; i < string.length; i++) {
			const character = string[i];

			if (isLastCharLower && /[\p{Lu}]/u.test(character)) {
				string = string.slice(0, i) + '-' + string.slice(i);
				isLastCharLower = false;
				isLastLastCharUpper = isLastCharUpper;
				isLastCharUpper = true;
				i++;
			} else if (isLastCharUpper && isLastLastCharUpper && /[\p{Ll}]/u.test(character)) {
				string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
				isLastLastCharUpper = isLastCharUpper;
				isLastCharUpper = false;
				isLastCharLower = true;
			} else {
				isLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;
				isLastLastCharUpper = isLastCharUpper;
				isLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;
			}
		}

		return string;
	};

	const preserveConsecutiveUppercase = input => {
		return input.replace(/^[\p{Lu}](?![\p{Lu}])/gu, m1 => m1.toLowerCase());
	};

	const postProcess = (input, options) => {
		return input.replace(/[_.\- ]+([\p{Alpha}\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))
			.replace(/\d+([\p{Alpha}\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));
	};

	const camelCase$1 = (input, options) => {
		if (!(typeof input === 'string' || Array.isArray(input))) {
			throw new TypeError('Expected the input to be `string | string[]`');
		}

		options = {
			pascalCase: false,
			preserveConsecutiveUppercase: false,
			...options
		};

		if (Array.isArray(input)) {
			input = input.map(x => x.trim())
				.filter(x => x.length)
				.join('-');
		} else {
			input = input.trim();
		}

		if (input.length === 0) {
			return '';
		}

		if (input.length === 1) {
			return options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);
		}

		const hasUpperCase = input !== input.toLocaleLowerCase(options.locale);

		if (hasUpperCase) {
			input = preserveCamelCase(input, options.locale);
		}

		input = input.replace(/^[_.\- ]+/, '');

		if (options.preserveConsecutiveUppercase) {
			input = preserveConsecutiveUppercase(input);
		} else {
			input = input.toLocaleLowerCase();
		}

		if (options.pascalCase) {
			input = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);
		}

		return postProcess(input, options);
	};

	var camelcase = camelCase$1;
	// TODO: Remove this for the next major release
	var _default$3 = camelCase$1;
	camelcase.default = _default$3;

	var stringCamelCase_1 = stringCamelCase;

	var _camelcase = interopRequireDefault(camelcase);

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name stringCamelCase
	 * @summary Convert a dash/dot/underscore/space separated string/String to camelCase
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function stringCamelCase(value) {
	  return (0, _camelcase.default)(value.toString());
	}

	var camelCase = /*#__PURE__*/Object.defineProperty({
		stringCamelCase: stringCamelCase_1
	}, '__esModule', {value: true});

	var stringLowerFirst_1 = stringLowerFirst;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name stringLowerFirst
	 * @summary Lowercase the first letter of a string
	 * @description
	 * Lowercase the first letter of a string
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { stringLowerFirst } from '@polkadot/util';
	 *
	 * stringLowerFirst('ABC'); // => 'aBC'
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function stringLowerFirst(value) {
	  return value ? value.charAt(0).toLowerCase() + value.slice(1) : '';
	}

	var lowerFirst = /*#__PURE__*/Object.defineProperty({
		stringLowerFirst: stringLowerFirst_1
	}, '__esModule', {value: true});

	var stringShorten_1 = stringShorten;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name stringShorten
	 * @summary Returns a string with maximum length
	 * @description
	 * Checks the string against the `prefixLength`, if longer than double this, shortens it by placing `..` in the middle of it
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { stringShorten } from '@polkadot/util';
	 *
	 * stringShorten('1234567890', 2); // => 12..90
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function stringShorten(value, prefixLength = 6) {
	  if (value.length <= 2 + 2 * prefixLength) {
	    return value.toString();
	  }

	  return `${value.substr(0, prefixLength)}…${value.slice(-prefixLength)}`;
	}

	var shorten = /*#__PURE__*/Object.defineProperty({
		stringShorten: stringShorten_1
	}, '__esModule', {value: true});

	var stringToHex_1 = stringToHex;





	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name stringToHex
	 * @summary Creates a hex string from a utf-8 string
	 * @description
	 * String input values return the actual encoded hex value.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { stringToHex } from '@polkadot/util';
	 *
	 * stringToU8a('hello'); // 0x68656c6c6f
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function stringToHex(value) {
	  return (0, _toHex$3.u8aToHex)((0, _toU8a$7.stringToU8a)(value));
	}

	var toHex$2 = /*#__PURE__*/Object.defineProperty({
		stringToHex: stringToHex_1
	}, '__esModule', {value: true});

	var stringUpperFirst_1 = stringUpperFirst;

	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name stringUpperFirst
	 * @summary Lowercase the first letter of a string
	 * @description
	 * Lowercase the first letter of a string
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { stringUpperFirst } from '@polkadot/util';
	 *
	 * stringUpperFirst('abc'); // => 'Abc'
	 * ```
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function stringUpperFirst(value) {
	  return value ? value.charAt(0).toUpperCase() + value.slice(1) : '';
	}

	var upperFirst = /*#__PURE__*/Object.defineProperty({
		stringUpperFirst: stringUpperFirst_1
	}, '__esModule', {value: true});

	var _camelCase = camelCase;

	var _lowerFirst = lowerFirst;

	var _shorten = shorten;

	var _toHex = toHex$2;

	var _upperFirst = upperFirst;

	var string = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "stringCamelCase", {
	  enumerable: true,
	  get: function () {
	    return _camelCase.stringCamelCase;
	  }
	});
	Object.defineProperty(exports, "stringLowerFirst", {
	  enumerable: true,
	  get: function () {
	    return _lowerFirst.stringLowerFirst;
	  }
	});
	Object.defineProperty(exports, "stringShorten", {
	  enumerable: true,
	  get: function () {
	    return _shorten.stringShorten;
	  }
	});
	Object.defineProperty(exports, "stringToHex", {
	  enumerable: true,
	  get: function () {
	    return _toHex.stringToHex;
	  }
	});
	Object.defineProperty(exports, "stringToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a$7.stringToU8a;
	  }
	});
	Object.defineProperty(exports, "stringUpperFirst", {
	  enumerable: true,
	  get: function () {
	    return _upperFirst.stringUpperFirst;
	  }
	});
	});

	var _index3$4 = buffer$1;

	var _index4$2 = compact$1;

	var _extractTime = extractTime_1;

	var _index5$2 = format;

	var _index6$1 = hex;

	var _index7$1 = is$4;

	var _logger = logger_1;

	var _memoize = memoize_1;

	var _index8$1 = number;

	var _promisify = promisify_1;

	var _index9$1 = string;

	var bundle$9 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  packageInfo: true
	};
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$a.packageInfo;
	  }
	});





	Object.keys(_index$l).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index$l[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$l[key];
	    }
	  });
	});



	Object.keys(_assert).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _assert[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _assert[key];
	    }
	  });
	});



	Object.keys(_index2$8).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index2$8[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index2$8[key];
	    }
	  });
	});



	Object.keys(_index3$4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index3$4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index3$4[key];
	    }
	  });
	});



	Object.keys(_index4$2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index4$2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index4$2[key];
	    }
	  });
	});



	Object.keys(_extractTime).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _extractTime[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _extractTime[key];
	    }
	  });
	});



	Object.keys(_index5$2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index5$2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index5$2[key];
	    }
	  });
	});



	Object.keys(_index6$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index6$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index6$1[key];
	    }
	  });
	});



	Object.keys(_index7$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index7$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index7$1[key];
	    }
	  });
	});



	Object.keys(_logger).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _logger[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _logger[key];
	    }
	  });
	});



	Object.keys(_memoize).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _memoize[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _memoize[key];
	    }
	  });
	});



	Object.keys(_index8$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index8$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index8$1[key];
	    }
	  });
	});



	Object.keys(_promisify).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _promisify[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _promisify[key];
	    }
	  });
	});



	Object.keys(_index9$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index9$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index9$1[key];
	    }
	  });
	});



	Object.keys(_stringify).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _stringify[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stringify[key];
	    }
	  });
	});



	Object.keys(_index10$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index10$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index10$1[key];
	    }
	  });
	});



	Object.keys(_versionDetect).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _versionDetect[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _versionDetect[key];
	    }
	  });
	});
	});

	var _bundle$9 = bundle$9;

	var util$c = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$9).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$9[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$9[key];
	    }
	  });
	});
	});

	var packageInfo_1$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/api',
	  version: '5.8.3'
	};
	exports.packageInfo = packageInfo;
	});

	var _packageInfo$9 = packageInfo_1$d;

	var _packageInfo$8 = packageInfo_1$c;

	var _packageInfo$7 = packageInfo_1$b;

	var _packageInfo2$1 = packageInfo_1$a;

	var _packageInfo$6 = packageInfo_1$9;

	var _util$5 = util$c;

	var _packageInfo$5 = packageInfo_1$6;

	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$5.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo$9.packageInfo, _packageInfo$8.packageInfo, _packageInfo$7.packageInfo, _packageInfo2$1.packageInfo, _packageInfo$6.packageInfo]);

	var packageInfo_1$5 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/util-crypto',
	  version: '7.3.1'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/keyring',
	  version: '7.3.1'
	};
	exports.packageInfo = packageInfo;
	});

	var _packageInfo$4 = packageInfo_1$5;

	var _packageInfo$3 = packageInfo_1$4;

	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$3.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_util$5.packageInfo, _packageInfo$4.packageInfo]);

	var classPrivateFieldLooseBase = createCommonjsModule(function (module) {
	function _classPrivateFieldBase(receiver, privateKey) {
	  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
	    throw new TypeError("attempted to use private field on non-instance");
	  }

	  return receiver;
	}

	module.exports = _classPrivateFieldBase;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	});

	var classPrivateFieldLooseKey = createCommonjsModule(function (module) {
	var id = 0;

	function _classPrivateFieldKey(name) {
	  return "__private_" + id++ + "_" + name;
	}

	module.exports = _classPrivateFieldKey;
	module.exports["default"] = module.exports, module.exports.__esModule = true;
	});

	var packageInfo_1$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/networks authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/networks',
	  version: '7.3.1'
	};
	exports.packageInfo = packageInfo;
	});

	var _packageInfo$2 = packageInfo_1$3;

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$4.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo$2.packageInfo, _util$5.packageInfo, _xRandomvalues__default['default'].packageInfo]);

	var packageInfo_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/wasm-crypto-asmjs authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/wasm-crypto-asmjs',
	  version: '4.2.1'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/wasm-crypto-wasm authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/wasm-crypto-wasm',
	  version: '4.2.1'
	};
	exports.packageInfo = packageInfo;
	});

	var packageInfo_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageInfo = void 0;
	// Copyright 2017-2021 @polkadot/wasm-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by @polkadot/dev, do not edit
	const packageInfo = {
	  name: '@polkadot/wasm-crypto',
	  version: '4.2.1'
	};
	exports.packageInfo = packageInfo;
	});

	var _packageInfo$1 = packageInfo_1$2;

	var _packageInfo2 = packageInfo_1$1;

	var _packageInfo = packageInfo_1;

	// Copyright 2017-2021 @polkadot/wasm-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo$1.packageInfo, _packageInfo2.packageInfo]);

	var initWasm_1 = initWasm;
	var withWasm_1 = withWasm;
	var getWasm_1 = getWasm;
	var getInt32_1 = getInt32;
	var getUint8_1 = getUint8;
	var getU8a_1 = getU8a;
	var getString_1 = getString;
	var allocU8a_1 = allocU8a;
	var allocString_1 = allocString;
	var resultU8a_1 = resultU8a;
	var resultString_1 = resultString;



	// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable @typescript-eslint/no-non-null-assertion */
	let wasm = null;
	let cachegetInt32 = null;
	let cachegetUint8 = null;

	async function initWasm(wasmBytes, asmFn, wbg) {
	  try {
	    (0, _util$5.assert)(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
	    const source = await WebAssembly.instantiate(wasmBytes, {
	      wbg
	    });
	    wasm = source.instance.exports;
	  } catch (error) {
	    // if we have a valid supplied asm.js, return that
	    if (asmFn) {
	      wasm = asmFn(wbg);
	    } else {
	      console.error('FATAL: Unable to initialize @polkadot/wasm-crypto');
	      console.error(error);
	      wasm = null;
	    }
	  }
	} // FIXME We really would love to clean this up and have a sign like (wasm, ...params) => T
	// Alas, TypeScript foo is not that great today, so we sadly have an extra closure here


	function withWasm(fn) {
	  return (...params) => {
	    (0, _util$5.assert)(wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
	    return fn(wasm)(...params);
	  };
	}

	function getWasm() {
	  return wasm;
	}

	function getInt32() {
	  if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {
	    cachegetInt32 = new Int32Array(wasm.memory.buffer);
	  }

	  return cachegetInt32;
	}

	function getUint8() {
	  if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {
	    cachegetUint8 = new Uint8Array(wasm.memory.buffer);
	  }

	  return cachegetUint8;
	}

	function getU8a(ptr, len) {
	  return getUint8().subarray(ptr / 1, ptr / 1 + len);
	}

	function getString(ptr, len) {
	  return (0, _util$5.u8aToString)(getU8a(ptr, len));
	}

	function allocU8a(arg) {
	  const ptr = wasm.__wbindgen_malloc(arg.length * 1);

	  getUint8().set(arg, ptr / 1);
	  return [ptr, arg.length];
	}

	function allocString(arg) {
	  return allocU8a((0, _util$5.stringToU8a)(arg));
	}

	function resultU8a() {
	  const r0 = getInt32()[8 / 4 + 0];
	  const r1 = getInt32()[8 / 4 + 1];
	  const ret = getU8a(r0, r1).slice();

	  wasm.__wbindgen_free(r0, r1 * 1);

	  return ret;
	}

	function resultString() {
	  return (0, _util$5.u8aToString)(resultU8a());
	}

	var bridge = /*#__PURE__*/Object.defineProperty({
		initWasm: initWasm_1,
		withWasm: withWasm_1,
		getWasm: getWasm_1,
		getInt32: getInt32_1,
		getUint8: getUint8_1,
		getU8a: getU8a_1,
		getString: getString_1,
		allocU8a: allocU8a_1,
		allocString: allocString_1,
		resultU8a: resultU8a_1,
		resultString: resultString_1
	}, '__esModule', {value: true});

	var _bridge = bridge;

	var __wbindgen_is_undefined_1 = __wbindgen_is_undefined;
	var __wbg_self_1b7a39e3a92c949c_1 = __wbg_self_1b7a39e3a92c949c;
	var __wbg_require_604837428532a733_1 = __wbg_require_604837428532a733;
	var __wbg_crypto_968f1772287e2df0_1 = __wbg_crypto_968f1772287e2df0;
	var __wbg_getRandomValues_a3d34b4fee3c2869_1 = __wbg_getRandomValues_a3d34b4fee3c2869;
	var __wbg_getRandomValues_f5e14ab7ac8e995d_1 = __wbg_getRandomValues_f5e14ab7ac8e995d;
	var __wbg_randomFillSync_d5bd2d655fdf256a_1 = __wbg_randomFillSync_d5bd2d655fdf256a;
	var __wbindgen_object_drop_ref_1 = __wbindgen_object_drop_ref;
	var abort_1 = abort;





	// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable camelcase */
	const DEFAULT_CRYPTO = {
	  getRandomValues: _xRandomvalues__default['default'].getRandomValues
	};
	const DEFAULT_SELF = {
	  crypto: DEFAULT_CRYPTO
	};
	const heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
	let heapNext = heap.length;

	function getObject(idx) {
	  return heap[idx];
	}

	function dropObject(idx) {
	  if (idx < 36) {
	    return;
	  }

	  heap[idx] = heapNext;
	  heapNext = idx;
	}

	function takeObject(idx) {
	  const ret = getObject(idx);
	  dropObject(idx);
	  return ret;
	}

	function addObject(obj) {
	  if (heapNext === heap.length) {
	    heap.push(heap.length + 1);
	  }

	  const idx = heapNext;
	  heapNext = heap[idx];
	  heap[idx] = obj;
	  return idx;
	}

	function __wbindgen_is_undefined(idx) {
	  return getObject(idx) === undefined;
	}

	function __wbg_self_1b7a39e3a92c949c() {
	  return addObject(DEFAULT_SELF);
	}

	function __wbg_require_604837428532a733(ptr, len) {
	  throw new Error(`Unable to require ${(0, _bridge.getString)(ptr, len)}`);
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function __wbg_crypto_968f1772287e2df0(_idx) {
	  return addObject(DEFAULT_CRYPTO);
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function __wbg_getRandomValues_a3d34b4fee3c2869(_idx) {
	  return addObject(DEFAULT_CRYPTO.getRandomValues);
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function __wbg_getRandomValues_f5e14ab7ac8e995d(_arg0, ptr, len) {
	  DEFAULT_CRYPTO.getRandomValues((0, _bridge.getU8a)(ptr, len));
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function __wbg_randomFillSync_d5bd2d655fdf256a(_idx, _ptr, _len) {
	  throw new Error('randomFillsync is not available'); // getObject(idx).randomFillSync(getU8a(ptr, len));
	}

	function __wbindgen_object_drop_ref(idx) {
	  takeObject(idx);
	}

	function abort() {
	  throw new Error('abort');
	}

	var imports = /*#__PURE__*/Object.defineProperty({
		__wbindgen_is_undefined: __wbindgen_is_undefined_1,
		__wbg_self_1b7a39e3a92c949c: __wbg_self_1b7a39e3a92c949c_1,
		__wbg_require_604837428532a733: __wbg_require_604837428532a733_1,
		__wbg_crypto_968f1772287e2df0: __wbg_crypto_968f1772287e2df0_1,
		__wbg_getRandomValues_a3d34b4fee3c2869: __wbg_getRandomValues_a3d34b4fee3c2869_1,
		__wbg_getRandomValues_f5e14ab7ac8e995d: __wbg_getRandomValues_f5e14ab7ac8e995d_1,
		__wbg_randomFillSync_d5bd2d655fdf256a: __wbg_randomFillSync_d5bd2d655fdf256a_1,
		__wbindgen_object_drop_ref: __wbindgen_object_drop_ref_1,
		abort: abort_1
	}, '__esModule', {value: true});

	var require$$0$9 = imports;

	var bundle$8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isReady = isReady;
	exports.waitReady = waitReady;
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo.packageInfo;
	  }
	});
	exports.twox = exports.sha512 = exports.scrypt = exports.pbkdf2 = exports.keccak256 = exports.blake2b = exports.vrfVerify = exports.vrfSign = exports.sr25519Agree = exports.sr25519Verify = exports.sr25519Sign = exports.sr25519KeypairFromSeed = exports.sr25519DerivePublicSoft = exports.sr25519DeriveKeypairSoft = exports.sr25519DeriveKeypairHard = exports.ed25519Verify = exports.ed25519Sign = exports.ed25519KeypairFromSeed = exports.bip39Validate = exports.bip39ToSeed = exports.bip39ToMiniSecret = exports.bip39ToEntropy = exports.bip39Generate = void 0;







	var imports = _interopRequireWildcard(require$$0$9);



	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const wasmPromise = (0, _bridge.initWasm)(_wasmCryptoWasm__default['default'].wasmBytes, _wasmCryptoAsmjs__default['default'].asmJsInit, imports).catch(() => null);
	const bip39Generate = (0, _bridge.withWasm)(wasm => words => {
	  wasm.ext_bip39_generate(8, words);
	  return (0, _bridge.resultString)();
	});
	exports.bip39Generate = bip39Generate;
	const bip39ToEntropy = (0, _bridge.withWasm)(wasm => phrase => {
	  const [ptr0, len0] = (0, _bridge.allocString)(phrase);
	  wasm.ext_bip39_to_entropy(8, ptr0, len0);
	  return (0, _bridge.resultU8a)();
	});
	exports.bip39ToEntropy = bip39ToEntropy;
	const bip39ToMiniSecret = (0, _bridge.withWasm)(wasm => (phrase, password) => {
	  const [ptr0, len0] = (0, _bridge.allocString)(phrase);
	  const [ptr1, len1] = (0, _bridge.allocString)(password);
	  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);
	  return (0, _bridge.resultU8a)();
	});
	exports.bip39ToMiniSecret = bip39ToMiniSecret;
	const bip39ToSeed = (0, _bridge.withWasm)(wasm => (phrase, password) => {
	  const [ptr0, len0] = (0, _bridge.allocString)(phrase);
	  const [ptr1, len1] = (0, _bridge.allocString)(password);
	  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);
	  return (0, _bridge.resultU8a)();
	});
	exports.bip39ToSeed = bip39ToSeed;
	const bip39Validate = (0, _bridge.withWasm)(wasm => phrase => {
	  const [ptr0, len0] = (0, _bridge.allocString)(phrase);
	  const ret = wasm.ext_bip39_validate(ptr0, len0);
	  return ret !== 0;
	});
	exports.bip39Validate = bip39Validate;
	const ed25519KeypairFromSeed = (0, _bridge.withWasm)(wasm => seed => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(seed);
	  wasm.ext_ed_from_seed(8, ptr0, len0);
	  return (0, _bridge.resultU8a)();
	});
	exports.ed25519KeypairFromSeed = ed25519KeypairFromSeed;
	const ed25519Sign = (0, _bridge.withWasm)(wasm => (pubkey, seckey, message) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(seckey);
	  const [ptr2, len2] = (0, _bridge.allocU8a)(message);
	  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);
	  return (0, _bridge.resultU8a)();
	});
	exports.ed25519Sign = ed25519Sign;
	const ed25519Verify = (0, _bridge.withWasm)(wasm => (signature, message, pubkey) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(signature);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(message);
	  const [ptr2, len2] = (0, _bridge.allocU8a)(pubkey);
	  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);
	  return ret !== 0;
	});
	exports.ed25519Verify = ed25519Verify;
	const sr25519DeriveKeypairHard = (0, _bridge.withWasm)(wasm => (pair, cc) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pair);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);
	  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);
	  return (0, _bridge.resultU8a)();
	});
	exports.sr25519DeriveKeypairHard = sr25519DeriveKeypairHard;
	const sr25519DeriveKeypairSoft = (0, _bridge.withWasm)(wasm => (pair, cc) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pair);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);
	  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);
	  return (0, _bridge.resultU8a)();
	});
	exports.sr25519DeriveKeypairSoft = sr25519DeriveKeypairSoft;
	const sr25519DerivePublicSoft = (0, _bridge.withWasm)(wasm => (pubkey, cc) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(cc);
	  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);
	  return (0, _bridge.resultU8a)();
	});
	exports.sr25519DerivePublicSoft = sr25519DerivePublicSoft;
	const sr25519KeypairFromSeed = (0, _bridge.withWasm)(wasm => seed => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(seed);
	  wasm.ext_sr_from_seed(8, ptr0, len0);
	  return (0, _bridge.resultU8a)();
	});
	exports.sr25519KeypairFromSeed = sr25519KeypairFromSeed;
	const sr25519Sign = (0, _bridge.withWasm)(wasm => (pubkey, secret, message) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(secret);
	  const [ptr2, len2] = (0, _bridge.allocU8a)(message);
	  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);
	  return (0, _bridge.resultU8a)();
	});
	exports.sr25519Sign = sr25519Sign;
	const sr25519Verify = (0, _bridge.withWasm)(wasm => (signature, message, pubkey) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(signature);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(message);
	  const [ptr2, len2] = (0, _bridge.allocU8a)(pubkey);
	  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);
	  return ret !== 0;
	});
	exports.sr25519Verify = sr25519Verify;
	const sr25519Agree = (0, _bridge.withWasm)(wasm => (pubkey, secret) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(secret);
	  wasm.ext_sr_agree(8, ptr0, len0, ptr1, len1);
	  return (0, _bridge.resultU8a)();
	});
	exports.sr25519Agree = sr25519Agree;
	const vrfSign = (0, _bridge.withWasm)(wasm => (secret, context, message, extra) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(secret);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(context);
	  const [ptr2, len2] = (0, _bridge.allocU8a)(message);
	  const [ptr3, len3] = (0, _bridge.allocU8a)(extra);
	  wasm.ext_vrf_sign(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
	  return (0, _bridge.resultU8a)();
	});
	exports.vrfSign = vrfSign;
	const vrfVerify = (0, _bridge.withWasm)(wasm => (pubkey, context, message, extra, outAndProof) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(pubkey);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(context);
	  const [ptr2, len2] = (0, _bridge.allocU8a)(message);
	  const [ptr3, len3] = (0, _bridge.allocU8a)(extra);
	  const [ptr4, len4] = (0, _bridge.allocU8a)(outAndProof);
	  const ret = wasm.ext_vrf_verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
	  return ret !== 0;
	});
	exports.vrfVerify = vrfVerify;
	const blake2b = (0, _bridge.withWasm)(wasm => (data, key, size) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(data);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(key);
	  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);
	  return (0, _bridge.resultU8a)();
	});
	exports.blake2b = blake2b;
	const keccak256 = (0, _bridge.withWasm)(wasm => data => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(data);
	  wasm.ext_keccak256(8, ptr0, len0);
	  return (0, _bridge.resultU8a)();
	});
	exports.keccak256 = keccak256;
	const pbkdf2 = (0, _bridge.withWasm)(wasm => (data, salt, rounds) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(data);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(salt);
	  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);
	  return (0, _bridge.resultU8a)();
	});
	exports.pbkdf2 = pbkdf2;
	const scrypt = (0, _bridge.withWasm)(wasm => (password, salt, log2n, r, p) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(password);
	  const [ptr1, len1] = (0, _bridge.allocU8a)(salt);
	  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);
	  return (0, _bridge.resultU8a)();
	});
	exports.scrypt = scrypt;
	const sha512 = (0, _bridge.withWasm)(wasm => data => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(data);
	  wasm.ext_sha512(8, ptr0, len0);
	  return (0, _bridge.resultU8a)();
	});
	exports.sha512 = sha512;
	const twox = (0, _bridge.withWasm)(wasm => (data, rounds) => {
	  const [ptr0, len0] = (0, _bridge.allocU8a)(data);
	  wasm.ext_twox(8, ptr0, len0, rounds);
	  return (0, _bridge.resultU8a)();
	});
	exports.twox = twox;

	function isReady() {
	  return !!(0, _bridge.getWasm)();
	}

	function waitReady() {
	  return wasmPromise.then(() => isReady());
	}
	});

	var _bundle$8 = bundle$8;

	var wasmCrypto = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$8).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$8[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$8[key];
	    }
	  });
	});
	});

	var _wasmCrypto = wasmCrypto;

	var cryptoIsReady_1 = cryptoIsReady;
	var cryptoWaitReady_1 = cryptoWaitReady;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function cryptoIsReady() {
	  return (0, _wasmCrypto.isReady)();
	}

	function cryptoWaitReady() {
	  return (0, _wasmCrypto.waitReady)().then(() => true).catch(error => {
	    console.error('Unable to initialize @polkadot/util-crypto', error);
	    return false;
	  });
	}

	var crypto$1 = /*#__PURE__*/Object.defineProperty({
		cryptoIsReady: cryptoIsReady_1,
		cryptoWaitReady: cryptoWaitReady_1
	}, '__esModule', {value: true});

	var _crypto = crypto$1;

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// start init process immediately
	(0, _crypto.cryptoWaitReady)().catch(() => {// shouldn't happen, logged above
	});

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	var safeBuffer = createCommonjsModule(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */

	var Buffer = buffer__default['default'].Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer__default['default'];
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer__default['default'], exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer__default['default'].SlowBuffer(size)
	};
	});

	// base-x encoding / decoding
	// Copyright (c) 2018 base-x contributors
	// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
	// Distributed under the MIT software license, see the accompanying
	// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
	// @ts-ignore
	var _Buffer = safeBuffer.Buffer;
	function base$2 (ALPHABET) {
	  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
	  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
	  function encode (source) {
	    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
	    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
	    if (source.length === 0) { return '' }
	        // Skip & count leading zeroes.
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	        // Allocate enough space in big-endian base58 representation.
	    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
	    var b58 = new Uint8Array(size);
	        // Process the bytes.
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	            // Apply "b58 = b58 * 256 + ch".
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
	        carry += (256 * b58[it1]) >>> 0;
	        b58[it1] = (carry % BASE) >>> 0;
	        carry = (carry / BASE) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      pbegin++;
	    }
	        // Skip leading zeroes in base58 result.
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	        // Translate the result into a string.
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
	    return str
	  }
	  function decodeUnsafe (source) {
	    if (typeof source !== 'string') { throw new TypeError('Expected String') }
	    if (source.length === 0) { return _Buffer.alloc(0) }
	    var psz = 0;
	        // Skip leading spaces.
	    if (source[psz] === ' ') { return }
	        // Skip and count leading '1's.
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	        // Allocate enough space in big-endian base256 representation.
	    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
	    var b256 = new Uint8Array(size);
	        // Process the characters.
	    while (source[psz]) {
	            // Decode character
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	            // Invalid character
	      if (carry === 255) { return }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
	        carry += (BASE * b256[it3]) >>> 0;
	        b256[it3] = (carry % 256) >>> 0;
	        carry = (carry / 256) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      psz++;
	    }
	        // Skip trailing spaces.
	    if (source[psz] === ' ') { return }
	        // Skip leading zeroes in b256.
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
	    vch.fill(0x00, 0, zeroes);
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch
	  }
	  function decode (string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) { return buffer }
	    throw new Error('Non-base' + BASE + ' character')
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}
	var src = base$2;

	var bs58_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.bs58 = exports.BASE58_ALPHABET = void 0;

	var _baseX = interopRequireDefault(src);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// https://github.com/cryptocoinjs/base-x#alphabets
	const BASE58_ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
	exports.BASE58_ALPHABET = BASE58_ALPHABET;
	const bs58 = (0, _baseX.default)(BASE58_ALPHABET);
	exports.bs58 = bs58;
	});

	var _bs$1 = bs58_1;

	var validateChars_1 = validateChars;
	var base58Validate_1 = base58Validate;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const BASE_CONFIG$1 = {
	  alphabet: _bs$1.BASE58_ALPHABET,
	  ipfsChar: 'z',
	  type: 'base58'
	};

	function validateChars({
	  alphabet,
	  ipfsChar,
	  type
	}, value, ipfsCompat) {
	  (0, _util$5.assert)(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);
	  (0, _util$5.assert)(!ipfsCompat || value[0] === ipfsChar, () => `Expected ${type} to start with '${ipfsChar}'`);

	  for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
	    (0, _util$5.assert)(alphabet.includes(value[i]), () => `Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
	  }

	  return true;
	}
	/**
	 * @name base58Validate
	 * @summary Validates a base58 value.
	 * @description
	 * Validates that the supplied value is valid base58
	 */


	function base58Validate(value, ipfsCompat) {
	  return validateChars(BASE_CONFIG$1, value, ipfsCompat);
	}

	var validate$5 = /*#__PURE__*/Object.defineProperty({
		validateChars: validateChars_1,
		base58Validate: base58Validate_1
	}, '__esModule', {value: true});

	var _validate$5 = validate$5;

	var base58Decode_1 = base58Decode;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name base58Decode
	 * @summary Decodes a base58 value.
	 * @description
	 * From the provided input, decode the base58 and return the result as an `Uint8Array`.
	 */
	function base58Decode(value, ipfsCompat) {
	  (0, _validate$5.base58Validate)(value, ipfsCompat);
	  return (0, _util$5.bufferToU8a)(_bs$1.bs58.decode(value.substr(ipfsCompat ? 1 : 0)));
	}

	var decode$4 = /*#__PURE__*/Object.defineProperty({
		base58Decode: base58Decode_1
	}, '__esModule', {value: true});

	const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';

	// For convenience, let people hash a string, not just a Uint8Array
	function normalizeInput (input) {
	  let ret;
	  if (input instanceof Uint8Array) {
	    ret = input;
	  } else if (input instanceof Buffer) {
	    ret = new Uint8Array(input);
	  } else if (typeof input === 'string') {
	    ret = new Uint8Array(Buffer.from(input, 'utf8'));
	  } else {
	    throw new Error(ERROR_MSG_INPUT)
	  }
	  return ret
	}

	// Converts a Uint8Array to a hexadecimal string
	// For example, toHex([255, 0, 255]) returns "ff00ff"
	function toHex$1 (bytes) {
	  return Array.prototype.map
	    .call(bytes, function (n) {
	      return (n < 16 ? '0' : '') + n.toString(16)
	    })
	    .join('')
	}

	// Converts any value in [0...2^32-1] to an 8-character hex string
	function uint32ToHex (val) {
	  return (0x100000000 + val).toString(16).substring(1)
	}

	// For debugging: prints out hash state in the same format as the RFC
	// sample computation exactly, so that you can diff
	function debugPrint (label, arr, size) {
	  let msg = '\n' + label + ' = ';
	  for (let i = 0; i < arr.length; i += 2) {
	    if (size === 32) {
	      msg += uint32ToHex(arr[i]).toUpperCase();
	      msg += ' ';
	      msg += uint32ToHex(arr[i + 1]).toUpperCase();
	    } else if (size === 64) {
	      msg += uint32ToHex(arr[i + 1]).toUpperCase();
	      msg += uint32ToHex(arr[i]).toUpperCase();
	    } else throw new Error('Invalid size ' + size)
	    if (i % 6 === 4) {
	      msg += '\n' + new Array(label.length + 4).join(' ');
	    } else if (i < arr.length - 2) {
	      msg += ' ';
	    }
	  }
	  console.log(msg);
	}

	// For performance testing: generates N bytes of input, hashes M times
	// Measures and prints MB/second hash performance each time
	function testSpeed (hashFn, N, M) {
	  let startMs = new Date().getTime();

	  const input = new Uint8Array(N);
	  for (let i = 0; i < N; i++) {
	    input[i] = i % 256;
	  }
	  const genMs = new Date().getTime();
	  console.log('Generated random input in ' + (genMs - startMs) + 'ms');
	  startMs = genMs;

	  for (let i = 0; i < M; i++) {
	    const hashHex = hashFn(input);
	    const hashMs = new Date().getTime();
	    const ms = hashMs - startMs;
	    startMs = hashMs;
	    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
	    console.log(
	      Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'
	    );
	  }
	}

	var util$b = {
	  normalizeInput: normalizeInput,
	  toHex: toHex$1,
	  debugPrint: debugPrint,
	  testSpeed: testSpeed
	};

	// Blake2B in pure Javascript
	// Adapted from the reference implementation in RFC7693
	// Ported to Javascript by DC - https://github.com/dcposch



	// 64-bit unsigned addition
	// Sets v[a,a+1] += v[b,b+1]
	// v should be a Uint32Array
	function ADD64AA (v, a, b) {
	  const o0 = v[a] + v[b];
	  let o1 = v[a + 1] + v[b + 1];
	  if (o0 >= 0x100000000) {
	    o1++;
	  }
	  v[a] = o0;
	  v[a + 1] = o1;
	}

	// 64-bit unsigned addition
	// Sets v[a,a+1] += b
	// b0 is the low 32 bits of b, b1 represents the high 32 bits
	function ADD64AC (v, a, b0, b1) {
	  let o0 = v[a] + b0;
	  if (b0 < 0) {
	    o0 += 0x100000000;
	  }
	  let o1 = v[a + 1] + b1;
	  if (o0 >= 0x100000000) {
	    o1++;
	  }
	  v[a] = o0;
	  v[a + 1] = o1;
	}

	// Little-endian byte access
	function B2B_GET32 (arr, i) {
	  return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)
	}

	// G Mixing function
	// The ROTRs are inlined for speed
	function B2B_G (a, b, c, d, ix, iy) {
	  const x0 = m$1[ix];
	  const x1 = m$1[ix + 1];
	  const y0 = m$1[iy];
	  const y1 = m$1[iy + 1];

	  ADD64AA(v$1, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
	  ADD64AC(v$1, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

	  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
	  let xor0 = v$1[d] ^ v$1[a];
	  let xor1 = v$1[d + 1] ^ v$1[a + 1];
	  v$1[d] = xor1;
	  v$1[d + 1] = xor0;

	  ADD64AA(v$1, c, d);

	  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
	  xor0 = v$1[b] ^ v$1[c];
	  xor1 = v$1[b + 1] ^ v$1[c + 1];
	  v$1[b] = (xor0 >>> 24) ^ (xor1 << 8);
	  v$1[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);

	  ADD64AA(v$1, a, b);
	  ADD64AC(v$1, a, y0, y1);

	  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
	  xor0 = v$1[d] ^ v$1[a];
	  xor1 = v$1[d + 1] ^ v$1[a + 1];
	  v$1[d] = (xor0 >>> 16) ^ (xor1 << 16);
	  v$1[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);

	  ADD64AA(v$1, c, d);

	  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
	  xor0 = v$1[b] ^ v$1[c];
	  xor1 = v$1[b + 1] ^ v$1[c + 1];
	  v$1[b] = (xor1 >>> 31) ^ (xor0 << 1);
	  v$1[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
	}

	// Initialization Vector
	const BLAKE2B_IV32 = new Uint32Array([
	  0xf3bcc908,
	  0x6a09e667,
	  0x84caa73b,
	  0xbb67ae85,
	  0xfe94f82b,
	  0x3c6ef372,
	  0x5f1d36f1,
	  0xa54ff53a,
	  0xade682d1,
	  0x510e527f,
	  0x2b3e6c1f,
	  0x9b05688c,
	  0xfb41bd6b,
	  0x1f83d9ab,
	  0x137e2179,
	  0x5be0cd19
	]);

	const SIGMA8 = [
	  0,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  7,
	  8,
	  9,
	  10,
	  11,
	  12,
	  13,
	  14,
	  15,
	  14,
	  10,
	  4,
	  8,
	  9,
	  15,
	  13,
	  6,
	  1,
	  12,
	  0,
	  2,
	  11,
	  7,
	  5,
	  3,
	  11,
	  8,
	  12,
	  0,
	  5,
	  2,
	  15,
	  13,
	  10,
	  14,
	  3,
	  6,
	  7,
	  1,
	  9,
	  4,
	  7,
	  9,
	  3,
	  1,
	  13,
	  12,
	  11,
	  14,
	  2,
	  6,
	  5,
	  10,
	  4,
	  0,
	  15,
	  8,
	  9,
	  0,
	  5,
	  7,
	  2,
	  4,
	  10,
	  15,
	  14,
	  1,
	  11,
	  12,
	  6,
	  8,
	  3,
	  13,
	  2,
	  12,
	  6,
	  10,
	  0,
	  11,
	  8,
	  3,
	  4,
	  13,
	  7,
	  5,
	  15,
	  14,
	  1,
	  9,
	  12,
	  5,
	  1,
	  15,
	  14,
	  13,
	  4,
	  10,
	  0,
	  7,
	  6,
	  3,
	  9,
	  2,
	  8,
	  11,
	  13,
	  11,
	  7,
	  14,
	  12,
	  1,
	  3,
	  9,
	  5,
	  0,
	  15,
	  4,
	  8,
	  6,
	  2,
	  10,
	  6,
	  15,
	  14,
	  9,
	  11,
	  3,
	  0,
	  8,
	  12,
	  2,
	  13,
	  7,
	  1,
	  4,
	  10,
	  5,
	  10,
	  2,
	  8,
	  4,
	  7,
	  6,
	  1,
	  5,
	  15,
	  11,
	  9,
	  14,
	  3,
	  12,
	  13,
	  0,
	  0,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  7,
	  8,
	  9,
	  10,
	  11,
	  12,
	  13,
	  14,
	  15,
	  14,
	  10,
	  4,
	  8,
	  9,
	  15,
	  13,
	  6,
	  1,
	  12,
	  0,
	  2,
	  11,
	  7,
	  5,
	  3
	];

	// These are offsets into a uint64 buffer.
	// Multiply them all by 2 to make them offsets into a uint32 buffer,
	// because this is Javascript and we don't have uint64s
	const SIGMA82 = new Uint8Array(
	  SIGMA8.map(function (x) {
	    return x * 2
	  })
	);

	// Compression function. 'last' flag indicates last block.
	// Note we're representing 16 uint64s as 32 uint32s
	const v$1 = new Uint32Array(32);
	const m$1 = new Uint32Array(32);
	function blake2bCompress (ctx, last) {
	  let i = 0;

	  // init work variables
	  for (i = 0; i < 16; i++) {
	    v$1[i] = ctx.h[i];
	    v$1[i + 16] = BLAKE2B_IV32[i];
	  }

	  // low 64 bits of offset
	  v$1[24] = v$1[24] ^ ctx.t;
	  v$1[25] = v$1[25] ^ (ctx.t / 0x100000000);
	  // high 64 bits not supported, offset may not be higher than 2**53-1

	  // last block flag set ?
	  if (last) {
	    v$1[28] = ~v$1[28];
	    v$1[29] = ~v$1[29];
	  }

	  // get little-endian words
	  for (i = 0; i < 32; i++) {
	    m$1[i] = B2B_GET32(ctx.b, 4 * i);
	  }

	  // twelve rounds of mixing
	  // uncomment the DebugPrint calls to log the computation
	  // and match the RFC sample documentation
	  // util.debugPrint('          m[16]', m, 64)
	  for (i = 0; i < 12; i++) {
	    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
	    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
	    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
	    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
	    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
	    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
	    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
	    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
	    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
	  }
	  // util.debugPrint('   (i=12) v[16]', v, 64)

	  for (i = 0; i < 16; i++) {
	    ctx.h[i] = ctx.h[i] ^ v$1[i] ^ v$1[i + 16];
	  }
	  // util.debugPrint('h[8]', ctx.h, 64)
	}

	// Creates a BLAKE2b hashing context
	// Requires an output length between 1 and 64 bytes
	// Takes an optional Uint8Array key
	function blake2bInit (outlen, key) {
	  if (outlen === 0 || outlen > 64) {
	    throw new Error('Illegal output length, expected 0 < length <= 64')
	  }
	  if (key && key.length > 64) {
	    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')
	  }

	  // state, 'param block'
	  const ctx = {
	    b: new Uint8Array(128),
	    h: new Uint32Array(16),
	    t: 0, // input count
	    c: 0, // pointer within buffer
	    outlen: outlen // output length in bytes
	  };

	  // initialize hash state
	  for (let i = 0; i < 16; i++) {
	    ctx.h[i] = BLAKE2B_IV32[i];
	  }
	  const keylen = key ? key.length : 0;
	  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

	  // key the hash, if applicable
	  if (key) {
	    blake2bUpdate(ctx, key);
	    // at the end
	    ctx.c = 128;
	  }

	  return ctx
	}

	// Updates a BLAKE2b streaming hash
	// Requires hash context and Uint8Array (byte array)
	function blake2bUpdate (ctx, input) {
	  for (let i = 0; i < input.length; i++) {
	    if (ctx.c === 128) {
	      // buffer full ?
	      ctx.t += ctx.c; // add counters
	      blake2bCompress(ctx, false); // compress (not last)
	      ctx.c = 0; // counter to zero
	    }
	    ctx.b[ctx.c++] = input[i];
	  }
	}

	// Completes a BLAKE2b streaming hash
	// Returns a Uint8Array containing the message digest
	function blake2bFinal (ctx) {
	  ctx.t += ctx.c; // mark last block offset

	  while (ctx.c < 128) {
	    // fill up with zeros
	    ctx.b[ctx.c++] = 0;
	  }
	  blake2bCompress(ctx, true); // final block flag = 1

	  // little endian convert and store
	  const out = new Uint8Array(ctx.outlen);
	  for (let i = 0; i < ctx.outlen; i++) {
	    out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
	  }
	  return out
	}

	// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
	//
	// Returns a n-byte Uint8Array
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer or Uint8Array
	// - key - optional key Uint8Array, up to 64 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2b (input, key, outlen) {
	  // preprocess inputs
	  outlen = outlen || 64;
	  input = util$b.normalizeInput(input);

	  // do the math
	  const ctx = blake2bInit(outlen, key);
	  blake2bUpdate(ctx, input);
	  return blake2bFinal(ctx)
	}

	// Computes the BLAKE2B hash of a string or byte array
	//
	// Returns an n-byte hash in hex, all lowercase
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 64 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2bHex (input, key, outlen) {
	  const output = blake2b(input, key, outlen);
	  return util$b.toHex(output)
	}

	var blake2b_1 = {
	  blake2b: blake2b,
	  blake2bHex: blake2bHex,
	  blake2bInit: blake2bInit,
	  blake2bUpdate: blake2bUpdate,
	  blake2bFinal: blake2bFinal
	};

	// BLAKE2s hash function in pure Javascript
	// Adapted from the reference implementation in RFC7693
	// Ported to Javascript by DC - https://github.com/dcposch



	// Little-endian byte access.
	// Expects a Uint8Array and an index
	// Returns the little-endian uint32 at v[i..i+3]
	function B2S_GET32 (v, i) {
	  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)
	}

	// Mixing function G.
	function B2S_G (a, b, c, d, x, y) {
	  v[a] = v[a] + v[b] + x;
	  v[d] = ROTR32(v[d] ^ v[a], 16);
	  v[c] = v[c] + v[d];
	  v[b] = ROTR32(v[b] ^ v[c], 12);
	  v[a] = v[a] + v[b] + y;
	  v[d] = ROTR32(v[d] ^ v[a], 8);
	  v[c] = v[c] + v[d];
	  v[b] = ROTR32(v[b] ^ v[c], 7);
	}

	// 32-bit right rotation
	// x should be a uint32
	// y must be between 1 and 31, inclusive
	function ROTR32 (x, y) {
	  return (x >>> y) ^ (x << (32 - y))
	}

	// Initialization Vector.
	const BLAKE2S_IV = new Uint32Array([
	  0x6a09e667,
	  0xbb67ae85,
	  0x3c6ef372,
	  0xa54ff53a,
	  0x510e527f,
	  0x9b05688c,
	  0x1f83d9ab,
	  0x5be0cd19
	]);

	const SIGMA = new Uint8Array([
	  0,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  7,
	  8,
	  9,
	  10,
	  11,
	  12,
	  13,
	  14,
	  15,
	  14,
	  10,
	  4,
	  8,
	  9,
	  15,
	  13,
	  6,
	  1,
	  12,
	  0,
	  2,
	  11,
	  7,
	  5,
	  3,
	  11,
	  8,
	  12,
	  0,
	  5,
	  2,
	  15,
	  13,
	  10,
	  14,
	  3,
	  6,
	  7,
	  1,
	  9,
	  4,
	  7,
	  9,
	  3,
	  1,
	  13,
	  12,
	  11,
	  14,
	  2,
	  6,
	  5,
	  10,
	  4,
	  0,
	  15,
	  8,
	  9,
	  0,
	  5,
	  7,
	  2,
	  4,
	  10,
	  15,
	  14,
	  1,
	  11,
	  12,
	  6,
	  8,
	  3,
	  13,
	  2,
	  12,
	  6,
	  10,
	  0,
	  11,
	  8,
	  3,
	  4,
	  13,
	  7,
	  5,
	  15,
	  14,
	  1,
	  9,
	  12,
	  5,
	  1,
	  15,
	  14,
	  13,
	  4,
	  10,
	  0,
	  7,
	  6,
	  3,
	  9,
	  2,
	  8,
	  11,
	  13,
	  11,
	  7,
	  14,
	  12,
	  1,
	  3,
	  9,
	  5,
	  0,
	  15,
	  4,
	  8,
	  6,
	  2,
	  10,
	  6,
	  15,
	  14,
	  9,
	  11,
	  3,
	  0,
	  8,
	  12,
	  2,
	  13,
	  7,
	  1,
	  4,
	  10,
	  5,
	  10,
	  2,
	  8,
	  4,
	  7,
	  6,
	  1,
	  5,
	  15,
	  11,
	  9,
	  14,
	  3,
	  12,
	  13,
	  0
	]);

	// Compression function. "last" flag indicates last block
	const v = new Uint32Array(16);
	const m = new Uint32Array(16);
	function blake2sCompress (ctx, last) {
	  let i = 0;
	  for (i = 0; i < 8; i++) {
	    // init work variables
	    v[i] = ctx.h[i];
	    v[i + 8] = BLAKE2S_IV[i];
	  }

	  v[12] ^= ctx.t; // low 32 bits of offset
	  v[13] ^= ctx.t / 0x100000000; // high 32 bits
	  if (last) {
	    // last block flag set ?
	    v[14] = ~v[14];
	  }

	  for (i = 0; i < 16; i++) {
	    // get little-endian words
	    m[i] = B2S_GET32(ctx.b, 4 * i);
	  }

	  // ten rounds of mixing
	  // uncomment the DebugPrint calls to log the computation
	  // and match the RFC sample documentation
	  // util.debugPrint('          m[16]', m, 32)
	  for (i = 0; i < 10; i++) {
	    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
	    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
	    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
	    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
	    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
	    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
	    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
	    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
	    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
	  }
	  // util.debugPrint('   (i=10) v[16]', v, 32)

	  for (i = 0; i < 8; i++) {
	    ctx.h[i] ^= v[i] ^ v[i + 8];
	  }
	  // util.debugPrint('h[8]', ctx.h, 32)
	}

	// Creates a BLAKE2s hashing context
	// Requires an output length between 1 and 32 bytes
	// Takes an optional Uint8Array key
	function blake2sInit (outlen, key) {
	  if (!(outlen > 0 && outlen <= 32)) {
	    throw new Error('Incorrect output length, should be in [1, 32]')
	  }
	  const keylen = key ? key.length : 0;
	  if (key && !(keylen > 0 && keylen <= 32)) {
	    throw new Error('Incorrect key length, should be in [1, 32]')
	  }

	  const ctx = {
	    h: new Uint32Array(BLAKE2S_IV), // hash state
	    b: new Uint8Array(64), // input block
	    c: 0, // pointer within block
	    t: 0, // input count
	    outlen: outlen // output length in bytes
	  };
	  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

	  if (keylen > 0) {
	    blake2sUpdate(ctx, key);
	    ctx.c = 64; // at the end
	  }

	  return ctx
	}

	// Updates a BLAKE2s streaming hash
	// Requires hash context and Uint8Array (byte array)
	function blake2sUpdate (ctx, input) {
	  for (let i = 0; i < input.length; i++) {
	    if (ctx.c === 64) {
	      // buffer full ?
	      ctx.t += ctx.c; // add counters
	      blake2sCompress(ctx, false); // compress (not last)
	      ctx.c = 0; // counter to zero
	    }
	    ctx.b[ctx.c++] = input[i];
	  }
	}

	// Completes a BLAKE2s streaming hash
	// Returns a Uint8Array containing the message digest
	function blake2sFinal (ctx) {
	  ctx.t += ctx.c; // mark last block offset
	  while (ctx.c < 64) {
	    // fill up with zeros
	    ctx.b[ctx.c++] = 0;
	  }
	  blake2sCompress(ctx, true); // final block flag = 1

	  // little endian convert and store
	  const out = new Uint8Array(ctx.outlen);
	  for (let i = 0; i < ctx.outlen; i++) {
	    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xff;
	  }
	  return out
	}

	// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
	//
	// Returns a n-byte Uint8Array
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 32 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2s (input, key, outlen) {
	  // preprocess inputs
	  outlen = outlen || 32;
	  input = util$b.normalizeInput(input);

	  // do the math
	  const ctx = blake2sInit(outlen, key);
	  blake2sUpdate(ctx, input);
	  return blake2sFinal(ctx)
	}

	// Computes the BLAKE2S hash of a string or byte array
	//
	// Returns an n-byte hash in hex, all lowercase
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 32 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2sHex (input, key, outlen) {
	  const output = blake2s(input, key, outlen);
	  return util$b.toHex(output)
	}

	var blake2s_1 = {
	  blake2s: blake2s,
	  blake2sHex: blake2sHex,
	  blake2sInit: blake2sInit,
	  blake2sUpdate: blake2sUpdate,
	  blake2sFinal: blake2sFinal
	};

	var blakejs = {
	  blake2b: blake2b_1.blake2b,
	  blake2bHex: blake2b_1.blake2bHex,
	  blake2bInit: blake2b_1.blake2bInit,
	  blake2bUpdate: blake2b_1.blake2bUpdate,
	  blake2bFinal: blake2b_1.blake2bFinal,
	  blake2s: blake2s_1.blake2s,
	  blake2sHex: blake2s_1.blake2sHex,
	  blake2sInit: blake2s_1.blake2sInit,
	  blake2sUpdate: blake2s_1.blake2sUpdate,
	  blake2sFinal: blake2s_1.blake2sFinal
	};

	var blake2AsU8a_1 = blake2AsU8a;

	var _blakejs = interopRequireDefault(blakejs);





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name blake2AsU8a
	 * @summary Creates a blake2b u8a from the input.
	 * @description
	 * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { blake2AsU8a } from '@polkadot/util-crypto';
	 *
	 * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa53, 0xf98, 0x1c, 0x4d, 0x0d]
	 * ```
	 */
	function blake2AsU8a(data, bitLength = 256, key, onlyJs = false) {
	  const byteLength = Math.ceil(bitLength / 8);
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.blake2b)((0, _util$5.u8aToU8a)(data), (0, _util$5.u8aToU8a)(key), byteLength) : _blakejs.default.blake2b((0, _util$5.u8aToU8a)(data), key || undefined, byteLength);
	}

	var asU8a$4 = /*#__PURE__*/Object.defineProperty({
		blake2AsU8a: blake2AsU8a_1
	}, '__esModule', {value: true});

	var _asU8a$4 = asU8a$4;

	var sshash_2 = sshash;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const SS58_PREFIX = (0, _util$5.stringToU8a)('SS58PRE');

	function sshash(key) {
	  return (0, _asU8a$4.blake2AsU8a)((0, _util$5.u8aConcat)(SS58_PREFIX, key), 512);
	}

	var sshash_1 = /*#__PURE__*/Object.defineProperty({
		sshash: sshash_2
	}, '__esModule', {value: true});

	var _sshash = sshash_1;

	var checkAddressChecksum_1 = checkAddressChecksum;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function checkAddressChecksum(decoded) {
	  const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;
	  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix

	  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
	  const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks

	  const hash = (0, _sshash.sshash)(decoded.subarray(0, length));
	  const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
	  return [isValid, length, ss58Length, ss58Decoded];
	}

	var checksum = /*#__PURE__*/Object.defineProperty({
		checkAddressChecksum: checkAddressChecksum_1
	}, '__esModule', {value: true});

	var defaults$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.knownTestnet = exports.knownLedger = exports.knownIcon = exports.knownGenesis = void 0;
	// Copyright 2017-2021 @polkadot/networks authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// NOTE: In the case where the network was hard-spooned and multiple genesisHashes
	// are provided, it needs to be in reverse order, i.e. most-recent first, oldest
	// last. This make lookups for the current a simple genesisHash[0]
	// (See Kusama as an example)
	const knownGenesis = {
	  bifrost: ['0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'],
	  centrifuge: ['0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'],
	  'dock-mainnet': ['0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'],
	  edgeware: ['0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'],
	  equilibrium: ['0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'],
	  hydradx: ['0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc', // Snakenet Gen3-1
	  '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9', // Snakenet Gen3
	  '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047', // Snakenet Gen2
	  '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
	  ],
	  karura: ['0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'],
	  kulupu: ['0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'],
	  kusama: ['0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', // Kusama CC3,
	  '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636', // Kusama CC2
	  '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
	  ],
	  'nodle-chain': ['0xa3d114c2b8d0627c1aa9b134eafcf7d05ca561fdc19fb388bb9457f81809fb23'],
	  plasm: ['0x3e86364d4b4894021cb2a0390bcf2feb5517d5292f2de2bb9404227e908b0b8b'],
	  polkadot: ['0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'],
	  polymesh: ['0x9deeb940c92ae02111c3bd5baca89970384f4c9849f02a1b2e53e66414d30f9f'],
	  stafi: ['0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'],
	  statemine: ['0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'],
	  subsocial: ['0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8']
	}; // these are icon overrides

	exports.knownGenesis = knownGenesis;
	const knownIcon = {
	  centrifuge: 'polkadot',
	  kusama: 'polkadot',
	  polkadot: 'polkadot',
	  statemine: 'polkadot',
	  statemint: 'polkadot',
	  westmint: 'polkadot'
	}; // These match up with the keys of the ledgerApps object in the @polkadot/hw-ledger/defaults.ts
	// and maps to the known slip44 (minus the `0x8` hard derivation flag)
	// NOTE: Any network here needs to have a genesisHash attached in the config above

	exports.knownIcon = knownIcon;
	const knownLedger = {
	  centrifuge: 0x000002eb,
	  'dock-mainnet': 0x00000252,
	  edgeware: 0x0000020b,
	  equilibrium: 0x05f5e0fd,
	  kusama: 0x000001b2,
	  'nodle-chain': 0x000003eb,
	  polkadot: 0x00000162,
	  polymesh: 0x00000253,
	  statemine: 0x000001b2 // common-good on Kusama, shares derivation

	}; // testnets should not allow selection

	exports.knownLedger = knownLedger;
	const knownTestnet = {
	  'dock-testnet': true,
	  jupiter: true,
	  'mathchain-testnet': true,
	  'zero-alphaville': true
	};
	exports.knownTestnet = knownTestnet;
	});

	var substrate = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.knownSubstrate = void 0;
	// Copyright 2017-2021 @polkadot/networks authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Auto-generated by yarn networks:sync (via scripts/fromSubstrate.mjs)
	//
	// Do not edit, rather
	//   - make a PR to the upstream registry as per https://raw.githubusercontent.com/paritytech/substrate/master/ss58-registry.json
	//   - yarn networks:sync
	//
	const knownSubstrate = [{
	  decimals: [10],
	  displayName: 'Polkadot Relay Chain',
	  network: 'polkadot',
	  prefix: 0,
	  standardAccount: '*25519',
	  symbols: ['DOT'],
	  website: 'https://polkadot.network'
	}, {
	  decimals: null,
	  displayName: 'Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.',
	  network: null,
	  prefix: 1,
	  standardAccount: null,
	  symbols: null,
	  website: null
	}, {
	  decimals: [12],
	  displayName: 'Kusama Relay Chain',
	  network: 'kusama',
	  prefix: 2,
	  standardAccount: '*25519',
	  symbols: ['KSM'],
	  website: 'https://kusama.network'
	}, {
	  decimals: null,
	  displayName: 'Bare 32-bit Ed25519 public key.',
	  network: null,
	  prefix: 3,
	  standardAccount: null,
	  symbols: null,
	  website: null
	}, {
	  decimals: null,
	  displayName: 'Katal Chain',
	  network: 'katalchain',
	  prefix: 4,
	  standardAccount: '*25519',
	  symbols: null,
	  website: null
	}, {
	  decimals: [15],
	  displayName: 'Plasm Network',
	  network: 'plasm',
	  prefix: 5,
	  standardAccount: '*25519',
	  symbols: ['PLM'],
	  website: 'https://plasmnet.io'
	}, {
	  decimals: [12],
	  displayName: 'Bifrost',
	  network: 'bifrost',
	  prefix: 6,
	  standardAccount: '*25519',
	  symbols: ['BNC'],
	  website: 'https://bifrost.finance/'
	}, {
	  decimals: [18],
	  displayName: 'Edgeware',
	  network: 'edgeware',
	  prefix: 7,
	  standardAccount: '*25519',
	  symbols: ['EDG'],
	  website: 'https://edgewa.re'
	}, {
	  decimals: [12],
	  displayName: 'Karura',
	  network: 'karura',
	  prefix: 8,
	  standardAccount: '*25519',
	  symbols: ['KAR'],
	  website: 'https://karura.network/'
	}, {
	  decimals: [18],
	  displayName: 'Laminar Reynolds Canary',
	  network: 'reynolds',
	  prefix: 9,
	  standardAccount: '*25519',
	  symbols: ['REY'],
	  website: 'http://laminar.network/'
	}, {
	  decimals: [12],
	  displayName: 'Acala',
	  network: 'acala',
	  prefix: 10,
	  standardAccount: '*25519',
	  symbols: ['ACA'],
	  website: 'https://acala.network/'
	}, {
	  decimals: [18],
	  displayName: 'Laminar',
	  network: 'laminar',
	  prefix: 11,
	  standardAccount: '*25519',
	  symbols: ['LAMI'],
	  website: 'http://laminar.network/'
	}, {
	  decimals: [6],
	  displayName: 'Polymesh',
	  network: 'polymesh',
	  prefix: 12,
	  standardAccount: '*25519',
	  symbols: ['POLYX'],
	  website: 'https://polymath.network/'
	}, {
	  decimals: [12],
	  displayName: 'Integritee',
	  network: 'integritee',
	  prefix: 13,
	  standardAccount: '*25519',
	  symbols: ['TEER'],
	  website: 'https://integritee.network'
	}, {
	  decimals: [0],
	  displayName: 'Totem',
	  network: 'totem',
	  prefix: 14,
	  standardAccount: '*25519',
	  symbols: ['XTX'],
	  website: 'https://totemaccounting.com'
	}, {
	  decimals: [12],
	  displayName: 'Synesthesia',
	  network: 'synesthesia',
	  prefix: 15,
	  standardAccount: '*25519',
	  symbols: ['SYN'],
	  website: 'https://synesthesia.network/'
	}, {
	  decimals: [12],
	  displayName: 'Kulupu',
	  network: 'kulupu',
	  prefix: 16,
	  standardAccount: '*25519',
	  symbols: ['KLP'],
	  website: 'https://kulupu.network/'
	}, {
	  decimals: null,
	  displayName: 'Dark Mainnet',
	  network: 'dark',
	  prefix: 17,
	  standardAccount: '*25519',
	  symbols: null,
	  website: null
	}, {
	  decimals: [9, 9],
	  displayName: 'Darwinia Network',
	  network: 'darwinia',
	  prefix: 18,
	  standardAccount: '*25519',
	  symbols: ['RING', 'KTON'],
	  website: 'https://darwinia.network/'
	}, {
	  decimals: [12],
	  displayName: 'GeekCash',
	  network: 'geek',
	  prefix: 19,
	  standardAccount: '*25519',
	  symbols: ['GEEK'],
	  website: 'https://geekcash.org'
	}, {
	  decimals: [12],
	  displayName: 'Stafi',
	  network: 'stafi',
	  prefix: 20,
	  standardAccount: '*25519',
	  symbols: ['FIS'],
	  website: 'https://stafi.io'
	}, {
	  decimals: [6],
	  displayName: 'Dock Testnet',
	  network: 'dock-testnet',
	  prefix: 21,
	  standardAccount: '*25519',
	  symbols: ['DCK'],
	  website: 'https://dock.io'
	}, {
	  decimals: [6],
	  displayName: 'Dock Mainnet',
	  network: 'dock-mainnet',
	  prefix: 22,
	  standardAccount: '*25519',
	  symbols: ['DCK'],
	  website: 'https://dock.io'
	}, {
	  decimals: null,
	  displayName: 'ShiftNrg',
	  network: 'shift',
	  prefix: 23,
	  standardAccount: '*25519',
	  symbols: null,
	  website: null
	}, {
	  decimals: [18],
	  displayName: 'ZERO',
	  network: 'zero',
	  prefix: 24,
	  standardAccount: '*25519',
	  symbols: ['PLAY'],
	  website: 'https://zero.io'
	}, {
	  decimals: [18],
	  displayName: 'ZERO Alphaville',
	  network: 'zero-alphaville',
	  prefix: 25,
	  standardAccount: '*25519',
	  symbols: ['PLAY'],
	  website: 'https://zero.io'
	}, {
	  decimals: [10],
	  displayName: 'Jupiter',
	  network: 'jupiter',
	  prefix: 26,
	  standardAccount: '*25519',
	  symbols: ['jDOT'],
	  website: 'https://jupiter.patract.io'
	}, {
	  decimals: null,
	  displayName: 'Subsocial',
	  network: 'subsocial',
	  prefix: 28,
	  standardAccount: '*25519',
	  symbols: null,
	  website: null
	}, {
	  decimals: [18],
	  displayName: 'Dhiway CORD Network',
	  network: 'cord',
	  prefix: 29,
	  standardAccount: '*25519',
	  symbols: ['DCU'],
	  website: 'https://dhiway.com/'
	}, {
	  decimals: [12],
	  displayName: 'Phala Network',
	  network: 'phala',
	  prefix: 30,
	  standardAccount: '*25519',
	  symbols: ['PHA'],
	  website: 'https://phala.network'
	}, {
	  decimals: [12],
	  displayName: 'Litentry Network',
	  network: 'litentry',
	  prefix: 31,
	  standardAccount: '*25519',
	  symbols: ['LIT'],
	  website: 'https://litentry.com/'
	}, {
	  decimals: [9],
	  displayName: 'Robonomics',
	  network: 'robonomics',
	  prefix: 32,
	  standardAccount: '*25519',
	  symbols: ['XRT'],
	  website: 'https://robonomics.network'
	}, {
	  decimals: null,
	  displayName: 'DataHighway',
	  network: 'datahighway',
	  prefix: 33,
	  standardAccount: '*25519',
	  symbols: null,
	  website: null
	}, {
	  decimals: [12],
	  displayName: 'Ares Protocol',
	  network: 'ares',
	  prefix: 34,
	  standardAccount: '*25519',
	  symbols: ['ARES'],
	  website: 'https://www.aresprotocol.com/'
	}, {
	  decimals: [15],
	  displayName: 'Valiu Liquidity Network',
	  network: 'vln',
	  prefix: 35,
	  standardAccount: '*25519',
	  symbols: ['USDv'],
	  website: 'https://valiu.com/'
	}, {
	  decimals: [18],
	  displayName: 'Centrifuge Chain',
	  network: 'centrifuge',
	  prefix: 36,
	  standardAccount: '*25519',
	  symbols: ['CFG'],
	  website: 'https://centrifuge.io/'
	}, {
	  decimals: [18],
	  displayName: 'Nodle Chain',
	  network: 'nodle',
	  prefix: 37,
	  standardAccount: '*25519',
	  symbols: ['NODL'],
	  website: 'https://nodle.io/'
	}, {
	  decimals: [18],
	  displayName: 'KILT Chain',
	  network: 'kilt',
	  prefix: 38,
	  standardAccount: '*25519',
	  symbols: ['KILT'],
	  website: 'https://kilt.io/'
	}, {
	  decimals: [18],
	  displayName: 'MathChain mainnet',
	  network: 'mathchain',
	  prefix: 39,
	  standardAccount: '*25519',
	  symbols: ['MATH'],
	  website: 'https://mathwallet.org'
	}, {
	  decimals: [18],
	  displayName: 'MathChain testnet',
	  network: 'mathchain-testnet',
	  prefix: 40,
	  standardAccount: '*25519',
	  symbols: ['MATH'],
	  website: 'https://mathwallet.org'
	}, {
	  decimals: null,
	  displayName: 'Polimec Chain',
	  network: 'poli',
	  prefix: 41,
	  standardAccount: '*25519',
	  symbols: null,
	  website: 'https://polimec.io/'
	}, {
	  decimals: null,
	  displayName: 'Substrate',
	  network: 'substrate',
	  prefix: 42,
	  standardAccount: '*25519',
	  symbols: null,
	  website: 'https://substrate.dev/'
	}, {
	  decimals: null,
	  displayName: 'Bare 32-bit ECDSA SECP-256k1 public key.',
	  network: null,
	  prefix: 43,
	  standardAccount: null,
	  symbols: null,
	  website: null
	}, {
	  decimals: [8],
	  displayName: 'ChainX',
	  network: 'chainx',
	  prefix: 44,
	  standardAccount: '*25519',
	  symbols: ['PCX'],
	  website: 'https://chainx.org/'
	}, {
	  decimals: [12, 12],
	  displayName: 'UniArts Network',
	  network: 'uniarts',
	  prefix: 45,
	  standardAccount: '*25519',
	  symbols: ['UART', 'UINK'],
	  website: 'https://uniarts.me'
	}, {
	  decimals: null,
	  displayName: 'This prefix is reserved.',
	  network: 'reserved46',
	  prefix: 46,
	  standardAccount: null,
	  symbols: null,
	  website: null
	}, {
	  decimals: null,
	  displayName: 'This prefix is reserved.',
	  network: 'reserved47',
	  prefix: 47,
	  standardAccount: null,
	  symbols: null,
	  website: null
	}, {
	  decimals: [12],
	  displayName: 'Neatcoin Mainnet',
	  network: 'neatcoin',
	  prefix: 48,
	  standardAccount: '*25519',
	  symbols: ['NEAT'],
	  website: 'https://neatcoin.org'
	}, {
	  decimals: [12],
	  displayName: 'HydraDX',
	  network: 'hydradx',
	  prefix: 63,
	  standardAccount: '*25519',
	  symbols: ['HDX'],
	  website: 'https://hydradx.io'
	}, {
	  decimals: [18],
	  displayName: 'AvN Mainnet',
	  network: 'aventus',
	  prefix: 65,
	  standardAccount: '*25519',
	  symbols: ['AVT'],
	  website: 'https://aventus.io'
	}, {
	  decimals: [12],
	  displayName: 'Crust Network',
	  network: 'crust',
	  prefix: 66,
	  standardAccount: '*25519',
	  symbols: ['CRU'],
	  website: 'https://crust.network'
	}, {
	  decimals: [0, 9, 9, 9, 9, 9, 9, 9],
	  displayName: 'Equilibrium Network',
	  network: 'equilibrium',
	  prefix: 67,
	  standardAccount: '*25519',
	  symbols: ['Unknown', 'USD', 'EQ', 'ETH', 'BTC', 'EOS', 'DOT', 'CRV'],
	  website: 'https://equilibrium.io'
	}, {
	  decimals: [18],
	  displayName: 'SORA Network',
	  network: 'sora',
	  prefix: 69,
	  standardAccount: '*25519',
	  symbols: ['XOR'],
	  website: 'https://sora.org'
	}, {
	  decimals: [10],
	  displayName: 'Zeitgeist',
	  network: 'zeitgeist',
	  prefix: 73,
	  standardAccount: '*25519',
	  symbols: ['ZTG'],
	  website: 'https://zeitgeist.pm'
	}, {
	  decimals: [12],
	  displayName: 'Manta network',
	  network: 'manta',
	  prefix: 77,
	  standardAccount: '*25519',
	  symbols: ['MA'],
	  website: 'https://manta.network'
	}, {
	  decimals: [12],
	  displayName: 'Calamari: Manta Canary Network',
	  network: 'calamari',
	  prefix: 78,
	  standardAccount: '*25519',
	  symbols: ['KMA'],
	  website: 'https://manta.network'
	}, {
	  decimals: [18],
	  displayName: 'PolkaSmith Canary Network',
	  network: 'polkasmith',
	  prefix: 98,
	  standardAccount: '*25519',
	  symbols: ['PKS'],
	  website: 'https://polkafoundry.com'
	}, {
	  decimals: [18],
	  displayName: 'PolkaFoundry Network',
	  network: 'polkafoundry',
	  prefix: 99,
	  standardAccount: '*25519',
	  symbols: ['PKF'],
	  website: 'https://polkafoundry.com'
	}, {
	  decimals: [18],
	  displayName: 'OriginTrail Parachain',
	  network: 'origintrail-parachain',
	  prefix: 101,
	  standardAccount: 'secp256k1',
	  symbols: ['TRAC'],
	  website: 'https://origintrail.io'
	}, {
	  decimals: [12],
	  displayName: 'Heiko',
	  network: 'heiko',
	  prefix: 110,
	  standardAccount: '*25519',
	  symbols: ['HKO'],
	  website: 'https://parallel.fi/'
	}, {
	  decimals: null,
	  displayName: 'Integritee Incognito',
	  network: 'integritee-incognito',
	  prefix: 113,
	  standardAccount: '*25519',
	  symbols: null,
	  website: 'https://integritee.network'
	}, {
	  decimals: [18],
	  displayName: 'Altair',
	  network: 'altair',
	  prefix: 136,
	  standardAccount: '*25519',
	  symbols: ['AIR'],
	  website: 'https://centrifuge.io/'
	}, {
	  decimals: [12],
	  displayName: 'Parallel',
	  network: 'parallel',
	  prefix: 172,
	  standardAccount: '*25519',
	  symbols: ['PARA'],
	  website: 'https://parallel.fi/'
	}, {
	  decimals: [18],
	  displayName: 'Social Network',
	  network: 'social-network',
	  prefix: 252,
	  standardAccount: '*25519',
	  symbols: ['NET'],
	  website: 'https://social.network'
	}, {
	  decimals: [18],
	  displayName: 'Moonbeam',
	  network: 'moonbeam',
	  prefix: 1284,
	  standardAccount: 'secp256k1',
	  symbols: ['GLMR'],
	  website: 'https://moonbeam.network'
	}, {
	  decimals: [18],
	  displayName: 'Moonriver',
	  network: 'moonriver',
	  prefix: 1285,
	  standardAccount: 'secp256k1',
	  symbols: ['MOVR'],
	  website: 'https://moonbeam.network'
	}, {
	  decimals: [12],
	  displayName: 'Basilisk',
	  network: 'basilisk',
	  prefix: 10041,
	  standardAccount: '*25519',
	  symbols: ['BSX'],
	  website: 'https://bsx.fi'
	}];
	exports.knownSubstrate = knownSubstrate;
	});

	var _defaults$4 = defaults$4;

	var _substrate$2 = substrate;

	var interfaces$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.selectableNetworks = exports.availableNetworks = exports.allNetworks = void 0;





	// Copyright 2017-2021 @polkadot/networks authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// These are known prefixes that are not sorted
	const UNSORTED = [0, 2, 42];

	const allNetworks = _substrate$2.knownSubstrate.map(o => {
	  const network = o.network || '';
	  const n = o;
	  n.slip44 = _defaults$4.knownLedger[network];
	  n.hasLedgerSupport = !!n.slip44;
	  n.genesisHash = _defaults$4.knownGenesis[network] || [];
	  n.icon = _defaults$4.knownIcon[network] || 'substrate';
	  n.isIgnored = !network || !!_defaults$4.knownTestnet[network] || network.startsWith('reserved');
	  return n;
	}); // The list of available/claimed prefixes
	//   - no testnets
	//   - we only include those where we have a standardAccount
	//   - sort by name, however we keep 0, 2, 42 first in the list


	exports.allNetworks = allNetworks;
	const availableNetworks = allNetworks.filter(n => !n.isIgnored && !!n.network).sort((a, b) => UNSORTED.includes(a.prefix) === UNSORTED.includes(b.prefix) ? 0 : UNSORTED.includes(a.prefix) ? -1 : UNSORTED.includes(b.prefix) ? 1 : a.displayName.localeCompare(b.displayName)); // A filtered list of those chains we have details about (genesisHashes)

	exports.availableNetworks = availableNetworks;
	const selectableNetworks = availableNetworks.filter(n => n.genesisHash.length || n.prefix === 42);
	exports.selectableNetworks = selectableNetworks;
	});

	var _interfaces$1 = interfaces$1;

	var networks$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_interfaces$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _interfaces$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _interfaces$1[key];
	    }
	  });
	});
	});

	var _networks$1 = networks$1;

	var defaults_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.defaults = void 0;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const defaults = {
	  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
	  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
	  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
	  allowedPrefix: _networks$1.availableNetworks.map(({
	    prefix
	  }) => prefix),
	  prefix: 42
	};
	exports.defaults = defaults;
	});

	var _decode$4 = decode$4;

	var _checksum = checksum;

	var _defaults$3 = defaults_1;

	var decodeAddress_1 = decodeAddress;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6
	function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
	  (0, _util$5.assert)(encoded, 'Invalid empty address passed');

	  if ((0, _util$5.isU8a)(encoded) || (0, _util$5.isHex)(encoded)) {
	    return (0, _util$5.u8aToU8a)(encoded);
	  }

	  try {
	    const decoded = (0, _decode$4.base58Decode)(encoded);
	    (0, _util$5.assert)(_defaults$3.defaults.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');
	    const [isValid, endPos, ss58Length, ss58Decoded] = (0, _checksum.checkAddressChecksum)(decoded);
	    (0, _util$5.assert)(ignoreChecksum || isValid, 'Invalid decoded address checksum');
	    (0, _util$5.assert)([-1, ss58Decoded].includes(ss58Format), () => `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
	    return decoded.slice(ss58Length, endPos);
	  } catch (error) {
	    throw new Error(`Decoding ${encoded}: ${error.message}`);
	  }
	}

	var decode$3 = /*#__PURE__*/Object.defineProperty({
		decodeAddress: decodeAddress_1
	}, '__esModule', {value: true});

	var _decode$3 = decode$3;

	var addressToEvm_2 = addressToEvm;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name addressToEvm
	 * @summary Converts an SS58 address to its corresponding EVM address.
	 */
	function addressToEvm(address, ignoreChecksum) {
	  const decoded = (0, _decode$3.decodeAddress)(address, ignoreChecksum);
	  return decoded.subarray(0, 20);
	}

	var addressToEvm_1 = /*#__PURE__*/Object.defineProperty({
		addressToEvm: addressToEvm_2
	}, '__esModule', {value: true});

	var checkAddress_1 = checkAddress;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name checkAddress
	 * @summary Validates an ss58 address.
	 * @description
	 * From the provided input, validate that the address is a valid input.
	 */
	function checkAddress(address, prefix) {
	  let decoded;

	  try {
	    decoded = (0, _decode$4.base58Decode)(address);
	  } catch (error) {
	    return [false, error.message];
	  }

	  const [isValid,,, ss58Decoded] = (0, _checksum.checkAddressChecksum)(decoded);

	  if (ss58Decoded !== prefix) {
	    return [false, `Prefix mismatch, expected ${prefix}, found ${ss58Decoded}`];
	  } else if (!_defaults$3.defaults.allowedEncodedLengths.includes(decoded.length)) {
	    return [false, 'Invalid decoded address length'];
	  }

	  return [isValid, isValid ? null : 'Invalid decoded address checksum'];
	}

	var check = /*#__PURE__*/Object.defineProperty({
		checkAddress: checkAddress_1
	}, '__esModule', {value: true});

	var createKeyMulti_1 = createKeyMulti;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const PREFIX$1 = (0, _util$5.stringToU8a)('modlpy/utilisuba');

	function createKeyMulti(who, threshold) {
	  return (0, _asU8a$4.blake2AsU8a)((0, _util$5.u8aConcat)(PREFIX$1, (0, _util$5.compactToU8a)(who.length), ...(0, _util$5.u8aSorted)(who.map(who => (0, _decode$3.decodeAddress)(who))), (0, _util$5.bnToU8a)(threshold, {
	    bitLength: 16,
	    isLe: true
	  })));
	}

	var keyMulti = /*#__PURE__*/Object.defineProperty({
		createKeyMulti: createKeyMulti_1
	}, '__esModule', {value: true});

	var createKeyDerived_1 = createKeyDerived;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const PREFIX = (0, _util$5.stringToU8a)('modlpy/utilisuba');

	function createKeyDerived(who, index) {
	  return (0, _asU8a$4.blake2AsU8a)((0, _util$5.u8aConcat)(PREFIX, (0, _decode$3.decodeAddress)(who), (0, _util$5.bnToU8a)(index, {
	    bitLength: 16,
	    isLe: true
	  })));
	}

	var keyDerived = /*#__PURE__*/Object.defineProperty({
		createKeyDerived: createKeyDerived_1
	}, '__esModule', {value: true});

	var DeriveJunction_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DeriveJunction = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const RE_NUMBER = /^\d+$/;
	const JUNCTION_ID_LEN = 32;
	const BN_OPTIONS = {
	  bitLength: 256,
	  isLe: true
	};

	var _chainCode = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("chainCode");

	var _isHard = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isHard");

	class DeriveJunction {
	  constructor() {
	    Object.defineProperty(this, _chainCode, {
	      writable: true,
	      value: new Uint8Array(32)
	    });
	    Object.defineProperty(this, _isHard, {
	      writable: true,
	      value: false
	    });
	  }

	  static from(value) {
	    const result = new DeriveJunction();
	    const [code, isHard] = value.startsWith('/') ? [value.substr(1), true] : [value, false];
	    result.soft(RE_NUMBER.test(code) ? parseInt(code, 10) : code);
	    return isHard ? result.harden() : result;
	  }

	  get chainCode() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _chainCode)[_chainCode];
	  }

	  get isHard() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard];
	  }

	  get isSoft() {
	    return !(0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard];
	  }

	  hard(value) {
	    return this.soft(value).harden();
	  }

	  harden() {
	    (0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard] = true;
	    return this;
	  }

	  soft(value) {
	    if ((0, _util$5.isNumber)(value) || (0, _util$5.isBn)(value) || (0, _util$5.isBigInt)(value)) {
	      return this.soft((0, _util$5.bnToHex)(value, BN_OPTIONS));
	    } else if ((0, _util$5.isHex)(value)) {
	      return this.soft((0, _util$5.hexToU8a)(value));
	    } else if ((0, _util$5.isString)(value)) {
	      return this.soft((0, _util$5.compactAddLength)((0, _util$5.stringToU8a)(value)));
	    } else if (value.length > JUNCTION_ID_LEN) {
	      return this.soft((0, _asU8a$4.blake2AsU8a)(value));
	    }

	    (0, _classPrivateFieldLooseBase2.default)(this, _chainCode)[_chainCode].fill(0);

	    (0, _classPrivateFieldLooseBase2.default)(this, _chainCode)[_chainCode].set(value, 0);

	    return this;
	  }

	  soften() {
	    (0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard] = false;
	    return this;
	  }

	}

	exports.DeriveJunction = DeriveJunction;
	});

	var _DeriveJunction = DeriveJunction_1;

	var keyExtractPath_1 = keyExtractPath;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const RE_JUNCTION = /\/(\/?)([^/]+)/g;

	/**
	 * @description Extract derivation junctions from the supplied path
	 */
	function keyExtractPath(derivePath) {
	  const parts = derivePath.match(RE_JUNCTION);
	  const path = [];
	  let constructed = '';

	  if (parts) {
	    constructed = parts.join('');
	    parts.forEach(value => {
	      path.push(_DeriveJunction.DeriveJunction.from(value.substr(1)));
	    });
	  }

	  (0, _util$5.assert)(constructed === derivePath, () => `Re-constructed path "${constructed}" does not match input`);
	  return {
	    parts,
	    path
	  };
	}

	var extractPath = /*#__PURE__*/Object.defineProperty({
		keyExtractPath: keyExtractPath_1
	}, '__esModule', {value: true});

	var _extractPath = extractPath;

	var keyExtractSuri_1 = keyExtractSuri;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
	/**
	 * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).
	 */

	function keyExtractSuri(suri) {
	  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
	  const matches = suri.match(RE_CAPTURE);
	  (0, _util$5.assert)(!(0, _util$5.isNull)(matches), 'Unable to match provided value to a secret URI');
	  const [, phrase,, derivePath,,, password] = matches;
	  const {
	    path
	  } = (0, _extractPath.keyExtractPath)(derivePath);
	  return {
	    derivePath,
	    password,
	    path,
	    phrase
	  };
	}

	var extractSuri = /*#__PURE__*/Object.defineProperty({
		keyExtractSuri: keyExtractSuri_1
	}, '__esModule', {value: true});

	var secp256k1DeriveHard_1 = secp256k1DeriveHard;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HDKD$1 = (0, _util$5.compactAddLength)((0, _util$5.stringToU8a)('Secp256k1HDKD'));

	function secp256k1DeriveHard(seed, chainCode) {
	  // NOTE This is specific to the Substrate HDD derivation, so always use the blake2 hasher
	  return (0, _asU8a$4.blake2AsU8a)((0, _util$5.u8aConcat)(HDKD$1, seed, chainCode), 256);
	}

	var deriveHard$2 = /*#__PURE__*/Object.defineProperty({
		secp256k1DeriveHard: secp256k1DeriveHard_1
	}, '__esModule', {value: true});

	var _from = "elliptic@^6.5.4";
	var _id = "elliptic@6.5.4";
	var _inBundle = false;
	var _integrity = "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==";
	var _location = "/elliptic";
	var _phantomChildren = {
	};
	var _requested = {
		type: "range",
		registry: true,
		raw: "elliptic@^6.5.4",
		name: "elliptic",
		escapedName: "elliptic",
		rawSpec: "^6.5.4",
		saveSpec: null,
		fetchSpec: "^6.5.4"
	};
	var _requiredBy = [
		"/@polkadot/util-crypto"
	];
	var _resolved = "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz";
	var _shasum = "da37cebd31e79a1367e941b592ed1fbebd58abbb";
	var _spec = "elliptic@^6.5.4";
	var _where = "D:\\test\\node_modules\\@polkadot\\util-crypto";
	var author = {
		name: "Fedor Indutny",
		email: "fedor@indutny.com"
	};
	var bugs = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var bundleDependencies = false;
	var dependencies = {
		"bn.js": "^4.11.9",
		brorand: "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		inherits: "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	};
	var deprecated = false;
	var description = "EC cryptography";
	var devDependencies = {
		brfs: "^2.0.2",
		coveralls: "^3.1.0",
		eslint: "^7.6.0",
		grunt: "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.5",
		mocha: "^8.0.1"
	};
	var files = [
		"lib"
	];
	var homepage = "https://github.com/indutny/elliptic";
	var keywords = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var license = "MIT";
	var main$1 = "lib/elliptic.js";
	var name = "elliptic";
	var repository = {
		type: "git",
		url: "git+ssh://git@github.com/indutny/elliptic.git"
	};
	var scripts = {
		lint: "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		test: "npm run lint && npm run unit",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		version: "grunt dist && git add dist/"
	};
	var version = "6.5.4";
	var require$$0$8 = {
		_from: _from,
		_id: _id,
		_inBundle: _inBundle,
		_integrity: _integrity,
		_location: _location,
		_phantomChildren: _phantomChildren,
		_requested: _requested,
		_requiredBy: _requiredBy,
		_resolved: _resolved,
		_shasum: _shasum,
		_spec: _spec,
		_where: _where,
		author: author,
		bugs: bugs,
		bundleDependencies: bundleDependencies,
		dependencies: dependencies,
		deprecated: deprecated,
		description: description,
		devDependencies: devDependencies,
		files: files,
		homepage: homepage,
		keywords: keywords,
		license: license,
		main: main$1,
		name: name,
		repository: repository,
		scripts: scripts,
		version: version
	};

	var minimalisticAssert = assert$9;

	function assert$9(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$9.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils_1$1 = createCommonjsModule(function (module, exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	});

	var utils_1 = createCommonjsModule(function (module, exports) {

	var utils = exports;




	utils.assert = minimalisticAssert;
	utils.toArray = utils_1$1.toArray;
	utils.zero2 = utils_1$1.zero2;
	utils.toHex = utils_1$1.toHex;
	utils.encode = utils_1$1.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    [],
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	      this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	    bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new bn$3(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	});

	var r$1;

	var brorand = function rand(len) {
	  if (!r$1)
	    r$1 = new Rand(null);

	  return r$1.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	var Rand_1 = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto = require$$0$a;
	    if (typeof crypto.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}
	brorand.Rand = Rand_1;

	var getNAF = utils_1.getNAF;
	var getJSF = utils_1.getJSF;
	var assert$8 = utils_1.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new bn$3(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? bn$3.red(conf.prime) : bn$3.mont(this.p);

	  // Useful for many curves
	  this.zero = new bn$3(0).toRed(this.red);
	  this.one = new bn$3(1).toRed(this.red);
	  this.two = new bn$3(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new bn$3(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base$1 = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$8(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$8(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils_1.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$8(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$8(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils_1.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});

	var assert$7 = utils_1.assert;

	function ShortCurve(conf) {
	  base$1.call(this, 'short', conf);

	  this.a = new bn$3(conf.a, 16).toRed(this.red);
	  this.b = new bn$3(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits_browser(ShortCurve, base$1);
	var short = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new bn$3(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new bn$3(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$7(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new bn$3(vec.a, 16),
	        b: new bn$3(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : bn$3.mont(num);
	  var tinv = new bn$3(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new bn$3(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new bn$3(1);
	  var y1 = new bn$3(0);
	  var x2 = new bn$3(0);
	  var y2 = new bn$3(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn$3(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point$2(curve, x, y, isRed) {
	  base$1.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new bn$3(x, 16);
	    this.y = new bn$3(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits_browser(Point$2, base$1.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point$2(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point$2.fromJSON(this, obj, red);
	};

	Point$2.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point$2.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point$2.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point$2.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point$2.prototype.mul = function mul(k) {
	  k = new bn$3(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point$2.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point$2.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point$2.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  base$1.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new bn$3(0);
	  } else {
	    this.x = new bn$3(x, 16);
	    this.y = new bn$3(y, 16);
	    this.z = new bn$3(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits_browser(JPoint, base$1.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new bn$3(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	function MontCurve(conf) {
	  base$1.call(this, 'mont', conf);

	  this.a = new bn$3(conf.a, 16).toRed(this.red);
	  this.b = new bn$3(conf.b, 16).toRed(this.red);
	  this.i4 = new bn$3(4).toRed(this.red).redInvm();
	  this.two = new bn$3(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits_browser(MontCurve, base$1);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new bn$3(x, 16);
	    this.z = new bn$3(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits_browser(Point$1, base$1.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils_1.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var assert$6 = utils_1.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  base$1.call(this, 'edwards', conf);

	  this.a = new bn$3(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new bn$3(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new bn$3(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$6(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits_browser(EdwardsCurve, base$1);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn$3(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new bn$3(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new bn$3(x, 16);
	    this.y = new bn$3(y, 16);
	    this.z = z ? new bn$3(z, 16) : this.curve.one;
	    this.t = t && new bn$3(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits_browser(Point, base$1.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	    this.y,
	    this.z,
	    this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;

	var curve_1 = createCommonjsModule(function (module, exports) {

	var curve = exports;

	curve.base = base$1;
	curve.short = short;
	curve.mont = mont;
	curve.edwards = edwards;
	});

	var inherits_1 = inherits_browser;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray$1(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1 = toArray$1;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	var toHex_1 = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1 = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  minimalisticAssert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1 = split32;

	function rotr32$1(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1 = rotr32$1;

	function rotl32$2(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1 = rotl32$2;

	function sum32$3(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1 = sum32$3;

	function sum32_3$1(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1 = sum32_3$1;

	function sum32_4$2(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1 = sum32_4$2;

	function sum32_5$2(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1 = sum32_5$2;

	function sum64$1(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1 = sum64$1;

	function sum64_hi$1(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1 = sum64_hi$1;

	function sum64_lo$1(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1 = sum64_lo$1;

	function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1 = sum64_4_hi$1;

	function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1 = sum64_4_lo$1;

	function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1 = sum64_5_hi$1;

	function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1 = sum64_5_lo$1;

	function rotr64_hi$1(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1 = rotr64_hi$1;

	function rotr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1 = rotr64_lo$1;

	function shr64_hi$1(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1 = shr64_hi$1;

	function shr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1 = shr64_lo$1;

	var utils$2 = {
		inherits: inherits_1,
		toArray: toArray_1,
		toHex: toHex_1,
		htonl: htonl_1,
		toHex32: toHex32_1,
		zero2: zero2_1,
		zero8: zero8_1,
		join32: join32_1,
		split32: split32_1,
		rotr32: rotr32_1,
		rotl32: rotl32_1,
		sum32: sum32_1,
		sum32_3: sum32_3_1,
		sum32_4: sum32_4_1,
		sum32_5: sum32_5_1,
		sum64: sum64_1,
		sum64_hi: sum64_hi_1,
		sum64_lo: sum64_lo_1,
		sum64_4_hi: sum64_4_hi_1,
		sum64_4_lo: sum64_4_lo_1,
		sum64_5_hi: sum64_5_hi_1,
		sum64_5_lo: sum64_5_lo_1,
		rotr64_hi: rotr64_hi_1,
		rotr64_lo: rotr64_lo_1,
		shr64_hi: shr64_hi_1,
		shr64_lo: shr64_lo_1
	};

	function BlockHash$4() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1 = BlockHash$4;

	BlockHash$4.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$2.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$2.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$4.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  minimalisticAssert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$4.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var common$1 = {
		BlockHash: BlockHash_1
	};

	var rotr32 = utils$2.rotr32;

	function ft_1$1(s, x, y, z) {
	  if (s === 0)
	    return ch32$1(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32$1(x, y, z);
	}
	var ft_1_1 = ft_1$1;

	function ch32$1(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1 = ch32$1;

	function maj32$1(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1 = maj32$1;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1 = p32;

	function s0_256$1(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	var s0_256_1 = s0_256$1;

	function s1_256$1(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	var s1_256_1 = s1_256$1;

	function g0_256$1(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	var g0_256_1 = g0_256$1;

	function g1_256$1(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	var g1_256_1 = g1_256$1;

	var common = {
		ft_1: ft_1_1,
		ch32: ch32_1,
		maj32: maj32_1,
		p32: p32_1,
		s0_256: s0_256_1,
		s1_256: s1_256_1,
		g0_256: g0_256_1,
		g1_256: g1_256_1
	};

	var rotl32$1 = utils$2.rotl32;
	var sum32$2 = utils$2.sum32;
	var sum32_5$1 = utils$2.sum32_5;
	var ft_1 = common.ft_1;
	var BlockHash$3 = common$1.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$3.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$2.inherits(SHA1, BlockHash$3);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'big');
	  else
	    return utils$2.split32(this.h, 'big');
	};

	var sum32$1 = utils$2.sum32;
	var sum32_4$1 = utils$2.sum32_4;
	var sum32_5 = utils$2.sum32_5;
	var ch32 = common.ch32;
	var maj32 = common.maj32;
	var s0_256 = common.s0_256;
	var s1_256 = common.s1_256;
	var g0_256 = common.g0_256;
	var g1_256 = common.g1_256;

	var BlockHash$2 = common$1.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils$2.inherits(SHA256, BlockHash$2);
	var _256 = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  minimalisticAssert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$1(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$1(T1, T2);
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	  this.h[5] = sum32$1(this.h[5], f);
	  this.h[6] = sum32$1(this.h[6], g);
	  this.h[7] = sum32$1(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'big');
	  else
	    return utils$2.split32(this.h, 'big');
	};

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  _256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$2.inherits(SHA224, _256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$2.split32(this.h.slice(0, 7), 'big');
	};

	var rotr64_hi = utils$2.rotr64_hi;
	var rotr64_lo = utils$2.rotr64_lo;
	var shr64_hi = utils$2.shr64_hi;
	var shr64_lo = utils$2.shr64_lo;
	var sum64 = utils$2.sum64;
	var sum64_hi = utils$2.sum64_hi;
	var sum64_lo = utils$2.sum64_lo;
	var sum64_4_hi = utils$2.sum64_4_hi;
	var sum64_4_lo = utils$2.sum64_4_lo;
	var sum64_5_hi = utils$2.sum64_5_hi;
	var sum64_5_lo = utils$2.sum64_5_lo;

	var BlockHash$1 = common$1.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();

	  BlockHash$1.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils$2.inherits(SHA512, BlockHash$1);
	var _512 = SHA512;

	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;

	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  minimalisticAssert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'big');
	  else
	    return utils$2.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  _512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$2.inherits(SHA384, _512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$2.split32(this.h.slice(0, 12), 'big');
	};

	var sha1 = _1;
	var sha224 = _224;
	var sha256$1 = _256;
	var sha384 = _384;
	var sha512$2 = _512;

	var sha = {
		sha1: sha1,
		sha224: sha224,
		sha256: sha256$1,
		sha384: sha384,
		sha512: sha512$2
	};

	var rotl32 = utils$2.rotl32;
	var sum32 = utils$2.sum32;
	var sum32_3 = utils$2.sum32_3;
	var sum32_4 = utils$2.sum32_4;
	var BlockHash = common$1.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$2.inherits(RIPEMD160, BlockHash);
	var ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'little');
	  else
	    return utils$2.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var ripemd = {
		ripemd160: ripemd160
	};

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$2.toArray(key, enc));
	}
	var hmac$1 = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  minimalisticAssert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	var hash_1 = createCommonjsModule(function (module, exports) {
	var hash = exports;

	hash.utils = utils$2;
	hash.common = common$1;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac$1;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	});

	var secp256k1$1 = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
	      ],
	    ],
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
	      ],
	    ],
	  },
	};

	var curves_1 = createCommonjsModule(function (module, exports) {

	var curves = exports;





	var assert = utils_1.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve_1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve_1.edwards(options);
	  else
	    this.curve = new curve_1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve,
	      });
	      return curve;
	    },
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash_1.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash_1.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '9',
	  ],
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});

	var pre;
	try {
	  pre = secp256k1$1;
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash_1.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3',
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15',
	    },
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre,
	  ],
	});
	});

	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils_1$1.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils_1$1.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils_1$1.toArray(options.pers, options.persEnc || 'hex');
	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash_1.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils_1$1.toArray(entropy, entropyEnc);
	  add = utils_1$1.toArray(add, addEnc);

	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils_1$1.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils_1$1.encode(res, enc);
	};

	var assert$5 = utils_1.assert;

	function KeyPair$1(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key$2 = KeyPair$1;

	KeyPair$1.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair$1)
	    return pub;

	  return new KeyPair$1(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair$1.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair$1)
	    return priv;

	  return new KeyPair$1(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair$1.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair$1.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair$1.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair$1.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new bn$3(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair$1.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$5(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$5(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair$1.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$5(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair$1.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair$1.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair$1.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var assert$4 = utils_1.assert;

	function Signature$1(options, enc) {
	  if (options instanceof Signature$1)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$4(options.r && options.s, 'Signature without r or s');
	  this.r = new bn$3(options.r, 16);
	  this.s = new bn$3(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature$2 = Signature$1;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature$1.prototype._importDER = function _importDER(data, enc) {
	  data = utils_1.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new bn$3(r);
	  this.s = new bn$3(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature$1.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils_1.encode(res, enc);
	};

	var assert$3 = utils_1.assert;




	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$3(Object.prototype.hasOwnProperty.call(curves_1, options),
	      'Unknown curve ' + options);

	    options = curves_1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves_1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new key$2(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return key$2.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return key$2.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || brorand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new bn$3(2));
	  for (;;) {
	    var priv = new bn$3(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new bn$3(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new bn$3(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new bn$3(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new signature$2({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new bn$3(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new signature$2(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert$3((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new signature$2(signature, enc);

	  var n = this.n;
	  var e = new bn$3(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new signature$2(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var assert$2 = utils_1.assert;
	var parseBytes$2 = utils_1.parseBytes;
	var cachedProperty$1 = utils_1.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes$2(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes$2(params.pub);
	}

	KeyPair.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair)
	    return pub;
	  return new KeyPair(eddsa, { pub: pub });
	};

	KeyPair.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair)
	    return secret;
	  return new KeyPair(eddsa, { secret: secret });
	};

	KeyPair.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty$1(KeyPair, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty$1(KeyPair, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty$1(KeyPair, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty$1(KeyPair, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty$1(KeyPair, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty$1(KeyPair, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair.prototype.sign = function sign(message) {
	  assert$2(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair.prototype.getSecret = function getSecret(enc) {
	  assert$2(this._secret, 'KeyPair is public only');
	  return utils_1.encode(this.secret(), enc);
	};

	KeyPair.prototype.getPublic = function getPublic(enc) {
	  return utils_1.encode(this.pubBytes(), enc);
	};

	var key$1 = KeyPair;

	var assert$1 = utils_1.assert;
	var cachedProperty = utils_1.cachedProperty;
	var parseBytes$1 = utils_1.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength),
	    };
	  }

	  assert$1(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof bn$3)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature.prototype.toHex = function toHex() {
	  return utils_1.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature$1 = Signature;

	var assert = utils_1.assert;
	var parseBytes = utils_1.parseBytes;



	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  curve = curves_1[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash_1.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	    .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils_1.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return key$1.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return key$1.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof signature$1)
	    return sig;
	  return new signature$1(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils_1.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils_1.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils_1.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	var elliptic_1 = createCommonjsModule(function (module, exports) {

	var elliptic = exports;

	elliptic.version = require$$0$8.version;
	elliptic.utils = utils_1;
	elliptic.rand = brorand;
	elliptic.curve = curve_1;
	elliptic.curves = curves_1;

	// Protocols
	elliptic.ec = ec;
	elliptic.eddsa = eddsa;
	});

	var secp256k1_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EXPAND_OPT = exports.secp256k1 = void 0;

	var _elliptic = interopRequireDefault(elliptic_1);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const EC = _elliptic.default.ec;
	const secp256k1 = new EC('secp256k1');
	exports.secp256k1 = secp256k1;
	const EXPAND_OPT = {
	  bitLength: 256,
	  isLe: false
	};
	exports.EXPAND_OPT = EXPAND_OPT;
	});

	var _secp256k = secp256k1_1;

	var secp256k1KeypairFromSeed_1 = secp256k1KeypairFromSeed;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name secp256k1KeypairFromSeed
	 * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
	 */
	function secp256k1KeypairFromSeed(seed) {
	  (0, _util$5.assert)(seed.length === 32, 'Expected valid 32-byte private key as a seed');

	  const key = _secp256k.secp256k1.keyFromPrivate(seed);

	  return {
	    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),
	    secretKey: (0, _util$5.bnToU8a)(key.getPrivate(), _secp256k.EXPAND_OPT)
	  };
	}

	var fromSeed$2 = /*#__PURE__*/Object.defineProperty({
		secp256k1KeypairFromSeed: secp256k1KeypairFromSeed_1
	}, '__esModule', {value: true});

	var _deriveHard$2 = deriveHard$2;

	var _fromSeed$2 = fromSeed$2;

	var keyHdkdEcdsa_1 = keyHdkdEcdsa;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function keyHdkdEcdsa(keypair, {
	  chainCode,
	  isHard
	}) {
	  (0, _util$5.assert)(isHard, 'A soft key was found in the path (and is unsupported)');
	  return (0, _fromSeed$2.secp256k1KeypairFromSeed)((0, _deriveHard$2.secp256k1DeriveHard)(keypair.secretKey.subarray(0, 32), chainCode));
	}

	var hdkdEcdsa = /*#__PURE__*/Object.defineProperty({
		keyHdkdEcdsa: keyHdkdEcdsa_1
	}, '__esModule', {value: true});

	var naclDeriveHard_1 = naclDeriveHard;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HDKD = (0, _util$5.compactAddLength)((0, _util$5.stringToU8a)('Ed25519HDKD'));

	function naclDeriveHard(seed, chainCode) {
	  return (0, _asU8a$4.blake2AsU8a)((0, _util$5.u8aConcat)(HDKD, seed, chainCode));
	}

	var deriveHard$1 = /*#__PURE__*/Object.defineProperty({
		naclDeriveHard: naclDeriveHard_1
	}, '__esModule', {value: true});

	var naclFast = createCommonjsModule(function (module) {
	(function(nacl) {

	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/

	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};

	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;

	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}

	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}

	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}

	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}

	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;

	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;

	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;

	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;

	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;

	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;

	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;

	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;

	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;

	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;

	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;

	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;

	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;

	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;

	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}

	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;

	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;

	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;

	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;

	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;

	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;

	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}

	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}

	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}

	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"

	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}

	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}

	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}

	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}

	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/

	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;

	  var t0, t1, t2, t3, t4, t5, t6, t7;

	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;

	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};

	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];

	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];

	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;

	    c = 0;

	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;

	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;

	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;

	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;

	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;

	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;

	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;

	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;

	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;

	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;

	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;

	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;

	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};

	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;

	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }

	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;

	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);

	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }

	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};

	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;

	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }

	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }

	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};

	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}

	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}

	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}

	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}

	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}

	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}

	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}

	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}

	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}

	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}

	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}

	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}

	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}

	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];

	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;

	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is

	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}

	function S(o, a) {
	  M(o, a, a);
	}

	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}

	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}

	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}

	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}

	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;

	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}

	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;

	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],

	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];

	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;

	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;

	      // add
	      h = ah7;
	      l = al7;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // K
	      h = K[i*2];
	      l = K[i*2+1];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // w
	      h = wh[i%16];
	      l = wl[i%16];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;

	      // add
	      h = th;
	      l = tl;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);

	      // add
	      h = bh3;
	      l = bl3;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      h = th;
	      l = tl;

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);

	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;

	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;

	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];

	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;

	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;

	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }

	    // add
	    h = ah0;
	    l = al0;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[0];
	    l = hl[0];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);

	    h = ah1;
	    l = al1;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[1];
	    l = hl[1];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);

	    h = ah2;
	    l = al2;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[2];
	    l = hl[2];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);

	    h = ah3;
	    l = al3;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[3];
	    l = hl[3];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);

	    h = ah4;
	    l = al4;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[4];
	    l = hl[4];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);

	    h = ah5;
	    l = al5;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[5];
	    l = hl[5];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);

	    h = ah6;
	    l = al6;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[6];
	    l = hl[6];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);

	    h = ah7;
	    l = al7;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[7];
	    l = hl[7];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);

	    pos += 128;
	    n -= 128;
	  }

	  return n;
	}

	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;

	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;

	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;

	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;

	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;

	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);

	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

	  return 0;
	}

	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();

	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);

	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}

	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}

	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}

	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}

	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}

	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;

	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  scalarbase(p, d);
	  pack(pk, p);

	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}

	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = Math.floor((x[j] + 128) / 256);
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}

	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}

	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];

	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);

	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);

	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }

	  modL(sm.subarray(32), x);
	  return smlen;
	}

	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);

	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);

	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;

	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

	  M(r[3], r[0], r[1]);
	  return 0;
	}

	function crypto_sign_open(m, sm, n, pk) {
	  var i;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];

	  if (n < 64) return -1;

	  if (unpackneg(q, pk)) return -1;

	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);

	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);

	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }

	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  return n;
	}

	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;

	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,

	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES,

	  gf: gf,
	  D: D,
	  L: L,
	  pack25519: pack25519,
	  unpack25519: unpack25519,
	  M: M,
	  A: A,
	  S: S,
	  Z: Z,
	  pow2523: pow2523,
	  add: add,
	  set25519: set25519,
	  modL: modL,
	  scalarmult: scalarmult,
	  scalarbase: scalarbase,
	};

	/* High-level API */

	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}

	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}

	function checkArrayTypes() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (!(arguments[i] instanceof Uint8Array))
	      throw new TypeError('unexpected type, use Uint8Array');
	  }
	}

	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}

	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};

	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};

	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return null;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};

	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};

	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};

	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};

	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};

	nacl.box.after = nacl.secretbox;

	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};

	nacl.box.open.after = nacl.secretbox.open;

	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;

	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};

	nacl.sign.open = function(signedMsg, publicKey) {
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};

	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};

	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};

	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;

	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};

	nacl.hash.hashLength = crypto_hash_BYTES;

	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};

	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};

	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (typeof commonjsRequire !== 'undefined') {
	    // Node.js.
	    crypto = require$$0$a;
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();

	})(module.exports ? module.exports : (self.nacl = self.nacl || {}));
	});

	var naclKeypairFromSeed_1 = naclKeypairFromSeed;

	var _tweetnacl$a = interopRequireDefault(naclFast);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclKeypairFromSeed
	 * @summary Creates a new public/secret keypair from a seed.
	 * @description
	 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclKeypairFromSeed } from '@polkadot/util-crypto';
	 *
	 * naclKeypairFromSeed(...); // => { secretKey: [...], publicKey: [...] }
	 * ```
	 */
	function naclKeypairFromSeed(seed, onlyJs = false) {
	  if (!onlyJs && (0, _wasmCrypto.isReady)()) {
	    const full = (0, _wasmCrypto.ed25519KeypairFromSeed)(seed);
	    return {
	      publicKey: full.slice(32),
	      secretKey: full.slice(0, 64)
	    };
	  }

	  return _tweetnacl$a.default.sign.keyPair.fromSeed(seed);
	}

	var fromSeed$1 = /*#__PURE__*/Object.defineProperty({
		naclKeypairFromSeed: naclKeypairFromSeed_1
	}, '__esModule', {value: true});

	var _deriveHard$1 = deriveHard$1;

	var _fromSeed$1 = fromSeed$1;

	var keyHdkdEd25519_1 = keyHdkdEd25519;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function keyHdkdEd25519(keypair, {
	  chainCode,
	  isHard
	}) {
	  (0, _util$5.assert)(isHard, 'A soft key was found in the path (and is unsupported)');
	  return (0, _fromSeed$1.naclKeypairFromSeed)((0, _deriveHard$1.naclDeriveHard)(keypair.secretKey.subarray(0, 32), chainCode));
	}

	var hdkdEd25519 = /*#__PURE__*/Object.defineProperty({
		keyHdkdEd25519: keyHdkdEd25519_1
	}, '__esModule', {value: true});

	var schnorrkelKeypairFromU8a_1 = schnorrkelKeypairFromU8a;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const SEC_LEN = 64;
	const PUB_LEN = 32;
	const TOT_LEN = SEC_LEN + PUB_LEN;

	function schnorrkelKeypairFromU8a(full) {
	  const fullU8a = (0, _util$5.u8aToU8a)(full);
	  (0, _util$5.assert)(fullU8a.length === TOT_LEN, () => `Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
	  return {
	    publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
	    secretKey: fullU8a.slice(0, SEC_LEN)
	  };
	}

	var fromU8a$1 = /*#__PURE__*/Object.defineProperty({
		schnorrkelKeypairFromU8a: schnorrkelKeypairFromU8a_1
	}, '__esModule', {value: true});

	var schnorrkelKeypairToU8a_1 = schnorrkelKeypairToU8a;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function schnorrkelKeypairToU8a({
	  publicKey,
	  secretKey
	}) {
	  return (0, _util$5.u8aConcat)(secretKey, publicKey).slice();
	}

	var toU8a$1 = /*#__PURE__*/Object.defineProperty({
		schnorrkelKeypairToU8a: schnorrkelKeypairToU8a_1
	}, '__esModule', {value: true});

	var _fromU8a$1 = fromU8a$1;

	var _toU8a$1 = toU8a$1;

	var schnorrkelDeriveHard_1 = schnorrkelDeriveHard;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function schnorrkelDeriveHard(keypair, chainCode) {
	  return (0, _fromU8a$1.schnorrkelKeypairFromU8a)((0, _wasmCrypto.sr25519DeriveKeypairHard)((0, _toU8a$1.schnorrkelKeypairToU8a)(keypair), (0, _util$5.u8aToU8a)(chainCode)));
	}

	var deriveHard = /*#__PURE__*/Object.defineProperty({
		schnorrkelDeriveHard: schnorrkelDeriveHard_1
	}, '__esModule', {value: true});

	var schnorrkelDeriveSoft_1 = schnorrkelDeriveSoft;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function schnorrkelDeriveSoft(keypair, chainCode) {
	  return (0, _fromU8a$1.schnorrkelKeypairFromU8a)((0, _wasmCrypto.sr25519DeriveKeypairSoft)((0, _toU8a$1.schnorrkelKeypairToU8a)(keypair), (0, _util$5.u8aToU8a)(chainCode)));
	}

	var deriveSoft = /*#__PURE__*/Object.defineProperty({
		schnorrkelDeriveSoft: schnorrkelDeriveSoft_1
	}, '__esModule', {value: true});

	var _deriveHard = deriveHard;

	var _deriveSoft = deriveSoft;

	var keyHdkdSr25519_1 = keyHdkdSr25519;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function keyHdkdSr25519(keypair, {
	  chainCode,
	  isSoft
	}) {
	  return isSoft ? (0, _deriveSoft.schnorrkelDeriveSoft)(keypair, chainCode) : (0, _deriveHard.schnorrkelDeriveHard)(keypair, chainCode);
	}

	var hdkdSr25519 = /*#__PURE__*/Object.defineProperty({
		keyHdkdSr25519: keyHdkdSr25519_1
	}, '__esModule', {value: true});

	var _hdkdEcdsa = hdkdEcdsa;

	var _hdkdEd = hdkdEd25519;

	var _hdkdSr = hdkdSr25519;

	var keyFromPath_1 = keyFromPath;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const generators = {
	  ecdsa: _hdkdEcdsa.keyHdkdEcdsa,
	  ed25519: _hdkdEd.keyHdkdEd25519,
	  // FIXME This is Substrate-compatible, not Ethereum-compatible
	  ethereum: _hdkdEcdsa.keyHdkdEcdsa,
	  sr25519: _hdkdSr.keyHdkdSr25519
	};

	function keyFromPath(pair, path, type) {
	  const keyHdkd = generators[type];
	  return path.reduce((pair, junction) => {
	    return keyHdkd(pair, junction);
	  }, pair);
	}

	var fromPath = /*#__PURE__*/Object.defineProperty({
		keyFromPath: keyFromPath_1
	}, '__esModule', {value: true});

	var _extractSuri = extractSuri;

	var _fromPath = fromPath;

	var key = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "keyExtractPath", {
	  enumerable: true,
	  get: function () {
	    return _extractPath.keyExtractPath;
	  }
	});
	Object.defineProperty(exports, "keyExtractSuri", {
	  enumerable: true,
	  get: function () {
	    return _extractSuri.keyExtractSuri;
	  }
	});
	Object.defineProperty(exports, "keyFromPath", {
	  enumerable: true,
	  get: function () {
	    return _fromPath.keyFromPath;
	  }
	});
	Object.defineProperty(exports, "keyHdkdEd25519", {
	  enumerable: true,
	  get: function () {
	    return _hdkdEd.keyHdkdEd25519;
	  }
	});
	Object.defineProperty(exports, "keyHdkdSr25519", {
	  enumerable: true,
	  get: function () {
	    return _hdkdSr.keyHdkdSr25519;
	  }
	});
	Object.defineProperty(exports, "keyHdkdEcdsa", {
	  enumerable: true,
	  get: function () {
	    return _hdkdEcdsa.keyHdkdEcdsa;
	  }
	});
	});

	var schnorrkelAgreement_1 = schnorrkelAgreement;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name schnorrkelAgreement
	 * @description Key agreement between other's public key and self secret key
	 */
	function schnorrkelAgreement(secretKey, publicKey) {
	  const secretKeyU8a = (0, _util$5.u8aToU8a)(secretKey);
	  const publicKeyU8a = (0, _util$5.u8aToU8a)(publicKey);
	  (0, _util$5.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
	  (0, _util$5.assert)(secretKeyU8a.length === 64, () => `Invalid secretKey, received ${secretKeyU8a.length} bytes, expected 64`);
	  return (0, _wasmCrypto.sr25519Agree)(publicKeyU8a, secretKeyU8a);
	}

	var agreement = /*#__PURE__*/Object.defineProperty({
		schnorrkelAgreement: schnorrkelAgreement_1
	}, '__esModule', {value: true});

	var schnorrkelDerivePublic_1 = schnorrkelDerivePublic;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function schnorrkelDerivePublic(publicKey, chainCode) {
	  const publicKeyU8a = (0, _util$5.u8aToU8a)(publicKey);
	  (0, _util$5.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
	  return (0, _wasmCrypto.sr25519DerivePublicSoft)(publicKeyU8a, (0, _util$5.u8aToU8a)(chainCode));
	}

	var derivePublic = /*#__PURE__*/Object.defineProperty({
		schnorrkelDerivePublic: schnorrkelDerivePublic_1
	}, '__esModule', {value: true});

	var schnorrkelKeypairFromSeed_1 = schnorrkelKeypairFromSeed;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name schnorrkelKeypairFromSeed
	 * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
	 */
	function schnorrkelKeypairFromSeed(seed) {
	  const seedU8a = (0, _util$5.u8aToU8a)(seed);
	  (0, _util$5.assert)(seedU8a.length === 32, () => `Expected a seed matching 32 bytes, found ${seedU8a.length}`);
	  return (0, _fromU8a$1.schnorrkelKeypairFromU8a)((0, _wasmCrypto.sr25519KeypairFromSeed)(seedU8a));
	}

	var fromSeed = /*#__PURE__*/Object.defineProperty({
		schnorrkelKeypairFromSeed: schnorrkelKeypairFromSeed_1
	}, '__esModule', {value: true});

	var schnorrkelSign_1 = schnorrkelSign;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name schnorrkelSign
	 * @description Returns message signature of `message`, using the supplied pair
	 */
	function schnorrkelSign(message, {
	  publicKey,
	  secretKey
	}) {
	  (0, _util$5.assert)((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) === 32, 'Expected a valid publicKey, 32-bytes');
	  (0, _util$5.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Expected a valid secretKey, 64-bytes');
	  return (0, _wasmCrypto.sr25519Sign)(publicKey, secretKey, (0, _util$5.u8aToU8a)(message));
	}

	var sign$3 = /*#__PURE__*/Object.defineProperty({
		schnorrkelSign: schnorrkelSign_1
	}, '__esModule', {value: true});

	var schnorrkelVerify_1 = schnorrkelVerify;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name schnorrkelVerify
	 * @description Verifies the signature of `message`, using the supplied pair
	 */
	function schnorrkelVerify(message, signature, publicKey) {
	  const publicKeyU8a = (0, _util$5.u8aToU8a)(publicKey);
	  const signatureU8a = (0, _util$5.u8aToU8a)(signature);
	  (0, _util$5.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
	  (0, _util$5.assert)(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
	  return (0, _wasmCrypto.sr25519Verify)(signatureU8a, (0, _util$5.u8aToU8a)(message), publicKeyU8a);
	}

	var verify$3 = /*#__PURE__*/Object.defineProperty({
		schnorrkelVerify: schnorrkelVerify_1
	}, '__esModule', {value: true});

	var schnorrkelVrfSign_1 = schnorrkelVrfSign;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const EMPTY_U8A$1 = new Uint8Array();
	/**
	 * @name schnorrkelVrfSign
	 * @description Sign with sr25519 vrf signing (deterministic)
	 */

	function schnorrkelVrfSign(message, {
	  secretKey
	}, context = EMPTY_U8A$1, extra = EMPTY_U8A$1) {
	  (0, _util$5.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Invalid secretKey, expected 64-bytes');
	  return (0, _wasmCrypto.vrfSign)(secretKey, (0, _util$5.u8aToU8a)(context), (0, _util$5.u8aToU8a)(message), (0, _util$5.u8aToU8a)(extra));
	}

	var vrfSign = /*#__PURE__*/Object.defineProperty({
		schnorrkelVrfSign: schnorrkelVrfSign_1
	}, '__esModule', {value: true});

	var schnorrkelVrfVerify_1 = schnorrkelVrfVerify;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const EMPTY_U8A = new Uint8Array();
	/**
	 * @name schnorrkelVrfVerify
	 * @description Verify with sr25519 vrf verification
	 */

	function schnorrkelVrfVerify(message, signOutput, publicKey, context = EMPTY_U8A, extra = EMPTY_U8A) {
	  const publicKeyU8a = (0, _util$5.u8aToU8a)(publicKey);
	  const proofU8a = (0, _util$5.u8aToU8a)(signOutput);
	  (0, _util$5.assert)(publicKeyU8a.length === 32, 'Invalid publicKey, expected 32-bytes');
	  (0, _util$5.assert)(proofU8a.length === 96, 'Invalid vrfSign output, expected 96 bytes');
	  return (0, _wasmCrypto.vrfVerify)(publicKeyU8a, (0, _util$5.u8aToU8a)(context), (0, _util$5.u8aToU8a)(message), (0, _util$5.u8aToU8a)(extra), proofU8a);
	}

	var vrfVerify = /*#__PURE__*/Object.defineProperty({
		schnorrkelVrfVerify: schnorrkelVrfVerify_1
	}, '__esModule', {value: true});

	var _agreement = agreement;

	var _derivePublic = derivePublic;

	var _fromSeed = fromSeed;

	var _sign$2 = sign$3;

	var _verify2 = verify$3;

	var _vrfSign = vrfSign;

	var _vrfVerify = vrfVerify;

	var schnorrkel = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "schnorrkelAgreement", {
	  enumerable: true,
	  get: function () {
	    return _agreement.schnorrkelAgreement;
	  }
	});
	Object.defineProperty(exports, "schnorrkelDeriveHard", {
	  enumerable: true,
	  get: function () {
	    return _deriveHard.schnorrkelDeriveHard;
	  }
	});
	Object.defineProperty(exports, "schnorrkelDerivePublic", {
	  enumerable: true,
	  get: function () {
	    return _derivePublic.schnorrkelDerivePublic;
	  }
	});
	Object.defineProperty(exports, "schnorrkelDeriveSoft", {
	  enumerable: true,
	  get: function () {
	    return _deriveSoft.schnorrkelDeriveSoft;
	  }
	});
	Object.defineProperty(exports, "schnorrkelKeypairFromSeed", {
	  enumerable: true,
	  get: function () {
	    return _fromSeed.schnorrkelKeypairFromSeed;
	  }
	});
	Object.defineProperty(exports, "schnorrkelSign", {
	  enumerable: true,
	  get: function () {
	    return _sign$2.schnorrkelSign;
	  }
	});
	Object.defineProperty(exports, "schnorrkelVerify", {
	  enumerable: true,
	  get: function () {
	    return _verify2.schnorrkelVerify;
	  }
	});
	Object.defineProperty(exports, "schnorrkelVrfSign", {
	  enumerable: true,
	  get: function () {
	    return _vrfSign.schnorrkelVrfSign;
	  }
	});
	Object.defineProperty(exports, "schnorrkelVrfVerify", {
	  enumerable: true,
	  get: function () {
	    return _vrfVerify.schnorrkelVrfVerify;
	  }
	});
	});

	var base58Encode_1 = base58Encode;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name base58Encode
	 * @summary Creates a base58 value.
	 * @description
	 * From the provided input, create the base58 and return the result as a string.
	 */
	function base58Encode(value, ipfsCompat) {
	  const out = _bs$1.bs58.encode((0, _util$5.u8aToU8a)(value));

	  return ipfsCompat ? `z${out}` : out;
	}

	var encode$7 = /*#__PURE__*/Object.defineProperty({
		base58Encode: base58Encode_1
	}, '__esModule', {value: true});

	var _encode$7 = encode$7;

	var encodeAddress_1 = encodeAddress;











	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34
	function encodeAddress(key, ss58Format = _defaults$3.defaults.prefix) {
	  // decode it, this means we can re-encode an address
	  const u8a = (0, _decode$3.decodeAddress)(key);
	  (0, _util$5.assert)(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
	  (0, _util$5.assert)(_defaults$3.defaults.allowedDecodedLengths.includes(u8a.length), () => `Expected a valid key to convert, with length ${_defaults$3.defaults.allowedDecodedLengths.join(', ')}`);
	  const input = (0, _util$5.u8aConcat)(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6], u8a);
	  return (0, _encode$7.base58Encode)((0, _util$5.u8aConcat)(input, (0, _sshash.sshash)(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
	}

	var encode$6 = /*#__PURE__*/Object.defineProperty({
		encodeAddress: encodeAddress_1
	}, '__esModule', {value: true});

	var _index11 = key;

	var _index16 = schnorrkel;

	var _encode$6 = encode$6;

	var deriveAddress_1 = deriveAddress;











	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name deriveAddress
	 * @summary Creates a sr25519 derived address from the supplied and path.
	 * @description
	 * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.
	 */
	function deriveAddress(who, suri, ss58Format) {
	  const {
	    path
	  } = (0, _index11.keyExtractPath)(suri);
	  (0, _util$5.assert)(path.length && !path.some(path => path.isHard), 'Expected suri to contain a combination of non-hard paths');
	  return (0, _encode$6.encodeAddress)(path.reduce((publicKey, path) => {
	    return (0, _index16.schnorrkelDerivePublic)(publicKey, path.chainCode);
	  }, (0, _decode$3.decodeAddress)(who)), ss58Format);
	}

	var derive = /*#__PURE__*/Object.defineProperty({
		deriveAddress: deriveAddress_1
	}, '__esModule', {value: true});

	var _keyDerived = keyDerived;

	var encodeDerivedAddress_1 = encodeDerivedAddress;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name encodeDerivedAddress
	 * @summary Creates a derived address as used in Substrate utility.
	 * @description
	 * Creates a Substrate derived address based on the input address/publicKey and the index supplied.
	 */
	function encodeDerivedAddress(who, index, ss58Format) {
	  return (0, _encode$6.encodeAddress)((0, _keyDerived.createKeyDerived)((0, _decode$3.decodeAddress)(who), index), ss58Format);
	}

	var encodeDerived = /*#__PURE__*/Object.defineProperty({
		encodeDerivedAddress: encodeDerivedAddress_1
	}, '__esModule', {value: true});

	var _keyMulti = keyMulti;

	var encodeMultiAddress_1 = encodeMultiAddress;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name encodeMultiAddress
	 * @summary Creates a multisig address.
	 * @description
	 * Creates a Substrate multisig address based on the input address and the required threshold.
	 */
	function encodeMultiAddress(who, threshold, ss58Format) {
	  return (0, _encode$6.encodeAddress)((0, _keyMulti.createKeyMulti)(who, threshold), ss58Format);
	}

	var encodeMulti = /*#__PURE__*/Object.defineProperty({
		encodeMultiAddress: encodeMultiAddress_1
	}, '__esModule', {value: true});

	var blake2AsHex_1 = blake2AsHex;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name blake2AsHex
	 * @summary Creates a blake2b hex from the input.
	 * @description
	 * From a `Uint8Array` input, create the blake2b and return the result as a hex string with the specified `bitLength`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { blake2AsHex } from '@polkadot/util-crypto';
	 *
	 * blake2AsHex('abc'); // => 0xba80a53f981c4d0d
	 * ```
	 */
	function blake2AsHex(data, bitLength = 256, key, onlyJs = false) {
	  return (0, _util$5.u8aToHex)((0, _asU8a$4.blake2AsU8a)(data, bitLength, key, onlyJs));
	}

	var asHex$3 = /*#__PURE__*/Object.defineProperty({
		blake2AsHex: blake2AsHex_1
	}, '__esModule', {value: true});

	var _asHex$3 = asHex$3;

	var blake2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "blake2AsHex", {
	  enumerable: true,
	  get: function () {
	    return _asHex$3.blake2AsHex;
	  }
	});
	Object.defineProperty(exports, "blake2AsU8a", {
	  enumerable: true,
	  get: function () {
	    return _asU8a$4.blake2AsU8a;
	  }
	});
	});

	/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.8.0
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2018
	 * @license MIT
	 */

	var sha3 = createCommonjsModule(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
	    '128': 168,
	    '256': 136
	  };

	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };

	  var createCshakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits, n, s) {
	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
	    };
	  };

	  var createKmacOutputMethod = function (bits, padding, outputType) {
	    return function (key, message, outputBits, s) {
	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
	    };
	  };

	  var createOutputMethods = function (method, createMethod, bits, padding) {
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    return createOutputMethods(method, createOutputMethod, bits, padding);
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };

	  var createCshakeMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createCshakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits, n, s) {
	      if (!n && !s) {
	        return methods['shake' + bits].create(outputBits);
	      } else {
	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
	      }
	    };
	    method.update = function (message, outputBits, n, s) {
	      return method.create(outputBits, n, s).update(message);
	    };
	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };

	  var createKmacMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createKmacOutputMethod(bits, padding, 'hex');
	    method.create = function (key, outputBits, s) {
	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
	    };
	    method.update = function (key, message, outputBits, s) {
	      return method.create(key, outputBits, s).update(message);
	    };
	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };

	  var algorithms = [
	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
	  ];

	  var methods = {}, methodNames = [];

	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name + '_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	      if (algorithm.name !== 'sha3') {
	        var newMethodName = algorithm.name + bits[j];
	        methodNames.push(newMethodName);
	        methods[newMethodName] = methods[methodName];
	      }
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.finalized = false;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }

	  Keccak.prototype.update = function (message) {
	    if (this.finalized) {
	      throw new Error(FINALIZE_ERROR);
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.encode = function (x, right) {
	    var o = x & 255, n = 1;
	    var bytes = [o];
	    x = x >> 8;
	    o = x & 255;
	    while (o > 0) {
	      bytes.unshift(o);
	      x = x >> 8;
	      o = x & 255;
	      ++n;
	    }
	    if (right) {
	      bytes.push(n);
	    } else {
	      bytes.unshift(n);
	    }
	    this.update(bytes);
	    return bytes.length;
	  };

	  Keccak.prototype.encodeString = function (str) {
	    var notString, type = typeof str;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (str === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
	          str = new Uint8Array(str);
	        } else if (!Array.isArray(str)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var bytes = 0, length = str.length;
	    if (notString) {
	      bytes = length;
	    } else {
	      for (var i = 0; i < str.length; ++i) {
	        var code = str.charCodeAt(i);
	        if (code < 0x80) {
	          bytes += 1;
	        } else if (code < 0x800) {
	          bytes += 2;
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes += 3;
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
	          bytes += 4;
	        }
	      }
	    }
	    bytes += this.encode(bytes * 8);
	    this.update(str);
	    return bytes;
	  };

	  Keccak.prototype.bytepad = function (strs, w) {
	    var bytes = this.encode(w);
	    for (var i = 0; i < strs.length; ++i) {
	      bytes += this.encodeString(strs[i]);
	    }
	    var paddingBytes = w - bytes % w;
	    var zeros = [];
	    zeros.length = paddingBytes;
	    this.update(zeros);
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };

	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      array[offset] = block & 0xFF;
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  function Kmac(bits, padding, outputBits) {
	    Keccak.call(this, bits, padding, outputBits);
	  }

	  Kmac.prototype = new Keccak();

	  Kmac.prototype.finalize = function () {
	    this.encode(this.outputBits, true);
	    return Keccak.prototype.finalize.call(this);
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };

	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	  }
	})();
	});

	var keccakAsU8a_1 = keccakAsU8a;

	var _jsSha = interopRequireDefault(sha3);





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name keccakAsU8a
	 * @summary Creates a keccak Uint8Array from the input.
	 * @description
	 * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { keccakAsU8a } from '@polkadot/util-crypto';
	 *
	 * keccakAsU8a('123'); // => Uint8Array
	 * ```
	 */
	function keccakAsU8a(value, bitLength = 256, onlyJs = false) {
	  const is256 = bitLength === 256;
	  return (0, _wasmCrypto.isReady)() && is256 && !onlyJs ? (0, _wasmCrypto.keccak256)((0, _util$5.u8aToU8a)(value)) : new Uint8Array((is256 ? _jsSha.default.keccak256 : _jsSha.default.keccak512).update((0, _util$5.u8aToU8a)(value)).arrayBuffer());
	}

	var asU8a$3 = /*#__PURE__*/Object.defineProperty({
		keccakAsU8a: keccakAsU8a_1
	}, '__esModule', {value: true});

	var _asU8a$3 = asU8a$3;

	var keccakAsHex_1 = keccakAsHex;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name keccakAsHex
	 * @summary Creates a keccak hex string from the input.
	 * @description
	 * From either a `string` or a `Buffer` input, create the keccak and return the result as a `0x` prefixed hex string.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { keccakAsHex } from '@polkadot/util-crypto';
	 *
	 * keccakAsHex('123'); // => 0x...
	 * ```
	 */
	function keccakAsHex(value, bitLength) {
	  return (0, _util$5.u8aToHex)((0, _asU8a$3.keccakAsU8a)(value, bitLength));
	}

	var asHex$2 = /*#__PURE__*/Object.defineProperty({
		keccakAsHex: keccakAsHex_1
	}, '__esModule', {value: true});

	var _asHex$2 = asHex$2;

	var keccak = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "keccakAsHex", {
	  enumerable: true,
	  get: function () {
	    return _asHex$2.keccakAsHex;
	  }
	});
	Object.defineProperty(exports, "keccakAsU8a", {
	  enumerable: true,
	  get: function () {
	    return _asU8a$3.keccakAsU8a;
	  }
	});
	});

	var _index5$1 = blake2;

	var _index10 = keccak;

	var secp256k1Hasher_1 = secp256k1Hasher;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HASH_TYPES = ['blake2', 'keccak'];

	function secp256k1Hasher(hashType, data) {
	  if (hashType === 'blake2') {
	    return (0, _index5$1.blake2AsU8a)(data);
	  } else if (hashType === 'keccak') {
	    return (0, _index10.keccakAsU8a)(data);
	  }

	  throw new Error(`Unsupported secp256k1 hasher '${hashType}', expected one of ${HASH_TYPES.join(', ')}`);
	}

	var hasher = /*#__PURE__*/Object.defineProperty({
		secp256k1Hasher: secp256k1Hasher_1
	}, '__esModule', {value: true});

	var _hasher = hasher;

	var evmToAddress_2 = evmToAddress;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name evmToAddress
	 * @summary Converts an EVM address to its corresponding SS58 address.
	 */
	function evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {
	  const wrapError = message => `Converting ${evmAddress}: ${message}`;

	  const message = (0, _util$5.u8aConcat)('evm:', evmAddress);

	  if (message.length !== 24) {
	    throw new Error(wrapError('Invalid evm address length'));
	  }

	  const address = (0, _hasher.secp256k1Hasher)(hashType, message);
	  return (0, _encode$6.encodeAddress)(address, ss58Format);
	}

	var evmToAddress_1 = /*#__PURE__*/Object.defineProperty({
		evmToAddress: evmToAddress_2
	}, '__esModule', {value: true});

	var addressEq_1 = addressEq;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name addressEq
	 * @summary Compares two addresses, either in ss58, Uint8Array or hex format.
	 * @description
	 * For the input values, return true is the underlying public keys do match.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { u8aEq } from '@polkadot/util';
	 *
	 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
	 * ```
	 */
	function addressEq(a, b) {
	  return (0, _util$5.u8aEq)((0, _decode$3.decodeAddress)(a), (0, _decode$3.decodeAddress)(b));
	}

	var eq = /*#__PURE__*/Object.defineProperty({
		addressEq: addressEq_1
	}, '__esModule', {value: true});

	var validateAddress_1 = validateAddress;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function validateAddress(encoded, ignoreChecksum, ss58Format) {
	  return !!(0, _decode$3.decodeAddress)(encoded, ignoreChecksum, ss58Format);
	}

	var validate$4 = /*#__PURE__*/Object.defineProperty({
		validateAddress: validateAddress_1
	}, '__esModule', {value: true});

	var _validate$4 = validate$4;

	var isAddress_1 = isAddress$1;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isAddress$1(address, ignoreChecksum, ss58Format) {
	  try {
	    return (0, _validate$4.validateAddress)(address, ignoreChecksum, ss58Format);
	  } catch (error) {
	    return false;
	  }
	}

	var is$3 = /*#__PURE__*/Object.defineProperty({
		isAddress: isAddress_1
	}, '__esModule', {value: true});

	var setSS58Format_2 = setSS58Format;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l$2 = (0, _util$5.logger)('setSS58Format');
	/**
	 * @description Sets the global SS58 format to use for address encoding
	 * @deprecated Use keyring.setSS58Format
	 */

	function setSS58Format(prefix) {
	  l$2.warn('Global setting of the ss58Format is deprecated and not recommended. Set format on the keyring (if used) or as pat of the address encode function');
	  _defaults$3.defaults.prefix = prefix;
	}

	var setSS58Format_1 = /*#__PURE__*/Object.defineProperty({
		setSS58Format: setSS58Format_2
	}, '__esModule', {value: true});

	var sortAddresses_1 = sortAddresses;







	// Copyright 2017-2021 @polkadot/util authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function sortAddresses(addresses, ss58Format) {
	  return (0, _util$5.u8aSorted)(addresses.map(who => (0, _decode$3.decodeAddress)(who))).map(u8a => (0, _encode$6.encodeAddress)(u8a, ss58Format));
	}

	var sort = /*#__PURE__*/Object.defineProperty({
		sortAddresses: sortAddresses_1
	}, '__esModule', {value: true});

	var _addressToEvm = addressToEvm_1;

	var _check = check;

	var _derive = derive;

	var _encodeDerived = encodeDerived;

	var _encodeMulti = encodeMulti;

	var _evmToAddress = evmToAddress_1;

	var _eq = eq;

	var _is$3 = is$3;

	var _setSS58Format = setSS58Format_1;

	var _sort = sort;

	var address$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "addressToEvm", {
	  enumerable: true,
	  get: function () {
	    return _addressToEvm.addressToEvm;
	  }
	});
	Object.defineProperty(exports, "checkAddress", {
	  enumerable: true,
	  get: function () {
	    return _check.checkAddress;
	  }
	});
	Object.defineProperty(exports, "checkAddressChecksum", {
	  enumerable: true,
	  get: function () {
	    return _checksum.checkAddressChecksum;
	  }
	});
	Object.defineProperty(exports, "createKeyMulti", {
	  enumerable: true,
	  get: function () {
	    return _keyMulti.createKeyMulti;
	  }
	});
	Object.defineProperty(exports, "createKeyDerived", {
	  enumerable: true,
	  get: function () {
	    return _keyDerived.createKeyDerived;
	  }
	});
	Object.defineProperty(exports, "decodeAddress", {
	  enumerable: true,
	  get: function () {
	    return _decode$3.decodeAddress;
	  }
	});
	Object.defineProperty(exports, "deriveAddress", {
	  enumerable: true,
	  get: function () {
	    return _derive.deriveAddress;
	  }
	});
	Object.defineProperty(exports, "encodeAddress", {
	  enumerable: true,
	  get: function () {
	    return _encode$6.encodeAddress;
	  }
	});
	Object.defineProperty(exports, "encodeDerivedAddress", {
	  enumerable: true,
	  get: function () {
	    return _encodeDerived.encodeDerivedAddress;
	  }
	});
	Object.defineProperty(exports, "encodeMultiAddress", {
	  enumerable: true,
	  get: function () {
	    return _encodeMulti.encodeMultiAddress;
	  }
	});
	Object.defineProperty(exports, "evmToAddress", {
	  enumerable: true,
	  get: function () {
	    return _evmToAddress.evmToAddress;
	  }
	});
	Object.defineProperty(exports, "addressEq", {
	  enumerable: true,
	  get: function () {
	    return _eq.addressEq;
	  }
	});
	Object.defineProperty(exports, "isAddress", {
	  enumerable: true,
	  get: function () {
	    return _is$3.isAddress;
	  }
	});
	Object.defineProperty(exports, "setSS58Format", {
	  enumerable: true,
	  get: function () {
	    return _setSS58Format.setSS58Format;
	  }
	});
	Object.defineProperty(exports, "sortAddresses", {
	  enumerable: true,
	  get: function () {
	    return _sort.sortAddresses;
	  }
	});
	Object.defineProperty(exports, "validateAddress", {
	  enumerable: true,
	  get: function () {
	    return _validate$4.validateAddress;
	  }
	});
	});

	var bs32 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BITS_PER_CHAR = exports.BASE32_ALPHABET = void 0;
	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// https://github.com/multiformats/js-multibase/blob/master/src/constants.js
	const BASE32_ALPHABET = 'abcdefghijklmnopqrstuvwxyz234567';
	exports.BASE32_ALPHABET = BASE32_ALPHABET;
	const BITS_PER_CHAR = 5;
	exports.BITS_PER_CHAR = BITS_PER_CHAR;
	});

	var _bs = bs32;

	var base32Validate_1 = base32Validate;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const BASE_CONFIG = {
	  alphabet: _bs.BASE32_ALPHABET,
	  ipfsChar: 'b',
	  type: 'base32'
	};
	/**
	 * @name base32Validate
	 * @summary Validates a base32 value.
	 * @description
	 * Validates that the supplied value is valid base32
	 */

	function base32Validate(value, ipfsCompat) {
	  return (0, _validate$5.validateChars)(BASE_CONFIG, value, ipfsCompat);
	}

	var validate$3 = /*#__PURE__*/Object.defineProperty({
		base32Validate: base32Validate_1
	}, '__esModule', {value: true});

	var _validate$3 = validate$3;

	var base32Decode_1 = base32Decode;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js
	// Build the character lookup table:
	const LOOKUP = _bs.BASE32_ALPHABET.split('').reduce((lookup, char, index) => {
	  lookup[char] = index;
	  return lookup;
	}, {});
	/** @internal */


	function decode$2(output, input, offset) {
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;

	  for (let i = offset; i < input.length; i++) {
	    buffer = buffer << _bs.BITS_PER_CHAR | LOOKUP[input[i]];
	    bits += _bs.BITS_PER_CHAR;

	    if (bits >= 8) {
	      bits -= 8;
	      output[written++] = 0xff & buffer >> bits;
	    }
	  }

	  return [output, bits, buffer];
	}
	/**
	 * @name base32Decode
	 * @summary Delookup a base32 value.
	 * @description
	 * From the provided input, decode the base32 and return the result as an `Uint8Array`.
	 */


	function base32Decode(value, ipfsCompat = false) {
	  (0, _validate$3.base32Validate)(value, ipfsCompat);
	  const offset = ipfsCompat ? 1 : 0;
	  const [output, bits, buffer] = decode$2(new Uint8Array((value.length - offset) * _bs.BITS_PER_CHAR / 8 | 0), value, offset);
	  (0, _util$5.assert)(!(bits >= _bs.BITS_PER_CHAR || 0xff & buffer << 8 - bits), 'Unexpected end of data');
	  return output;
	}

	var decode_1 = /*#__PURE__*/Object.defineProperty({
		base32Decode: base32Decode_1
	}, '__esModule', {value: true});

	var base32Encode_1 = base32Encode;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js
	const MASK = (1 << _bs.BITS_PER_CHAR) - 1;
	/**
	 * @name base32Encode
	 * @summary Creates a base32 value.
	 * @description
	 * From the provided input, create the base32 and return the result as a string.
	 */

	function base32Encode(value, ipfsCompat = false) {
	  const u8a = (0, _util$5.u8aToU8a)(value);
	  let out = '';
	  let bits = 0;
	  let buffer = 0;

	  for (let i = 0; i < u8a.length; ++i) {
	    buffer = buffer << 8 | u8a[i];
	    bits += 8;

	    while (bits > _bs.BITS_PER_CHAR) {
	      bits -= _bs.BITS_PER_CHAR;
	      out += _bs.BASE32_ALPHABET[MASK & buffer >> bits];
	    }
	  }

	  if (bits) {
	    out += _bs.BASE32_ALPHABET[MASK & buffer << _bs.BITS_PER_CHAR - bits];
	  }

	  return ipfsCompat ? `b${out}` : out;
	}

	var encode$5 = /*#__PURE__*/Object.defineProperty({
		base32Encode: base32Encode_1
	}, '__esModule', {value: true});

	var testValidator_1 = testValidator;
	var isBase32_1 = isBase32;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function testValidator(validate, value, ipfsCompat) {
	  try {
	    return validate(value, ipfsCompat);
	  } catch (error) {
	    return false;
	  }
	}

	function isBase32(value, ipfsCompat) {
	  return testValidator(_validate$3.base32Validate, value, ipfsCompat);
	}

	var is$2 = /*#__PURE__*/Object.defineProperty({
		testValidator: testValidator_1,
		isBase32: isBase32_1
	}, '__esModule', {value: true});

	var _decode$2 = decode_1;

	var _encode$5 = encode$5;

	var _is$2 = is$2;

	var base32 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "base32Decode", {
	  enumerable: true,
	  get: function () {
	    return _decode$2.base32Decode;
	  }
	});
	Object.defineProperty(exports, "base32Encode", {
	  enumerable: true,
	  get: function () {
	    return _encode$5.base32Encode;
	  }
	});
	Object.defineProperty(exports, "base32Validate", {
	  enumerable: true,
	  get: function () {
	    return _validate$3.base32Validate;
	  }
	});
	Object.defineProperty(exports, "isBase32", {
	  enumerable: true,
	  get: function () {
	    return _is$2.isBase32;
	  }
	});
	});

	var isBase58_1 = isBase58;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isBase58(value, ipfsCompat) {
	  return (0, _is$2.testValidator)(_validate$5.base58Validate, value, ipfsCompat);
	}

	var is$1 = /*#__PURE__*/Object.defineProperty({
		isBase58: isBase58_1
	}, '__esModule', {value: true});

	var _is$1 = is$1;

	var base58 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "base58Decode", {
	  enumerable: true,
	  get: function () {
	    return _decode$4.base58Decode;
	  }
	});
	Object.defineProperty(exports, "base58Encode", {
	  enumerable: true,
	  get: function () {
	    return _encode$7.base58Encode;
	  }
	});
	Object.defineProperty(exports, "base58Validate", {
	  enumerable: true,
	  get: function () {
	    return _validate$5.base58Validate;
	  }
	});
	Object.defineProperty(exports, "isBase58", {
	  enumerable: true,
	  get: function () {
	    return _is$1.isBase58;
	  }
	});
	});

	var byteLength_1 = byteLength;
	var toByteArray_1 = toByteArray;
	var fromByteArray_1 = fromByteArray;

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;

	function getLens (b64) {
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4);

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp;
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen;

	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)];
	    arr[curByte++] = (tmp >> 16) & 0xFF;
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    );
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    );
	  }

	  return parts.join('')
	}

	var base64Js = {
		byteLength: byteLength_1,
		toByteArray: toByteArray_1,
		fromByteArray: fromByteArray_1
	};

	var base64Validate_1 = base64Validate;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name base64Validate
	 * @summary Validates a base64 value.
	 * @description
	 * Validates that the supplied value is valid base64
	 */
	function base64Validate(value) {
	  (0, _util$5.assert)(value && typeof value === 'string', 'Expected non-null, non-empty base64 string input');
	  (0, _util$5.assert)(/^(?:[A-Za-z0-9+/]{2}[A-Za-z0-9+/]{2})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value), 'Invalid base64 encoding');
	  return true;
	}

	var validate$2 = /*#__PURE__*/Object.defineProperty({
		base64Validate: base64Validate_1
	}, '__esModule', {value: true});

	var _validate$2 = validate$2;

	var base64Decode_1 = base64Decode;

	var _base64Js$1 = interopRequireDefault(base64Js);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name base64Decode
	 * @summary Decodes a base64 value.
	 * @description
	 * From the provided input, decode the base64 and return the result as an `Uint8Array`.
	 */
	function base64Decode(value) {
	  (0, _validate$2.base64Validate)(value);
	  return _base64Js$1.default.toByteArray(value);
	}

	var decode$1 = /*#__PURE__*/Object.defineProperty({
		base64Decode: base64Decode_1
	}, '__esModule', {value: true});

	var base64Encode_1 = base64Encode;

	var _base64Js = interopRequireDefault(base64Js);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name base64Encode
	 * @summary Creates a base64 value.
	 * @description
	 * From the provided input, create the base64 and return the result as a string.
	 */
	function base64Encode(value) {
	  return _base64Js.default.fromByteArray((0, _util$5.u8aToU8a)(value));
	}

	var encode$4 = /*#__PURE__*/Object.defineProperty({
		base64Encode: base64Encode_1
	}, '__esModule', {value: true});

	var base64Pad_1 = base64Pad;

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function base64Pad(value) {
	  return value.padEnd(value.length + value.length % 4, '=');
	}

	var pad = /*#__PURE__*/Object.defineProperty({
		base64Pad: base64Pad_1
	}, '__esModule', {value: true});

	var base64Trim_1 = base64Trim;

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function base64Trim(value) {
	  while (value.length && value[value.length - 1] === '=') {
	    value = value.slice(0, -1);
	  }

	  return value;
	}

	var trim = /*#__PURE__*/Object.defineProperty({
		base64Trim: base64Trim_1
	}, '__esModule', {value: true});

	var isBase64_1 = isBase64;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isBase64(value) {
	  try {
	    return (0, _validate$2.base64Validate)(value);
	  } catch (error) {
	    return false;
	  }
	}

	var is = /*#__PURE__*/Object.defineProperty({
		isBase64: isBase64_1
	}, '__esModule', {value: true});

	var _decode$1 = decode$1;

	var _encode$4 = encode$4;

	var _pad = pad;

	var _trim = trim;

	var _is = is;

	var base64 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "base64Decode", {
	  enumerable: true,
	  get: function () {
	    return _decode$1.base64Decode;
	  }
	});
	Object.defineProperty(exports, "base64Encode", {
	  enumerable: true,
	  get: function () {
	    return _encode$4.base64Encode;
	  }
	});
	Object.defineProperty(exports, "base64Pad", {
	  enumerable: true,
	  get: function () {
	    return _pad.base64Pad;
	  }
	});
	Object.defineProperty(exports, "base64Trim", {
	  enumerable: true,
	  get: function () {
	    return _trim.base64Trim;
	  }
	});
	Object.defineProperty(exports, "base64Validate", {
	  enumerable: true,
	  get: function () {
	    return _validate$2.base64Validate;
	  }
	});
	Object.defineProperty(exports, "isBase64", {
	  enumerable: true,
	  get: function () {
	    return _is.isBase64;
	  }
	});
	});

	var secp256k1Compress_1 = secp256k1Compress;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function secp256k1Compress(publicKey) {
	  (0, _util$5.assert)([33, 65].includes(publicKey.length), 'Invalid publicKey provided');
	  return new Uint8Array(_secp256k.secp256k1.keyFromPublic(publicKey).getPublic().encodeCompressed());
	}

	var compress = /*#__PURE__*/Object.defineProperty({
		secp256k1Compress: secp256k1Compress_1
	}, '__esModule', {value: true});

	var secp256k1Expand_1 = secp256k1Expand;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function secp256k1Expand(publicKey) {
	  (0, _util$5.assert)([33, 65].includes(publicKey.length), 'Invalid publicKey provided');

	  const expanded = _secp256k.secp256k1.keyFromPublic(publicKey).getPublic();

	  return (0, _util$5.u8aConcat)((0, _util$5.bnToU8a)(expanded.getX(), _secp256k.EXPAND_OPT), (0, _util$5.bnToU8a)(expanded.getY(), _secp256k.EXPAND_OPT));
	}

	var expand$1 = /*#__PURE__*/Object.defineProperty({
		secp256k1Expand: secp256k1Expand_1
	}, '__esModule', {value: true});

	var secp256k1Recover_1 = secp256k1Recover;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name secp256k1Recover
	 * @description Recovers a publicKey from the supplied signature
	 */
	function secp256k1Recover(message, signature, recovery) {
	  return new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
	  _secp256k.secp256k1.recoverPubKey(message, {
	    r: signature.slice(0, 32),
	    s: signature.slice(32, 64)
	  }, recovery).encode(null, true));
	}

	var recover = /*#__PURE__*/Object.defineProperty({
		secp256k1Recover: secp256k1Recover_1
	}, '__esModule', {value: true});

	var secp256k1Sign_1 = secp256k1Sign;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name secp256k1Sign
	 * @description Returns message signature of `message`, using the supplied pair
	 */
	function secp256k1Sign(message, {
	  secretKey
	}, hashType = 'blake2') {
	  (0, _util$5.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');

	  const key = _secp256k.secp256k1.keyFromPrivate(secretKey);

	  const ecsig = key.sign((0, _hasher.secp256k1Hasher)(hashType, message));
	  return (0, _util$5.u8aConcat)((0, _util$5.bnToU8a)(ecsig.r, _secp256k.EXPAND_OPT), (0, _util$5.bnToU8a)(ecsig.s, _secp256k.EXPAND_OPT), new Uint8Array([ecsig.recoveryParam || 0]));
	}

	var sign$2 = /*#__PURE__*/Object.defineProperty({
		secp256k1Sign: secp256k1Sign_1
	}, '__esModule', {value: true});

	var secp256k1PrivateKeyTweakAdd_1 = secp256k1PrivateKeyTweakAdd;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const ecparams = _secp256k.secp256k1.curve;

	function secp256k1PrivateKeyTweakAdd(seckey, tweak) {
	  (0, _util$5.assert)((0, _util$5.isU8a)(seckey) && seckey.length === 32, 'Expected seckey to be an Uint8Array with length 32');
	  (0, _util$5.assert)((0, _util$5.isU8a)(tweak) && tweak.length === 32, 'Expected tweak to be an Uint8Array with length 32');
	  const bn = new _util$5.BN(tweak);
	  (0, _util$5.assert)(bn.cmp(ecparams.n) < 0, 'Tweak parameter is out of range');
	  bn.iadd(new _util$5.BN(seckey));

	  if (bn.cmp(ecparams.n) >= 0) {
	    bn.isub(ecparams.n);
	  }

	  (0, _util$5.assert)(!bn.isZero(), 'Invalid resulting private key');
	  return (0, _util$5.bnToU8a)(bn, {
	    bitLength: 256,
	    isLe: false
	  });
	}

	var tweakAdd = /*#__PURE__*/Object.defineProperty({
		secp256k1PrivateKeyTweakAdd: secp256k1PrivateKeyTweakAdd_1
	}, '__esModule', {value: true});

	var _expand = expand$1;

	var secp256k1Verify_1 = secp256k1Verify;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name secp256k1Verify
	 * @description Verifies the signature of `message`, using the supplied pair
	 */
	function secp256k1Verify(message, signature, address, hashType = 'blake2') {
	  const isEthereum = hashType === 'keccak';
	  const u8a = (0, _util$5.u8aToU8a)(signature);
	  (0, _util$5.assert)(u8a.length === 65, `Expected signature with 65 bytes, ${u8a.length} found instead`);
	  const publicKey = new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
	  _secp256k.secp256k1.recoverPubKey((0, _hasher.secp256k1Hasher)(hashType, message), {
	    r: u8a.slice(0, 32),
	    s: u8a.slice(32, 64)
	  }, u8a[64]).encodeCompressed());
	  const signingAddress = (0, _hasher.secp256k1Hasher)(hashType, isEthereum ? (0, _expand.secp256k1Expand)(publicKey) : publicKey);
	  const inputAddress = (0, _util$5.u8aToU8a)(address); // for Ethereum (keccak) the last 20 bytes is the address

	  return isEthereum ? (0, _util$5.u8aEq)(signingAddress.slice(-20), inputAddress.slice(-20)) : (0, _util$5.u8aEq)(signingAddress, inputAddress);
	}

	var verify$2 = /*#__PURE__*/Object.defineProperty({
		secp256k1Verify: secp256k1Verify_1
	}, '__esModule', {value: true});

	var _compress = compress;

	var _recover = recover;

	var _sign$1 = sign$2;

	var _tweakAdd = tweakAdd;

	var _verify3 = verify$2;

	var secp256k1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "secp256k1Compress", {
	  enumerable: true,
	  get: function () {
	    return _compress.secp256k1Compress;
	  }
	});
	Object.defineProperty(exports, "secp256k1Expand", {
	  enumerable: true,
	  get: function () {
	    return _expand.secp256k1Expand;
	  }
	});
	Object.defineProperty(exports, "secp256k1KeypairFromSeed", {
	  enumerable: true,
	  get: function () {
	    return _fromSeed$2.secp256k1KeypairFromSeed;
	  }
	});
	Object.defineProperty(exports, "secp256k1Recover", {
	  enumerable: true,
	  get: function () {
	    return _recover.secp256k1Recover;
	  }
	});
	Object.defineProperty(exports, "secp256k1Sign", {
	  enumerable: true,
	  get: function () {
	    return _sign$1.secp256k1Sign;
	  }
	});
	Object.defineProperty(exports, "secp256k1PrivateKeyTweakAdd", {
	  enumerable: true,
	  get: function () {
	    return _tweakAdd.secp256k1PrivateKeyTweakAdd;
	  }
	});
	Object.defineProperty(exports, "secp256k1Verify", {
	  enumerable: true,
	  get: function () {
	    return _verify3.secp256k1Verify;
	  }
	});
	});

	var _index18 = secp256k1;

	var ethereumEncode_1 = ethereumEncode;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function getH160(u8a) {
	  if ([33, 65].includes(u8a.length)) {
	    u8a = (0, _index10.keccakAsU8a)((0, _index18.secp256k1Expand)(u8a));
	  }

	  return u8a.slice(-20);
	}

	function ethereumEncode(addressOrPublic) {
	  if (!addressOrPublic) {
	    return '0x';
	  }

	  const u8aAddress = (0, _util$5.u8aToU8a)(addressOrPublic);
	  (0, _util$5.assert)([20, 32, 33, 65].includes(u8aAddress.length), 'Invalid address or publicKey passed');
	  const address = (0, _util$5.u8aToHex)(getH160(u8aAddress), -1, false);
	  const hash = (0, _util$5.u8aToHex)((0, _index10.keccakAsU8a)(address), -1, false);
	  let result = '';

	  for (let index = 0; index < 40; index++) {
	    result = `${result}${parseInt(hash[index], 16) > 7 ? address[index].toUpperCase() : address[index]}`;
	  }

	  return `0x${result}`;
	}

	var encode$3 = /*#__PURE__*/Object.defineProperty({
		ethereumEncode: ethereumEncode_1
	}, '__esModule', {value: true});

	var isEthereumChecksum_1 = isEthereumChecksum;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isInvalidChar(char, byte) {
	  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
	}

	function isEthereumChecksum(_address) {
	  const address = _address.replace('0x', '');

	  const hash = (0, _util$5.u8aToHex)((0, _index10.keccakAsU8a)(address.toLowerCase()), -1, false);

	  for (let index = 0; index < 40; index++) {
	    if (isInvalidChar(address[index], parseInt(hash[index], 16))) {
	      return false;
	    }
	  }

	  return true;
	}

	var isChecksum = /*#__PURE__*/Object.defineProperty({
		isEthereumChecksum: isEthereumChecksum_1
	}, '__esModule', {value: true});

	var _isChecksum = isChecksum;

	var isEthereumAddress_1 = isEthereumAddress;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isEthereumAddress(address) {
	  if (!address || address.length !== 42 || !(0, _util$5.isHex)(address)) {
	    return false;
	  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
	    return true;
	  }

	  return (0, _isChecksum.isEthereumChecksum)(address);
	}

	var isAddress = /*#__PURE__*/Object.defineProperty({
		isEthereumAddress: isEthereumAddress_1
	}, '__esModule', {value: true});

	var _encode$3 = encode$3;

	var _isAddress = isAddress;

	var ethereum$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "ethereumEncode", {
	  enumerable: true,
	  get: function () {
	    return _encode$3.ethereumEncode;
	  }
	});
	Object.defineProperty(exports, "isEthereumAddress", {
	  enumerable: true,
	  get: function () {
	    return _isAddress.isEthereumAddress;
	  }
	});
	Object.defineProperty(exports, "isEthereumChecksum", {
	  enumerable: true,
	  get: function () {
	    return _isChecksum.isEthereumChecksum;
	  }
	});
	});

	var hmacSha256_1 = hmacSha256;

	var _hash$2 = interopRequireDefault(hash_1);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hmacSha256(key, data) {
	  return Uint8Array.from(_hash$2.default // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // @ts-ignore
	  .hmac(_hash$2.default.sha256, key).update(data).digest());
	}

	var sha256 = /*#__PURE__*/Object.defineProperty({
		hmacSha256: hmacSha256_1
	}, '__esModule', {value: true});

	var hmacSha512_1 = hmacSha512;

	var _hash$1 = interopRequireDefault(hash_1);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hmacSha512(key, data) {
	  return Uint8Array.from(_hash$1.default // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // @ts-ignore
	  .hmac(_hash$1.default.sha512, key).update(data).digest());
	}

	var sha512$1 = /*#__PURE__*/Object.defineProperty({
		hmacSha512: hmacSha512_1
	}, '__esModule', {value: true});

	var _sha = sha256;

	var _sha2 = sha512$1;

	var hmac = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "hmacSha256", {
	  enumerable: true,
	  get: function () {
	    return _sha.hmacSha256;
	  }
	});
	Object.defineProperty(exports, "hmacSha512", {
	  enumerable: true,
	  get: function () {
	    return _sha2.hmacSha512;
	  }
	});
	});

	var validatePath = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.hdValidatePath = hdValidatePath;
	exports.HARDENED = void 0;
	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HARDENED = 0x80000000;
	exports.HARDENED = HARDENED;

	function hdValidatePath(path) {
	  if (!path.startsWith('m/')) {
	    return false;
	  }

	  const parts = path.split('/').slice(1);
	  return parts.every(n => /^\d+'?$/.test(n)) && !parts.map(n => parseInt(n.replace(/'$/, ''), 10)).some(n => isNaN(n) || n >= HARDENED || n < 0);
	}
	});

	var _index8 = hmac;

	var _validatePath = validatePath;

	var hdEthereum_1 = hdEthereum;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const MASTER_SECRET = (0, _util$5.stringToU8a)('Bitcoin seed');

	function createCoded(secretKey, chainCode) {
	  return {
	    chainCode,
	    publicKey: (0, _index18.secp256k1KeypairFromSeed)(secretKey).publicKey,
	    secretKey
	  };
	}

	function deriveChild(hd, index) {
	  const indexBuffer = (0, _util$5.bnToU8a)(index, {
	    bitLength: 32,
	    isLe: false
	  });
	  const data = index >= _validatePath.HARDENED ? (0, _util$5.u8aConcat)(new Uint8Array(1), hd.secretKey, indexBuffer) : (0, _util$5.u8aConcat)(hd.publicKey, indexBuffer);

	  try {
	    const I = (0, _index8.hmacSha512)(hd.chainCode, data);
	    return createCoded((0, _index18.secp256k1PrivateKeyTweakAdd)(hd.secretKey, I.slice(0, 32)), I.slice(32));
	  } catch (err) {
	    // In case parse256(IL) >= n or ki == 0, proceed with the next value for i
	    return deriveChild(hd, index + 1);
	  }
	}

	function hdEthereum(seed, path = '') {
	  const I = (0, _index8.hmacSha512)(MASTER_SECRET, seed);
	  const hd = createCoded(I.slice(0, 32), I.slice(32));

	  if (!path || path === 'm' || path === 'M' || path === "m'" || path === "M'") {
	    return hd;
	  }

	  (0, _util$5.assert)((0, _validatePath.hdValidatePath)(path), 'Invalid derivation path');
	  return path.split('/').slice(1).reduce((hd, c) => deriveChild(hd, parseInt(c, 10) + (c.length > 1 && c.endsWith("'") ? _validatePath.HARDENED : 0)), hd);
	}

	var ethereum$1 = /*#__PURE__*/Object.defineProperty({
		hdEthereum: hdEthereum_1
	}, '__esModule', {value: true});

	var randomAsU8a_1 = randomAsU8a;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name randomAsU8a
	 * @summary Creates a Uint8Array filled with random bytes.
	 * @description
	 * Returns a `Uint8Array` with the specified (optional) length filled with random bytes.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { randomAsU8a } from '@polkadot/util-crypto';
	 *
	 * randomAsU8a(); // => Uint8Array([...])
	 * ```
	 */
	function randomAsU8a(length = 32) {
	  return (0, _xRandomvalues__default['default'].getRandomValues)(new Uint8Array(length));
	}

	var asU8a$2 = /*#__PURE__*/Object.defineProperty({
		randomAsU8a: randomAsU8a_1
	}, '__esModule', {value: true});

	var pbkdf2Sync_1 = pbkdf2Sync;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Adapted from https://gist.github.com/calvinmetcalf/91e8e84dc63c75f2aa53
	function pbkdf2Sync(password, salt, rounds, len = 64) {
	  let out = new Uint8Array();
	  let num = 0;
	  const block = (0, _util$5.u8aConcat)(salt, new Uint8Array(4));

	  while (out.length < len) {
	    num++;
	    block.set((0, _util$5.bnToU8a)(num, {
	      bitLength: 32,
	      isLe: false
	    }), salt.length);
	    let prev = (0, _index8.hmacSha512)(password, block);
	    const md = prev;
	    let i = 0;

	    while (++i < rounds) {
	      prev = (0, _index8.hmacSha512)(password, prev);
	      let j = -1;

	      while (++j < prev.length) {
	        md[j] ^= prev[j];
	      }
	    }

	    out = (0, _util$5.u8aConcat)(out, md);
	  }

	  return out.slice(0, len);
	}

	var pbkdf2$1 = /*#__PURE__*/Object.defineProperty({
		pbkdf2Sync: pbkdf2Sync_1
	}, '__esModule', {value: true});

	var _asU8a$2 = asU8a$2;

	var _pbkdf = pbkdf2$1;

	var pbkdf2Encode_1 = pbkdf2Encode;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function pbkdf2Encode(passphrase, salt = (0, _asU8a$2.randomAsU8a)(), rounds = 2048, onlyJs = false) {
	  const u8aPass = (0, _util$5.u8aToU8a)(passphrase);
	  const u8aSalt = (0, _util$5.u8aToU8a)(salt);
	  const password = (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.pbkdf2)(u8aPass, u8aSalt, rounds) : (0, _pbkdf.pbkdf2Sync)(u8aPass, u8aSalt, rounds);
	  return {
	    password,
	    rounds,
	    salt
	  };
	}

	var encode$2 = /*#__PURE__*/Object.defineProperty({
		pbkdf2Encode: pbkdf2Encode_1
	}, '__esModule', {value: true});

	var _encode$2 = encode$2;

	var pbkdf2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "pbkdf2Encode", {
	  enumerable: true,
	  get: function () {
	    return _encode$2.pbkdf2Encode;
	  }
	});
	});

	var bip39En = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Adapted from the bitcoinjs/bip39 source
	// https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/
	var _default = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics', 'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo'];
	exports.default = _default;
	});

	var _index14 = pbkdf2;

	var require$$1$7 = bip39En;

	var mnemonicToSeedSync_1 = mnemonicToSeedSync;
	var mnemonicToEntropy_1$1 = mnemonicToEntropy$1;
	var entropyToMnemonic_1 = entropyToMnemonic;
	var generateMnemonic_1 = generateMnemonic;
	var validateMnemonic_1 = validateMnemonic;

	var _hash = interopRequireDefault(hash_1);







	var _bip39En = interopRequireDefault(require$$1$7);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Adapted from the bitcoinjs/bip39 source
	// https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/index.ts
	// Copyright (c) 2014, Wei Lu <luwei.here@gmail.com> and Daniel Cousens <email@dcousens.com>
	// ISC Licence
	//
	// Change made in this version -
	//   - Adjust formatting (just eslint differences)
	//   - Only English wordlist (this aligns with the wasm-crypto implementation)
	//   - Use util-crypto randomAsU8a (instead of randombytes)
	//   - Remove setting of wordlost passing of wordlist in functions
	//   - Remove mnemonicToSeed (we only use the sync variant)
	const INVALID_MNEMONIC = 'Invalid mnemonic';
	const INVALID_ENTROPY = 'Invalid entropy';
	const INVALID_CHECKSUM = 'Invalid mnemonic checksum';

	function normalize(str) {
	  return (str || '').normalize('NFKD');
	}

	function binaryToByte(bin) {
	  return parseInt(bin, 2);
	}

	function bytesToBinary(bytes) {
	  return bytes.map(x => x.toString(2).padStart(8, '0')).join('');
	}

	function deriveChecksumBits(entropyBuffer) {
	  const ENT = entropyBuffer.length * 8;
	  const CS = ENT / 32;

	  const result = _hash.default.sha256().update(entropyBuffer).digest();

	  return bytesToBinary(Array.from(result)).slice(0, CS);
	}

	function mnemonicToSeedSync(mnemonic, password) {
	  const mnemonicBuffer = (0, _util$5.stringToU8a)(normalize(mnemonic));
	  const saltBuffer = (0, _util$5.stringToU8a)(`mnemonic${normalize(password)}`);
	  return (0, _index14.pbkdf2Encode)(mnemonicBuffer, saltBuffer).password;
	}

	function mnemonicToEntropy$1(mnemonic) {
	  var _entropyBits$match;

	  const words = normalize(mnemonic).split(' ');
	  (0, _util$5.assert)(words.length % 3 === 0, INVALID_MNEMONIC); // convert word indices to 11 bit binary strings

	  const bits = words.map(word => {
	    const index = _bip39En.default.indexOf(word);

	    (0, _util$5.assert)(index !== -1, INVALID_MNEMONIC);
	    return index.toString(2).padStart(11, '0');
	  }).join(''); // split the binary string into ENT/CS

	  const dividerIndex = Math.floor(bits.length / 33) * 32;
	  const entropyBits = bits.slice(0, dividerIndex);
	  const checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare

	  const entropyBytes = (_entropyBits$match = entropyBits.match(/(.{1,8})/g)) === null || _entropyBits$match === void 0 ? void 0 : _entropyBits$match.map(binaryToByte);
	  (0, _util$5.assert)(entropyBytes && entropyBytes.length % 4 === 0 && entropyBytes.length >= 16 && entropyBytes.length <= 32, INVALID_ENTROPY);
	  const entropy = (0, _util$5.u8aToU8a)(entropyBytes);
	  const newChecksum = deriveChecksumBits(entropy);
	  (0, _util$5.assert)(newChecksum === checksumBits, INVALID_CHECKSUM);
	  return entropy;
	}

	function entropyToMnemonic(entropy) {
	  // 128 <= ENT <= 256
	  (0, _util$5.assert)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, INVALID_ENTROPY);
	  const entropyBits = bytesToBinary(Array.from(entropy));
	  const checksumBits = deriveChecksumBits(entropy); // we just set it prior, so this is a safe check
	  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

	  return (entropyBits + checksumBits).match(/(.{1,11})/g).map(binary => _bip39En.default[binaryToByte(binary)]).join(' ');
	}

	function generateMnemonic(strength) {
	  strength = strength || 128;
	  (0, _util$5.assert)(strength % 32 === 0, INVALID_ENTROPY);
	  return entropyToMnemonic((0, _asU8a$2.randomAsU8a)(strength / 8));
	}

	function validateMnemonic(mnemonic) {
	  try {
	    mnemonicToEntropy$1(mnemonic);
	  } catch (e) {
	    return false;
	  }

	  return true;
	}

	var bip39 = /*#__PURE__*/Object.defineProperty({
		mnemonicToSeedSync: mnemonicToSeedSync_1,
		mnemonicToEntropy: mnemonicToEntropy_1$1,
		entropyToMnemonic: entropyToMnemonic_1,
		generateMnemonic: generateMnemonic_1,
		validateMnemonic: validateMnemonic_1
	}, '__esModule', {value: true});

	var _bip = bip39;

	var mnemonicGenerate_1 = mnemonicGenerate;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// mapping of words to the actual strength (as expected)
	const STRENGTH_MAP = {
	  12: 16 * 8,
	  15: 20 * 8,
	  18: 24 * 8,
	  21: 28 * 8,
	  24: 32 * 8
	};
	/**
	 * @name mnemonicGenerate
	 * @summary Creates a valid mnemonic string using using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { mnemonicGenerate } from '@polkadot/util-crypto';
	 *
	 * const mnemonic = mnemonicGenerate(); // => string
	 * ```
	 */

	function mnemonicGenerate(numWords = 12, onlyJs = false) {
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.bip39Generate)(numWords) : (0, _bip.generateMnemonic)(STRENGTH_MAP[numWords]);
	}

	var generate$1 = /*#__PURE__*/Object.defineProperty({
		mnemonicGenerate: mnemonicGenerate_1
	}, '__esModule', {value: true});

	var mnemonicToEntropy_1 = mnemonicToEntropy;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function mnemonicToEntropy(mnemonic, onlyJs = false) {
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.bip39ToEntropy)(mnemonic) : (0, _bip.mnemonicToEntropy)(mnemonic);
	}

	var toEntropy = /*#__PURE__*/Object.defineProperty({
		mnemonicToEntropy: mnemonicToEntropy_1
	}, '__esModule', {value: true});

	var mnemonicValidate_1 = mnemonicValidate;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name mnemonicValidate
	 * @summary Validates a mnemonic input using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { mnemonicGenerate, mnemonicValidate } from '@polkadot/util-crypto';
	 *
	 * const mnemonic = mnemonicGenerate(); // => string
	 * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
	 * ```
	 */
	function mnemonicValidate(mnemonic, onlyJs = false) {
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.bip39Validate)(mnemonic) : (0, _bip.validateMnemonic)(mnemonic);
	}

	var validate$1 = /*#__PURE__*/Object.defineProperty({
		mnemonicValidate: mnemonicValidate_1
	}, '__esModule', {value: true});

	var _validate$1 = validate$1;

	var mnemonicToLegacySeed_1 = mnemonicToLegacySeed;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name toSeed
	 * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';
	 *
	 * const mnemonic = mnemonicGenerate(); // => string
	 * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
	 *
	 * if (isValidMnemonic) {
	 *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a
	 * }
	 * ```
	 */
	function mnemonicToLegacySeed(mnemonic, password = '', onlyJs = false, byteLength = 32) {
	  (0, _util$5.assert)((0, _validate$1.mnemonicValidate)(mnemonic), 'Invalid bip39 mnemonic specified');
	  (0, _util$5.assert)([32, 64].includes(byteLength), () => `Invalid seed length ${byteLength}, expected 32 or 64`);

	  if (byteLength && byteLength === 32) {
	    return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.bip39ToSeed)(mnemonic, password) : (0, _bip.mnemonicToSeedSync)(mnemonic, password).subarray(0, 32);
	  } else if (byteLength === 64) {
	    return (0, _bip.mnemonicToSeedSync)(mnemonic, password);
	  } else {
	    return new Uint8Array();
	  }
	}

	var toLegacySeed = /*#__PURE__*/Object.defineProperty({
		mnemonicToLegacySeed: mnemonicToLegacySeed_1
	}, '__esModule', {value: true});

	var _toEntropy = toEntropy;

	var mnemonicToMiniSecret_1 = mnemonicToMiniSecret;











	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function mnemonicToMiniSecret(mnemonic, password = '', onlyJs = false) {
	  (0, _util$5.assert)((0, _validate$1.mnemonicValidate)(mnemonic), 'Invalid bip39 mnemonic specified');

	  if ((0, _wasmCrypto.isReady)() && !onlyJs) {
	    return (0, _wasmCrypto.bip39ToMiniSecret)(mnemonic, password);
	  }

	  const entropy = (0, _toEntropy.mnemonicToEntropy)(mnemonic);
	  const salt = (0, _util$5.stringToU8a)(`mnemonic${password}`); // return the first 32 bytes as the seed

	  return (0, _index14.pbkdf2Encode)(entropy, salt).password.slice(0, 32);
	}

	var toMiniSecret = /*#__PURE__*/Object.defineProperty({
		mnemonicToMiniSecret: mnemonicToMiniSecret_1
	}, '__esModule', {value: true});

	var _generate = generate$1;

	var _toLegacySeed = toLegacySeed;

	var _toMiniSecret = toMiniSecret;

	var mnemonic = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "mnemonicGenerate", {
	  enumerable: true,
	  get: function () {
	    return _generate.mnemonicGenerate;
	  }
	});
	Object.defineProperty(exports, "mnemonicToEntropy", {
	  enumerable: true,
	  get: function () {
	    return _toEntropy.mnemonicToEntropy;
	  }
	});
	Object.defineProperty(exports, "mnemonicToLegacySeed", {
	  enumerable: true,
	  get: function () {
	    return _toLegacySeed.mnemonicToLegacySeed;
	  }
	});
	Object.defineProperty(exports, "mnemonicToMiniSecret", {
	  enumerable: true,
	  get: function () {
	    return _toMiniSecret.mnemonicToMiniSecret;
	  }
	});
	Object.defineProperty(exports, "mnemonicValidate", {
	  enumerable: true,
	  get: function () {
	    return _validate$1.mnemonicValidate;
	  }
	});
	});

	var naclDecrypt_1 = naclDecrypt;

	var _tweetnacl$9 = interopRequireDefault(naclFast);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclDecrypt
	 * @summary Decrypts a message using the supplied secretKey and nonce
	 * @description
	 * Returns an decrypted message, using the `secret` and `nonce`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclDecrypt } from '@polkadot/util-crypto';
	 *
	 * naclDecrypt([...], [...], [...]); // => [...]
	 * ```
	 */
	function naclDecrypt(encrypted, nonce, secret) {
	  return _tweetnacl$9.default.secretbox.open(encrypted, nonce, secret) || null;
	}

	var decrypt$1 = /*#__PURE__*/Object.defineProperty({
		naclDecrypt: naclDecrypt_1
	}, '__esModule', {value: true});

	var naclEncrypt_1 = naclEncrypt;

	var _tweetnacl$8 = interopRequireDefault(naclFast);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclEncrypt
	 * @summary Encrypts a message using the supplied secretKey and nonce
	 * @description
	 * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclEncrypt } from '@polkadot/util-crypto';
	 *
	 * naclEncrypt([...], [...]); // => [...]
	 * ```
	 */
	function naclEncrypt(message, secret, nonce = (0, _asU8a$2.randomAsU8a)(24)) {
	  return {
	    encrypted: _tweetnacl$8.default.secretbox(message, nonce, secret),
	    nonce
	  };
	}

	var encrypt$1 = /*#__PURE__*/Object.defineProperty({
		naclEncrypt: naclEncrypt_1
	}, '__esModule', {value: true});

	var naclKeypairFromRandom_1 = naclKeypairFromRandom;

	var _tweetnacl$7 = interopRequireDefault(naclFast);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclKeypairFromRandom
	 * @summary Creates a new public/secret keypair.
	 * @description
	 * Returns a new generate object containing a `publicKey` & `secretKey`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclKeypairFromRandom } from '@polkadot/util-crypto';
	 *
	 * naclKeypairFromRandom(); // => { secretKey: [...], publicKey: [...] }
	 * ```
	 */
	function naclKeypairFromRandom() {
	  return _tweetnacl$7.default.sign.keyPair();
	}

	var fromRandom = /*#__PURE__*/Object.defineProperty({
		naclKeypairFromRandom: naclKeypairFromRandom_1
	}, '__esModule', {value: true});

	var naclKeypairFromSecret_1 = naclKeypairFromSecret;

	var _tweetnacl$6 = interopRequireDefault(naclFast);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclKeypairFromSecret
	 * @summary Creates a new public/secret keypair from a secret.
	 * @description
	 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied secret.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclKeypairFromSecret } from '@polkadot/util-crypto';
	 *
	 * naclKeypairFromSecret(...); // => { secretKey: [...], publicKey: [...] }
	 * ```
	 */
	function naclKeypairFromSecret(secret) {
	  return _tweetnacl$6.default.sign.keyPair.fromSecretKey(secret);
	}

	var fromSecret$1 = /*#__PURE__*/Object.defineProperty({
		naclKeypairFromSecret: naclKeypairFromSecret_1
	}, '__esModule', {value: true});

	var naclKeypairFromString_1 = naclKeypairFromString;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclKeypairFromString
	 * @summary Creates a new public/secret keypair from a string.
	 * @description
	 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied string. The string is hashed and the value used as the input seed.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclKeypairFromString } from '@polkadot/util-crypto';
	 *
	 * naclKeypairFromString('test'); // => { secretKey: [...], publicKey: [...] }
	 * ```
	 */
	function naclKeypairFromString(value) {
	  return (0, _fromSeed$1.naclKeypairFromSeed)((0, _asU8a$4.blake2AsU8a)((0, _util$5.stringToU8a)(value), 256));
	}

	var fromString = /*#__PURE__*/Object.defineProperty({
		naclKeypairFromString: naclKeypairFromString_1
	}, '__esModule', {value: true});

	var naclSign_1 = naclSign;

	var _tweetnacl$5 = interopRequireDefault(naclFast);





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclSign
	 * @summary Signs a message using the supplied secretKey
	 * @description
	 * Returns message signature of `message`, using the `secretKey`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclSign } from '@polkadot/util-crypto';
	 *
	 * naclSign([...], [...]); // => [...]
	 * ```
	 */
	function naclSign(message, {
	  publicKey,
	  secretKey
	}, onlyJs = false) {
	  (0, _util$5.assert)(secretKey, 'Expected a valid secretKey');
	  const messageU8a = (0, _util$5.u8aToU8a)(message);
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.ed25519Sign)(publicKey, secretKey.subarray(0, 32), messageU8a) : _tweetnacl$5.default.sign.detached(messageU8a, secretKey);
	}

	var sign$1 = /*#__PURE__*/Object.defineProperty({
		naclSign: naclSign_1
	}, '__esModule', {value: true});

	var naclVerify_1 = naclVerify;

	var _tweetnacl$4 = interopRequireDefault(naclFast);





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclSign
	 * @summary Verifies the signature on the supplied message.
	 * @description
	 * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclVerify } from '@polkadot/util-crypto';
	 *
	 * naclVerify([...], [...], [...]); // => true/false
	 * ```
	 */
	function naclVerify(message, signature, publicKey, onlyJs = false) {
	  const messageU8a = (0, _util$5.u8aToU8a)(message);
	  const publicKeyU8a = (0, _util$5.u8aToU8a)(publicKey);
	  const signatureU8a = (0, _util$5.u8aToU8a)(signature);
	  (0, _util$5.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
	  (0, _util$5.assert)(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.ed25519Verify)(signatureU8a, messageU8a, publicKeyU8a) : _tweetnacl$4.default.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);
	}

	var verify$1 = /*#__PURE__*/Object.defineProperty({
		naclVerify: naclVerify_1
	}, '__esModule', {value: true});

	var naclBoxKeypairFromSecret_1 = naclBoxKeypairFromSecret;

	var _tweetnacl$3 = interopRequireDefault(naclFast);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclBoxKeypairFromSecret
	 * @summary Creates a new public/secret box keypair from a secret.
	 * @description
	 * Returns a object containing a box `publicKey` & `secretKey` generated from the supplied secret.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclBoxKeypairFromSecret } from '@polkadot/util-crypto';
	 *
	 * naclBoxKeypairFromSecret(...); // => { secretKey: [...], publicKey: [...] }
	 * ```
	 */
	function naclBoxKeypairFromSecret(secret) {
	  return _tweetnacl$3.default.box.keyPair.fromSecretKey(secret.slice(0, 32));
	}

	var fromSecret = /*#__PURE__*/Object.defineProperty({
		naclBoxKeypairFromSecret: naclBoxKeypairFromSecret_1
	}, '__esModule', {value: true});

	var naclOpen_1 = naclOpen;

	var _tweetnacl$2 = interopRequireDefault(naclFast);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclOpen
	 * @summary Opens a message using the receiver's secretKey and nonce
	 * @description
	 * Returns a message sealed by the sender, using the receiver's `secret` and `nonce`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclOpen } from '@polkadot/util-crypto';
	 *
	 * naclOpen([...], [...], [...]); // => [...]
	 * ```
	 */
	function naclOpen(sealed, nonce, senderBoxPublic, receiverBoxSecret) {
	  return _tweetnacl$2.default.box.open(sealed, nonce, senderBoxPublic, receiverBoxSecret) || null;
	}

	var open = /*#__PURE__*/Object.defineProperty({
		naclOpen: naclOpen_1
	}, '__esModule', {value: true});

	var naclSeal_1 = naclSeal;

	var _tweetnacl$1 = interopRequireDefault(naclFast);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name naclSeal
	 * @summary Seals a message using the sender's encrypting secretKey, receiver's public key, and nonce
	 * @description
	 * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { naclSeal } from '@polkadot/util-crypto';
	 *
	 * naclSeal([...], [...], [...], [...]); // => [...]
	 * ```
	 */
	function naclSeal(message, senderBoxSecret, receiverBoxPublic, nonce = (0, _asU8a$2.randomAsU8a)(24)) {
	  return {
	    nonce,
	    sealed: _tweetnacl$1.default.box(message, nonce, receiverBoxPublic, senderBoxSecret)
	  };
	}

	var seal = /*#__PURE__*/Object.defineProperty({
		naclSeal: naclSeal_1
	}, '__esModule', {value: true});

	/*
	 * ed2curve: convert Ed25519 signing key pair into Curve25519
	 * key pair suitable for Diffie-Hellman key exchange.
	 *
	 * Written by Dmitry Chestnykh in 2014. Public domain.
	 */

	var ed2curve = createCommonjsModule(function (module) {
	/* jshint newcap: false */
	(function(root, f) {
	  if (module.exports) module.exports = f(naclFast);
	  else root.ed2curve = f(root.nacl);
	}(commonjsGlobal, function(nacl) {
	  if (!nacl) throw new Error('tweetnacl not loaded');

	  // -- Operations copied from TweetNaCl.js. --

	  var gf = function(init) {
	    var i, r = new Float64Array(16);
	    if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	    return r;
	  };

	  var gf0 = gf(),
	      gf1 = gf([1]),
	      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	  function car25519(o) {
	    var c;
	    var i;
	    for (i = 0; i < 16; i++) {
	      o[i] += 65536;
	      c = Math.floor(o[i] / 65536);
	      o[(i+1)*(i<15?1:0)] += c - 1 + 37 * (c-1) * (i===15?1:0);
	      o[i] -= (c * 65536);
	    }
	  }

	  function sel25519(p, q, b) {
	    var t, c = ~(b-1);
	    for (var i = 0; i < 16; i++) {
	      t = c & (p[i] ^ q[i]);
	      p[i] ^= t;
	      q[i] ^= t;
	    }
	  }

	  function unpack25519(o, n) {
	    var i;
	    for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	    o[15] &= 0x7fff;
	  }

	  // addition
	  function A(o, a, b) {
	    var i;
	    for (i = 0; i < 16; i++) o[i] = (a[i] + b[i])|0;
	  }

	  // subtraction
	  function Z(o, a, b) {
	    var i;
	    for (i = 0; i < 16; i++) o[i] = (a[i] - b[i])|0;
	  }

	  // multiplication
	  function M(o, a, b) {
	    var i, j, t = new Float64Array(31);
	    for (i = 0; i < 31; i++) t[i] = 0;
	    for (i = 0; i < 16; i++) {
	      for (j = 0; j < 16; j++) {
	        t[i+j] += a[i] * b[j];
	      }
	    }
	    for (i = 0; i < 15; i++) {
	      t[i] += 38 * t[i+16];
	    }
	    for (i = 0; i < 16; i++) o[i] = t[i];
	    car25519(o);
	    car25519(o);
	  }

	  // squaring
	  function S(o, a) {
	    M(o, a, a);
	  }

	  // inversion
	  function inv25519(o, i) {
	    var c = gf();
	    var a;
	    for (a = 0; a < 16; a++) c[a] = i[a];
	    for (a = 253; a >= 0; a--) {
	      S(c, c);
	      if(a !== 2 && a !== 4) M(c, c, i);
	    }
	    for (a = 0; a < 16; a++) o[a] = c[a];
	  }

	  function pack25519(o, n) {
	    var i, j, b;
	    var m = gf(), t = gf();
	    for (i = 0; i < 16; i++) t[i] = n[i];
	    car25519(t);
	    car25519(t);
	    car25519(t);
	    for (j = 0; j < 2; j++) {
	      m[0] = t[0] - 0xffed;
	      for (i = 1; i < 15; i++) {
	        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	        m[i-1] &= 0xffff;
	      }
	      m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	      b = (m[15]>>16) & 1;
	      m[14] &= 0xffff;
	      sel25519(t, m, 1-b);
	    }
	    for (i = 0; i < 16; i++) {
	      o[2*i] = t[i] & 0xff;
	      o[2*i+1] = t[i] >> 8;
	    }
	  }

	  function par25519(a) {
	    var d = new Uint8Array(32);
	    pack25519(d, a);
	    return d[0] & 1;
	  }

	  function vn(x, xi, y, yi, n) {
	    var i, d = 0;
	    for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
	    return (1 & ((d - 1) >>> 8)) - 1;
	  }

	  function crypto_verify_32(x, xi, y, yi) {
	    return vn(x, xi, y, yi, 32);
	  }

	  function neq25519(a, b) {
	    var c = new Uint8Array(32), d = new Uint8Array(32);
	    pack25519(c, a);
	    pack25519(d, b);
	    return crypto_verify_32(c, 0, d, 0);
	  }

	  function pow2523(o, i) {
	    var c = gf();
	    var a;
	    for (a = 0; a < 16; a++) c[a] = i[a];
	    for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if (a !== 1) M(c, c, i);
	    }
	    for (a = 0; a < 16; a++) o[a] = c[a];
	  }

	  function set25519(r, a) {
	    var i;
	    for (i = 0; i < 16; i++) r[i] = a[i] | 0;
	  }

	  function unpackneg(r, p) {
	    var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	    set25519(r[2], gf1);
	    unpack25519(r[1], p);
	    S(num, r[1]);
	    M(den, num, D);
	    Z(num, num, r[2]);
	    A(den, r[2], den);

	    S(den2, den);
	    S(den4, den2);
	    M(den6, den4, den2);
	    M(t, den6, num);
	    M(t, t, den);

	    pow2523(t, t);
	    M(t, t, num);
	    M(t, t, den);
	    M(t, t, den);
	    M(r[0], t, den);

	    S(chk, r[0]);
	    M(chk, chk, den);
	    if (neq25519(chk, num)) M(r[0], r[0], I);

	    S(chk, r[0]);
	    M(chk, chk, den);
	    if (neq25519(chk, num)) return -1;

	    if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

	    M(r[3], r[0], r[1]);
	    return 0;
	  }

	  // ----

	  // Converts Ed25519 public key to Curve25519 public key.
	  // montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
	  function convertPublicKey(pk) {
	    var z = new Uint8Array(32),
	      q = [gf(), gf(), gf(), gf()],
	      a = gf(), b = gf();

	    if (unpackneg(q, pk)) return null; // reject invalid key

	    var y = q[1];

	    A(a, gf1, y);
	    Z(b, gf1, y);
	    inv25519(b, b);
	    M(a, a, b);

	    pack25519(z, a);
	    return z;
	  }

	  // Converts Ed25519 secret key to Curve25519 secret key.
	  function convertSecretKey(sk) {
	    var d = new Uint8Array(64), o = new Uint8Array(32), i;
	    nacl.lowlevel.crypto_hash(d, sk, 32);
	    d[0] &= 248;
	    d[31] &= 127;
	    d[31] |= 64;
	    for (i = 0; i < 32; i++) o[i] = d[i];
	    for (i = 0; i < 64; i++) d[i] = 0;
	    return o;
	  }

	  function convertKeyPair(edKeyPair) {
	    var publicKey = convertPublicKey(edKeyPair.publicKey);
	    if (!publicKey) return null;
	    return {
	      publicKey: publicKey,
	      secretKey: convertSecretKey(edKeyPair.secretKey)
	    };
	  }

	  return {
	    convertPublicKey: convertPublicKey,
	    convertSecretKey: convertSecretKey,
	    convertKeyPair: convertKeyPair,
	  };

	}));
	});

	var convertSecretKeyToCurve25519_1 = convertSecretKeyToCurve25519;
	var convertPublicKeyToCurve25519_1 = convertPublicKeyToCurve25519;

	var _ed2curve = interopRequireDefault(ed2curve);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function convertSecretKeyToCurve25519(secretKey) {
	  return _ed2curve.default.convertSecretKey(secretKey);
	}

	function convertPublicKeyToCurve25519(publicKey) {
	  return _ed2curve.default.convertPublicKey(publicKey);
	}

	var convertKey = /*#__PURE__*/Object.defineProperty({
		convertSecretKeyToCurve25519: convertSecretKeyToCurve25519_1,
		convertPublicKeyToCurve25519: convertPublicKeyToCurve25519_1
	}, '__esModule', {value: true});

	var _decrypt$1 = decrypt$1;

	var _encrypt$1 = encrypt$1;

	var _fromRandom = fromRandom;

	var _fromSecret = fromSecret$1;

	var _fromString = fromString;

	var _sign = sign$1;

	var _verify$1 = verify$1;

	var _fromSecret2 = fromSecret;

	var _open = open;

	var _seal = seal;

	var _convertKey = convertKey;

	var nacl = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "naclDecrypt", {
	  enumerable: true,
	  get: function () {
	    return _decrypt$1.naclDecrypt;
	  }
	});
	Object.defineProperty(exports, "naclEncrypt", {
	  enumerable: true,
	  get: function () {
	    return _encrypt$1.naclEncrypt;
	  }
	});
	Object.defineProperty(exports, "naclKeypairFromRandom", {
	  enumerable: true,
	  get: function () {
	    return _fromRandom.naclKeypairFromRandom;
	  }
	});
	Object.defineProperty(exports, "naclKeypairFromSecret", {
	  enumerable: true,
	  get: function () {
	    return _fromSecret.naclKeypairFromSecret;
	  }
	});
	Object.defineProperty(exports, "naclKeypairFromSeed", {
	  enumerable: true,
	  get: function () {
	    return _fromSeed$1.naclKeypairFromSeed;
	  }
	});
	Object.defineProperty(exports, "naclKeypairFromString", {
	  enumerable: true,
	  get: function () {
	    return _fromString.naclKeypairFromString;
	  }
	});
	Object.defineProperty(exports, "naclSign", {
	  enumerable: true,
	  get: function () {
	    return _sign.naclSign;
	  }
	});
	Object.defineProperty(exports, "naclVerify", {
	  enumerable: true,
	  get: function () {
	    return _verify$1.naclVerify;
	  }
	});
	Object.defineProperty(exports, "naclBoxKeypairFromSecret", {
	  enumerable: true,
	  get: function () {
	    return _fromSecret2.naclBoxKeypairFromSecret;
	  }
	});
	Object.defineProperty(exports, "naclOpen", {
	  enumerable: true,
	  get: function () {
	    return _open.naclOpen;
	  }
	});
	Object.defineProperty(exports, "naclSeal", {
	  enumerable: true,
	  get: function () {
	    return _seal.naclSeal;
	  }
	});
	Object.defineProperty(exports, "convertSecretKeyToCurve25519", {
	  enumerable: true,
	  get: function () {
	    return _convertKey.convertSecretKeyToCurve25519;
	  }
	});
	Object.defineProperty(exports, "convertPublicKeyToCurve25519", {
	  enumerable: true,
	  get: function () {
	    return _convertKey.convertPublicKeyToCurve25519;
	  }
	});
	});

	var ledgerDerivePrivate_1 = ledgerDerivePrivate;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// performs hard-only derivation on the xprv
	function ledgerDerivePrivate(xprv, index) {
	  const kl = xprv.subarray(0, 32);
	  const kr = xprv.subarray(32, 64);
	  const cc = xprv.subarray(64, 96);
	  const data = (0, _util$5.u8aConcat)([0], kl, kr, (0, _util$5.bnToU8a)(index, {
	    bitLength: 32,
	    isLe: true
	  }));
	  const z = (0, _index8.hmacSha512)(cc, data);
	  data[0] = 0x01;
	  return (0, _util$5.u8aConcat)((0, _util$5.bnToU8a)((0, _util$5.u8aToBn)(kl, {
	    isLe: true
	  }).iadd((0, _util$5.u8aToBn)(z.subarray(0, 28), {
	    isLe: true
	  }).imul(_util$5.BN_EIGHT)), {
	    bitLength: 512,
	    isLe: true
	  }).subarray(0, 32), (0, _util$5.bnToU8a)((0, _util$5.u8aToBn)(kr, {
	    isLe: true
	  }).iadd((0, _util$5.u8aToBn)(z.subarray(32, 64), {
	    isLe: true
	  })), {
	    bitLength: 512,
	    isLe: true
	  }).subarray(0, 32), (0, _index8.hmacSha512)(cc, data).subarray(32, 64));
	}

	var derivePrivate = /*#__PURE__*/Object.defineProperty({
		ledgerDerivePrivate: ledgerDerivePrivate_1
	}, '__esModule', {value: true});

	var ledgerMaster_1 = ledgerMaster;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const ED25519_CRYPTO = 'ed25519 seed'; // gets an xprv from a mnemonic

	function ledgerMaster(mnemonic, password) {
	  const seed = (0, _bip.mnemonicToSeedSync)(mnemonic, password);
	  const chainCode = (0, _index8.hmacSha256)(ED25519_CRYPTO, new Uint8Array([1, ...seed]));
	  let priv;

	  while (!priv || priv[31] & 0b00100000) {
	    priv = (0, _index8.hmacSha512)(ED25519_CRYPTO, priv || seed);
	  }

	  priv[0] &= 0b11111000;
	  priv[31] &= 0b01111111;
	  priv[31] |= 0b01000000;
	  return (0, _util$5.u8aConcat)(priv, chainCode);
	}

	var master = /*#__PURE__*/Object.defineProperty({
		ledgerMaster: ledgerMaster_1
	}, '__esModule', {value: true});

	var _index12 = mnemonic;

	var _index13 = nacl;

	var _derivePrivate = derivePrivate;

	var _master = master;

	var hdLedger_1 = hdLedger;













	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hdLedger(_mnemonic, path) {
	  const parts = _mnemonic.split(' ').map(s => s.trim()).filter(s => s);

	  (0, _util$5.assert)([12, 24, 25].includes(parts.length), 'Expected a mnemonic with 24 words (or 25 including a password)');
	  const [mnemonic, password] = parts.length === 25 ? [parts.slice(0, 24).join(' '), parts[24]] : [parts.join(' '), ''];
	  (0, _util$5.assert)((0, _index12.mnemonicValidate)(mnemonic), 'Invalid mnemonic passed to ledger derivation');
	  (0, _util$5.assert)((0, _validatePath.hdValidatePath)(path), 'Invalid derivation path');
	  return (0, _index13.naclKeypairFromSeed)(path.split('/').slice(1).map(n => parseInt(n.replace(/'$/, ''), 10)).map(n => n < _validatePath.HARDENED ? n + _validatePath.HARDENED : n).reduce((x, n) => (0, _derivePrivate.ledgerDerivePrivate)(x, n), (0, _master.ledgerMaster)(mnemonic, password)).slice(0, 32));
	}

	var ledger = /*#__PURE__*/Object.defineProperty({
		hdLedger: hdLedger_1
	}, '__esModule', {value: true});

	var _index$k = ethereum$1;

	var _index2$7 = ledger;

	var hd = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "hdEthereum", {
	  enumerable: true,
	  get: function () {
	    return _index$k.hdEthereum;
	  }
	});
	Object.defineProperty(exports, "hdLedger", {
	  enumerable: true,
	  get: function () {
	    return _index2$7.hdLedger;
	  }
	});
	Object.defineProperty(exports, "hdValidatePath", {
	  enumerable: true,
	  get: function () {
	    return _validatePath.hdValidatePath;
	  }
	});
	});

	const MAX_VALUE = 0x7fffffff;
	const DEFAULT_PROMISE_INTERVAL = 5000;
	/* eslint-disable camelcase */

	function checkAndInit$2 (key, salt, N, r, p, dkLen, progressCallback) {
	  if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')

	  if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')
	  if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')

	  let XY = Buffer.alloc(256 * r);
	  let V = Buffer.alloc(128 * r * N);

	  // pseudo global
	  let B32 = new Int32Array(16); // salsa20_8
	  let x = new Int32Array(16); // salsa20_8
	  let _X = Buffer.alloc(64); // blockmix_salsa8

	  // pseudo global
	  let B = crypto__default['default'].pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256');

	  let tickCallback;
	  if (progressCallback) {
	    let totalOps = p * N * 2;
	    let currentOp = 0;

	    tickCallback = function () {
	      ++currentOp;

	      // send progress notifications once every 1,000 ops
	      if (currentOp % 1000 === 0) {
	        progressCallback({
	          current: currentOp,
	          total: totalOps,
	          percent: (currentOp / totalOps) * 100.0
	        });
	      }
	    };
	  }
	  return {
	    XY,
	    V,
	    B32,
	    x,
	    _X,
	    B,
	    tickCallback
	  }
	}

	async function smix$1 (B, Bi, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval) {
	  promiseInterval = promiseInterval || DEFAULT_PROMISE_INTERVAL;
	  let Xi = 0;
	  let Yi = 128 * r;
	  let i;

	  B.copy(XY, Xi, Bi, Bi + Yi);

	  for (i = 0; i < N; i++) {
	    XY.copy(V, i * Yi, Xi, Xi + Yi);
	    if (i % promiseInterval === 0) {
	      await new Promise(resolve => setImmediate(resolve));
	    }
	    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);

	    if (tickCallback) tickCallback();
	  }

	  for (i = 0; i < N; i++) {
	    let offset = Xi + (2 * r - 1) * 64;
	    let j = XY.readUInt32LE(offset) & (N - 1);
	    blockxor(V, j * Yi, XY, Xi, Yi);
	    if (i % promiseInterval === 0) {
	      await new Promise(resolve => setImmediate(resolve));
	    }
	    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);

	    if (tickCallback) tickCallback();
	  }

	  XY.copy(B, Bi, Xi, Xi + Yi);
	}

	function smixSync$1 (B, Bi, r, N, V, XY, _X, B32, x, tickCallback) {
	  let Xi = 0;
	  let Yi = 128 * r;
	  let i;

	  B.copy(XY, Xi, Bi, Bi + Yi);

	  for (i = 0; i < N; i++) {
	    XY.copy(V, i * Yi, Xi, Xi + Yi);
	    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);

	    if (tickCallback) tickCallback();
	  }

	  for (i = 0; i < N; i++) {
	    let offset = Xi + (2 * r - 1) * 64;
	    let j = XY.readUInt32LE(offset) & (N - 1);
	    blockxor(V, j * Yi, XY, Xi, Yi);
	    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);

	    if (tickCallback) tickCallback();
	  }

	  XY.copy(B, Bi, Xi, Xi + Yi);
	}

	function blockmix_salsa8 (BY, Bi, Yi, r, _X, B32, x) {
	  let i;

	  arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);

	  for (i = 0; i < 2 * r; i++) {
	    blockxor(BY, i * 64, _X, 0, 64);
	    salsa20_8(_X, B32, x);
	    arraycopy(_X, 0, BY, Yi + (i * 64), 64);
	  }

	  for (i = 0; i < r; i++) {
	    arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64);
	  }

	  for (i = 0; i < r; i++) {
	    arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);
	  }
	}

	function R (a, b) {
	  return (a << b) | (a >>> (32 - b))
	}

	function salsa20_8 (B, B32, x) {
	  let i;

	  for (i = 0; i < 16; i++) {
	    B32[i] = (B[i * 4 + 0] & 0xff) << 0;
	    B32[i] |= (B[i * 4 + 1] & 0xff) << 8;
	    B32[i] |= (B[i * 4 + 2] & 0xff) << 16;
	    B32[i] |= (B[i * 4 + 3] & 0xff) << 24;
	    // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
	  }

	  arraycopy(B32, 0, x, 0, 16);

	  for (i = 8; i > 0; i -= 2) {
	    x[4] ^= R(x[0] + x[12], 7);
	    x[8] ^= R(x[4] + x[0], 9);
	    x[12] ^= R(x[8] + x[4], 13);
	    x[0] ^= R(x[12] + x[8], 18);
	    x[9] ^= R(x[5] + x[1], 7);
	    x[13] ^= R(x[9] + x[5], 9);
	    x[1] ^= R(x[13] + x[9], 13);
	    x[5] ^= R(x[1] + x[13], 18);
	    x[14] ^= R(x[10] + x[6], 7);
	    x[2] ^= R(x[14] + x[10], 9);
	    x[6] ^= R(x[2] + x[14], 13);
	    x[10] ^= R(x[6] + x[2], 18);
	    x[3] ^= R(x[15] + x[11], 7);
	    x[7] ^= R(x[3] + x[15], 9);
	    x[11] ^= R(x[7] + x[3], 13);
	    x[15] ^= R(x[11] + x[7], 18);
	    x[1] ^= R(x[0] + x[3], 7);
	    x[2] ^= R(x[1] + x[0], 9);
	    x[3] ^= R(x[2] + x[1], 13);
	    x[0] ^= R(x[3] + x[2], 18);
	    x[6] ^= R(x[5] + x[4], 7);
	    x[7] ^= R(x[6] + x[5], 9);
	    x[4] ^= R(x[7] + x[6], 13);
	    x[5] ^= R(x[4] + x[7], 18);
	    x[11] ^= R(x[10] + x[9], 7);
	    x[8] ^= R(x[11] + x[10], 9);
	    x[9] ^= R(x[8] + x[11], 13);
	    x[10] ^= R(x[9] + x[8], 18);
	    x[12] ^= R(x[15] + x[14], 7);
	    x[13] ^= R(x[12] + x[15], 9);
	    x[14] ^= R(x[13] + x[12], 13);
	    x[15] ^= R(x[14] + x[13], 18);
	  }

	  for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];

	  for (i = 0; i < 16; i++) {
	    let bi = i * 4;
	    B[bi + 0] = (B32[i] >> 0 & 0xff);
	    B[bi + 1] = (B32[i] >> 8 & 0xff);
	    B[bi + 2] = (B32[i] >> 16 & 0xff);
	    B[bi + 3] = (B32[i] >> 24 & 0xff);
	    // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
	  }
	}

	// naive approach... going back to loop unrolling may yield additional performance
	function blockxor (S, Si, D, Di, len) {
	  for (let i = 0; i < len; i++) {
	    D[Di + i] ^= S[Si + i];
	  }
	}

	function arraycopy (src, srcPos, dest, destPos, length) {
	  if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
	    src.copy(dest, destPos, srcPos, srcPos + length);
	  } else {
	    while (length--) {
	      dest[destPos++] = src[srcPos++];
	    }
	  }
	}

	var utils$1 = {
	  checkAndInit: checkAndInit$2,
	  smix: smix$1,
	  smixSync: smixSync$1
	};

	const {
	  checkAndInit: checkAndInit$1,
	  smixSync
	} = utils$1;

	// N = Cpu cost, r = Memory cost, p = parallelization cost
	function scrypt$2 (key, salt, N, r, p, dkLen, progressCallback) {
	  const {
	    XY,
	    V,
	    B32,
	    x,
	    _X,
	    B,
	    tickCallback
	  } = checkAndInit$1(key, salt, N, r, p, dkLen, progressCallback);

	  for (var i = 0; i < p; i++) {
	    smixSync(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback);
	  }

	  return crypto__default['default'].pbkdf2Sync(key, B, 1, dkLen, 'sha256')
	}

	var scryptSync = scrypt$2;

	const {
	  checkAndInit,
	  smix
	} = utils$1;

	// N = Cpu cost, r = Memory cost, p = parallelization cost
	async function scrypt$1 (key, salt, N, r, p, dkLen, progressCallback, promiseInterval) {
	  const {
	    XY,
	    V,
	    B32,
	    x,
	    _X,
	    B,
	    tickCallback
	  } = checkAndInit(key, salt, N, r, p, dkLen, progressCallback);

	  for (var i = 0; i < p; i++) {
	    await smix(B, i * 128 * r, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval);
	  }

	  return crypto__default['default'].pbkdf2Sync(key, B, 1, dkLen, 'sha256')
	}

	var scrypt_1 = scrypt$1;

	scryptSync.async = scrypt_1;
	var lib$1 = scryptSync;

	var defaults$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DEFAULT_PARAMS = void 0;
	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEFAULT_PARAMS = {
	  N: 1 << 15,
	  p: 1,
	  r: 8
	};
	exports.DEFAULT_PARAMS = DEFAULT_PARAMS;
	});

	var _defaults$2 = defaults$3;

	var scryptEncode_1 = scryptEncode;

	var _scryptsy = interopRequireDefault(lib$1);









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function scryptEncode(passphrase, salt = (0, _asU8a$2.randomAsU8a)(), params = _defaults$2.DEFAULT_PARAMS) {
	  const password = (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.scrypt)((0, _util$5.u8aToU8a)(passphrase), salt, Math.log2(params.N), params.r, params.p) : (0, _util$5.bufferToU8a)((0, _scryptsy.default)((0, _util$5.u8aToBuffer)((0, _util$5.u8aToU8a)(passphrase)), (0, _util$5.u8aToBuffer)(salt), params.N, params.r, params.p, 64));
	  return {
	    params,
	    password,
	    salt
	  };
	}

	var encode$1 = /*#__PURE__*/Object.defineProperty({
		scryptEncode: scryptEncode_1
	}, '__esModule', {value: true});

	var scryptFromU8a_1 = scryptFromU8a;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function scryptFromU8a(data) {
	  const salt = data.subarray(0, 32);
	  const N = (0, _util$5.u8aToBn)(data.subarray(32 + 0, 32 + 4), {
	    isLe: true
	  }).toNumber();
	  const p = (0, _util$5.u8aToBn)(data.subarray(32 + 4, 32 + 8), {
	    isLe: true
	  }).toNumber();
	  const r = (0, _util$5.u8aToBn)(data.subarray(32 + 8, 32 + 12), {
	    isLe: true
	  }).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility
	  // and updates for greater security. However we need some protection against carefully-crafted params that can
	  // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults
	  // and if no match, bail out

	  (0, _util$5.assert)(N === _defaults$2.DEFAULT_PARAMS.N && p === _defaults$2.DEFAULT_PARAMS.p && r === _defaults$2.DEFAULT_PARAMS.r, 'Invalid injected scrypt params found');
	  return {
	    params: {
	      N,
	      p,
	      r
	    },
	    salt
	  };
	}

	var fromU8a = /*#__PURE__*/Object.defineProperty({
		scryptFromU8a: scryptFromU8a_1
	}, '__esModule', {value: true});

	var scryptToU8a_1 = scryptToU8a;



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function scryptToU8a(salt, {
	  N,
	  p,
	  r
	}) {
	  return (0, _util$5.u8aConcat)(salt, (0, _util$5.bnToU8a)(N, {
	    bitLength: 32,
	    isLe: true
	  }), (0, _util$5.bnToU8a)(p, {
	    bitLength: 32,
	    isLe: true
	  }), (0, _util$5.bnToU8a)(r, {
	    bitLength: 32,
	    isLe: true
	  }));
	}

	var toU8a = /*#__PURE__*/Object.defineProperty({
		scryptToU8a: scryptToU8a_1
	}, '__esModule', {value: true});

	var _encode$1 = encode$1;

	var _fromU8a = fromU8a;

	var _toU8a = toU8a;

	var scrypt = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "scryptEncode", {
	  enumerable: true,
	  get: function () {
	    return _encode$1.scryptEncode;
	  }
	});
	Object.defineProperty(exports, "scryptFromU8a", {
	  enumerable: true,
	  get: function () {
	    return _fromU8a.scryptFromU8a;
	  }
	});
	Object.defineProperty(exports, "scryptToU8a", {
	  enumerable: true,
	  get: function () {
	    return _toU8a.scryptToU8a;
	  }
	});
	});

	var constants$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SCRYPT_LENGTH = exports.NONCE_LENGTH = exports.ENCODING_VERSION = exports.ENCODING_NONE = exports.ENCODING = void 0;
	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const ENCODING = ['scrypt', 'xsalsa20-poly1305'];
	exports.ENCODING = ENCODING;
	const ENCODING_NONE = ['none'];
	exports.ENCODING_NONE = ENCODING_NONE;
	const ENCODING_VERSION = '3';
	exports.ENCODING_VERSION = ENCODING_VERSION;
	const NONCE_LENGTH = 24;
	exports.NONCE_LENGTH = NONCE_LENGTH;
	const SCRYPT_LENGTH = 32 + 3 * 4;
	exports.SCRYPT_LENGTH = SCRYPT_LENGTH;
	});

	var _index17 = scrypt;

	var _constants$2 = constants$3;

	var jsonDecryptData_1 = jsonDecryptData;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function jsonDecryptData(encrypted, passphrase, encType = _constants$2.ENCODING) {
	  (0, _util$5.assert)(encrypted, 'No encrypted data available to decode');
	  (0, _util$5.assert)(passphrase || !encType.includes('xsalsa20-poly1305'), 'Password required to decode encrypted data');
	  let encoded = encrypted;

	  if (passphrase) {
	    let password;

	    if (encType.includes('scrypt')) {
	      const {
	        params,
	        salt
	      } = (0, _index17.scryptFromU8a)(encrypted);
	      password = (0, _index17.scryptEncode)(passphrase, salt, params).password;
	      encrypted = encrypted.subarray(_constants$2.SCRYPT_LENGTH);
	    } else {
	      password = (0, _util$5.stringToU8a)(passphrase);
	    }

	    encoded = (0, _index13.naclDecrypt)(encrypted.subarray(_constants$2.NONCE_LENGTH), encrypted.subarray(0, _constants$2.NONCE_LENGTH), (0, _util$5.u8aFixLength)(password, 256, true));
	  }

	  (0, _util$5.assert)(encoded, 'Unable to decode using the supplied passphrase');
	  return encoded;
	}

	var decryptData = /*#__PURE__*/Object.defineProperty({
		jsonDecryptData: jsonDecryptData_1
	}, '__esModule', {value: true});

	var _index4$1 = base64;

	var _decryptData = decryptData;

	var jsonDecrypt_1 = jsonDecrypt;







	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function jsonDecrypt({
	  encoded,
	  encoding
	}, passphrase) {
	  (0, _util$5.assert)(encoded, 'No encrypted data available to decode');
	  return (0, _decryptData.jsonDecryptData)((0, _util$5.isHex)(encoded) ? (0, _util$5.hexToU8a)(encoded) : (0, _index4$1.base64Decode)(encoded), passphrase, Array.isArray(encoding.type) ? encoding.type : [encoding.type]);
	}

	var decrypt = /*#__PURE__*/Object.defineProperty({
		jsonDecrypt: jsonDecrypt_1
	}, '__esModule', {value: true});

	var jsonEncryptFormat_1 = jsonEncryptFormat;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function jsonEncryptFormat(encoded, contentType, isEncrypted) {
	  return {
	    encoded: (0, _index4$1.base64Encode)(encoded),
	    encoding: {
	      content: contentType,
	      type: isEncrypted ? _constants$2.ENCODING : _constants$2.ENCODING_NONE,
	      version: _constants$2.ENCODING_VERSION
	    }
	  };
	}

	var encryptFormat = /*#__PURE__*/Object.defineProperty({
		jsonEncryptFormat: jsonEncryptFormat_1
	}, '__esModule', {value: true});

	var _encryptFormat = encryptFormat;

	var jsonEncrypt_1 = jsonEncrypt;









	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function jsonEncrypt(data, contentType, passphrase) {
	  let isEncrypted = false;
	  let encoded = data;

	  if (passphrase) {
	    const {
	      params,
	      password,
	      salt
	    } = (0, _index17.scryptEncode)(passphrase);
	    const {
	      encrypted,
	      nonce
	    } = (0, _index13.naclEncrypt)(encoded, password.subarray(0, 32));
	    isEncrypted = true;
	    encoded = (0, _util$5.u8aConcat)((0, _index17.scryptToU8a)(salt, params), nonce, encrypted);
	  }

	  return (0, _encryptFormat.jsonEncryptFormat)(encoded, contentType, isEncrypted);
	}

	var encrypt = /*#__PURE__*/Object.defineProperty({
		jsonEncrypt: jsonEncrypt_1
	}, '__esModule', {value: true});

	var _decrypt = decrypt;

	var _encrypt = encrypt;

	var json$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "jsonDecrypt", {
	  enumerable: true,
	  get: function () {
	    return _decrypt.jsonDecrypt;
	  }
	});
	Object.defineProperty(exports, "jsonDecryptData", {
	  enumerable: true,
	  get: function () {
	    return _decryptData.jsonDecryptData;
	  }
	});
	Object.defineProperty(exports, "jsonEncrypt", {
	  enumerable: true,
	  get: function () {
	    return _encrypt.jsonEncrypt;
	  }
	});
	Object.defineProperty(exports, "jsonEncryptFormat", {
	  enumerable: true,
	  get: function () {
	    return _encryptFormat.jsonEncryptFormat;
	  }
	});
	});

	var randomAsHex_1 = randomAsHex;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name randomAsHex
	 * @summary Creates a hex string filled with random bytes.
	 * @description
	 * Returns a hex string with the specified (optional) length filled with random bytes.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { randomAsHex } from '@polkadot/util-crypto';
	 *
	 * randomAsHex(); // => 0x...
	 * ```
	 */
	function randomAsHex(length = 32) {
	  return (0, _util$5.u8aToHex)((0, _asU8a$2.randomAsU8a)(length));
	}

	var asHex$1 = /*#__PURE__*/Object.defineProperty({
		randomAsHex: randomAsHex_1
	}, '__esModule', {value: true});

	var _asHex$1 = asHex$1;

	var randomAsNumber_1 = randomAsNumber;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const BN_53 = new _util$5.BN(0b11111111111111111111111111111111111111111111111111111);
	/**
	 * @name randomAsNumber
	 * @summary Creates a random number from random bytes.
	 * @description
	 * Returns a random number generated from the secure bytes.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { randomAsNumber } from '@polkadot/util-crypto';
	 *
	 * randomAsNumber(); // => <random number>
	 * ```
	 */

	function randomAsNumber() {
	  return (0, _util$5.hexToBn)((0, _asHex$1.randomAsHex)(8)).and(BN_53).toNumber();
	}

	var asNumber = /*#__PURE__*/Object.defineProperty({
		randomAsNumber: randomAsNumber_1
	}, '__esModule', {value: true});

	var _asNumber = asNumber;

	var random = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "randomAsHex", {
	  enumerable: true,
	  get: function () {
	    return _asHex$1.randomAsHex;
	  }
	});
	Object.defineProperty(exports, "randomAsNumber", {
	  enumerable: true,
	  get: function () {
	    return _asNumber.randomAsNumber;
	  }
	});
	Object.defineProperty(exports, "randomAsU8a", {
	  enumerable: true,
	  get: function () {
	    return _asU8a$2.randomAsU8a;
	  }
	});
	});

	var sha512AsU8a_1 = sha512AsU8a;

	var _tweetnacl = interopRequireDefault(naclFast);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name sha512AsU8a
	 * @summary Creates sha-512 hash of the input.
	 * @description
	 * Returns a sha-512 `Uint8Array` from the supplied data.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { sha512AsU8a } from '@polkadot/util-crypto';
	 *
	 * sha512AsU8a(Uint8Array.from([...])); // => Uint8Array([...])
	 * ```
	 */
	function sha512AsU8a(data, onlyJs = false) {
	  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.sha512)(data) : _tweetnacl.default.hash(data);
	}

	var asU8a$1 = /*#__PURE__*/Object.defineProperty({
		sha512AsU8a: sha512AsU8a_1
	}, '__esModule', {value: true});

	var _asU8a$1 = asU8a$1;

	var sha512 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "sha512AsU8a", {
	  enumerable: true,
	  get: function () {
	    return _asU8a$1.sha512AsU8a;
	  }
	});
	});

	var signatureVerify_1 = signatureVerify;











	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const secp256k1VerifyHasher = hashType => (message, signature, publicKey) => (0, _verify3.secp256k1Verify)(message, signature, publicKey, hashType);

	const VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];
	const VERIFIERS = [['ed25519', _verify$1.naclVerify], ['sr25519', _verify2.schnorrkelVerify], ...VERIFIERS_ECDSA];
	const CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];

	function verifyDetect(result, {
	  message,
	  publicKey,
	  signature
	}, verifiers = VERIFIERS) {
	  result.isValid = verifiers.some(([crypto, verify]) => {
	    try {
	      if (verify(message, signature, publicKey)) {
	        result.crypto = crypto;
	        return true;
	      }
	    } catch (error) {// do nothing, result.isValid still set to false
	    }

	    return false;
	  });
	  return result;
	}

	function verifyMultisig(result, {
	  message,
	  publicKey,
	  signature
	}) {
	  (0, _util$5.assert)([0, 1, 2].includes(signature[0]), () => `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
	  const type = CRYPTO_TYPES[signature[0]] || 'none';
	  result.crypto = type;

	  try {
	    result.isValid = {
	      ecdsa: () => verifyDetect(result, {
	        message,
	        publicKey,
	        signature: signature.subarray(1)
	      }, VERIFIERS_ECDSA).isValid,
	      ed25519: () => (0, _verify$1.naclVerify)(message, signature.subarray(1), publicKey),
	      none: () => {
	        throw Error('no verify for `none` crypto type');
	      },
	      sr25519: () => (0, _verify2.schnorrkelVerify)(message, signature.subarray(1), publicKey)
	    }[type]();
	  } catch (error) {// ignore, result.isValid still set to false
	  }

	  return result;
	}

	function signatureVerify(message, signature, addressOrPublicKey) {
	  const signatureU8a = (0, _util$5.u8aToU8a)(signature);
	  (0, _util$5.assert)([64, 65, 66].includes(signatureU8a.length), () => `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
	  const publicKey = (0, _decode$3.decodeAddress)(addressOrPublicKey);
	  const input = {
	    message,
	    publicKey,
	    signature: signatureU8a
	  };
	  const result = {
	    crypto: 'none',
	    isValid: false,
	    publicKey
	  };
	  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, input) : verifyDetect(result, input);
	}

	var verify = /*#__PURE__*/Object.defineProperty({
		signatureVerify: signatureVerify_1
	}, '__esModule', {value: true});

	var _verify = verify;

	var signature = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "signatureVerify", {
	  enumerable: true,
	  get: function () {
	    return _verify.signatureVerify;
	  }
	});
	});

	/**
		C-like unsigned 32 bits integers in Javascript
		Copyright (C) 2013, Pierre Curto
		MIT license
	 */

	var uint32 = createCommonjsModule(function (module) {
	(function (root) {

		// Local cache for typical radices
		({
			36: UINT32( Math.pow(36, 5) )
		,	16: UINT32( Math.pow(16, 7) )
		,	10: UINT32( Math.pow(10, 9) )
		,	2:  UINT32( Math.pow(2, 30) )
		});
		({
			36: UINT32(36)
		,	16: UINT32(16)
		,	10: UINT32(10)
		,	2:  UINT32(2)
		});

		/**
		 *	Represents an unsigned 32 bits integer
		 * @constructor
		 * @param {Number|String|Number} low bits     | integer as a string 		 | integer as a number
		 * @param {Number|Number|Undefined} high bits | radix (optional, default=10)
		 * @return 
		 */
		function UINT32 (l, h) {
			if ( !(this instanceof UINT32) )
				return new UINT32(l, h)

			this._low = 0;
			this._high = 0;
			this.remainder = null;
			if (typeof h == 'undefined')
				return fromNumber.call(this, l)

			if (typeof l == 'string')
				return fromString.call(this, l, h)

			fromBits.call(this, l, h);
		}

		/**
		 * Set the current _UINT32_ object with its low and high bits
		 * @method fromBits
		 * @param {Number} low bits
		 * @param {Number} high bits
		 * @return ThisExpression
		 */
		function fromBits (l, h) {
			this._low = l | 0;
			this._high = h | 0;

			return this
		}
		UINT32.prototype.fromBits = fromBits;

		/**
		 * Set the current _UINT32_ object from a number
		 * @method fromNumber
		 * @param {Number} number
		 * @return ThisExpression
		 */
		function fromNumber (value) {
			this._low = value & 0xFFFF;
			this._high = value >>> 16;

			return this
		}
		UINT32.prototype.fromNumber = fromNumber;

		/**
		 * Set the current _UINT32_ object from a string
		 * @method fromString
		 * @param {String} integer as a string
		 * @param {Number} radix (optional, default=10)
		 * @return ThisExpression
		 */
		function fromString (s, radix) {
			var value = parseInt(s, radix || 10);

			this._low = value & 0xFFFF;
			this._high = value >>> 16;

			return this
		}
		UINT32.prototype.fromString = fromString;

		/**
		 * Convert this _UINT32_ to a number
		 * @method toNumber
		 * @return {Number} the converted UINT32
		 */
		UINT32.prototype.toNumber = function () {
			return (this._high * 65536) + this._low
		};

		/**
		 * Convert this _UINT32_ to a string
		 * @method toString
		 * @param {Number} radix (optional, default=10)
		 * @return {String} the converted UINT32
		 */
		UINT32.prototype.toString = function (radix) {
			return this.toNumber().toString(radix || 10)
		};

		/**
		 * Add two _UINT32_. The current _UINT32_ stores the result
		 * @method add
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.add = function (other) {
			var a00 = this._low + other._low;
			var a16 = a00 >>> 16;

			a16 += this._high + other._high;

			this._low = a00 & 0xFFFF;
			this._high = a16 & 0xFFFF;

			return this
		};

		/**
		 * Subtract two _UINT32_. The current _UINT32_ stores the result
		 * @method subtract
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.subtract = function (other) {
			//TODO inline
			return this.add( other.clone().negate() )
		};

		/**
		 * Multiply two _UINT32_. The current _UINT32_ stores the result
		 * @method multiply
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.multiply = function (other) {
			/*
				a = a00 + a16
				b = b00 + b16
				a*b = (a00 + a16)(b00 + b16)
					= a00b00 + a00b16 + a16b00 + a16b16

				a16b16 overflows the 32bits
			 */
			var a16 = this._high;
			var a00 = this._low;
			var b16 = other._high;
			var b00 = other._low;

	/* Removed to increase speed under normal circumstances (i.e. not multiplying by 0 or 1)
			// this == 0 or other == 1: nothing to do
			if ((a00 == 0 && a16 == 0) || (b00 == 1 && b16 == 0)) return this

			// other == 0 or this == 1: this = other
			if ((b00 == 0 && b16 == 0) || (a00 == 1 && a16 == 0)) {
				this._low = other._low
				this._high = other._high
				return this
			}
	*/

			var c16, c00;
			c00 = a00 * b00;
			c16 = c00 >>> 16;

			c16 += a16 * b00;
			c16 &= 0xFFFF;		// Not required but improves performance
			c16 += a00 * b16;

			this._low = c00 & 0xFFFF;
			this._high = c16 & 0xFFFF;

			return this
		};

		/**
		 * Divide two _UINT32_. The current _UINT32_ stores the result.
		 * The remainder is made available as the _remainder_ property on
		 * the _UINT32_ object. It can be null, meaning there are no remainder.
		 * @method div
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.div = function (other) {
			if ( (other._low == 0) && (other._high == 0) ) throw Error('division by zero')

			// other == 1
			if (other._high == 0 && other._low == 1) {
				this.remainder = new UINT32(0);
				return this
			}

			// other > this: 0
			if ( other.gt(this) ) {
				this.remainder = this.clone();
				this._low = 0;
				this._high = 0;
				return this
			}
			// other == this: 1
			if ( this.eq(other) ) {
				this.remainder = new UINT32(0);
				this._low = 1;
				this._high = 0;
				return this
			}

			// Shift the divisor left until it is higher than the dividend
			var _other = other.clone();
			var i = -1;
			while ( !this.lt(_other) ) {
				// High bit can overflow the default 16bits
				// Its ok since we right shift after this loop
				// The overflown bit must be kept though
				_other.shiftLeft(1, true);
				i++;
			}

			// Set the remainder
			this.remainder = this.clone();
			// Initialize the current result to 0
			this._low = 0;
			this._high = 0;
			for (; i >= 0; i--) {
				_other.shiftRight(1);
				// If shifted divisor is smaller than the dividend
				// then subtract it from the dividend
				if ( !this.remainder.lt(_other) ) {
					this.remainder.subtract(_other);
					// Update the current result
					if (i >= 16) {
						this._high |= 1 << (i - 16);
					} else {
						this._low |= 1 << i;
					}
				}
			}

			return this
		};

		/**
		 * Negate the current _UINT32_
		 * @method negate
		 * @return ThisExpression
		 */
		UINT32.prototype.negate = function () {
			var v = ( ~this._low & 0xFFFF ) + 1;
			this._low = v & 0xFFFF;
			this._high = (~this._high + (v >>> 16)) & 0xFFFF;

			return this
		};

		/**
		 * Equals
		 * @method eq
		 * @param {Object} other UINT32
		 * @return {Boolean}
		 */
		UINT32.prototype.equals = UINT32.prototype.eq = function (other) {
			return (this._low == other._low) && (this._high == other._high)
		};

		/**
		 * Greater than (strict)
		 * @method gt
		 * @param {Object} other UINT32
		 * @return {Boolean}
		 */
		UINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {
			if (this._high > other._high) return true
			if (this._high < other._high) return false
			return this._low > other._low
		};

		/**
		 * Less than (strict)
		 * @method lt
		 * @param {Object} other UINT32
		 * @return {Boolean}
		 */
		UINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {
			if (this._high < other._high) return true
			if (this._high > other._high) return false
			return this._low < other._low
		};

		/**
		 * Bitwise OR
		 * @method or
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.or = function (other) {
			this._low |= other._low;
			this._high |= other._high;

			return this
		};

		/**
		 * Bitwise AND
		 * @method and
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.and = function (other) {
			this._low &= other._low;
			this._high &= other._high;

			return this
		};

		/**
		 * Bitwise NOT
		 * @method not
		 * @return ThisExpression
		 */
		UINT32.prototype.not = function() {
			this._low = ~this._low & 0xFFFF;
			this._high = ~this._high & 0xFFFF;

			return this
		};

		/**
		 * Bitwise XOR
		 * @method xor
		 * @param {Object} other UINT32
		 * @return ThisExpression
		 */
		UINT32.prototype.xor = function (other) {
			this._low ^= other._low;
			this._high ^= other._high;

			return this
		};

		/**
		 * Bitwise shift right
		 * @method shiftRight
		 * @param {Number} number of bits to shift
		 * @return ThisExpression
		 */
		UINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {
			if (n > 16) {
				this._low = this._high >> (n - 16);
				this._high = 0;
			} else if (n == 16) {
				this._low = this._high;
				this._high = 0;
			} else {
				this._low = (this._low >> n) | ( (this._high << (16-n)) & 0xFFFF );
				this._high >>= n;
			}

			return this
		};

		/**
		 * Bitwise shift left
		 * @method shiftLeft
		 * @param {Number} number of bits to shift
		 * @param {Boolean} allow overflow
		 * @return ThisExpression
		 */
		UINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {
			if (n > 16) {
				this._high = this._low << (n - 16);
				this._low = 0;
				if (!allowOverflow) {
					this._high &= 0xFFFF;
				}
			} else if (n == 16) {
				this._high = this._low;
				this._low = 0;
			} else {
				this._high = (this._high << n) | (this._low >> (16-n));
				this._low = (this._low << n) & 0xFFFF;
				if (!allowOverflow) {
					// Overflow only allowed on the high bits...
					this._high &= 0xFFFF;
				}
			}

			return this
		};

		/**
		 * Bitwise rotate left
		 * @method rotl
		 * @param {Number} number of bits to rotate
		 * @return ThisExpression
		 */
		UINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {
			var v = (this._high << 16) | this._low;
			v = (v << n) | (v >>> (32 - n));
			this._low = v & 0xFFFF;
			this._high = v >>> 16;

			return this
		};

		/**
		 * Bitwise rotate right
		 * @method rotr
		 * @param {Number} number of bits to rotate
		 * @return ThisExpression
		 */
		UINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {
			var v = (this._high << 16) | this._low;
			v = (v >>> n) | (v << (32 - n));
			this._low = v & 0xFFFF;
			this._high = v >>> 16;

			return this
		};

		/**
		 * Clone the current _UINT32_
		 * @method clone
		 * @return {Object} cloned UINT32
		 */
		UINT32.prototype.clone = function () {
			return new UINT32(this._low, this._high)
		};

		if (module.exports) {
			// Node.js
			module.exports = UINT32;
		} else {
			// Browser
			root['UINT32'] = UINT32;
		}

	})(commonjsGlobal);
	});

	/**
		C-like unsigned 64 bits integers in Javascript
		Copyright (C) 2013, Pierre Curto
		MIT license
	 */

	var uint64 = createCommonjsModule(function (module) {
	(function (root) {

		// Local cache for typical radices
		var radixPowerCache = {
			16: UINT64( Math.pow(16, 5) )
		,	10: UINT64( Math.pow(10, 5) )
		,	2:  UINT64( Math.pow(2, 5) )
		};
		var radixCache = {
			16: UINT64(16)
		,	10: UINT64(10)
		,	2:  UINT64(2)
		};

		/**
		 *	Represents an unsigned 64 bits integer
		 * @constructor
		 * @param {Number} first low bits (8)
		 * @param {Number} second low bits (8)
		 * @param {Number} first high bits (8)
		 * @param {Number} second high bits (8)
		 * or
		 * @param {Number} low bits (32)
		 * @param {Number} high bits (32)
		 * or
		 * @param {String|Number} integer as a string 		 | integer as a number
		 * @param {Number|Undefined} radix (optional, default=10)
		 * @return 
		 */
		function UINT64 (a00, a16, a32, a48) {
			if ( !(this instanceof UINT64) )
				return new UINT64(a00, a16, a32, a48)

			this.remainder = null;
			if (typeof a00 == 'string')
				return fromString.call(this, a00, a16)

			if (typeof a16 == 'undefined')
				return fromNumber.call(this, a00)

			fromBits.apply(this, arguments);
		}

		/**
		 * Set the current _UINT64_ object with its low and high bits
		 * @method fromBits
		 * @param {Number} first low bits (8)
		 * @param {Number} second low bits (8)
		 * @param {Number} first high bits (8)
		 * @param {Number} second high bits (8)
		 * or
		 * @param {Number} low bits (32)
		 * @param {Number} high bits (32)
		 * @return ThisExpression
		 */
		function fromBits (a00, a16, a32, a48) {
			if (typeof a32 == 'undefined') {
				this._a00 = a00 & 0xFFFF;
				this._a16 = a00 >>> 16;
				this._a32 = a16 & 0xFFFF;
				this._a48 = a16 >>> 16;
				return this
			}

			this._a00 = a00 | 0;
			this._a16 = a16 | 0;
			this._a32 = a32 | 0;
			this._a48 = a48 | 0;

			return this
		}
		UINT64.prototype.fromBits = fromBits;

		/**
		 * Set the current _UINT64_ object from a number
		 * @method fromNumber
		 * @param {Number} number
		 * @return ThisExpression
		 */
		function fromNumber (value) {
			this._a00 = value & 0xFFFF;
			this._a16 = value >>> 16;
			this._a32 = 0;
			this._a48 = 0;

			return this
		}
		UINT64.prototype.fromNumber = fromNumber;

		/**
		 * Set the current _UINT64_ object from a string
		 * @method fromString
		 * @param {String} integer as a string
		 * @param {Number} radix (optional, default=10)
		 * @return ThisExpression
		 */
		function fromString (s, radix) {
			radix = radix || 10;

			this._a00 = 0;
			this._a16 = 0;
			this._a32 = 0;
			this._a48 = 0;

			/*
				In Javascript, bitwise operators only operate on the first 32 bits 
				of a number, even though parseInt() encodes numbers with a 53 bits 
				mantissa.
				Therefore UINT64(<Number>) can only work on 32 bits.
				The radix maximum value is 36 (as per ECMA specs) (26 letters + 10 digits)
				maximum input value is m = 32bits as 1 = 2^32 - 1
				So the maximum substring length n is:
				36^(n+1) - 1 = 2^32 - 1
				36^(n+1) = 2^32
				(n+1)ln(36) = 32ln(2)
				n = 32ln(2)/ln(36) - 1
				n = 5.189644915687692
				n = 5
			 */
			var radixUint = radixPowerCache[radix] || new UINT64( Math.pow(radix, 5) );

			for (var i = 0, len = s.length; i < len; i += 5) {
				var size = Math.min(5, len - i);
				var value = parseInt( s.slice(i, i + size), radix );
				this.multiply(
						size < 5
							? new UINT64( Math.pow(radix, size) )
							: radixUint
					)
					.add( new UINT64(value) );
			}

			return this
		}
		UINT64.prototype.fromString = fromString;

		/**
		 * Convert this _UINT64_ to a number (last 32 bits are dropped)
		 * @method toNumber
		 * @return {Number} the converted UINT64
		 */
		UINT64.prototype.toNumber = function () {
			return (this._a16 * 65536) + this._a00
		};

		/**
		 * Convert this _UINT64_ to a string
		 * @method toString
		 * @param {Number} radix (optional, default=10)
		 * @return {String} the converted UINT64
		 */
		UINT64.prototype.toString = function (radix) {
			radix = radix || 10;
			var radixUint = radixCache[radix] || new UINT64(radix);

			if ( !this.gt(radixUint) ) return this.toNumber().toString(radix)

			var self = this.clone();
			var res = new Array(64);
			for (var i = 63; i >= 0; i--) {
				self.div(radixUint);
				res[i] = self.remainder.toNumber().toString(radix);
				if ( !self.gt(radixUint) ) break
			}
			res[i-1] = self.toNumber().toString(radix);

			return res.join('')
		};

		/**
		 * Add two _UINT64_. The current _UINT64_ stores the result
		 * @method add
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.add = function (other) {
			var a00 = this._a00 + other._a00;

			var a16 = a00 >>> 16;
			a16 += this._a16 + other._a16;

			var a32 = a16 >>> 16;
			a32 += this._a32 + other._a32;

			var a48 = a32 >>> 16;
			a48 += this._a48 + other._a48;

			this._a00 = a00 & 0xFFFF;
			this._a16 = a16 & 0xFFFF;
			this._a32 = a32 & 0xFFFF;
			this._a48 = a48 & 0xFFFF;

			return this
		};

		/**
		 * Subtract two _UINT64_. The current _UINT64_ stores the result
		 * @method subtract
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.subtract = function (other) {
			return this.add( other.clone().negate() )
		};

		/**
		 * Multiply two _UINT64_. The current _UINT64_ stores the result
		 * @method multiply
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.multiply = function (other) {
			/*
				a = a00 + a16 + a32 + a48
				b = b00 + b16 + b32 + b48
				a*b = (a00 + a16 + a32 + a48)(b00 + b16 + b32 + b48)
					= a00b00 + a00b16 + a00b32 + a00b48
					+ a16b00 + a16b16 + a16b32 + a16b48
					+ a32b00 + a32b16 + a32b32 + a32b48
					+ a48b00 + a48b16 + a48b32 + a48b48

				a16b48, a32b32, a48b16, a48b32 and a48b48 overflow the 64 bits
				so it comes down to:
				a*b	= a00b00 + a00b16 + a00b32 + a00b48
					+ a16b00 + a16b16 + a16b32
					+ a32b00 + a32b16
					+ a48b00
					= a00b00
					+ a00b16 + a16b00
					+ a00b32 + a16b16 + a32b00
					+ a00b48 + a16b32 + a32b16 + a48b00
			 */
			var a00 = this._a00;
			var a16 = this._a16;
			var a32 = this._a32;
			var a48 = this._a48;
			var b00 = other._a00;
			var b16 = other._a16;
			var b32 = other._a32;
			var b48 = other._a48;

			var c00 = a00 * b00;

			var c16 = c00 >>> 16;
			c16 += a00 * b16;
			var c32 = c16 >>> 16;
			c16 &= 0xFFFF;
			c16 += a16 * b00;

			c32 += c16 >>> 16;
			c32 += a00 * b32;
			var c48 = c32 >>> 16;
			c32 &= 0xFFFF;
			c32 += a16 * b16;
			c48 += c32 >>> 16;
			c32 &= 0xFFFF;
			c32 += a32 * b00;

			c48 += c32 >>> 16;
			c48 += a00 * b48;
			c48 &= 0xFFFF;
			c48 += a16 * b32;
			c48 &= 0xFFFF;
			c48 += a32 * b16;
			c48 &= 0xFFFF;
			c48 += a48 * b00;

			this._a00 = c00 & 0xFFFF;
			this._a16 = c16 & 0xFFFF;
			this._a32 = c32 & 0xFFFF;
			this._a48 = c48 & 0xFFFF;

			return this
		};

		/**
		 * Divide two _UINT64_. The current _UINT64_ stores the result.
		 * The remainder is made available as the _remainder_ property on
		 * the _UINT64_ object. It can be null, meaning there are no remainder.
		 * @method div
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.div = function (other) {
			if ( (other._a16 == 0) && (other._a32 == 0) && (other._a48 == 0) ) {
				if (other._a00 == 0) throw Error('division by zero')

				// other == 1: this
				if (other._a00 == 1) {
					this.remainder = new UINT64(0);
					return this
				}
			}

			// other > this: 0
			if ( other.gt(this) ) {
				this.remainder = this.clone();
				this._a00 = 0;
				this._a16 = 0;
				this._a32 = 0;
				this._a48 = 0;
				return this
			}
			// other == this: 1
			if ( this.eq(other) ) {
				this.remainder = new UINT64(0);
				this._a00 = 1;
				this._a16 = 0;
				this._a32 = 0;
				this._a48 = 0;
				return this
			}

			// Shift the divisor left until it is higher than the dividend
			var _other = other.clone();
			var i = -1;
			while ( !this.lt(_other) ) {
				// High bit can overflow the default 16bits
				// Its ok since we right shift after this loop
				// The overflown bit must be kept though
				_other.shiftLeft(1, true);
				i++;
			}

			// Set the remainder
			this.remainder = this.clone();
			// Initialize the current result to 0
			this._a00 = 0;
			this._a16 = 0;
			this._a32 = 0;
			this._a48 = 0;
			for (; i >= 0; i--) {
				_other.shiftRight(1);
				// If shifted divisor is smaller than the dividend
				// then subtract it from the dividend
				if ( !this.remainder.lt(_other) ) {
					this.remainder.subtract(_other);
					// Update the current result
					if (i >= 48) {
						this._a48 |= 1 << (i - 48);
					} else if (i >= 32) {
						this._a32 |= 1 << (i - 32);
					} else if (i >= 16) {
						this._a16 |= 1 << (i - 16);
					} else {
						this._a00 |= 1 << i;
					}
				}
			}

			return this
		};

		/**
		 * Negate the current _UINT64_
		 * @method negate
		 * @return ThisExpression
		 */
		UINT64.prototype.negate = function () {
			var v = ( ~this._a00 & 0xFFFF ) + 1;
			this._a00 = v & 0xFFFF;
			v = (~this._a16 & 0xFFFF) + (v >>> 16);
			this._a16 = v & 0xFFFF;
			v = (~this._a32 & 0xFFFF) + (v >>> 16);
			this._a32 = v & 0xFFFF;
			this._a48 = (~this._a48 + (v >>> 16)) & 0xFFFF;

			return this
		};

		/**

		 * @method eq
		 * @param {Object} other UINT64
		 * @return {Boolean}
		 */
		UINT64.prototype.equals = UINT64.prototype.eq = function (other) {
			return (this._a48 == other._a48) && (this._a00 == other._a00)
				 && (this._a32 == other._a32) && (this._a16 == other._a16)
		};

		/**
		 * Greater than (strict)
		 * @method gt
		 * @param {Object} other UINT64
		 * @return {Boolean}
		 */
		UINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {
			if (this._a48 > other._a48) return true
			if (this._a48 < other._a48) return false
			if (this._a32 > other._a32) return true
			if (this._a32 < other._a32) return false
			if (this._a16 > other._a16) return true
			if (this._a16 < other._a16) return false
			return this._a00 > other._a00
		};

		/**
		 * Less than (strict)
		 * @method lt
		 * @param {Object} other UINT64
		 * @return {Boolean}
		 */
		UINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {
			if (this._a48 < other._a48) return true
			if (this._a48 > other._a48) return false
			if (this._a32 < other._a32) return true
			if (this._a32 > other._a32) return false
			if (this._a16 < other._a16) return true
			if (this._a16 > other._a16) return false
			return this._a00 < other._a00
		};

		/**
		 * Bitwise OR
		 * @method or
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.or = function (other) {
			this._a00 |= other._a00;
			this._a16 |= other._a16;
			this._a32 |= other._a32;
			this._a48 |= other._a48;

			return this
		};

		/**
		 * Bitwise AND
		 * @method and
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.and = function (other) {
			this._a00 &= other._a00;
			this._a16 &= other._a16;
			this._a32 &= other._a32;
			this._a48 &= other._a48;

			return this
		};

		/**
		 * Bitwise XOR
		 * @method xor
		 * @param {Object} other UINT64
		 * @return ThisExpression
		 */
		UINT64.prototype.xor = function (other) {
			this._a00 ^= other._a00;
			this._a16 ^= other._a16;
			this._a32 ^= other._a32;
			this._a48 ^= other._a48;

			return this
		};

		/**
		 * Bitwise NOT
		 * @method not
		 * @return ThisExpression
		 */
		UINT64.prototype.not = function() {
			this._a00 = ~this._a00 & 0xFFFF;
			this._a16 = ~this._a16 & 0xFFFF;
			this._a32 = ~this._a32 & 0xFFFF;
			this._a48 = ~this._a48 & 0xFFFF;

			return this
		};

		/**
		 * Bitwise shift right
		 * @method shiftRight
		 * @param {Number} number of bits to shift
		 * @return ThisExpression
		 */
		UINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {
			n %= 64;
			if (n >= 48) {
				this._a00 = this._a48 >> (n - 48);
				this._a16 = 0;
				this._a32 = 0;
				this._a48 = 0;
			} else if (n >= 32) {
				n -= 32;
				this._a00 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
				this._a16 = (this._a48 >> n) & 0xFFFF;
				this._a32 = 0;
				this._a48 = 0;
			} else if (n >= 16) {
				n -= 16;
				this._a00 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF;
				this._a16 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
				this._a32 = (this._a48 >> n) & 0xFFFF;
				this._a48 = 0;
			} else {
				this._a00 = ( (this._a00 >> n) | (this._a16 << (16-n)) ) & 0xFFFF;
				this._a16 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF;
				this._a32 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
				this._a48 = (this._a48 >> n) & 0xFFFF;
			}

			return this
		};

		/**
		 * Bitwise shift left
		 * @method shiftLeft
		 * @param {Number} number of bits to shift
		 * @param {Boolean} allow overflow
		 * @return ThisExpression
		 */
		UINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {
			n %= 64;
			if (n >= 48) {
				this._a48 = this._a00 << (n - 48);
				this._a32 = 0;
				this._a16 = 0;
				this._a00 = 0;
			} else if (n >= 32) {
				n -= 32;
				this._a48 = (this._a16 << n) | (this._a00 >> (16-n));
				this._a32 = (this._a00 << n) & 0xFFFF;
				this._a16 = 0;
				this._a00 = 0;
			} else if (n >= 16) {
				n -= 16;
				this._a48 = (this._a32 << n) | (this._a16 >> (16-n));
				this._a32 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF;
				this._a16 = (this._a00 << n) & 0xFFFF;
				this._a00 = 0;
			} else {
				this._a48 = (this._a48 << n) | (this._a32 >> (16-n));
				this._a32 = ( (this._a32 << n) | (this._a16 >> (16-n)) ) & 0xFFFF;
				this._a16 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF;
				this._a00 = (this._a00 << n) & 0xFFFF;
			}
			if (!allowOverflow) {
				this._a48 &= 0xFFFF;
			}

			return this
		};

		/**
		 * Bitwise rotate left
		 * @method rotl
		 * @param {Number} number of bits to rotate
		 * @return ThisExpression
		 */
		UINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {
			n %= 64;
			if (n == 0) return this
			if (n >= 32) {
				// A.B.C.D
				// B.C.D.A rotl(16)
				// C.D.A.B rotl(32)
				var v = this._a00;
				this._a00 = this._a32;
				this._a32 = v;
				v = this._a48;
				this._a48 = this._a16;
				this._a16 = v;
				if (n == 32) return this
				n -= 32;
			}

			var high = (this._a48 << 16) | this._a32;
			var low = (this._a16 << 16) | this._a00;

			var _high = (high << n) | (low >>> (32 - n));
			var _low = (low << n) | (high >>> (32 - n));

			this._a00 = _low & 0xFFFF;
			this._a16 = _low >>> 16;
			this._a32 = _high & 0xFFFF;
			this._a48 = _high >>> 16;

			return this
		};

		/**
		 * Bitwise rotate right
		 * @method rotr
		 * @param {Number} number of bits to rotate
		 * @return ThisExpression
		 */
		UINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {
			n %= 64;
			if (n == 0) return this
			if (n >= 32) {
				// A.B.C.D
				// D.A.B.C rotr(16)
				// C.D.A.B rotr(32)
				var v = this._a00;
				this._a00 = this._a32;
				this._a32 = v;
				v = this._a48;
				this._a48 = this._a16;
				this._a16 = v;
				if (n == 32) return this
				n -= 32;
			}

			var high = (this._a48 << 16) | this._a32;
			var low = (this._a16 << 16) | this._a00;

			var _high = (high >>> n) | (low << (32 - n));
			var _low = (low >>> n) | (high << (32 - n));

			this._a00 = _low & 0xFFFF;
			this._a16 = _low >>> 16;
			this._a32 = _high & 0xFFFF;
			this._a48 = _high >>> 16;

			return this
		};

		/**
		 * Clone the current _UINT64_
		 * @method clone
		 * @return {Object} cloned UINT64
		 */
		UINT64.prototype.clone = function () {
			return new UINT64(this._a00, this._a16, this._a32, this._a48)
		};

		if (module.exports) {
			// Node.js
			module.exports = UINT64;
		} else {
			// Browser
			root['UINT64'] = UINT64;
		}

	})(commonjsGlobal);
	});

	var UINT32$1 = uint32;
	var UINT64$1 = uint64;

	var cuint = {
		UINT32: UINT32$1,
		UINT64: UINT64$1
	};

	/**
	xxHash implementation in pure Javascript

	Copyright (C) 2013, Pierre Curto
	MIT license
	*/

	var UINT32 = cuint.UINT32;

	/*
		Merged this sequence of method calls as it speeds up
		the calculations by a factor of 2
	 */
	// this.v1.add( other.multiply(PRIME32_2) ).rotl(13).multiply(PRIME32_1);
	UINT32.prototype.xxh_update = function (low, high) {
		var b00 = PRIME32_2._low;
		var b16 = PRIME32_2._high;

		var c16, c00;
		c00 = low * b00;
		c16 = c00 >>> 16;

		c16 += high * b00;
		c16 &= 0xFFFF;		// Not required but improves performance
		c16 += low * b16;

		var a00 = this._low + (c00 & 0xFFFF);
		var a16 = a00 >>> 16;

		a16 += this._high + (c16 & 0xFFFF);

		var v = (a16 << 16) | (a00 & 0xFFFF);
		v = (v << 13) | (v >>> 19);

		a00 = v & 0xFFFF;
		a16 = v >>> 16;

		b00 = PRIME32_1._low;
		b16 = PRIME32_1._high;

		c00 = a00 * b00;
		c16 = c00 >>> 16;

		c16 += a16 * b00;
		c16 &= 0xFFFF;		// Not required but improves performance
		c16 += a00 * b16;

		this._low = c00 & 0xFFFF;
		this._high = c16 & 0xFFFF;
	};

	/*
	 * Constants
	 */
	var PRIME32_1 = UINT32( '2654435761' );
	var PRIME32_2 = UINT32( '2246822519' );
	var PRIME32_3 = UINT32( '3266489917' );
	var PRIME32_4 = UINT32(  '668265263' );
	var PRIME32_5 = UINT32(  '374761393' );

	/**
	* Convert string to proper UTF-8 array
	* @param str Input string
	* @returns {Uint8Array} UTF8 array is returned as uint8 array
	*/
	function toUTF8Array$1 (str) {
		var utf8 = [];
		for (var i=0, n=str.length; i < n; i++) {
			var charcode = str.charCodeAt(i);
			if (charcode < 0x80) utf8.push(charcode);
			else if (charcode < 0x800) {
				utf8.push(0xc0 | (charcode >> 6),
				0x80 | (charcode & 0x3f));
			}
			else if (charcode < 0xd800 || charcode >= 0xe000) {
				utf8.push(0xe0 | (charcode >> 12),
				0x80 | ((charcode>>6) & 0x3f),
				0x80 | (charcode & 0x3f));
			}
			// surrogate pair
			else {
				i++;
				// UTF-16 encodes 0x10000-0x10FFFF by
				// subtracting 0x10000 and splitting the
				// 20 bits of 0x0-0xFFFFF into two halves
				charcode = 0x10000 + (((charcode & 0x3ff)<<10)
				| (str.charCodeAt(i) & 0x3ff));
				utf8.push(0xf0 | (charcode >>18),
				0x80 | ((charcode>>12) & 0x3f),
				0x80 | ((charcode>>6) & 0x3f),
				0x80 | (charcode & 0x3f));
			}
		}

		return new Uint8Array(utf8)
	}

	/**
	 * XXH object used as a constructor or a function
	 * @constructor
	 * or
	 * @param {Object|String} input data
	 * @param {Number|UINT32} seed
	 * @return ThisExpression
	 * or
	 * @return {UINT32} xxHash
	 */
	function XXH () {
		if (arguments.length == 2)
			return new XXH( arguments[1] ).update( arguments[0] ).digest()

		if (!(this instanceof XXH))
			return new XXH( arguments[0] )

		init$1.call(this, arguments[0]);
	}

	/**
	 * Initialize the XXH instance with the given seed
	 * @method init
	 * @param {Number|Object} seed as a number or an unsigned 32 bits integer
	 * @return ThisExpression
	 */
	 function init$1 (seed) {
		this.seed = seed instanceof UINT32 ? seed.clone() : UINT32(seed);
		this.v1 = this.seed.clone().add(PRIME32_1).add(PRIME32_2);
		this.v2 = this.seed.clone().add(PRIME32_2);
		this.v3 = this.seed.clone();
		this.v4 = this.seed.clone().subtract(PRIME32_1);
		this.total_len = 0;
		this.memsize = 0;
		this.memory = null;

		return this
	}
	XXH.prototype.init = init$1;

	/**
	 * Add data to be computed for the XXH hash
	 * @method update
	 * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer
	 * @return ThisExpression
	 */
	XXH.prototype.update = function (input) {
		var isString = typeof input == 'string';
		var isArrayBuffer;

		// Convert all strings to utf-8 first (issue #5)
		if (isString) {
			input = toUTF8Array$1(input);
			isString = false;
			isArrayBuffer = true;
		}

		if (typeof ArrayBuffer !== "undefined" && input instanceof ArrayBuffer)
		{
			isArrayBuffer = true;
			input = new Uint8Array(input);
		}

		var p = 0;
		var len = input.length;
		var bEnd = p + len;

		if (len == 0) return this

		this.total_len += len;

		if (this.memsize == 0)
		{
			if (isString) {
				this.memory = '';
			} else if (isArrayBuffer) {
				this.memory = new Uint8Array(16);
			} else {
				this.memory = new Buffer(16);
			}
		}

		if (this.memsize + len < 16)   // fill in tmp buffer
		{
			// XXH_memcpy(this.memory + this.memsize, input, len)
			if (isString) {
				this.memory += input;
			} else if (isArrayBuffer) {
				this.memory.set( input.subarray(0, len), this.memsize );
			} else {
				input.copy( this.memory, this.memsize, 0, len );
			}

			this.memsize += len;
			return this
		}

		if (this.memsize > 0)   // some data left from previous update
		{
			// XXH_memcpy(this.memory + this.memsize, input, 16-this.memsize);
			if (isString) {
				this.memory += input.slice(0, 16 - this.memsize);
			} else if (isArrayBuffer) {
				this.memory.set( input.subarray(0, 16 - this.memsize), this.memsize );
			} else {
				input.copy( this.memory, this.memsize, 0, 16 - this.memsize );
			}

			var p32 = 0;
			if (isString) {
				this.v1.xxh_update(
					(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
				,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
				);
				p32 += 4;
				this.v2.xxh_update(
					(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
				,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
				);
				p32 += 4;
				this.v3.xxh_update(
					(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
				,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
				);
				p32 += 4;
				this.v4.xxh_update(
					(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
				,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
				);
			} else {
				this.v1.xxh_update(
					(this.memory[p32+1] << 8) | this.memory[p32]
				,	(this.memory[p32+3] << 8) | this.memory[p32+2]
				);
				p32 += 4;
				this.v2.xxh_update(
					(this.memory[p32+1] << 8) | this.memory[p32]
				,	(this.memory[p32+3] << 8) | this.memory[p32+2]
				);
				p32 += 4;
				this.v3.xxh_update(
					(this.memory[p32+1] << 8) | this.memory[p32]
				,	(this.memory[p32+3] << 8) | this.memory[p32+2]
				);
				p32 += 4;
				this.v4.xxh_update(
					(this.memory[p32+1] << 8) | this.memory[p32]
				,	(this.memory[p32+3] << 8) | this.memory[p32+2]
				);
			}

			p += 16 - this.memsize;
			this.memsize = 0;
			if (isString) this.memory = '';
		}

		if (p <= bEnd - 16)
		{
			var limit = bEnd - 16;

			do
			{
				if (isString) {
					this.v1.xxh_update(
						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
					);
					p += 4;
					this.v2.xxh_update(
						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
					);
					p += 4;
					this.v3.xxh_update(
						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
					);
					p += 4;
					this.v4.xxh_update(
						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
					);
				} else {
					this.v1.xxh_update(
						(input[p+1] << 8) | input[p]
					,	(input[p+3] << 8) | input[p+2]
					);
					p += 4;
					this.v2.xxh_update(
						(input[p+1] << 8) | input[p]
					,	(input[p+3] << 8) | input[p+2]
					);
					p += 4;
					this.v3.xxh_update(
						(input[p+1] << 8) | input[p]
					,	(input[p+3] << 8) | input[p+2]
					);
					p += 4;
					this.v4.xxh_update(
						(input[p+1] << 8) | input[p]
					,	(input[p+3] << 8) | input[p+2]
					);
				}
				p += 4;
			} while (p <= limit)
		}

		if (p < bEnd)
		{
			// XXH_memcpy(this.memory, p, bEnd-p);
			if (isString) {
				this.memory += input.slice(p);
			} else if (isArrayBuffer) {
				this.memory.set( input.subarray(p, bEnd), this.memsize );
			} else {
				input.copy( this.memory, this.memsize, p, bEnd );
			}

			this.memsize = bEnd - p;
		}

		return this
	};

	/**
	 * Finalize the XXH computation. The XXH instance is ready for reuse for the given seed
	 * @method digest
	 * @return {UINT32} xxHash
	 */
	XXH.prototype.digest = function () {
		var input = this.memory;
		var isString = typeof input == 'string';
		var p = 0;
		var bEnd = this.memsize;
		var h32, h;
		var u = new UINT32;

		if (this.total_len >= 16)
		{
			h32 = this.v1.rotl(1).add( this.v2.rotl(7).add( this.v3.rotl(12).add( this.v4.rotl(18) ) ) );
		}
		else
		{
			h32  = this.seed.clone().add( PRIME32_5 );
		}

		h32.add( u.fromNumber(this.total_len) );

		while (p <= bEnd - 4)
		{
			if (isString) {
				u.fromBits(
					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
				);
			} else {
				u.fromBits(
					(input[p+1] << 8) | input[p]
				,	(input[p+3] << 8) | input[p+2]
				);
			}
			h32
				.add( u.multiply(PRIME32_3) )
				.rotl(17)
				.multiply( PRIME32_4 );
			p += 4;
		}

		while (p < bEnd)
		{
			u.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0 );
			h32
				.add( u.multiply(PRIME32_5) )
				.rotl(11)
				.multiply(PRIME32_1);
		}

		h = h32.clone().shiftRight(15);
		h32.xor(h).multiply(PRIME32_2);

		h = h32.clone().shiftRight(13);
		h32.xor(h).multiply(PRIME32_3);

		h = h32.clone().shiftRight(16);
		h32.xor(h);

		// Reset the state
		this.init( this.seed );

		return h32
	};

	var xxhash$1 = XXH;

	/**
	xxHash64 implementation in pure Javascript

	Copyright (C) 2016, Pierre Curto
	MIT license
	*/

	var UINT64 = cuint.UINT64;

	/*
	 * Constants
	 */
	var PRIME64_1 = UINT64( '11400714785074694791' );
	var PRIME64_2 = UINT64( '14029467366897019727' );
	var PRIME64_3 = UINT64(  '1609587929392839161' );
	var PRIME64_4 = UINT64(  '9650029242287828579' );
	var PRIME64_5 = UINT64(  '2870177450012600261' );

	/**
	* Convert string to proper UTF-8 array
	* @param str Input string
	* @returns {Uint8Array} UTF8 array is returned as uint8 array
	*/
	function toUTF8Array (str) {
		var utf8 = [];
		for (var i=0, n=str.length; i < n; i++) {
			var charcode = str.charCodeAt(i);
			if (charcode < 0x80) utf8.push(charcode);
			else if (charcode < 0x800) {
				utf8.push(0xc0 | (charcode >> 6),
				0x80 | (charcode & 0x3f));
			}
			else if (charcode < 0xd800 || charcode >= 0xe000) {
				utf8.push(0xe0 | (charcode >> 12),
				0x80 | ((charcode>>6) & 0x3f),
				0x80 | (charcode & 0x3f));
			}
			// surrogate pair
			else {
				i++;
				// UTF-16 encodes 0x10000-0x10FFFF by
				// subtracting 0x10000 and splitting the
				// 20 bits of 0x0-0xFFFFF into two halves
				charcode = 0x10000 + (((charcode & 0x3ff)<<10)
				| (str.charCodeAt(i) & 0x3ff));
				utf8.push(0xf0 | (charcode >>18),
				0x80 | ((charcode>>12) & 0x3f),
				0x80 | ((charcode>>6) & 0x3f),
				0x80 | (charcode & 0x3f));
			}
		}

		return new Uint8Array(utf8)
	}

	/**
	 * XXH64 object used as a constructor or a function
	 * @constructor
	 * or
	 * @param {Object|String} input data
	 * @param {Number|UINT64} seed
	 * @return ThisExpression
	 * or
	 * @return {UINT64} xxHash
	 */
	function XXH64 () {
		if (arguments.length == 2)
			return new XXH64( arguments[1] ).update( arguments[0] ).digest()

		if (!(this instanceof XXH64))
			return new XXH64( arguments[0] )

		init.call(this, arguments[0]);
	}

	/**
	 * Initialize the XXH64 instance with the given seed
	 * @method init
	 * @param {Number|Object} seed as a number or an unsigned 32 bits integer
	 * @return ThisExpression
	 */
	 function init (seed) {
		this.seed = seed instanceof UINT64 ? seed.clone() : UINT64(seed);
		this.v1 = this.seed.clone().add(PRIME64_1).add(PRIME64_2);
		this.v2 = this.seed.clone().add(PRIME64_2);
		this.v3 = this.seed.clone();
		this.v4 = this.seed.clone().subtract(PRIME64_1);
		this.total_len = 0;
		this.memsize = 0;
		this.memory = null;

		return this
	}
	XXH64.prototype.init = init;

	/**
	 * Add data to be computed for the XXH64 hash
	 * @method update
	 * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer
	 * @return ThisExpression
	 */
	XXH64.prototype.update = function (input) {
		var isString = typeof input == 'string';
		var isArrayBuffer;

		// Convert all strings to utf-8 first (issue #5)
		if (isString) {
			input = toUTF8Array(input);
			isString = false;
			isArrayBuffer = true;
		}

		if (typeof ArrayBuffer !== "undefined" && input instanceof ArrayBuffer)
		{
			isArrayBuffer = true;
			input = new Uint8Array(input);
		}

		var p = 0;
		var len = input.length;
		var bEnd = p + len;

		if (len == 0) return this

		this.total_len += len;

		if (this.memsize == 0)
		{
			if (isString) {
				this.memory = '';
			} else if (isArrayBuffer) {
				this.memory = new Uint8Array(32);
			} else {
				this.memory = new Buffer(32);
			}
		}

		if (this.memsize + len < 32)   // fill in tmp buffer
		{
			// XXH64_memcpy(this.memory + this.memsize, input, len)
			if (isString) {
				this.memory += input;
			} else if (isArrayBuffer) {
				this.memory.set( input.subarray(0, len), this.memsize );
			} else {
				input.copy( this.memory, this.memsize, 0, len );
			}

			this.memsize += len;
			return this
		}

		if (this.memsize > 0)   // some data left from previous update
		{
			// XXH64_memcpy(this.memory + this.memsize, input, 16-this.memsize);
			if (isString) {
				this.memory += input.slice(0, 32 - this.memsize);
			} else if (isArrayBuffer) {
				this.memory.set( input.subarray(0, 32 - this.memsize), this.memsize );
			} else {
				input.copy( this.memory, this.memsize, 0, 32 - this.memsize );
			}

			var p64 = 0;
			if (isString) {
				var other;
				other = UINT64(
						(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
					,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
					,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
					,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
					);
				this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				p64 += 8;
				other = UINT64(
						(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
					,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
					,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
					,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
					);
				this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				p64 += 8;
				other = UINT64(
						(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
					,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
					,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
					,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
					);
				this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				p64 += 8;
				other = UINT64(
						(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
					,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
					,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
					,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
					);
				this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
			} else {
				var other;
				other = UINT64(
						(this.memory[p64+1] << 8) | this.memory[p64]
					,	(this.memory[p64+3] << 8) | this.memory[p64+2]
					,	(this.memory[p64+5] << 8) | this.memory[p64+4]
					,	(this.memory[p64+7] << 8) | this.memory[p64+6]
					);
				this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				p64 += 8;
				other = UINT64(
						(this.memory[p64+1] << 8) | this.memory[p64]
					,	(this.memory[p64+3] << 8) | this.memory[p64+2]
					,	(this.memory[p64+5] << 8) | this.memory[p64+4]
					,	(this.memory[p64+7] << 8) | this.memory[p64+6]
					);
				this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				p64 += 8;
				other = UINT64(
						(this.memory[p64+1] << 8) | this.memory[p64]
					,	(this.memory[p64+3] << 8) | this.memory[p64+2]
					,	(this.memory[p64+5] << 8) | this.memory[p64+4]
					,	(this.memory[p64+7] << 8) | this.memory[p64+6]
					);
				this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				p64 += 8;
				other = UINT64(
						(this.memory[p64+1] << 8) | this.memory[p64]
					,	(this.memory[p64+3] << 8) | this.memory[p64+2]
					,	(this.memory[p64+5] << 8) | this.memory[p64+4]
					,	(this.memory[p64+7] << 8) | this.memory[p64+6]
					);
				this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
			}

			p += 32 - this.memsize;
			this.memsize = 0;
			if (isString) this.memory = '';
		}

		if (p <= bEnd - 32)
		{
			var limit = bEnd - 32;

			do
			{
				if (isString) {
					var other;
					other = UINT64(
							(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
						,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
						,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
						,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
						);
					this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
					p += 8;
					other = UINT64(
							(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
						,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
						,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
						,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
						);
					this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
					p += 8;
					other = UINT64(
							(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
						,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
						,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
						,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
						);
					this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
					p += 8;
					other = UINT64(
							(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
						,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
						,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
						,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
						);
					this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				} else {
					var other;
					other = UINT64(
							(input[p+1] << 8) | input[p]
						,	(input[p+3] << 8) | input[p+2]
						,	(input[p+5] << 8) | input[p+4]
						,	(input[p+7] << 8) | input[p+6]
						);
					this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
					p += 8;
					other = UINT64(
							(input[p+1] << 8) | input[p]
						,	(input[p+3] << 8) | input[p+2]
						,	(input[p+5] << 8) | input[p+4]
						,	(input[p+7] << 8) | input[p+6]
						);
					this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
					p += 8;
					other = UINT64(
							(input[p+1] << 8) | input[p]
						,	(input[p+3] << 8) | input[p+2]
						,	(input[p+5] << 8) | input[p+4]
						,	(input[p+7] << 8) | input[p+6]
						);
					this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
					p += 8;
					other = UINT64(
							(input[p+1] << 8) | input[p]
						,	(input[p+3] << 8) | input[p+2]
						,	(input[p+5] << 8) | input[p+4]
						,	(input[p+7] << 8) | input[p+6]
						);
					this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
				}
				p += 8;
			} while (p <= limit)
		}

		if (p < bEnd)
		{
			// XXH64_memcpy(this.memory, p, bEnd-p);
			if (isString) {
				this.memory += input.slice(p);
			} else if (isArrayBuffer) {
				this.memory.set( input.subarray(p, bEnd), this.memsize );
			} else {
				input.copy( this.memory, this.memsize, p, bEnd );
			}

			this.memsize = bEnd - p;
		}

		return this
	};

	/**
	 * Finalize the XXH64 computation. The XXH64 instance is ready for reuse for the given seed
	 * @method digest
	 * @return {UINT64} xxHash
	 */
	XXH64.prototype.digest = function () {
		var input = this.memory;
		var isString = typeof input == 'string';
		var p = 0;
		var bEnd = this.memsize;
		var h64, h;
		var u = new UINT64;

		if (this.total_len >= 32)
		{
			h64 = this.v1.clone().rotl(1);
			h64.add( this.v2.clone().rotl(7) );
			h64.add( this.v3.clone().rotl(12) );
			h64.add( this.v4.clone().rotl(18) );

			h64.xor( this.v1.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
			h64.multiply(PRIME64_1).add(PRIME64_4);

			h64.xor( this.v2.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
			h64.multiply(PRIME64_1).add(PRIME64_4);

			h64.xor( this.v3.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
			h64.multiply(PRIME64_1).add(PRIME64_4);

			h64.xor( this.v4.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
			h64.multiply(PRIME64_1).add(PRIME64_4);
		}
		else
		{
			h64  = this.seed.clone().add( PRIME64_5 );
		}

		h64.add( u.fromNumber(this.total_len) );

		while (p <= bEnd - 8)
		{
			if (isString) {
				u.fromBits(
					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
				,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
				,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
				);
			} else {
				u.fromBits(
					(input[p+1] << 8) | input[p]
				,	(input[p+3] << 8) | input[p+2]
				,	(input[p+5] << 8) | input[p+4]
				,	(input[p+7] << 8) | input[p+6]
				);
			}
			u.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1);
			h64
				.xor(u)
				.rotl(27)
				.multiply( PRIME64_1 )
				.add( PRIME64_4 );
			p += 8;
		}

		if (p + 4 <= bEnd) {
			if (isString) {
				u.fromBits(
					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
				,	0
				,	0
				);
			} else {
				u.fromBits(
					(input[p+1] << 8) | input[p]
				,	(input[p+3] << 8) | input[p+2]
				,	0
				,	0
				);
			}
			h64
				.xor( u.multiply(PRIME64_1) )
				.rotl(23)
				.multiply( PRIME64_2 )
				.add( PRIME64_3 );
			p += 4;
		}

		while (p < bEnd)
		{
			u.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0, 0, 0 );
			h64
				.xor( u.multiply(PRIME64_5) )
				.rotl(11)
				.multiply(PRIME64_1);
		}

		h = h64.clone().shiftRight(33);
		h64.xor(h).multiply(PRIME64_2);

		h = h64.clone().shiftRight(29);
		h64.xor(h).multiply(PRIME64_3);

		h = h64.clone().shiftRight(32);
		h64.xor(h);

		// Reset the state
		this.init( this.seed );

		return h64
	};

	var xxhash64 = XXH64;

	var lib = {
		h32: xxhash$1
	,	h64: xxhash64
	};

	var _default$2 = xxhash64AsValue;

	var _xxhashjs = interopRequireDefault(lib);



	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function xxhash64AsValue(data, seed) {
	  if ((0, _util$5.isBuffer)(data) || (0, _util$5.isString)(data)) {
	    return _xxhashjs.default.h64(data, seed);
	  }

	  return _xxhashjs.default.h64((0, _util$5.u8aToBuffer)(data), seed);
	}

	var asValue = /*#__PURE__*/Object.defineProperty({
		default: _default$2
	}, '__esModule', {value: true});

	var require$$0$7 = asValue;

	var _default$1 = xxhash64AsRaw;

	var _asValue = interopRequireDefault(require$$0$7);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function xxhash64AsRaw(data, seed) {
	  return (0, _asValue.default)(data, seed).toString(16);
	}

	var asRaw = /*#__PURE__*/Object.defineProperty({
		default: _default$1
	}, '__esModule', {value: true});

	var require$$0$6 = asRaw;

	var _default = xxhash64AsBn;



	var _asRaw = interopRequireDefault(require$$0$6);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function xxhash64AsBn(data, seed) {
	  return new _util$5.BN((0, _asRaw.default)(data, seed), 16);
	}

	var asBn = /*#__PURE__*/Object.defineProperty({
		default: _default
	}, '__esModule', {value: true});

	var require$$0$5 = asBn;

	var xxhashAsU8a_1 = xxhashAsU8a;





	var _asBn = interopRequireDefault(require$$0$5);

	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name xxhashAsU8a
	 * @summary Creates a xxhash64 u8a from the input.
	 * @description
	 * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { xxhashAsU8a } from '@polkadot/util-crypto';
	 *
	 * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
	 * ```
	 */
	function xxhashAsU8a(data, bitLength = 64, onlyJs = false) {
	  const iterations = Math.ceil(bitLength / 64);

	  if ((0, _wasmCrypto.isReady)() && !onlyJs) {
	    return (0, _wasmCrypto.twox)((0, _util$5.u8aToU8a)(data), iterations);
	  }

	  const u8a = new Uint8Array(Math.ceil(bitLength / 8));

	  for (let seed = 0; seed < iterations; seed++) {
	    u8a.set((0, _asBn.default)(data, seed).toArray('le', 8), seed * 8);
	  }

	  return u8a;
	}

	var asU8a = /*#__PURE__*/Object.defineProperty({
		xxhashAsU8a: xxhashAsU8a_1
	}, '__esModule', {value: true});

	var _asU8a = asU8a;

	var xxhashAsHex_1 = xxhashAsHex;





	// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name xxhashAsHex
	 * @summary Creates a xxhash64 hex from the input.
	 * @description
	 * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a hex string with the specified `bitLength`.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import { xxhashAsHex } from '@polkadot/util-crypto';
	 *
	 * xxhashAsHex('abc'); // => 0x44bc2cf5ad770999
	 * ```
	 */
	function xxhashAsHex(data, bitLength = 64) {
	  return (0, _util$5.u8aToHex)((0, _asU8a.xxhashAsU8a)(data, bitLength));
	}

	var asHex = /*#__PURE__*/Object.defineProperty({
		xxhashAsHex: xxhashAsHex_1
	}, '__esModule', {value: true});

	var _asHex = asHex;

	var xxhash = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "xxhashAsHex", {
	  enumerable: true,
	  get: function () {
	    return _asHex.xxhashAsHex;
	  }
	});
	Object.defineProperty(exports, "xxhashAsU8a", {
	  enumerable: true,
	  get: function () {
	    return _asU8a.xxhashAsU8a;
	  }
	});
	});

	var _index$j = address$1;

	var _index2$6 = base32;

	var _index3$3 = base58;

	var _index6 = ethereum$2;

	var _index7 = hd;

	var _index9 = json$1;

	var _index15 = random;

	var _index19$1 = sha512;

	var _index20 = signature;

	var _index21 = xxhash;

	var bundle$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  packageInfo: true
	};
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$4.packageInfo;
	  }
	});







	Object.keys(_index$j).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index$j[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$j[key];
	    }
	  });
	});



	Object.keys(_index2$6).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index2$6[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index2$6[key];
	    }
	  });
	});



	Object.keys(_index3$3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index3$3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index3$3[key];
	    }
	  });
	});



	Object.keys(_index4$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index4$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index4$1[key];
	    }
	  });
	});



	Object.keys(_index5$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index5$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index5$1[key];
	    }
	  });
	});



	Object.keys(_crypto).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _crypto[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _crypto[key];
	    }
	  });
	});



	Object.keys(_index6).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index6[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index6[key];
	    }
	  });
	});



	Object.keys(_index7).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index7[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index7[key];
	    }
	  });
	});



	Object.keys(_index8).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index8[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index8[key];
	    }
	  });
	});



	Object.keys(_index9).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index9[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index9[key];
	    }
	  });
	});



	Object.keys(_index10).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index10[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index10[key];
	    }
	  });
	});



	Object.keys(_index11).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index11[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index11[key];
	    }
	  });
	});



	Object.keys(_index12).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index12[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index12[key];
	    }
	  });
	});



	Object.keys(_networks$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _networks$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _networks$1[key];
	    }
	  });
	});



	Object.keys(_index13).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index13[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index13[key];
	    }
	  });
	});



	Object.keys(_index14).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index14[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index14[key];
	    }
	  });
	});



	Object.keys(_index15).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index15[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index15[key];
	    }
	  });
	});



	Object.keys(_index16).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index16[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index16[key];
	    }
	  });
	});



	Object.keys(_index17).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index17[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index17[key];
	    }
	  });
	});



	Object.keys(_index18).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index18[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index18[key];
	    }
	  });
	});



	Object.keys(_index19$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index19$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index19$1[key];
	    }
	  });
	});



	Object.keys(_index20).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index20[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index20[key];
	    }
	  });
	});



	Object.keys(_index21).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index21[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index21[key];
	    }
	  });
	});
	});

	var _bundle$7 = bundle$7;

	var utilCrypto = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$7).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$7[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$7[key];
	    }
	  });
	});
	});

	var defaults$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DEV_SEED = exports.DEV_PHRASE = void 0;
	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// default substrate dev phrase
	const DEV_PHRASE = 'bottom drive obey lake curtain smoke basket hold race lonely fit walk'; // seed from the above phrase

	exports.DEV_PHRASE = DEV_PHRASE;
	const DEV_SEED = '0xfac7959dbfe72f052e5a0c3c8d6530f202b02fd8f9f5ca3580ec8deb7797479e';
	exports.DEV_SEED = DEV_SEED;
	});

	var defaults$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SEED_LENGTH = exports.SEC_LENGTH = exports.SALT_LENGTH = exports.PUB_LENGTH = exports.PKCS8_HEADER = exports.PKCS8_DIVIDER = void 0;
	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
	exports.PKCS8_DIVIDER = PKCS8_DIVIDER;
	const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
	exports.PKCS8_HEADER = PKCS8_HEADER;
	const PUB_LENGTH = 32;
	exports.PUB_LENGTH = PUB_LENGTH;
	const SALT_LENGTH = 32;
	exports.SALT_LENGTH = SALT_LENGTH;
	const SEC_LENGTH = 64;
	exports.SEC_LENGTH = SEC_LENGTH;
	const SEED_LENGTH = 32;
	exports.SEED_LENGTH = SEED_LENGTH;
	});

	var _utilCrypto = utilCrypto;

	var _defaults$1 = defaults$1;

	var decodePair_1 = decodePair;







	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const SEED_OFFSET = _defaults$1.PKCS8_HEADER.length;

	function decodePair(passphrase, encrypted, _encType) {
	  const encType = Array.isArray(_encType) || (0, _util$5.isUndefined)(_encType) ? _encType : [_encType];
	  const decrypted = (0, _utilCrypto.jsonDecryptData)(encrypted, passphrase, encType);
	  const header = decrypted.subarray(0, _defaults$1.PKCS8_HEADER.length);
	  (0, _util$5.assert)((0, _util$5.u8aEq)(header, _defaults$1.PKCS8_HEADER), 'Invalid Pkcs8 header found in body');
	  let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + _defaults$1.SEC_LENGTH);
	  let divOffset = SEED_OFFSET + _defaults$1.SEC_LENGTH;
	  let divider = decrypted.subarray(divOffset, divOffset + _defaults$1.PKCS8_DIVIDER.length); // old-style, we have the seed here

	  if (!(0, _util$5.u8aEq)(divider, _defaults$1.PKCS8_DIVIDER)) {
	    divOffset = SEED_OFFSET + _defaults$1.SEED_LENGTH;
	    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
	    divider = decrypted.subarray(divOffset, divOffset + _defaults$1.PKCS8_DIVIDER.length);
	    (0, _util$5.assert)((0, _util$5.u8aEq)(divider, _defaults$1.PKCS8_DIVIDER), 'Invalid Pkcs8 divider found in body');
	  }

	  const pubOffset = divOffset + _defaults$1.PKCS8_DIVIDER.length;
	  const publicKey = decrypted.subarray(pubOffset, pubOffset + _defaults$1.PUB_LENGTH);
	  return {
	    publicKey,
	    secretKey
	  };
	}

	var decode = /*#__PURE__*/Object.defineProperty({
		decodePair: decodePair_1
	}, '__esModule', {value: true});

	var encodePair_1 = encodePair;







	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function encodePair({
	  publicKey,
	  secretKey
	}, passphrase) {
	  (0, _util$5.assert)(secretKey, 'Expected a valid secretKey to be passed to encode');
	  const encoded = (0, _util$5.u8aConcat)(_defaults$1.PKCS8_HEADER, secretKey, _defaults$1.PKCS8_DIVIDER, publicKey);

	  if (!passphrase) {
	    return encoded;
	  }

	  const {
	    params,
	    password,
	    salt
	  } = (0, _utilCrypto.scryptEncode)(passphrase);
	  const {
	    encrypted,
	    nonce
	  } = (0, _utilCrypto.naclEncrypt)(encoded, password.subarray(0, 32));
	  return (0, _util$5.u8aConcat)((0, _utilCrypto.scryptToU8a)(salt, params), nonce, encrypted);
	}

	var encode = /*#__PURE__*/Object.defineProperty({
		encodePair: encodePair_1
	}, '__esModule', {value: true});

	var pairToJson_1 = pairToJson;

	var _defineProperty2$p = interopRequireDefault(defineProperty);



	function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$p(Object(source), true).forEach(function (key) { (0, _defineProperty2$p.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function pairToJson(type, {
	  address,
	  meta
	}, encoded, isEncrypted) {
	  return _objectSpread$p(_objectSpread$p({}, (0, _utilCrypto.jsonEncryptFormat)(encoded, ['pkcs8', type], isEncrypted)), {}, {
	    address,
	    meta
	  });
	}

	var toJson = /*#__PURE__*/Object.defineProperty({
		pairToJson: pairToJson_1
	}, '__esModule', {value: true});

	var _decode = decode;

	var _encode = encode;

	var _toJson = toJson;

	var createPair_1 = createPair;

	var _defineProperty2$o = interopRequireDefault(defineProperty);











	function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$o(Object(source), true).forEach(function (key) { (0, _defineProperty2$o.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const SIG_TYPE_NONE = new Uint8Array();
	const TYPE_FROM_SEED = {
	  ecdsa: _utilCrypto.secp256k1KeypairFromSeed,
	  ed25519: _utilCrypto.naclKeypairFromSeed,
	  ethereum: _utilCrypto.secp256k1KeypairFromSeed,
	  sr25519: _utilCrypto.schnorrkelKeypairFromSeed
	};
	const TYPE_PREFIX = {
	  ecdsa: new Uint8Array([2]),
	  ed25519: new Uint8Array([0]),
	  ethereum: new Uint8Array([2]),
	  sr25519: new Uint8Array([1])
	};
	const TYPE_SIGNATURE = {
	  ecdsa: (m, p) => (0, _utilCrypto.secp256k1Sign)(m, p, 'blake2'),
	  ed25519: _utilCrypto.naclSign,
	  ethereum: (m, p) => (0, _utilCrypto.secp256k1Sign)(m, p, 'keccak'),
	  sr25519: _utilCrypto.schnorrkelSign
	};
	const TYPE_ADDRESS = {
	  ecdsa: p => p.length > 32 ? (0, _utilCrypto.blake2AsU8a)(p) : p,
	  ed25519: p => p,
	  ethereum: p => p.length === 20 ? p : (0, _utilCrypto.keccakAsU8a)((0, _utilCrypto.secp256k1Expand)(p)),
	  sr25519: p => p
	}; // Not 100% correct, since it can be a Uint8Array, but an invalid one - just say "undefined" is anything non-valid

	function isLocked(secretKey) {
	  return !secretKey || secretKey.length === 0 || secretKey.every(b => b === 0);
	}

	function vrfHash(proof, context, extra) {
	  return (0, _utilCrypto.blake2AsU8a)((0, _util$5.u8aConcat)(context || '', extra || '', proof));
	}
	/**
	 * @name createPair
	 * @summary Creates a keyring pair object
	 * @description Creates a keyring pair object with provided account public key, metadata, and encoded arguments.
	 * The keyring pair stores the account state including the encoded address and associated metadata.
	 *
	 * It has properties whose values are functions that may be called to perform account actions:
	 *
	 * - `address` function retrieves the address associated with the account.
	 * - `decodedPkcs8` function is called with the account passphrase and account encoded public key.
	 * It decodes the encoded public key using the passphrase provided to obtain the decoded account public key
	 * and associated secret key that are then available in memory, and changes the account address stored in the
	 * state of the pair to correspond to the address of the decoded public key.
	 * - `encodePkcs8` function when provided with the correct passphrase associated with the account pair
	 * and when the secret key is in memory (when the account pair is not locked) it returns an encoded
	 * public key of the account.
	 * - `meta` is the metadata that is stored in the state of the pair, either when it was originally
	 * created or set via `setMeta`.
	 * - `publicKey` returns the public key stored in memory for the pair.
	 * - `sign` may be used to return a signature by signing a provided message with the secret
	 * key (if it is in memory) using Nacl.
	 * - `toJson` calls another `toJson` function and provides the state of the pair,
	 * it generates arguments to be passed to the other `toJson` function including an encoded public key of the account
	 * that it generates using the secret key from memory (if it has been made available in memory)
	 * and the optionally provided passphrase argument. It passes a third boolean argument to `toJson`
	 * indicating whether the public key has been encoded or not (if a passphrase argument was provided then it is encoded).
	 * The `toJson` function that it calls returns a JSON object with properties including the `address`
	 * and `meta` that are assigned with the values stored in the corresponding state variables of the account pair,
	 * an `encoded` property that is assigned with the encoded public key in hex format, and an `encoding`
	 * property that indicates whether the public key value of the `encoded` property is encoded or not.
	 */


	function createPair({
	  toSS58,
	  type
	}, {
	  publicKey,
	  secretKey
	}, meta = {}, encoded = null, encTypes) {
	  const decodePkcs8 = (passphrase, userEncoded) => {
	    const decoded = (0, _decode.decodePair)(passphrase, userEncoded || encoded, encTypes);

	    if (decoded.secretKey.length === 64) {
	      publicKey = decoded.publicKey;
	      secretKey = decoded.secretKey;
	    } else {
	      const pair = TYPE_FROM_SEED[type](decoded.secretKey);
	      publicKey = pair.publicKey;
	      secretKey = pair.secretKey;
	    }
	  };

	  const recode = passphrase => {
	    isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
	    encoded = (0, _encode.encodePair)({
	      publicKey,
	      secretKey
	    }, passphrase); // re-encode, latest version

	    encTypes = undefined; // swap to defaults, latest version follows

	    return encoded;
	  };

	  const encodeAddress = () => {
	    const raw = TYPE_ADDRESS[type](publicKey);
	    return type === 'ethereum' ? (0, _utilCrypto.ethereumEncode)(raw) : toSS58(raw);
	  };

	  return {
	    get address() {
	      return encodeAddress();
	    },

	    get addressRaw() {
	      const raw = TYPE_ADDRESS[type](publicKey);
	      return type === 'ethereum' ? raw.slice(-20) : raw;
	    },

	    get isLocked() {
	      return isLocked(secretKey);
	    },

	    get meta() {
	      return meta;
	    },

	    get publicKey() {
	      return publicKey;
	    },

	    get type() {
	      return type;
	    },

	    // eslint-disable-next-line sort-keys
	    decodePkcs8,
	    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => {
	      (0, _util$5.assert)(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
	      (0, _util$5.assert)(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
	      return (0, _utilCrypto.naclOpen)((0, _util$5.u8aToU8a)(encryptedMessageWithNonce.slice(24, encryptedMessageWithNonce.length)), (0, _util$5.u8aToU8a)(encryptedMessageWithNonce.slice(0, 24)), (0, _utilCrypto.convertPublicKeyToCurve25519)((0, _util$5.u8aToU8a)(senderPublicKey)), (0, _utilCrypto.convertSecretKeyToCurve25519)(secretKey));
	    },
	    derive: (suri, meta) => {
	      (0, _util$5.assert)(type !== 'ethereum', 'Unable to derive on this keypair');
	      (0, _util$5.assert)(!isLocked(secretKey), 'Cannot derive on a locked keypair');
	      const {
	        path
	      } = (0, _utilCrypto.keyExtractPath)(suri);
	      const derived = (0, _utilCrypto.keyFromPath)({
	        publicKey,
	        secretKey
	      }, path, type);
	      return createPair({
	        toSS58,
	        type
	      }, derived, meta, null);
	    },
	    encodePkcs8: passphrase => {
	      return recode(passphrase);
	    },
	    encryptMessage: (message, recipientPublicKey, nonceIn) => {
	      (0, _util$5.assert)(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
	      (0, _util$5.assert)(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
	      const {
	        nonce,
	        sealed
	      } = (0, _utilCrypto.naclSeal)((0, _util$5.u8aToU8a)(message), (0, _utilCrypto.convertSecretKeyToCurve25519)(secretKey), (0, _utilCrypto.convertPublicKeyToCurve25519)((0, _util$5.u8aToU8a)(recipientPublicKey)), nonceIn);
	      return (0, _util$5.u8aConcat)(nonce, sealed);
	    },
	    lock: () => {
	      secretKey = new Uint8Array();
	    },
	    setMeta: additional => {
	      meta = _objectSpread$o(_objectSpread$o({}, meta), additional);
	    },
	    sign: (message, options = {}) => {
	      (0, _util$5.assert)(!isLocked(secretKey), 'Cannot sign with a locked key pair');
	      return (0, _util$5.u8aConcat)(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type]((0, _util$5.u8aToU8a)(message), {
	        publicKey,
	        secretKey
	      }));
	    },
	    toJson: passphrase => {
	      // NOTE: For ecdsa and ethereum, the publicKey cannot be extracted from the address. For these
	      // pass the hex-encoded publicKey through to the address portion of the JSON (before decoding)
	      // unless the publicKey is already an address
	      const address = ['ecdsa', 'ethereum'].includes(type) ? publicKey.length === 20 ? (0, _util$5.u8aToHex)(publicKey) : (0, _util$5.u8aToHex)((0, _utilCrypto.secp256k1Compress)(publicKey)) : encodeAddress();
	      return (0, _toJson.pairToJson)(type, {
	        address,
	        meta
	      }, recode(passphrase), !!passphrase);
	    },
	    unlock: passphrase => {
	      return decodePkcs8(passphrase);
	    },
	    verify: (message, signature, signerPublic) => {
	      return (0, _utilCrypto.signatureVerify)(message, signature, TYPE_ADDRESS[type]((0, _util$5.u8aToU8a)(signerPublic))).isValid;
	    },
	    vrfSign: (message, context, extra) => {
	      (0, _util$5.assert)(!isLocked(secretKey), 'Cannot sign with a locked key pair');

	      if (type === 'sr25519') {
	        return (0, _utilCrypto.schnorrkelVrfSign)(message, {
	          secretKey
	        }, context, extra);
	      }

	      const proof = TYPE_SIGNATURE[type]((0, _util$5.u8aToU8a)(message), {
	        publicKey,
	        secretKey
	      });
	      return (0, _util$5.u8aConcat)(vrfHash(proof, context, extra), proof);
	    },
	    vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
	      if (type === 'sr25519') {
	        return (0, _utilCrypto.schnorrkelVrfVerify)(message, vrfResult, publicKey, context, extra);
	      }

	      const result = (0, _utilCrypto.signatureVerify)(message, (0, _util$5.u8aConcat)(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type]((0, _util$5.u8aToU8a)(signerPublic)));
	      return result.isValid && (0, _util$5.u8aEq)(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
	    }
	  };
	}

	var pair = /*#__PURE__*/Object.defineProperty({
		createPair: createPair_1
	}, '__esModule', {value: true});

	var pairs$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Pairs = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _map = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("map");

	class Pairs {
	  constructor() {
	    Object.defineProperty(this, _map, {
	      writable: true,
	      value: {}
	    });
	  }

	  add(pair) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _map)[_map][(0, _utilCrypto.decodeAddress)(pair.address).toString()] = pair;
	    return pair;
	  }

	  all() {
	    return Object.values((0, _classPrivateFieldLooseBase2.default)(this, _map)[_map]);
	  }

	  get(address) {
	    const pair = (0, _classPrivateFieldLooseBase2.default)(this, _map)[_map][(0, _utilCrypto.decodeAddress)(address).toString()];

	    (0, _util$5.assert)(pair, () => `Unable to retrieve keypair '${(0, _util$5.isU8a)(address) || (0, _util$5.isHex)(address) ? (0, _util$5.u8aToHex)((0, _util$5.u8aToU8a)(address)) : address}'`);
	    return pair;
	  }

	  remove(address) {
	    delete (0, _classPrivateFieldLooseBase2.default)(this, _map)[_map][(0, _utilCrypto.decodeAddress)(address).toString()];
	  }

	}

	exports.Pairs = Pairs;
	});

	var _defaults = defaults$2;

	var _index$i = pair;

	var _pairs2 = pairs$1;

	var keyring$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Keyring = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);











	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const keypairFromSeed = {
	  ecdsa: seed => (0, _utilCrypto.secp256k1KeypairFromSeed)(seed),
	  ed25519: seed => (0, _utilCrypto.naclKeypairFromSeed)(seed),
	  ethereum: seed => (0, _utilCrypto.secp256k1KeypairFromSeed)(seed),
	  sr25519: seed => (0, _utilCrypto.schnorrkelKeypairFromSeed)(seed)
	};
	/**
	 * # @polkadot/keyring
	 *
	 * ## Overview
	 *
	 * @name Keyring
	 * @summary Keyring management of user accounts
	 * @description Allows generation of keyring pairs from a variety of input combinations, such as
	 * json object containing account address or public key, account metadata, and account encoded using
	 * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,
	 * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.
	 * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair
	 * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform
	 * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with
	 * an account may be obtained using `toJson` accompanied by the account passphrase.
	 */

	var _pairs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("pairs");

	var _type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("type");

	var _ss = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ss58");

	class Keyring {
	  constructor(options = {}) {
	    Object.defineProperty(this, _pairs, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _type, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _ss, {
	      writable: true,
	      value: void 0
	    });
	    this.decodeAddress = _utilCrypto.decodeAddress;

	    this.encodeAddress = (address, ss58Format) => {
	      return this.type === 'ethereum' ? (0, _utilCrypto.ethereumEncode)(address) : (0, _utilCrypto.encodeAddress)(address, (0, _util$5.isUndefined)(ss58Format) ? (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] : ss58Format);
	    };

	    options.type = options.type || 'ed25519';
	    (0, _util$5.assert)(['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined'), () => `Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || 'unknown'}`);
	    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs] = new _pairs2.Pairs();
	    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = options.ss58Format;
	    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = options.type;
	  }
	  /**
	   * @description retrieve the pairs (alias for getPairs)
	   */


	  get pairs() {
	    return this.getPairs();
	  }
	  /**
	   * @description retrieve the publicKeys (alias for getPublicKeys)
	   */


	  get publicKeys() {
	    return this.getPublicKeys();
	  }
	  /**
	   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
	   */


	  get type() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type];
	  }
	  /**
	   * @name addPair
	   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
	   */


	  addPair(pair) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].add(pair);
	  }
	  /**
	   * @name addFromAddress
	   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
	   * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
	   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
	   * of an account backup), and then generates a keyring pair from them that it passes to
	   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
	   */


	  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
	    const publicKey = this.decodeAddress(address, ignoreChecksum);
	    return this.addPair((0, _index$i.createPair)({
	      toSS58: this.encodeAddress,
	      type
	    }, {
	      publicKey,
	      secretKey: new Uint8Array()
	    }, meta, encoded, encType));
	  }
	  /**
	   * @name addFromJson
	   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
	   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
	   * of an account backup), and then generates a keyring pair from it that it passes to
	   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
	   */


	  addFromJson(json, ignoreChecksum) {
	    return this.addPair(this.createFromJson(json, ignoreChecksum));
	  }
	  /**
	   * @name addFromMnemonic
	   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
	   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
	   * argument and a metadata argument that contains account information (that may be obtained from the json file
	   * of an account backup), and then generates a keyring pair from it that it passes to
	   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
	   */


	  addFromMnemonic(mnemonic, meta = {}, type = this.type) {
	    return this.addFromUri(mnemonic, meta, type);
	  }
	  /**
	   * @name addFromPair
	   * @summary Stores an account created from an explicit publicKey/secreteKey combination
	   */


	  addFromPair(pair, meta = {}, type = this.type) {
	    return this.addPair(this.createFromPair(pair, meta, type));
	  }
	  /**
	   * @name addFromSeed
	   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
	   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
	   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
	   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
	   */


	  addFromSeed(seed, meta = {}, type = this.type) {
	    return this.addPair((0, _index$i.createPair)({
	      toSS58: this.encodeAddress,
	      type
	    }, keypairFromSeed[type](seed), meta, null));
	  }
	  /**
	   * @name addFromUri
	   * @summary Creates an account via an suri
	   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
	   */


	  addFromUri(suri, meta = {}, type = this.type) {
	    return this.addPair(this.createFromUri(suri, meta, type));
	  }
	  /**
	   * @name createFromJson
	   * @description Creates a pair from a JSON keyfile
	   */


	  createFromJson({
	    address,
	    encoded,
	    encoding: {
	      content,
	      type,
	      version
	    },
	    meta
	  }, ignoreChecksum) {
	    (0, _util$5.assert)(version !== '3' || content[0] === 'pkcs8', () => `Unable to decode non-pkcs8 type, [${content.join(',')}] found}`);
	    const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];
	    const encType = !Array.isArray(type) ? [type] : type;
	    (0, _util$5.assert)(['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType), () => `Unknown crypto type ${cryptoType}`); // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs

	    const publicKey = (0, _util$5.isHex)(address) ? (0, _util$5.hexToU8a)(address) : this.decodeAddress(address, ignoreChecksum);
	    const decoded = (0, _util$5.isHex)(encoded) ? (0, _util$5.hexToU8a)(encoded) : (0, _utilCrypto.base64Decode)(encoded);
	    return (0, _index$i.createPair)({
	      toSS58: this.encodeAddress,
	      type: cryptoType
	    }, {
	      publicKey,
	      secretKey: new Uint8Array()
	    }, meta, decoded, encType);
	  }
	  /**
	   * @name createFromPair
	   * @summary Creates a pair from an explicit publicKey/secreteKey combination
	   */


	  createFromPair(pair, meta = {}, type = this.type) {
	    return (0, _index$i.createPair)({
	      toSS58: this.encodeAddress,
	      type
	    }, pair, meta, null);
	  }
	  /**
	   * @name createFromUri
	   * @summary Creates a Keypair from an suri
	   * @description This creates a pair from the suri, but does not add it to the keyring
	   */


	  createFromUri(_suri, meta = {}, type = this.type) {
	    // here we only aut-add the dev phrase if we have a hard-derived path
	    const suri = _suri.startsWith('//') ? `${_defaults.DEV_PHRASE}${_suri}` : _suri;
	    const {
	      derivePath,
	      password,
	      path,
	      phrase
	    } = (0, _utilCrypto.keyExtractSuri)(suri);
	    let seed;
	    const isPhraseHex = (0, _util$5.isHex)(phrase, 256);

	    if (isPhraseHex) {
	      seed = (0, _util$5.hexToU8a)(phrase);
	    } else {
	      const str = phrase;
	      const parts = str.split(' ');

	      if ([12, 15, 18, 21, 24].includes(parts.length)) {
	        seed = type === 'ethereum' ? (0, _utilCrypto.mnemonicToLegacySeed)(phrase, '', false, 64) : (0, _utilCrypto.mnemonicToMiniSecret)(phrase, password);
	      } else {
	        (0, _util$5.assert)(str.length <= 32, 'specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');
	        seed = (0, _util$5.stringToU8a)(str.padEnd(32));
	      }
	    }

	    const derived = type === 'ethereum' ? isPhraseHex ? keypairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once
	    : (0, _utilCrypto.hdEthereum)(seed, derivePath.substring(1)) : (0, _utilCrypto.keyFromPath)(keypairFromSeed[type](seed), path, type);
	    return (0, _index$i.createPair)({
	      toSS58: this.encodeAddress,
	      type
	    }, derived, meta, null);
	  }
	  /**
	   * @name encodeAddress
	   * @description Encodes the input into an ss58 representation
	   */


	  /**
	   * @name getPair
	   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
	   * @description Returns a keyring pair value from the keyring pair dictionary by performing
	   * a key lookup using the provided account address or public key (after decoding it).
	   */
	  getPair(address) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address);
	  }
	  /**
	   * @name getPairs
	   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
	   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
	   */


	  getPairs() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all();
	  }
	  /**
	   * @name getPublicKeys
	   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
	   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
	   */


	  getPublicKeys() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all().map(({
	      publicKey
	    }) => publicKey);
	  }
	  /**
	   * @name removePair
	   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
	   */


	  removePair(address) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].remove(address);
	  }
	  /**
	   * @name setSS58Format;
	   * @description Sets the ss58 format for the keyring
	   */


	  setSS58Format(ss58) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = ss58;
	  }
	  /**
	   * @name toJson
	   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
	   * @description Returns a JSON object containing the metadata associated with an account
	   * when valid address or public key and when the account passphrase is provided if the account secret
	   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
	   * may backup their account to a JSON file that contains this information.
	   */


	  toJson(address, passphrase) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address).toJson(passphrase);
	  }

	}

	exports.Keyring = Keyring;
	});

	var _keyring$1 = keyring$1;

	var testing = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createTestKeyring = createTestKeyring;
	exports.PAIRSETHEREUM = exports.PAIRSSR25519 = void 0;







	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// NOTE This is not great since we have the secretKey here explicitly, but a testing
	// keyring is for testing - what happens is that in most cases the keyring is initialises
	// before anything else. Since the sr25519 crypto is async, this creates problems with
	// adding the keys when only the keyring is used.
	const PAIRSSR25519 = [{
	  publicKey: (0, _util$5.hexToU8a)('0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'),
	  secretKey: (0, _util$5.hexToU8a)('0x98319d4ff8a9508c4bb0cf0b5a78d760a0b2082c02775e6e82370816fedfff48925a225d97aa00682d6a59b95b18780c10d7032336e88f3442b42361f4a66011'),
	  // nosemgrep
	  seed: 'Alice',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f'),
	  secretKey: (0, _util$5.hexToU8a)('0xe8da6c9d810e020f5e3c7f5af2dea314cbeaa0d72bc6421e92c0808a0c584a6046ab28e97c3ffc77fe12b5a4d37e8cd4afbfebbf2391ffc7cb07c0f38c023efd'),
	  // nosemgrep
	  seed: 'Alice//stash',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48'),
	  secretKey: (0, _util$5.hexToU8a)('0x081ff694633e255136bdb456c20a5fc8fed21f8b964c11bb17ff534ce80ebd5941ae88f85d0c1bfc37be41c904e1dfc01de8c8067b0d6d5df25dd1ac0894a325'),
	  // nosemgrep
	  seed: 'Bob',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0xfe65717dad0447d715f660a0a58411de509b42e6efb8375f562f58a554d5860e'),
	  secretKey: (0, _util$5.hexToU8a)('0xc006507cdfc267a21532394c49ca9b754ca71de21e15a1cdf807c7ceab6d0b6c3ed408d9d35311540dcd54931933e67cf1ea10d46f75408f82b789d9bd212fde'),
	  // nosemgrep
	  seed: 'Bob//stash',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0x90b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22'),
	  secretKey: (0, _util$5.hexToU8a)('0xa8f2d83016052e5d6d77b2f6fd5d59418922a09024cda701b3c34369ec43a7668faf12ff39cd4e5d92bb773972f41a7a5279ebc2ed92264bed8f47d344f8f18c'),
	  // nosemgrep
	  seed: 'Charlie',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0x306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc20'),
	  secretKey: (0, _util$5.hexToU8a)('0x20e05482ca4677e0edbc58ae9a3a59f6ed3b1a9484ba17e64d6fe8688b2b7b5d108c4487b9323b98b11fe36cb301b084e920f7b7895536809a6d62a451b25568'),
	  // nosemgrep
	  seed: 'Dave',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e'),
	  secretKey: (0, _util$5.hexToU8a)('0x683576abfd5dc35273e4264c23095a1bf21c14517bece57c7f0cc5c0ed4ce06a3dbf386b7828f348abe15d76973a72009e6ef86a5c91db2990cb36bb657c6587'),
	  // nosemgrep
	  seed: 'Eve',
	  type: 'sr25519'
	}, {
	  publicKey: (0, _util$5.hexToU8a)('0x1cbd2d43530a44705ad088af313e18f80b53ef16b36177cd4b77b846f2a5f07c'),
	  secretKey: (0, _util$5.hexToU8a)('0xb835c20f450079cf4f513900ae9faf8df06ad86c681884122c752a4b2bf74d4303e4f21bc6cc62bb4eeed5a9cce642c25e2d2ac1464093b50f6196d78e3a7426'),
	  // nosemgrep
	  seed: 'Ferdie',
	  type: 'sr25519'
	}];
	exports.PAIRSSR25519 = PAIRSSR25519;
	const PAIRSETHEREUM = [{
	  name: 'Alith',
	  publicKey: (0, _util$5.hexToU8a)('0x02509540919faacf9ab52146c9aa40db68172d83777250b28e4679176e49ccdd9f'),
	  secretKey: (0, _util$5.hexToU8a)('0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133'),
	  // nosemgrep
	  seed: "m/44'/40'/0'/0",
	  type: 'ethereum'
	}, {
	  name: 'Baltathar',
	  publicKey: (0, _util$5.hexToU8a)('0x033bc19e36ff1673910575b6727a974a9abd80c9a875d41ab3e2648dbfb9e4b518'),
	  secretKey: (0, _util$5.hexToU8a)('0x8075991ce870b93a8870eca0c0f91913d12f47948ca0fd25b49c6fa7cdbeee8b'),
	  // nosemgrep
	  seed: "m/44'/40'/0'/0",
	  type: 'ethereum'
	}, {
	  name: 'Charleth',
	  publicKey: (0, _util$5.hexToU8a)('0x0234637bdc0e89b5d46543bcbf8edff329d2702bc995e27e9af4b1ba009a3c2a5e'),
	  secretKey: (0, _util$5.hexToU8a)('0x0b6e18cafb6ed99687ec547bd28139cafdd2bffe70e6b688025de6b445aa5c5b'),
	  // nosemgrep
	  seed: "m/44'/40'/0'/0",
	  type: 'ethereum'
	}, {
	  name: 'Dorothy',
	  publicKey: (0, _util$5.hexToU8a)('0x02a00d60b2b408c2a14c5d70cdd2c205db8985ef737a7e55ad20ea32cc9e7c417c'),
	  secretKey: (0, _util$5.hexToU8a)('0x39539ab1876910bbf3a223d84a29e28f1cb4e2e456503e7e91ed39b2e7223d68'),
	  // nosemgrep
	  seed: "m/44'/40'/0'/0",
	  type: 'ethereum'
	}, {
	  name: 'Ethan',
	  publicKey: (0, _util$5.hexToU8a)('0x025cdc005b752651cd3f728fb9192182acb3a9c89e19072cbd5b03f3ee1f1b3ffa'),
	  secretKey: (0, _util$5.hexToU8a)('0x7dce9bc8babb68fec1409be38c8e1a52650206a7ed90ff956ae8a6d15eeaaef4'),
	  // nosemgrep
	  seed: "m/44'/40'/0'/0",
	  type: 'ethereum'
	}, {
	  name: 'Faith',
	  publicKey: (0, _util$5.hexToU8a)('0x037964b6c9d546da4646ada28a99e34acaa1d14e7aba861a9055f9bd200c8abf74'),
	  secretKey: (0, _util$5.hexToU8a)('0xb9d2ea9a615f3165812e8d44de0d24da9bbd164b65c4f0573e1ce2c8dbd9c8df'),
	  // nosemgrep
	  seed: "m/44'/40'/0'/0",
	  type: 'ethereum'
	}];
	/**
	 * @name testKeyring
	 * @summary Create an instance of Keyring pre-populated with locked test accounts
	 * @description The test accounts (i.e. alice, bob, dave, eve, ferdie)
	 * are available on the dev chain and each test account is initialized with DOT funds.
	 */

	exports.PAIRSETHEREUM = PAIRSETHEREUM;

	function createTestKeyring(options = {}, isDerived = true) {
	  const keyring = new _keyring$1.Keyring(options);
	  const pairs = options.type && options.type === 'ethereum' ? PAIRSETHEREUM : PAIRSSR25519;
	  pairs.forEach(({
	    name,
	    publicKey,
	    secretKey,
	    seed,
	    type
	  }) => {
	    const meta = {
	      isTesting: true,
	      name: name || seed.replace('//', '_').toLowerCase()
	    };
	    const pair = !isDerived && !name ? keyring.addFromUri(seed, meta, options.type) : keyring.addPair((0, _index$i.createPair)({
	      toSS58: keyring.encodeAddress,
	      type
	    }, {
	      publicKey,
	      secretKey
	    }, meta));

	    pair.lock = () => {// we don't have lock/unlock functionality here
	    };
	  });
	  return keyring;
	}
	});

	var nobody_2 = nobody;



	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const publicKey = new Uint8Array(32);
	const address = (0, _utilCrypto.encodeAddress)(publicKey);
	const meta = {
	  isTesting: true,
	  name: 'nobody'
	};
	const json = {
	  address,
	  encoded: '',
	  encoding: {
	    content: ['pkcs8', 'ed25519'],
	    type: 'none',
	    version: '0'
	  },
	  meta
	};

	function nobody() {
	  const pair = {
	    address,
	    addressRaw: publicKey,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    decodePkcs8: (passphrase, encoded) => undefined,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => null,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    derive: (suri, meta) => pair,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    encodePkcs8: passphrase => new Uint8Array(0),
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    encryptMessage: (message, recipientPublicKey, _nonce) => new Uint8Array(),
	    isLocked: true,
	    lock: () => {// no locking, it is always locked
	    },
	    meta,
	    publicKey,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    setMeta: meta => undefined,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    sign: message => new Uint8Array(64),
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    toJson: passphrase => json,
	    type: 'ed25519',
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    unlock: passphrase => undefined,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    verify: (message, signature) => false,
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    vrfSign: (message, context, extra) => new Uint8Array(96),
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    vrfVerify: (message, vrfResult, context, extra) => false
	  };
	  return pair;
	}

	var nobody_1 = /*#__PURE__*/Object.defineProperty({
		nobody: nobody_2
	}, '__esModule', {value: true});

	var _nobody = nobody_1;

	var _testing = testing;

	var createTestPairs_1 = createTestPairs;





	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function createTestPairs(options, isDerived = true) {
	  const keyring = (0, _testing.createTestKeyring)(options, isDerived);
	  const pairs = keyring.getPairs();
	  const map = {
	    nobody: (0, _nobody.nobody)()
	  };
	  return pairs.reduce((result, pair) => {
	    const {
	      name
	    } = pair.meta;
	    result[name] = pair;
	    return result;
	  }, map);
	}

	var testingPairs = /*#__PURE__*/Object.defineProperty({
		createTestPairs: createTestPairs_1
	}, '__esModule', {value: true});

	var _testingPairs = testingPairs;

	var bundle$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  Keyring: true,
	  decodeAddress: true,
	  encodeAddress: true,
	  setSS58Format: true,
	  createPair: true,
	  packageInfo: true,
	  createTestKeyring: true,
	  createTestPairs: true
	};
	Object.defineProperty(exports, "Keyring", {
	  enumerable: true,
	  get: function () {
	    return _keyring$1.Keyring;
	  }
	});
	Object.defineProperty(exports, "decodeAddress", {
	  enumerable: true,
	  get: function () {
	    return _utilCrypto.decodeAddress;
	  }
	});
	Object.defineProperty(exports, "encodeAddress", {
	  enumerable: true,
	  get: function () {
	    return _utilCrypto.encodeAddress;
	  }
	});
	Object.defineProperty(exports, "setSS58Format", {
	  enumerable: true,
	  get: function () {
	    return _utilCrypto.setSS58Format;
	  }
	});
	Object.defineProperty(exports, "createPair", {
	  enumerable: true,
	  get: function () {
	    return _index$i.createPair;
	  }
	});
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$3.packageInfo;
	  }
	});
	Object.defineProperty(exports, "createTestKeyring", {
	  enumerable: true,
	  get: function () {
	    return _testing.createTestKeyring;
	  }
	});
	Object.defineProperty(exports, "createTestPairs", {
	  enumerable: true,
	  get: function () {
	    return _testingPairs.createTestPairs;
	  }
	});







	Object.keys(_defaults).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _defaults[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _defaults[key];
	    }
	  });
	});
	});

	var _bundle$6 = bundle$6;

	var keyring = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {};
	exports.default = void 0;





	Object.keys(_bundle$6).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _bundle$6[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$6[key];
	    }
	  });
	});
	// Copyright 2017-2021 @polkadot/keyring authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _default = _bundle$6.Keyring;
	exports.default = _default;
	});

	// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$7.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo2$1.packageInfo]);

	var coder = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RpcCoder = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);



	// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function formatErrorData(data) {
	  if ((0, _util$5.isUndefined)(data)) {
	    return '';
	  }

	  const formatted = `: ${(0, _util$5.isString)(data) ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '') : (0, _util$5.stringify)(data)}`; // We need some sort of cut-off here since these can be very large and
	  // very nested, pick a number and trim the result display to it

	  return formatted.length <= 256 ? formatted : `${formatted.substr(0, 255)}…`;
	}
	/** @internal */


	var _id = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("id");

	class RpcCoder {
	  constructor() {
	    Object.defineProperty(this, _id, {
	      writable: true,
	      value: 0
	    });
	  }

	  decodeResponse(response) {
	    (0, _util$5.assert)(response, 'Empty response object received');
	    (0, _util$5.assert)(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');
	    const isSubscription = !(0, _util$5.isUndefined)(response.params) && !(0, _util$5.isUndefined)(response.method);
	    (0, _util$5.assert)((0, _util$5.isNumber)(response.id) || isSubscription && ((0, _util$5.isNumber)(response.params.subscription) || (0, _util$5.isString)(response.params.subscription)), 'Invalid id field in decoded object');

	    this._checkError(response.error);

	    (0, _util$5.assert)(!(0, _util$5.isUndefined)(response.result) || isSubscription, 'No result found in JsonRpc response');

	    if (isSubscription) {
	      this._checkError(response.params.error);

	      return response.params.result;
	    }

	    return response.result;
	  }

	  encodeJson(method, params) {
	    return (0, _util$5.stringify)(this.encodeObject(method, params));
	  }

	  encodeObject(method, params) {
	    return {
	      id: ++(0, _classPrivateFieldLooseBase2.default)(this, _id)[_id],
	      jsonrpc: '2.0',
	      method,
	      params
	    };
	  }

	  getId() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _id)[_id];
	  }

	  _checkError(error) {
	    if (error) {
	      const {
	        code,
	        data,
	        message
	      } = error;
	      throw new Error(`${code}: ${message}${formatErrorData(data)}`);
	    }
	  }

	}

	exports.RpcCoder = RpcCoder;
	});

	var defaults = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HTTP_URL = 'http://127.0.0.1:9933';
	const WS_URL = 'ws://127.0.0.1:9944';
	var _default = {
	  HTTP_URL,
	  WS_URL
	};
	exports.default = _default;
	});

	var _index$h = coder;

	var require$$4$4 = defaults;

	var http = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HttpProvider = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);







	var _defaults = interopRequireDefault(require$$4$4);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';
	const l = (0, _util$5.logger)('api-http');
	/**
	 * # @polkadot/rpc-provider
	 *
	 * @name HttpProvider
	 *
	 * @description The HTTP Provider allows sending requests using HTTP to a HTTP RPC server TCP port. It does not support subscriptions so you won't be able to listen to events such as new blocks or balance changes. It is usually preferable using the [[WsProvider]].
	 *
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import Api from '@polkadot/api/promise';
	 * import { HttpProvider } from '@polkadot/rpc-provider';
	 *
	 * const provider = new HttpProvider('http://127.0.0.1:9933');
	 * const api = new Api(provider);
	 * ```
	 *
	 * @see [[WsProvider]]
	 */

	var _coder = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("coder");

	var _endpoint = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endpoint");

	var _headers = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("headers");

	class HttpProvider {
	  /**
	   * @param {string} endpoint The endpoint url starting with http://
	   */
	  constructor(endpoint = _defaults.default.HTTP_URL, headers = {}) {
	    Object.defineProperty(this, _coder, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _endpoint, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _headers, {
	      writable: true,
	      value: void 0
	    });
	    (0, _util$5.assert)(/^(https|http):\/\//.test(endpoint), () => `Endpoint should start with 'http://', received '${endpoint}'`);
	    (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder] = new _index$h.RpcCoder();
	    (0, _classPrivateFieldLooseBase2.default)(this, _endpoint)[_endpoint] = endpoint;
	    (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers] = headers;
	  }
	  /**
	   * @summary `true` when this provider supports subscriptions
	   */


	  get hasSubscriptions() {
	    return false;
	  }
	  /**
	   * @description Returns a clone of the object
	   */


	  clone() {
	    throw new Error('Unimplemented');
	  }
	  /**
	   * @description Manually connect from the connection
	   */


	  async connect() {// noop
	  }
	  /**
	   * @description Manually disconnect from the connection
	   */


	  async disconnect() {// noop
	  }
	  /**
	   * @summary Whether the node is connected or not.
	   * @return {boolean} true if connected
	   */


	  get isConnected() {
	    return true;
	  }
	  /**
	   * @summary Events are not supported with the HttpProvider, see [[WsProvider]].
	   * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  on(type, sub) {
	    l.error('HTTP Provider does not have \'on\' emitters, use WebSockets instead');
	    return () => {// noop
	    };
	  }
	  /**
	   * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.
	   */


	  async send(method, params) {
	    const body = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].encodeJson(method, params);

	    const response = await (0, _xFetch__default['default'].fetch)((0, _classPrivateFieldLooseBase2.default)(this, _endpoint)[_endpoint], {
	      body,
	      headers: _objectSpread({
	        Accept: 'application/json',
	        'Content-Length': `${body.length}`,
	        'Content-Type': 'application/json'
	      }, (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers]),
	      method: 'POST'
	    });
	    (0, _util$5.assert)(response.ok, () => `[${response.status}]: ${response.statusText}`); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

	    const result = await response.json();
	    return (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].decodeResponse(result);
	  }
	  /**
	   * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await


	  async subscribe(types, method, params, cb) {
	    l.error(ERROR_SUBSCRIBE);
	    throw new Error(ERROR_SUBSCRIBE);
	  }
	  /**
	   * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await


	  async unsubscribe(type, method, id) {
	    l.error(ERROR_SUBSCRIBE);
	    throw new Error(ERROR_SUBSCRIBE);
	  }

	}

	exports.HttpProvider = HttpProvider;
	});

	var eventemitter3 = createCommonjsModule(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	}
	});

	var getWSErrorString_1 = getWSErrorString;
	// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// from https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006
	const known = {
	  1000: 'Normal Closure',
	  1001: 'Going Away',
	  1002: 'Protocol Error',
	  1003: 'Unsupported Data',
	  1004: '(For future)',
	  1005: 'No Status Received',
	  1006: 'Abnormal Closure',
	  1007: 'Invalid frame payload data',
	  1008: 'Policy Violation',
	  1009: 'Message too big',
	  1010: 'Missing Extension',
	  1011: 'Internal Error',
	  1012: 'Service Restart',
	  1013: 'Try Again Later',
	  1014: 'Bad Gateway',
	  1015: 'TLS Handshake'
	};

	function getUnmapped(code) {
	  if (code <= 1999) {
	    return '(For WebSocket standard)';
	  } else if (code <= 2999) {
	    return '(For WebSocket extensions)';
	  } else if (code <= 3999) {
	    return '(For libraries and frameworks)';
	  } else if (code <= 4999) {
	    return '(For applications)';
	  }
	}

	function getWSErrorString(code) {
	  if (code >= 0 && code <= 999) {
	    return '(Unused)';
	  }

	  return known[code] || getUnmapped(code) || '(Unknown)';
	}

	var errors$1 = /*#__PURE__*/Object.defineProperty({
		getWSErrorString: getWSErrorString_1
	}, '__esModule', {value: true});

	var _errors = errors$1;

	var ws = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.WsProvider = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);

	var _eventemitter2 = interopRequireDefault(eventemitter3);









	var _defaults = interopRequireDefault(require$$4$4);



	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const ALIASES = {
	  chain_finalisedHead: 'chain_finalizedHead',
	  chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
	  chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
	};
	const RETRY_DELAY = 2500;
	const l = (0, _util$5.logger)('api-ws');

	function eraseRecord(record, cb) {
	  Object.keys(record).forEach(key => {
	    if (cb) {
	      cb(record[key]);
	    }

	    delete record[key];
	  });
	}
	/**
	 * # @polkadot/rpc-provider/ws
	 *
	 * @name WsProvider
	 *
	 * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
	 *
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import Api from '@polkadot/api/promise';
	 * import { WsProvider } from '@polkadot/rpc-provider/ws';
	 *
	 * const provider = new WsProvider('ws://127.0.0.1:9944');
	 * const api = new Api(provider);
	 * ```
	 *
	 * @see [[HttpProvider]]
	 */


	var _coder = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("coder");

	var _endpoints = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endpoints");

	var _headers = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("headers");

	var _eventemitter = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("eventemitter");

	var _handlers = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("handlers");

	var _isReadyPromise = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyPromise");

	var _waitingForId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("waitingForId");

	var _autoConnectMs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("autoConnectMs");

	var _endpointIndex = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endpointIndex");

	var _isConnected = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isConnected");

	var _subscriptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("subscriptions");

	var _websocket = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("websocket");

	var _emit = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("emit");

	var _onSocketClose = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketClose");

	var _onSocketError = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketError");

	var _onSocketMessage = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketMessage");

	var _onSocketMessageResult = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketMessageResult");

	var _onSocketMessageSubscribe = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketMessageSubscribe");

	var _onSocketOpen = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketOpen");

	var _resubscribe = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("resubscribe");

	class WsProvider {
	  /**
	   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
	   * @param {boolean} autoConnect Whether to connect automatically or not.
	   */
	  constructor(endpoint = _defaults.default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}) {
	    Object.defineProperty(this, _coder, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _endpoints, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _headers, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _eventemitter, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _handlers, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _isReadyPromise, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _waitingForId, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _autoConnectMs, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _endpointIndex, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _isConnected, {
	      writable: true,
	      value: false
	    });
	    Object.defineProperty(this, _subscriptions, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _websocket, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _emit, {
	      writable: true,
	      value: (type, ...args) => {
	        (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);
	      }
	    });
	    Object.defineProperty(this, _onSocketClose, {
	      writable: true,
	      value: event => {
	        const error = new Error(`disconnected from ${(0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || (0, _errors.getWSErrorString)(event.code)}`);

	        if ((0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] > 0) {
	          l.error(error.message);
	        }

	        (0, _classPrivateFieldLooseBase2.default)(this, _isConnected)[_isConnected] = false;

	        if ((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]) {
	          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onclose = null;
	          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onerror = null;
	          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onmessage = null;
	          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onopen = null;
	          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket] = null;
	        }

	        (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('disconnected'); // reject all hanging requests


	        eraseRecord((0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers], h => h.callback(error, undefined));
	        eraseRecord((0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId]);

	        if ((0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] > 0) {
	          setTimeout(() => {
	            this.connectWithRetry().catch(() => {// does not throw
	            });
	          }, (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs]);
	        }
	      }
	    });
	    Object.defineProperty(this, _onSocketError, {
	      writable: true,
	      value: error => {
	        l.debug(() => ['socket error', error]);

	        (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('error', error);
	      }
	    });
	    Object.defineProperty(this, _onSocketMessage, {
	      writable: true,
	      value: message => {
	        l.debug(() => ['received', message.data]);
	        const response = JSON.parse(message.data);
	        return (0, _util$5.isUndefined)(response.method) ? (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessageResult)[_onSocketMessageResult](response) : (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
	      }
	    });
	    Object.defineProperty(this, _onSocketMessageResult, {
	      writable: true,
	      value: response => {
	        const handler = (0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers][response.id];

	        if (!handler) {
	          l.debug(() => `Unable to find handler for id=${response.id}`);
	          return;
	        }

	        try {
	          const {
	            method,
	            params,
	            subscription
	          } = handler;

	          const result = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update
	          // immediately if we have some queued results already


	          handler.callback(null, result);

	          if (subscription) {
	            const subId = `${subscription.type}::${result}`;
	            (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subId] = _objectSpread(_objectSpread({}, subscription), {}, {
	              method,
	              params
	            }); // if we have a result waiting for this subscription already

	            if ((0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId]) {
	              (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe]((0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId]);
	            }
	          }
	        } catch (error) {
	          handler.callback(error, undefined);
	        }

	        delete (0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers][response.id];
	      }
	    });
	    Object.defineProperty(this, _onSocketMessageSubscribe, {
	      writable: true,
	      value: response => {
	        const method = ALIASES[response.method] || response.method || 'invalid';
	        const subId = `${method}::${response.params.subscription}`;

	        const handler = (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subId];

	        if (!handler) {
	          // store the JSON, we could have out-of-order subid coming in
	          (0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId] = response;
	          l.debug(() => `Unable to find handler for subscription=${subId}`);
	          return;
	        } // housekeeping


	        delete (0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId];

	        try {
	          const result = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].decodeResponse(response);

	          handler.callback(null, result);
	        } catch (error) {
	          handler.callback(error, undefined);
	        }
	      }
	    });
	    Object.defineProperty(this, _onSocketOpen, {
	      writable: true,
	      value: () => {
	        (0, _util$5.assert)(!(0, _util$5.isNull)((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]), 'WebSocket cannot be null in onOpen');
	        l.debug(() => ['connected to', (0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]]]);
	        (0, _classPrivateFieldLooseBase2.default)(this, _isConnected)[_isConnected] = true;

	        (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('connected');

	        (0, _classPrivateFieldLooseBase2.default)(this, _resubscribe)[_resubscribe]();

	        return true;
	      }
	    });
	    Object.defineProperty(this, _resubscribe, {
	      writable: true,
	      value: () => {
	        const subscriptions = (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions];

	        (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions] = {};
	        Promise.all(Object.keys(subscriptions).map(async id => {
	          const {
	            callback,
	            method,
	            params,
	            type
	          } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where
	          // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
	          // are not included (and will not be re-broadcast)

	          if (type.startsWith('author_')) {
	            return;
	          }

	          try {
	            await this.subscribe(type, method, params, callback);
	          } catch (error) {
	            l.error(error);
	          }
	        })).catch(l.error);
	      }
	    });
	    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
	    (0, _util$5.assert)(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');
	    endpoints.forEach(endpoint => {
	      (0, _util$5.assert)(/^(wss|ws):\/\//.test(endpoint), () => `Endpoint should start with 'ws://', received '${endpoint}'`);
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter] = new _eventemitter2.default();
	    (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
	    (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder] = new _index$h.RpcCoder();
	    (0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex] = -1;
	    (0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints] = endpoints;
	    (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers] = headers;
	    (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket] = null;

	    if (autoConnectMs > 0) {
	      this.connectWithRetry().catch(() => {// does not throw
	      });
	    }

	    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
	      (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once('connected', () => {
	        resolve(this);
	      });
	    });
	  }
	  /**
	   * @summary `true` when this provider supports subscriptions
	   */


	  get hasSubscriptions() {
	    return true;
	  }
	  /**
	   * @summary Whether the node is connected or not.
	   * @return {boolean} true if connected
	   */


	  get isConnected() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isConnected)[_isConnected];
	  }
	  /**
	   * @description Promise that resolves the first time we are connected and loaded
	   */


	  get isReady() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise];
	  }
	  /**
	   * @description Returns a clone of the object
	   */


	  clone() {
	    return new WsProvider((0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints]);
	  }
	  /**
	   * @summary Manually connect
	   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
	   * connect manually using this method.
	   */
	  // eslint-disable-next-line @typescript-eslint/require-await


	  async connect() {
	    try {
	      (0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex] = ((0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex] + 1) % (0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints].length;
	      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket] = typeof _xGlobal.xglobal.WebSocket !== 'undefined' && (0, _util$5.isChildClass)(_xGlobal.xglobal.WebSocket, _xWs__default['default'].WebSocket) ? new _xWs__default['default'].WebSocket((0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	      // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers
	      : new _xWs__default['default'].WebSocket((0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]], undefined, undefined, (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers], undefined, {
	        // default: true
	        fragmentOutgoingMessages: true,
	        // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)
	        fragmentationThreshold: 256 * 1024,
	        // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that)
	        maxReceivedMessageSize: 16 * 1024 * 1024
	      });
	      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onclose = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketClose)[_onSocketClose];
	      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onerror = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketError)[_onSocketError];
	      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onmessage = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessage)[_onSocketMessage];
	      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onopen = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketOpen)[_onSocketOpen];
	    } catch (error) {
	      l.error(error);

	      (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('error', error);

	      throw error;
	    }
	  }
	  /**
	   * @description Connect, never throwing an error, but rather forcing a retry
	   */


	  async connectWithRetry() {
	    if ((0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] > 0) {
	      try {
	        await this.connect();
	      } catch (error) {
	        setTimeout(() => {
	          this.connectWithRetry().catch(() => {// does not throw
	          });
	        }, (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs]);
	      }
	    }
	  }
	  /**
	   * @description Manually disconnect from the connection, clearing auto-connect logic
	   */
	  // eslint-disable-next-line @typescript-eslint/require-await


	  async disconnect() {
	    // switch off autoConnect, we are in manual mode now
	    (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] = 0;

	    try {
	      if ((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]) {
	        // 1000 - Normal closure; the connection successfully completed
	        (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].close(1000);
	      }
	    } catch (error) {
	      l.error(error);

	      (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('error', error);

	      throw error;
	    }
	  }
	  /**
	   * @summary Listens on events after having subscribed using the [[subscribe]] function.
	   * @param  {ProviderInterfaceEmitted} type Event
	   * @param  {ProviderInterfaceEmitCb}  sub  Callback
	   * @return unsubscribe function
	   */


	  on(type, sub) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, sub);

	    return () => {
	      (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, sub);
	    };
	  }
	  /**
	   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
	   * @param method The RPC methods to execute
	   * @param params Encoded parameters as applicable for the method
	   * @param subscription Subscription details (internally used)
	   */


	  send(method, params, subscription) {
	    return new Promise((resolve, reject) => {
	      try {
	        (0, _util$5.assert)(this.isConnected && !(0, _util$5.isNull)((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]), 'WebSocket is not connected');

	        const json = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].encodeJson(method, params);

	        const id = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].getId();

	        const callback = (error, result) => {
	          error ? reject(error) : resolve(result);
	        };

	        l.debug(() => ['calling', method, json]);
	        (0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers][id] = {
	          callback,
	          method,
	          params,
	          subscription
	        };

	        (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].send(json);
	      } catch (error) {
	        reject(error);
	      }
	    });
	  }
	  /**
	   * @name subscribe
	   * @summary Allows subscribing to a specific event.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * const provider = new WsProvider('ws://127.0.0.1:9944');
	   * const rpc = new Rpc(provider);
	   *
	   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
	   *   console.log(values)
	   * }).then((subscriptionId) => {
	   *   console.log('balance changes subscription id: ', subscriptionId)
	   * })
	   * ```
	   */


	  subscribe(type, method, params, callback) {
	    return this.send(method, params, {
	      callback,
	      type
	    });
	  }
	  /**
	   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
	   */


	  async unsubscribe(type, method, id) {
	    const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
	    // the assigned id now does not match what the API user originally received. It has
	    // a slight complication in solving - since we cannot rely on the send id, but rather
	    // need to find the actual subscription id to map it

	    if ((0, _util$5.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subscription])) {
	      l.debug(() => `Unable to find active subscription=${subscription}`);
	      return false;
	    }

	    delete (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subscription];

	    try {
	      return this.isConnected && !(0, _util$5.isNull)((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;
	    } catch (error) {
	      return false;
	    }
	  }

	}

	exports.WsProvider = WsProvider;
	});

	var _index$g = http;

	var _index2$5 = ws;

	var bundle$5 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "HttpProvider", {
	  enumerable: true,
	  get: function () {
	    return _index$g.HttpProvider;
	  }
	});
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$7.packageInfo;
	  }
	});
	Object.defineProperty(exports, "WsProvider", {
	  enumerable: true,
	  get: function () {
	    return _index2$5.WsProvider;
	  }
	});
	});

	var _bundle$5 = bundle$5;

	var rpcProvider = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$5).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$5[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$5[key];
	    }
	  });
	});
	});

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	function __awaiter$1(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator$1(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spreadArray(to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	}

	function __await(v) {
	    return this instanceof __await ? (this.v = v, this) : new __await(v);
	}

	function __asyncGenerator(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncValues(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function isFunction(value) {
	    return typeof value === 'function';
	}

	function createErrorClass(createImpl) {
	    var _super = function (instance) {
	        Error.call(instance);
	        instance.stack = new Error().stack;
	    };
	    var ctorFunc = createImpl(_super);
	    ctorFunc.prototype = Object.create(Error.prototype);
	    ctorFunc.prototype.constructor = ctorFunc;
	    return ctorFunc;
	}

	var UnsubscriptionError = createErrorClass(function (_super) {
	    return function UnsubscriptionErrorImpl(errors) {
	        _super(this);
	        this.message = errors
	            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
	            : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	    };
	});

	function arrRemove(arr, item) {
	    if (arr) {
	        var index = arr.indexOf(item);
	        0 <= index && arr.splice(index, 1);
	    }
	}

	var Subscription = (function () {
	    function Subscription(initialTeardown) {
	        this.initialTeardown = initialTeardown;
	        this.closed = false;
	        this._parentage = null;
	        this._teardowns = null;
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var e_1, _a, e_2, _b;
	        var errors;
	        if (!this.closed) {
	            this.closed = true;
	            var _parentage = this._parentage;
	            if (_parentage) {
	                this._parentage = null;
	                if (Array.isArray(_parentage)) {
	                    try {
	                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
	                            var parent_1 = _parentage_1_1.value;
	                            parent_1.remove(this);
	                        }
	                    }
	                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                    finally {
	                        try {
	                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
	                        }
	                        finally { if (e_1) throw e_1.error; }
	                    }
	                }
	                else {
	                    _parentage.remove(this);
	                }
	            }
	            var initialTeardown = this.initialTeardown;
	            if (isFunction(initialTeardown)) {
	                try {
	                    initialTeardown();
	                }
	                catch (e) {
	                    errors = e instanceof UnsubscriptionError ? e.errors : [e];
	                }
	            }
	            var _teardowns = this._teardowns;
	            if (_teardowns) {
	                this._teardowns = null;
	                try {
	                    for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
	                        var teardown_1 = _teardowns_1_1.value;
	                        try {
	                            execTeardown(teardown_1);
	                        }
	                        catch (err) {
	                            errors = errors !== null && errors !== void 0 ? errors : [];
	                            if (err instanceof UnsubscriptionError) {
	                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
	                            }
	                            else {
	                                errors.push(err);
	                            }
	                        }
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	            if (errors) {
	                throw new UnsubscriptionError(errors);
	            }
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var _a;
	        if (teardown && teardown !== this) {
	            if (this.closed) {
	                execTeardown(teardown);
	            }
	            else {
	                if (teardown instanceof Subscription) {
	                    if (teardown.closed || teardown._hasParent(this)) {
	                        return;
	                    }
	                    teardown._addParent(this);
	                }
	                (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
	            }
	        }
	    };
	    Subscription.prototype._hasParent = function (parent) {
	        var _parentage = this._parentage;
	        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _parentage = this._parentage;
	        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
	    };
	    Subscription.prototype._removeParent = function (parent) {
	        var _parentage = this._parentage;
	        if (_parentage === parent) {
	            this._parentage = null;
	        }
	        else if (Array.isArray(_parentage)) {
	            arrRemove(_parentage, parent);
	        }
	    };
	    Subscription.prototype.remove = function (teardown) {
	        var _teardowns = this._teardowns;
	        _teardowns && arrRemove(_teardowns, teardown);
	        if (teardown instanceof Subscription) {
	            teardown._removeParent(this);
	        }
	    };
	    Subscription.EMPTY = (function () {
	        var empty = new Subscription();
	        empty.closed = true;
	        return empty;
	    })();
	    return Subscription;
	}());
	var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
	function isSubscription(value) {
	    return (value instanceof Subscription ||
	        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
	}
	function execTeardown(teardown) {
	    if (isFunction(teardown)) {
	        teardown();
	    }
	    else {
	        teardown.unsubscribe();
	    }
	}

	var config = {
	    onUnhandledError: null,
	    onStoppedNotification: null,
	    Promise: undefined,
	    useDeprecatedSynchronousErrorHandling: false,
	    useDeprecatedNextContext: false,
	};

	var timeoutProvider = {
	    setTimeout: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = timeoutProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read(args)));
	    },
	    clearTimeout: function (handle) {
	        var delegate = timeoutProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
	    },
	    delegate: undefined,
	};

	function reportUnhandledError(err) {
	    timeoutProvider.setTimeout(function () {
	        var onUnhandledError = config.onUnhandledError;
	        if (onUnhandledError) {
	            onUnhandledError(err);
	        }
	        else {
	            throw err;
	        }
	    });
	}

	function noop() { }

	var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
	function errorNotification(error) {
	    return createNotification('E', undefined, error);
	}
	function nextNotification(value) {
	    return createNotification('N', value, undefined);
	}
	function createNotification(kind, value, error) {
	    return {
	        kind: kind,
	        value: value,
	        error: error,
	    };
	}

	var context = null;
	function errorContext(cb) {
	    if (config.useDeprecatedSynchronousErrorHandling) {
	        var isRoot = !context;
	        if (isRoot) {
	            context = { errorThrown: false, error: null };
	        }
	        cb();
	        if (isRoot) {
	            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
	            context = null;
	            if (errorThrown) {
	                throw error;
	            }
	        }
	    }
	    else {
	        cb();
	    }
	}
	function captureError(err) {
	    if (config.useDeprecatedSynchronousErrorHandling && context) {
	        context.errorThrown = true;
	        context.error = err;
	    }
	}

	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    function Subscriber(destination) {
	        var _this = _super.call(this) || this;
	        _this.isStopped = false;
	        if (destination) {
	            _this.destination = destination;
	            if (isSubscription(destination)) {
	                destination.add(_this);
	            }
	        }
	        else {
	            _this.destination = EMPTY_OBSERVER;
	        }
	        return _this;
	    }
	    Subscriber.create = function (next, error, complete) {
	        return new SafeSubscriber(next, error, complete);
	    };
	    Subscriber.prototype.next = function (value) {
	        if (this.isStopped) {
	            handleStoppedNotification(nextNotification(value), this);
	        }
	        else {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (this.isStopped) {
	            handleStoppedNotification(errorNotification(err), this);
	        }
	        else {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (this.isStopped) {
	            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
	        }
	        else {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            this.isStopped = true;
	            _super.prototype.unsubscribe.call(this);
	            this.destination = null;
	        }
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        try {
	            this.destination.error(err);
	        }
	        finally {
	            this.unsubscribe();
	        }
	    };
	    Subscriber.prototype._complete = function () {
	        try {
	            this.destination.complete();
	        }
	        finally {
	            this.unsubscribe();
	        }
	    };
	    return Subscriber;
	}(Subscription));
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        var next;
	        if (isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);
	            var context_1;
	            if (_this && config.useDeprecatedNextContext) {
	                context_1 = Object.create(observerOrNext);
	                context_1.unsubscribe = function () { return _this.unsubscribe(); };
	            }
	            else {
	                context_1 = observerOrNext;
	            }
	            next = next === null || next === void 0 ? void 0 : next.bind(context_1);
	            error = error === null || error === void 0 ? void 0 : error.bind(context_1);
	            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
	        }
	        _this.destination = {
	            next: next ? wrapForErrorHandling(next) : noop,
	            error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler),
	            complete: complete ? wrapForErrorHandling(complete) : noop,
	        };
	        return _this;
	    }
	    return SafeSubscriber;
	}(Subscriber));
	function wrapForErrorHandling(handler, instance) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        try {
	            handler.apply(void 0, __spreadArray([], __read(args)));
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                captureError(err);
	            }
	            else {
	                reportUnhandledError(err);
	            }
	        }
	    };
	}
	function defaultErrorHandler(err) {
	    throw err;
	}
	function handleStoppedNotification(notification, subscriber) {
	    var onStoppedNotification = config.onStoppedNotification;
	    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
	}
	var EMPTY_OBSERVER = {
	    closed: true,
	    next: noop,
	    error: defaultErrorHandler,
	    complete: noop,
	};

	var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

	function identity$2(x) {
	    return x;
	}

	function pipe() {
	    var fns = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        fns[_i] = arguments[_i];
	    }
	    return pipeFromArray(fns);
	}
	function pipeFromArray(fns) {
	    if (fns.length === 0) {
	        return identity$2;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	var Observable = (function () {
	    function Observable(subscribe) {
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var _this = this;
	        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
	        errorContext(function () {
	            var _a = _this, operator = _a.operator, source = _a.source;
	            subscriber.add(operator
	                ?
	                    operator.call(subscriber, source)
	                : source
	                    ?
	                        _this._subscribe(subscriber)
	                    :
	                        _this._trySubscribe(subscriber));
	        });
	        return subscriber;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.error(err);
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var _a;
	        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
	    };
	    Observable.prototype[observable] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        return pipeFromArray(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor(promiseCtor) {
	    var _a;
	    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
	}
	function isObserver(value) {
	    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
	}
	function isSubscriber(value) {
	    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
	}

	function hasLift(source) {
	    return isFunction(source === null || source === void 0 ? void 0 : source.lift);
	}
	function operate(init) {
	    return function (source) {
	        if (hasLift(source)) {
	            return source.lift(function (liftedSource) {
	                try {
	                    return init(liftedSource, this);
	                }
	                catch (err) {
	                    this.error(err);
	                }
	            });
	        }
	        throw new TypeError('Unable to lift unknown Observable type');
	    };
	}

	var OperatorSubscriber = (function (_super) {
	    __extends(OperatorSubscriber, _super);
	    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
	        var _this = _super.call(this, destination) || this;
	        _this.onFinalize = onFinalize;
	        _this._next = onNext
	            ? function (value) {
	                try {
	                    onNext(value);
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	            }
	            : _super.prototype._next;
	        _this._error = onError
	            ? function (err) {
	                try {
	                    onError(err);
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	                finally {
	                    this.unsubscribe();
	                }
	            }
	            : _super.prototype._error;
	        _this._complete = onComplete
	            ? function () {
	                try {
	                    onComplete();
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	                finally {
	                    this.unsubscribe();
	                }
	            }
	            : _super.prototype._complete;
	        return _this;
	    }
	    OperatorSubscriber.prototype.unsubscribe = function () {
	        var _a;
	        var closed = this.closed;
	        _super.prototype.unsubscribe.call(this);
	        !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
	    };
	    return OperatorSubscriber;
	}(Subscriber));

	function refCount() {
	    return operate(function (source, subscriber) {
	        var connection = null;
	        source._refCount++;
	        var refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
	            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
	                connection = null;
	                return;
	            }
	            var sharedConnection = source._connection;
	            var conn = connection;
	            connection = null;
	            if (sharedConnection && (!conn || sharedConnection === conn)) {
	                sharedConnection.unsubscribe();
	            }
	            subscriber.unsubscribe();
	        });
	        source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            connection = source.connect();
	        }
	    });
	}

	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._subject = null;
	        _this._refCount = 0;
	        _this._connection = null;
	        if (hasLift(source)) {
	            _this.lift = source.lift;
	        }
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype._teardown = function () {
	        this._refCount = 0;
	        var _connection = this._connection;
	        this._subject = this._connection = null;
	        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var _this = this;
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription();
	            var subject_1 = this.getSubject();
	            connection.add(this.source.subscribe(new OperatorSubscriber(subject_1, undefined, function () {
	                _this._teardown();
	                subject_1.complete();
	            }, function (err) {
	                _this._teardown();
	                subject_1.error(err);
	            }, function () { return _this._teardown(); })));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription.EMPTY;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount()(this);
	    };
	    return ConnectableObservable;
	}(Observable));

	var performanceTimestampProvider = {
	    now: function () {
	        return (performanceTimestampProvider.delegate || performance).now();
	    },
	    delegate: undefined,
	};

	var animationFrameProvider = {
	    schedule: function (callback) {
	        var request = requestAnimationFrame;
	        var cancel = cancelAnimationFrame;
	        var delegate = animationFrameProvider.delegate;
	        if (delegate) {
	            request = delegate.requestAnimationFrame;
	            cancel = delegate.cancelAnimationFrame;
	        }
	        var handle = request(function (timestamp) {
	            cancel = undefined;
	            callback(timestamp);
	        });
	        return new Subscription(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
	    },
	    requestAnimationFrame: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = animationFrameProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
	    },
	    cancelAnimationFrame: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = animationFrameProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
	    },
	    delegate: undefined,
	};

	function animationFrames(timestampProvider) {
	    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
	}
	function animationFramesFactory(timestampProvider) {
	    var schedule = animationFrameProvider.schedule;
	    return new Observable(function (subscriber) {
	        var subscription = new Subscription();
	        var provider = timestampProvider || performanceTimestampProvider;
	        var start = provider.now();
	        var run = function (timestamp) {
	            var now = provider.now();
	            subscriber.next({
	                timestamp: timestampProvider ? now : timestamp,
	                elapsed: now - start
	            });
	            if (!subscriber.closed) {
	                subscription.add(schedule(run));
	            }
	        };
	        subscription.add(schedule(run));
	        return subscription;
	    });
	}
	var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

	var ObjectUnsubscribedError = createErrorClass(function (_super) {
	    return function ObjectUnsubscribedErrorImpl() {
	        _super(this);
	        this.name = 'ObjectUnsubscribedError';
	        this.message = 'object unsubscribed';
	    };
	});

	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.closed = false;
	        _this.observers = [];
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype._throwIfClosed = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	    };
	    Subject.prototype.next = function (value) {
	        var _this = this;
	        errorContext(function () {
	            var e_1, _a;
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                var copy = _this.observers.slice();
	                try {
	                    for (var copy_1 = __values(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
	                        var observer = copy_1_1.value;
	                        observer.next(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	            }
	        });
	    };
	    Subject.prototype.error = function (err) {
	        var _this = this;
	        errorContext(function () {
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                _this.hasError = _this.isStopped = true;
	                _this.thrownError = err;
	                var observers = _this.observers;
	                while (observers.length) {
	                    observers.shift().error(err);
	                }
	            }
	        });
	    };
	    Subject.prototype.complete = function () {
	        var _this = this;
	        errorContext(function () {
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                _this.isStopped = true;
	                var observers = _this.observers;
	                while (observers.length) {
	                    observers.shift().complete();
	                }
	            }
	        });
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = this.closed = true;
	        this.observers = null;
	    };
	    Object.defineProperty(Subject.prototype, "observed", {
	        get: function () {
	            var _a;
	            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Subject.prototype._trySubscribe = function (subscriber) {
	        this._throwIfClosed();
	        return _super.prototype._trySubscribe.call(this, subscriber);
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        this._throwIfClosed();
	        this._checkFinalizedStatuses(subscriber);
	        return this._innerSubscribe(subscriber);
	    };
	    Subject.prototype._innerSubscribe = function (subscriber) {
	        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
	        return hasError || isStopped
	            ? EMPTY_SUBSCRIPTION
	            : (observers.push(subscriber), new Subscription(function () { return arrRemove(observers, subscriber); }));
	    };
	    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
	        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
	        if (hasError) {
	            subscriber.error(thrownError);
	        }
	        else if (isStopped) {
	            subscriber.complete();
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable));
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var _a, _b;
	        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
	    };
	    return AnonymousSubject;
	}(Subject));

	var BehaviorSubject = (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        var _this = _super.call(this) || this;
	        _this._value = _value;
	        return _this;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        !subscription.closed && subscriber.next(this._value);
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
	        if (hasError) {
	            throw thrownError;
	        }
	        this._throwIfClosed();
	        return _value;
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, (this._value = value));
	    };
	    return BehaviorSubject;
	}(Subject));

	var dateTimestampProvider = {
	    now: function () {
	        return (dateTimestampProvider.delegate || Date).now();
	    },
	    delegate: undefined,
	};

	var ReplaySubject = (function (_super) {
	    __extends(ReplaySubject, _super);
	    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
	        if (_bufferSize === void 0) { _bufferSize = Infinity; }
	        if (_windowTime === void 0) { _windowTime = Infinity; }
	        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
	        var _this = _super.call(this) || this;
	        _this._bufferSize = _bufferSize;
	        _this._windowTime = _windowTime;
	        _this._timestampProvider = _timestampProvider;
	        _this._buffer = [];
	        _this._infiniteTimeWindow = true;
	        _this._infiniteTimeWindow = _windowTime === Infinity;
	        _this._bufferSize = Math.max(1, _bufferSize);
	        _this._windowTime = Math.max(1, _windowTime);
	        return _this;
	    }
	    ReplaySubject.prototype.next = function (value) {
	        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
	        if (!isStopped) {
	            _buffer.push(value);
	            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
	        }
	        this._trimBuffer();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        this._throwIfClosed();
	        this._trimBuffer();
	        var subscription = this._innerSubscribe(subscriber);
	        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
	        var copy = _buffer.slice();
	        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
	            subscriber.next(copy[i]);
	        }
	        this._checkFinalizedStatuses(subscriber);
	        return subscription;
	    };
	    ReplaySubject.prototype._trimBuffer = function () {
	        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
	        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
	        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
	        if (!_infiniteTimeWindow) {
	            var now = _timestampProvider.now();
	            var last = 0;
	            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
	                last = i;
	            }
	            last && _buffer.splice(0, last + 1);
	        }
	    };
	    return ReplaySubject;
	}(Subject));

	var AsyncSubject = (function (_super) {
	    __extends(AsyncSubject, _super);
	    function AsyncSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._value = null;
	        _this._hasValue = false;
	        _this._isComplete = false;
	        return _this;
	    }
	    AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
	        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
	        if (hasError) {
	            subscriber.error(thrownError);
	        }
	        else if (isStopped || _isComplete) {
	            _hasValue && subscriber.next(_value);
	            subscriber.complete();
	        }
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._value = value;
	            this._hasValue = true;
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
	        if (!_isComplete) {
	            this._isComplete = true;
	            _hasValue && _super.prototype.next.call(this, _value);
	            _super.prototype.complete.call(this);
	        }
	    };
	    return AsyncSubject;
	}(Subject));

	var Action = (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription));

	var intervalProvider = {
	    setInterval: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = intervalProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray([], __read(args)));
	    },
	    clearInterval: function (handle) {
	        var delegate = intervalProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
	    },
	    delegate: undefined,
	};

	var AsyncAction = (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay != null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        intervalProvider.clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, _delay) {
	        var errored = false;
	        var errorValue;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = (!!e && e) || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            var _a = this, id = _a.id, scheduler = _a.scheduler;
	            var actions = scheduler.actions;
	            this.work = this.state = this.scheduler = null;
	            this.pending = false;
	            arrRemove(actions, this);
	            if (id != null) {
	                this.id = this.recycleAsyncId(scheduler, id, null);
	            }
	            this.delay = null;
	            _super.prototype.unsubscribe.call(this);
	        }
	    };
	    return AsyncAction;
	}(Action));

	var nextHandle = 1;
	var resolved;
	var activeHandles = {};
	function findAndClearHandle(handle) {
	    if (handle in activeHandles) {
	        delete activeHandles[handle];
	        return true;
	    }
	    return false;
	}
	var Immediate = {
	    setImmediate: function (cb) {
	        var handle = nextHandle++;
	        activeHandles[handle] = true;
	        if (!resolved) {
	            resolved = Promise.resolve();
	        }
	        resolved.then(function () { return findAndClearHandle(handle) && cb(); });
	        return handle;
	    },
	    clearImmediate: function (handle) {
	        findAndClearHandle(handle);
	    },
	};

	var setImmediate$1 = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
	var immediateProvider = {
	    setImmediate: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = immediateProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$1).apply(void 0, __spreadArray([], __read(args)));
	    },
	    clearImmediate: function (handle) {
	        var delegate = immediateProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
	    },
	    delegate: undefined,
	};

	var AsapAction = (function (_super) {
	    __extends(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            immediateProvider.clearImmediate(id);
	            scheduler._scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction));

	var Scheduler = (function () {
	    function Scheduler(schedulerActionCtor, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        this.schedulerActionCtor = schedulerActionCtor;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return new this.schedulerActionCtor(this, work).schedule(state, delay);
	    };
	    Scheduler.now = dateTimestampProvider.now;
	    return Scheduler;
	}());

	var AsyncScheduler = (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        var _this = _super.call(this, SchedulerAction, now) || this;
	        _this.actions = [];
	        _this._active = false;
	        _this._scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this._active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this._active = true;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while ((action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while ((action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler));

	var AsapScheduler = (function (_super) {
	    __extends(AsapScheduler, _super);
	    function AsapScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this._active = true;
	        this._scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        action = action || actions.shift();
	        var count = actions.length;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler));

	var asapScheduler = new AsapScheduler(AsapAction);
	var asap = asapScheduler;

	var asyncScheduler = new AsyncScheduler(AsyncAction);
	var async = asyncScheduler;

	var QueueAction = (function (_super) {
	    __extends(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction));

	var QueueScheduler = (function (_super) {
	    __extends(QueueScheduler, _super);
	    function QueueScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return QueueScheduler;
	}(AsyncScheduler));

	var queueScheduler = new QueueScheduler(QueueAction);
	var queue = queueScheduler;

	var AnimationFrameAction = (function (_super) {
	    __extends(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            animationFrameProvider.cancelAnimationFrame(id);
	            scheduler._scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction));

	var AnimationFrameScheduler = (function (_super) {
	    __extends(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this._active = true;
	        this._scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        action = action || actions.shift();
	        var count = actions.length;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler));

	var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
	var animationFrame = animationFrameScheduler;

	var VirtualTimeScheduler = (function (_super) {
	    __extends(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
	        if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction; }
	        if (maxFrames === void 0) { maxFrames = Infinity; }
	        var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
	        _this.maxFrames = maxFrames;
	        _this.frame = 0;
	        _this.index = -1;
	        return _this;
	    }
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error;
	        var action;
	        while ((action = actions[0]) && action.delay <= maxFrames) {
	            actions.shift();
	            this.frame = action.delay;
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        }
	        if (error) {
	            while ((action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler));
	var VirtualAction = (function (_super) {
	    __extends(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) { index = (scheduler.index += 1); }
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.index = index;
	        _this.active = true;
	        _this.index = scheduler.index = index;
	        return _this;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (Number.isFinite(delay)) {
	            if (!this.id) {
	                return _super.prototype.schedule.call(this, state, delay);
	            }
	            this.active = false;
	            var action = new VirtualAction(this.scheduler, this.work);
	            this.add(action);
	            return action.schedule(state, delay);
	        }
	        else {
	            return Subscription.EMPTY;
	        }
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        return undefined;
	    };
	    VirtualAction.prototype._execute = function (state, delay) {
	        if (this.active === true) {
	            return _super.prototype._execute.call(this, state, delay);
	        }
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction));

	var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });
	function empty$1(scheduler) {
	    return scheduler ? emptyScheduled(scheduler) : EMPTY;
	}
	function emptyScheduled(scheduler) {
	    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}

	function scheduleArray(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var i = 0;
	        return scheduler.schedule(function () {
	            if (i === input.length) {
	                subscriber.complete();
	            }
	            else {
	                subscriber.next(input[i++]);
	                if (!subscriber.closed) {
	                    this.schedule();
	                }
	            }
	        });
	    });
	}

	var isArrayLike$1 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

	function isPromise(value) {
	    return isFunction(value === null || value === void 0 ? void 0 : value.then);
	}

	function scheduleObservable(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            var observable$1 = input[observable]();
	            sub.add(observable$1.subscribe({
	                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
	                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
	                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
	            }));
	        }));
	        return sub;
	    });
	}

	function schedulePromise(input, scheduler) {
	    return new Observable(function (subscriber) {
	        return scheduler.schedule(function () {
	            return input.then(function (value) {
	                subscriber.add(scheduler.schedule(function () {
	                    subscriber.next(value);
	                    subscriber.add(scheduler.schedule(function () { return subscriber.complete(); }));
	                }));
	            }, function (err) {
	                subscriber.add(scheduler.schedule(function () { return subscriber.error(err); }));
	            });
	        });
	    });
	}

	function getSymbolIterator() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator = getSymbolIterator();

	function caughtSchedule(subscriber, scheduler, execute, delay) {
	    if (delay === void 0) { delay = 0; }
	    var subscription = scheduler.schedule(function () {
	        try {
	            execute.call(this);
	        }
	        catch (err) {
	            subscriber.error(err);
	        }
	    }, delay);
	    subscriber.add(subscription);
	    return subscription;
	}

	function scheduleIterable(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var iterator$1;
	        subscriber.add(scheduler.schedule(function () {
	            iterator$1 = input[iterator]();
	            caughtSchedule(subscriber, scheduler, function () {
	                var _a = iterator$1.next(), value = _a.value, done = _a.done;
	                if (done) {
	                    subscriber.complete();
	                }
	                else {
	                    subscriber.next(value);
	                    this.schedule();
	                }
	            });
	        }));
	        return function () { return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
	    });
	}

	function scheduleAsyncIterable(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            var iterator = input[Symbol.asyncIterator]();
	            sub.add(scheduler.schedule(function () {
	                var _this = this;
	                iterator.next().then(function (result) {
	                    if (result.done) {
	                        subscriber.complete();
	                    }
	                    else {
	                        subscriber.next(result.value);
	                        _this.schedule();
	                    }
	                });
	            }));
	        }));
	        return sub;
	    });
	}

	function isInteropObservable(input) {
	    return isFunction(input[observable]);
	}

	function isIterable(input) {
	    return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
	}

	function isAsyncIterable(obj) {
	    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
	}

	function createInvalidObservableTypeError(input) {
	    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
	}

	function readableStreamLikeToAsyncGenerator(readableStream) {
	    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
	        var reader, _a, value, done;
	        return __generator$1(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    reader = readableStream.getReader();
	                    _b.label = 1;
	                case 1:
	                    _b.trys.push([1, , 9, 10]);
	                    _b.label = 2;
	                case 2:
	                    return [4, __await(reader.read())];
	                case 3:
	                    _a = _b.sent(), value = _a.value, done = _a.done;
	                    if (!done) return [3, 5];
	                    return [4, __await(void 0)];
	                case 4: return [2, _b.sent()];
	                case 5: return [4, __await(value)];
	                case 6: return [4, _b.sent()];
	                case 7:
	                    _b.sent();
	                    return [3, 2];
	                case 8: return [3, 10];
	                case 9:
	                    reader.releaseLock();
	                    return [7];
	                case 10: return [2];
	            }
	        });
	    });
	}
	function isReadableStreamLike(obj) {
	    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
	}

	function scheduleReadableStreamLike(input, scheduler) {
	    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
	}

	function scheduled(input, scheduler) {
	    if (input != null) {
	        if (isInteropObservable(input)) {
	            return scheduleObservable(input, scheduler);
	        }
	        if (isArrayLike$1(input)) {
	            return scheduleArray(input, scheduler);
	        }
	        if (isPromise(input)) {
	            return schedulePromise(input, scheduler);
	        }
	        if (isAsyncIterable(input)) {
	            return scheduleAsyncIterable(input, scheduler);
	        }
	        if (isIterable(input)) {
	            return scheduleIterable(input, scheduler);
	        }
	        if (isReadableStreamLike(input)) {
	            return scheduleReadableStreamLike(input, scheduler);
	        }
	    }
	    throw createInvalidObservableTypeError(input);
	}

	function from(input, scheduler) {
	    return scheduler ? scheduled(input, scheduler) : innerFrom(input);
	}
	function innerFrom(input) {
	    if (input instanceof Observable) {
	        return input;
	    }
	    if (input != null) {
	        if (isInteropObservable(input)) {
	            return fromInteropObservable(input);
	        }
	        if (isArrayLike$1(input)) {
	            return fromArrayLike(input);
	        }
	        if (isPromise(input)) {
	            return fromPromise(input);
	        }
	        if (isAsyncIterable(input)) {
	            return fromAsyncIterable(input);
	        }
	        if (isIterable(input)) {
	            return fromIterable(input);
	        }
	        if (isReadableStreamLike(input)) {
	            return fromReadableStreamLike(input);
	        }
	    }
	    throw createInvalidObservableTypeError(input);
	}
	function fromInteropObservable(obj) {
	    return new Observable(function (subscriber) {
	        var obs = obj[observable]();
	        if (isFunction(obs.subscribe)) {
	            return obs.subscribe(subscriber);
	        }
	        throw new TypeError('Provided object does not correctly implement Symbol.observable');
	    });
	}
	function fromArrayLike(array) {
	    return new Observable(function (subscriber) {
	        for (var i = 0; i < array.length && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        subscriber.complete();
	    });
	}
	function fromPromise(promise) {
	    return new Observable(function (subscriber) {
	        promise
	            .then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, reportUnhandledError);
	    });
	}
	function fromIterable(iterable) {
	    return new Observable(function (subscriber) {
	        var e_1, _a;
	        try {
	            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
	                var value = iterable_1_1.value;
	                subscriber.next(value);
	                if (subscriber.closed) {
	                    return;
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        subscriber.complete();
	    });
	}
	function fromAsyncIterable(asyncIterable) {
	    return new Observable(function (subscriber) {
	        process$1(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
	    });
	}
	function fromReadableStreamLike(readableStream) {
	    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
	}
	function process$1(asyncIterable, subscriber) {
	    var asyncIterable_1, asyncIterable_1_1;
	    var e_2, _a;
	    return __awaiter$1(this, void 0, void 0, function () {
	        var value, e_2_1;
	        return __generator$1(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    _b.trys.push([0, 5, 6, 11]);
	                    asyncIterable_1 = __asyncValues(asyncIterable);
	                    _b.label = 1;
	                case 1: return [4, asyncIterable_1.next()];
	                case 2:
	                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
	                    value = asyncIterable_1_1.value;
	                    subscriber.next(value);
	                    if (subscriber.closed) {
	                        return [2];
	                    }
	                    _b.label = 3;
	                case 3: return [3, 1];
	                case 4: return [3, 11];
	                case 5:
	                    e_2_1 = _b.sent();
	                    e_2 = { error: e_2_1 };
	                    return [3, 11];
	                case 6:
	                    _b.trys.push([6, , 9, 10]);
	                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
	                    return [4, _a.call(asyncIterable_1)];
	                case 7:
	                    _b.sent();
	                    _b.label = 8;
	                case 8: return [3, 10];
	                case 9:
	                    if (e_2) throw e_2.error;
	                    return [7];
	                case 10: return [7];
	                case 11:
	                    subscriber.complete();
	                    return [2];
	            }
	        });
	    });
	}

	function internalFromArray(input, scheduler) {
	    return scheduler ? scheduleArray(input, scheduler) : fromArrayLike(input);
	}

	function isScheduler(value) {
	    return value && isFunction(value.schedule);
	}

	function last$1(arr) {
	    return arr[arr.length - 1];
	}
	function popResultSelector(args) {
	    return isFunction(last$1(args)) ? args.pop() : undefined;
	}
	function popScheduler(args) {
	    return isScheduler(last$1(args)) ? args.pop() : undefined;
	}
	function popNumber(args, defaultValue) {
	    return typeof last$1(args) === 'number' ? args.pop() : defaultValue;
	}

	function of() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    return scheduler ? scheduleArray(args, scheduler) : internalFromArray(args);
	}

	function throwError(errorOrErrorFactory, scheduler) {
	    var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };
	    var init = function (subscriber) { return subscriber.error(errorFactory()); };
	    return new Observable(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);
	}

	var NotificationKind;
	(function (NotificationKind) {
	    NotificationKind["NEXT"] = "N";
	    NotificationKind["ERROR"] = "E";
	    NotificationKind["COMPLETE"] = "C";
	})(NotificationKind || (NotificationKind = {}));
	var Notification = (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        return observeNotification(this, observer);
	    };
	    Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
	        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
	        return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        var _a;
	        return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next)
	            ? this.observe(nextOrObserver)
	            : this.do(nextOrObserver, error, complete);
	    };
	    Notification.prototype.toObservable = function () {
	        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
	        var result = kind === 'N'
	            ?
	                of(value)
	            :
	                kind === 'E'
	                    ?
	                        throwError(function () { return error; })
	                    :
	                        kind === 'C'
	                            ?
	                                EMPTY
	                            :
	                                0;
	        if (!result) {
	            throw new TypeError("Unexpected notification kind " + kind);
	        }
	        return result;
	    };
	    Notification.createNext = function (value) {
	        return new Notification('N', value);
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return Notification.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    return Notification;
	}());
	function observeNotification(notification, observer) {
	    var _a, _b, _c;
	    var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
	    if (typeof kind !== 'string') {
	        throw new TypeError('Invalid notification, missing "kind"');
	    }
	    kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
	}

	function isObservable(obj) {
	    return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));
	}

	var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
	    _super(this);
	    this.name = 'EmptyError';
	    this.message = 'no elements in sequence';
	}; });

	function lastValueFrom(source, config) {
	    var hasConfig = typeof config === 'object';
	    return new Promise(function (resolve, reject) {
	        var _hasValue = false;
	        var _value;
	        source.subscribe({
	            next: function (value) {
	                _value = value;
	                _hasValue = true;
	            },
	            error: reject,
	            complete: function () {
	                if (_hasValue) {
	                    resolve(_value);
	                }
	                else if (hasConfig) {
	                    resolve(config.defaultValue);
	                }
	                else {
	                    reject(new EmptyError());
	                }
	            },
	        });
	    });
	}

	function firstValueFrom(source, config) {
	    var hasConfig = typeof config === 'object';
	    return new Promise(function (resolve, reject) {
	        var subscriber = new SafeSubscriber({
	            next: function (value) {
	                resolve(value);
	                subscriber.unsubscribe();
	            },
	            error: reject,
	            complete: function () {
	                if (hasConfig) {
	                    resolve(config.defaultValue);
	                }
	                else {
	                    reject(new EmptyError());
	                }
	            },
	        });
	        source.subscribe(subscriber);
	    });
	}

	var ArgumentOutOfRangeError = createErrorClass(function (_super) {
	    return function ArgumentOutOfRangeErrorImpl() {
	        _super(this);
	        this.name = 'ArgumentOutOfRangeError';
	        this.message = 'argument out of range';
	    };
	});

	var NotFoundError = createErrorClass(function (_super) {
	    return function NotFoundErrorImpl(message) {
	        _super(this);
	        this.name = 'NotFoundError';
	        this.message = message;
	    };
	});

	var SequenceError = createErrorClass(function (_super) {
	    return function SequenceErrorImpl(message) {
	        _super(this);
	        this.name = 'SequenceError';
	        this.message = message;
	    };
	});

	function isValidDate(value) {
	    return value instanceof Date && !isNaN(value);
	}

	var TimeoutError = createErrorClass(function (_super) {
	    return function TimeoutErrorImpl(info) {
	        if (info === void 0) { info = null; }
	        _super(this);
	        this.message = 'Timeout has occurred';
	        this.name = 'TimeoutError';
	        this.info = info;
	    };
	});
	function timeout(config, schedulerArg) {
	    var _a = (isValidDate(config)
	        ? { first: config }
	        : typeof config === 'number'
	            ? { each: config }
	            : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
	    if (first == null && each == null) {
	        throw new TypeError('No timeout provided.');
	    }
	    return operate(function (source, subscriber) {
	        var originalSourceSubscription;
	        var timerSubscription;
	        var lastValue = null;
	        var seen = 0;
	        var startTimer = function (delay) {
	            timerSubscription = caughtSchedule(subscriber, scheduler, function () {
	                originalSourceSubscription.unsubscribe();
	                innerFrom(_with({
	                    meta: meta,
	                    lastValue: lastValue,
	                    seen: seen,
	                })).subscribe(subscriber);
	            }, delay);
	        };
	        originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
	            seen++;
	            subscriber.next((lastValue = value));
	            each > 0 && startTimer(each);
	        }, undefined, undefined, function () {
	            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
	                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
	            }
	            lastValue = null;
	        }));
	        startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);
	    });
	}
	function timeoutErrorFactory(info) {
	    throw new TimeoutError(info);
	}

	function subscribeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return operate(function (source, subscriber) {
	        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
	    });
	}

	function map(project, thisArg) {
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            subscriber.next(project.call(thisArg, value, index++));
	        }));
	    });
	}

	var isArray$2 = Array.isArray;
	function callOrApply(fn, args) {
	    return isArray$2(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
	}
	function mapOneOrManyArgs(fn) {
	    return map(function (args) { return callOrApply(fn, args); });
	}

	function observeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return subscriber.add(scheduler.schedule(function () { return subscriber.next(value); }, delay)); }, function () { return subscriber.add(scheduler.schedule(function () { return subscriber.complete(); }, delay)); }, function (err) { return subscriber.add(scheduler.schedule(function () { return subscriber.error(err); }, delay)); }));
	    });
	}

	function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler)
	                    .apply(this, args)
	                    .pipe(mapOneOrManyArgs(resultSelector));
	            };
	        }
	    }
	    if (scheduler) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return bindCallbackInternals(isNodeStyle, callbackFunc)
	                .apply(this, args)
	                .pipe(subscribeOn(scheduler), observeOn(scheduler));
	        };
	    }
	    return function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var subject = new AsyncSubject();
	        var uninitialized = true;
	        return new Observable(function (subscriber) {
	            var subs = subject.subscribe(subscriber);
	            if (uninitialized) {
	                uninitialized = false;
	                var isAsync_1 = false;
	                var isComplete_1 = false;
	                callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [
	                    function () {
	                        var results = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            results[_i] = arguments[_i];
	                        }
	                        if (isNodeStyle) {
	                            var err = results.shift();
	                            if (err != null) {
	                                subject.error(err);
	                                return;
	                            }
	                        }
	                        subject.next(1 < results.length ? results : results[0]);
	                        isComplete_1 = true;
	                        if (isAsync_1) {
	                            subject.complete();
	                        }
	                    },
	                ]));
	                if (isComplete_1) {
	                    subject.complete();
	                }
	                isAsync_1 = true;
	            }
	            return subs;
	        });
	    };
	}

	function bindCallback(callbackFunc, resultSelector, scheduler) {
	    return bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
	}

	function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
	    return bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
	}

	var isArray$1 = Array.isArray;
	var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
	function argsArgArrayOrObject(args) {
	    if (args.length === 1) {
	        var first_1 = args[0];
	        if (isArray$1(first_1)) {
	            return { args: first_1, keys: null };
	        }
	        if (isPOJO(first_1)) {
	            var keys = getKeys(first_1);
	            return {
	                args: keys.map(function (key) { return first_1[key]; }),
	                keys: keys,
	            };
	        }
	    }
	    return { args: args, keys: null };
	}
	function isPOJO(obj) {
	    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
	}

	function createObject(keys, values) {
	    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
	}

	function combineLatest$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    var resultSelector = popResultSelector(args);
	    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
	    if (observables.length === 0) {
	        return from([], scheduler);
	    }
	    var result = new Observable(combineLatestInit(observables, scheduler, keys
	        ?
	            function (values) { return createObject(keys, values); }
	        :
	            identity$2));
	    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
	}
	function combineLatestInit(observables, scheduler, valueTransform) {
	    if (valueTransform === void 0) { valueTransform = identity$2; }
	    return function (subscriber) {
	        maybeSchedule(scheduler, function () {
	            var length = observables.length;
	            var values = new Array(length);
	            var active = length;
	            var remainingFirstValues = length;
	            var _loop_1 = function (i) {
	                maybeSchedule(scheduler, function () {
	                    var source = from(observables[i], scheduler);
	                    var hasFirstValue = false;
	                    source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                        values[i] = value;
	                        if (!hasFirstValue) {
	                            hasFirstValue = true;
	                            remainingFirstValues--;
	                        }
	                        if (!remainingFirstValues) {
	                            subscriber.next(valueTransform(values.slice()));
	                        }
	                    }, function () {
	                        if (!--active) {
	                            subscriber.complete();
	                        }
	                    }));
	                }, subscriber);
	            };
	            for (var i = 0; i < length; i++) {
	                _loop_1(i);
	            }
	        }, subscriber);
	    };
	}
	function maybeSchedule(scheduler, execute, subscription) {
	    if (scheduler) {
	        subscription.add(scheduler.schedule(execute));
	    }
	    else {
	        execute();
	    }
	}

	function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
	    var buffer = [];
	    var active = 0;
	    var index = 0;
	    var isComplete = false;
	    var checkComplete = function () {
	        if (isComplete && !buffer.length && !active) {
	            subscriber.complete();
	        }
	    };
	    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
	    var doInnerSub = function (value) {
	        expand && subscriber.next(value);
	        active++;
	        var innerComplete = false;
	        innerFrom(project(value, index++)).subscribe(new OperatorSubscriber(subscriber, function (innerValue) {
	            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
	            if (expand) {
	                outerNext(innerValue);
	            }
	            else {
	                subscriber.next(innerValue);
	            }
	        }, function () {
	            innerComplete = true;
	        }, undefined, function () {
	            if (innerComplete) {
	                try {
	                    active--;
	                    var _loop_1 = function () {
	                        var bufferedValue = buffer.shift();
	                        innerSubScheduler ? subscriber.add(innerSubScheduler.schedule(function () { return doInnerSub(bufferedValue); })) : doInnerSub(bufferedValue);
	                    };
	                    while (buffer.length && active < concurrent) {
	                        _loop_1();
	                    }
	                    checkComplete();
	                }
	                catch (err) {
	                    subscriber.error(err);
	                }
	            }
	        }));
	    };
	    source.subscribe(new OperatorSubscriber(subscriber, outerNext, function () {
	        isComplete = true;
	        checkComplete();
	    }));
	    return function () {
	        additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
	    };
	}

	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    if (isFunction(resultSelector)) {
	        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
	}

	function mergeAll(concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    return mergeMap(identity$2, concurrent);
	}

	function concatAll() {
	    return mergeAll(1);
	}

	function concat$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return concatAll()(internalFromArray(args, popScheduler(args)));
	}

	function defer(observableFactory) {
	    return new Observable(function (subscriber) {
	        innerFrom(observableFactory()).subscribe(subscriber);
	    });
	}

	var DEFAULT_CONFIG$1 = {
	    connector: function () { return new Subject(); },
	    resetOnDisconnect: true,
	};
	function connectable(source, config) {
	    if (config === void 0) { config = DEFAULT_CONFIG$1; }
	    var connection = null;
	    var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
	    var subject = connector();
	    var result = new Observable(function (subscriber) {
	        return subject.subscribe(subscriber);
	    });
	    result.connect = function () {
	        if (!connection || connection.closed) {
	            connection = defer(function () { return source; }).subscribe(subject);
	            if (resetOnDisconnect) {
	                connection.add(function () { return (subject = connector()); });
	            }
	        }
	        return connection;
	    };
	    return result;
	}

	function forkJoin() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector(args);
	    var _a = argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
	    var result = new Observable(function (subscriber) {
	        var length = sources.length;
	        if (!length) {
	            subscriber.complete();
	            return;
	        }
	        var values = new Array(length);
	        var remainingCompletions = length;
	        var remainingEmissions = length;
	        var _loop_1 = function (sourceIndex) {
	            var hasValue = false;
	            innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                if (!hasValue) {
	                    hasValue = true;
	                    remainingEmissions--;
	                }
	                values[sourceIndex] = value;
	            }, function () {
	                if (!--remainingCompletions || !hasValue) {
	                    if (!remainingEmissions) {
	                        subscriber.next(keys ? createObject(keys, values) : values);
	                    }
	                    subscriber.complete();
	                }
	            }));
	        };
	        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
	            _loop_1(sourceIndex);
	        }
	    });
	    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
	}

	var nodeEventEmitterMethods = ['addListener', 'removeListener'];
	var eventTargetMethods = ['addEventListener', 'removeEventListener'];
	var jqueryMethods = ['on', 'off'];
	function fromEvent(target, eventName, options, resultSelector) {
	    if (isFunction(options)) {
	        resultSelector = options;
	        options = undefined;
	    }
	    if (resultSelector) {
	        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
	    }
	    var _a = __read(isEventTarget(target)
	        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
	        :
	            isNodeStyleEventEmitter(target)
	                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))
	                : isJQueryStyleEventEmitter(target)
	                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))
	                    : [], 2), add = _a[0], remove = _a[1];
	    if (!add) {
	        if (isArrayLike$1(target)) {
	            return mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(internalFromArray(target));
	        }
	    }
	    if (!add) {
	        throw new TypeError('Invalid event target');
	    }
	    return new Observable(function (subscriber) {
	        var handler = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return subscriber.next(1 < args.length ? args : args[0]);
	        };
	        add(handler);
	        return function () { return remove(handler); };
	    });
	}
	function toCommonHandlerRegistry(target, eventName) {
	    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
	}
	function isNodeStyleEventEmitter(target) {
	    return isFunction(target.addListener) && isFunction(target.removeListener);
	}
	function isJQueryStyleEventEmitter(target) {
	    return isFunction(target.on) && isFunction(target.off);
	}
	function isEventTarget(target) {
	    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
	}

	function fromEventPattern(addHandler, removeHandler, resultSelector) {
	    if (resultSelector) {
	        return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));
	    }
	    return new Observable(function (subscriber) {
	        var handler = function () {
	            var e = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                e[_i] = arguments[_i];
	            }
	            return subscriber.next(e.length === 1 ? e[0] : e);
	        };
	        var retValue = addHandler(handler);
	        return isFunction(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;
	    });
	}

	function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
	    var _a, _b;
	    var resultSelector;
	    var initialState;
	    if (arguments.length === 1) {
	        (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity$2 : _b, scheduler = _a.scheduler);
	    }
	    else {
	        initialState = initialStateOrOptions;
	        if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {
	            resultSelector = identity$2;
	            scheduler = resultSelectorOrScheduler;
	        }
	        else {
	            resultSelector = resultSelectorOrScheduler;
	        }
	    }
	    function gen() {
	        var state;
	        return __generator$1(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    state = initialState;
	                    _a.label = 1;
	                case 1:
	                    if (!(!condition || condition(state))) return [3, 4];
	                    return [4, resultSelector(state)];
	                case 2:
	                    _a.sent();
	                    _a.label = 3;
	                case 3:
	                    state = iterate(state);
	                    return [3, 1];
	                case 4: return [2];
	            }
	        });
	    }
	    return defer((scheduler
	        ?
	            function () { return scheduleIterable(gen(), scheduler); }
	        :
	            gen));
	}

	function iif(condition, trueResult, falseResult) {
	    return defer(function () { return (condition() ? trueResult : falseResult); });
	}

	function timer(dueTime, intervalOrScheduler, scheduler) {
	    if (dueTime === void 0) { dueTime = 0; }
	    if (scheduler === void 0) { scheduler = async; }
	    var intervalDuration = -1;
	    if (intervalOrScheduler != null) {
	        if (isScheduler(intervalOrScheduler)) {
	            scheduler = intervalOrScheduler;
	        }
	        else {
	            intervalDuration = intervalOrScheduler;
	        }
	    }
	    return new Observable(function (subscriber) {
	        var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
	        if (due < 0) {
	            due = 0;
	        }
	        var n = 0;
	        return scheduler.schedule(function () {
	            if (!subscriber.closed) {
	                subscriber.next(n++);
	                if (0 <= intervalDuration) {
	                    this.schedule(undefined, intervalDuration);
	                }
	                else {
	                    subscriber.complete();
	                }
	            }
	        }, due);
	    });
	}

	function interval(period, scheduler) {
	    if (period === void 0) { period = 0; }
	    if (scheduler === void 0) { scheduler = asyncScheduler; }
	    if (period < 0) {
	        period = 0;
	    }
	    return timer(period, period, scheduler);
	}

	function merge$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    var concurrent = popNumber(args, Infinity);
	    var sources = args;
	    return !sources.length
	        ?
	            EMPTY
	        : sources.length === 1
	            ?
	                innerFrom(sources[0])
	            :
	                mergeAll(concurrent)(internalFromArray(sources, scheduler));
	}

	var NEVER = new Observable(noop);
	function never() {
	    return NEVER;
	}

	var isArray = Array.isArray;
	function argsOrArgArray(args) {
	    return args.length === 1 && isArray(args[0]) ? args[0] : args;
	}

	function onErrorResumeNext$1() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    var nextSources = argsOrArgArray(sources);
	    return operate(function (source, subscriber) {
	        var remaining = __spreadArray([source], __read(nextSources));
	        var subscribeNext = function () {
	            if (!subscriber.closed) {
	                if (remaining.length > 0) {
	                    var nextSource = void 0;
	                    try {
	                        nextSource = innerFrom(remaining.shift());
	                    }
	                    catch (err) {
	                        subscribeNext();
	                        return;
	                    }
	                    var innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);
	                    subscriber.add(nextSource.subscribe(innerSub));
	                    innerSub.add(subscribeNext);
	                }
	                else {
	                    subscriber.complete();
	                }
	            }
	        };
	        subscribeNext();
	    });
	}

	function onErrorResumeNext() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    return onErrorResumeNext$1(argsOrArgArray(sources))(EMPTY);
	}

	function pairs(obj, scheduler) {
	    return from(Object.entries(obj), scheduler);
	}

	function not(pred, thisArg) {
	    return function (value, index) { return !pred.call(thisArg, value, index); };
	}

	function filter(predicate, thisArg) {
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
	    });
	}

	function partition(source, predicate, thisArg) {
	    return [filter(predicate, thisArg)(innerFrom(source)), filter(not(predicate, thisArg))(innerFrom(source))];
	}

	function race() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    sources = argsOrArgArray(sources);
	    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));
	}
	function raceInit(sources) {
	    return function (subscriber) {
	        var subscriptions = [];
	        var _loop_1 = function (i) {
	            subscriptions.push(innerFrom(sources[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                if (subscriptions) {
	                    for (var s = 0; s < subscriptions.length; s++) {
	                        s !== i && subscriptions[s].unsubscribe();
	                    }
	                    subscriptions = null;
	                }
	                subscriber.next(value);
	            })));
	        };
	        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
	            _loop_1(i);
	        }
	    };
	}

	function range(start, count, scheduler) {
	    if (count == null) {
	        count = start;
	        start = 0;
	    }
	    if (count <= 0) {
	        return EMPTY;
	    }
	    var end = count + start;
	    return new Observable(scheduler
	        ?
	            function (subscriber) {
	                var n = start;
	                return scheduler.schedule(function () {
	                    if (n < end) {
	                        subscriber.next(n++);
	                        this.schedule();
	                    }
	                    else {
	                        subscriber.complete();
	                    }
	                });
	            }
	        :
	            function (subscriber) {
	                var n = start;
	                while (n < end && !subscriber.closed) {
	                    subscriber.next(n++);
	                }
	                subscriber.complete();
	            });
	}

	function using(resourceFactory, observableFactory) {
	    return new Observable(function (subscriber) {
	        var resource = resourceFactory();
	        var result = observableFactory(resource);
	        var source = result ? innerFrom(result) : EMPTY;
	        source.subscribe(subscriber);
	        return function () {
	            if (resource) {
	                resource.unsubscribe();
	            }
	        };
	    });
	}

	function zip$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector(args);
	    var sources = argsOrArgArray(args);
	    return sources.length
	        ? new Observable(function (subscriber) {
	            var buffers = sources.map(function () { return []; });
	            var completed = sources.map(function () { return false; });
	            subscriber.add(function () {
	                buffers = completed = null;
	            });
	            var _loop_1 = function (sourceIndex) {
	                innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                    buffers[sourceIndex].push(value);
	                    if (buffers.every(function (buffer) { return buffer.length; })) {
	                        var result = buffers.map(function (buffer) { return buffer.shift(); });
	                        subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);
	                        if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {
	                            subscriber.complete();
	                        }
	                    }
	                }, function () {
	                    completed[sourceIndex] = true;
	                    !buffers[sourceIndex].length && subscriber.complete();
	                }));
	            };
	            for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
	                _loop_1(sourceIndex);
	            }
	            return function () {
	                buffers = completed = null;
	            };
	        })
	        : EMPTY;
	}

	function audit(durationSelector) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        var durationSubscriber = null;
	        var isComplete = false;
	        var endDuration = function () {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            durationSubscriber = null;
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	            isComplete && subscriber.complete();
	        };
	        var cleanupDuration = function () {
	            durationSubscriber = null;
	            isComplete && subscriber.complete();
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            lastValue = value;
	            if (!durationSubscriber) {
	                innerFrom(durationSelector(value)).subscribe((durationSubscriber = new OperatorSubscriber(subscriber, endDuration, cleanupDuration)));
	            }
	        }, function () {
	            isComplete = true;
	            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
	        }));
	    });
	}

	function auditTime(duration, scheduler) {
	    if (scheduler === void 0) { scheduler = async; }
	    return audit(function () { return timer(duration, scheduler); });
	}

	function buffer(closingNotifier) {
	    return operate(function (source, subscriber) {
	        var currentBuffer = [];
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return currentBuffer.push(value); }, function () {
	            subscriber.next(currentBuffer);
	            subscriber.complete();
	        }));
	        closingNotifier.subscribe(new OperatorSubscriber(subscriber, function () {
	            var b = currentBuffer;
	            currentBuffer = [];
	            subscriber.next(b);
	        }, noop));
	        return function () {
	            currentBuffer = null;
	        };
	    });
	}

	function bufferCount(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) { startBufferEvery = null; }
	    startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
	    return operate(function (source, subscriber) {
	        var buffers = [];
	        var count = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a, e_2, _b;
	            var toEmit = null;
	            if (count++ % startBufferEvery === 0) {
	                buffers.push([]);
	            }
	            try {
	                for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
	                    var buffer = buffers_1_1.value;
	                    buffer.push(value);
	                    if (bufferSize <= buffer.length) {
	                        toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
	                        toEmit.push(buffer);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            if (toEmit) {
	                try {
	                    for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
	                        var buffer = toEmit_1_1.value;
	                        arrRemove(buffers, buffer);
	                        subscriber.next(buffer);
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        }, function () {
	            var e_3, _a;
	            try {
	                for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
	                    var buffer = buffers_2_1.value;
	                    subscriber.next(buffer);
	                }
	            }
	            catch (e_3_1) { e_3 = { error: e_3_1 }; }
	            finally {
	                try {
	                    if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
	                }
	                finally { if (e_3) throw e_3.error; }
	            }
	            subscriber.complete();
	        }, undefined, function () {
	            buffers = null;
	        }));
	    });
	}

	function bufferTime(bufferTimeSpan) {
	    var _a, _b;
	    var otherArgs = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        otherArgs[_i - 1] = arguments[_i];
	    }
	    var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;
	    var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
	    var maxBufferSize = otherArgs[1] || Infinity;
	    return operate(function (source, subscriber) {
	        var bufferRecords = [];
	        var restartOnEmit = false;
	        var emit = function (record) {
	            var buffer = record.buffer, subs = record.subs;
	            subs.unsubscribe();
	            arrRemove(bufferRecords, record);
	            subscriber.next(buffer);
	            restartOnEmit && startBuffer();
	        };
	        var startBuffer = function () {
	            if (bufferRecords) {
	                var subs = new Subscription();
	                subscriber.add(subs);
	                var buffer = [];
	                var record_1 = {
	                    buffer: buffer,
	                    subs: subs,
	                };
	                bufferRecords.push(record_1);
	                subs.add(scheduler.schedule(function () { return emit(record_1); }, bufferTimeSpan));
	            }
	        };
	        bufferCreationInterval !== null && bufferCreationInterval >= 0
	            ?
	                subscriber.add(scheduler.schedule(function () {
	                    startBuffer();
	                    !this.closed && subscriber.add(this.schedule(null, bufferCreationInterval));
	                }, bufferCreationInterval))
	            : (restartOnEmit = true);
	        startBuffer();
	        var bufferTimeSubscriber = new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            var recordsCopy = bufferRecords.slice();
	            try {
	                for (var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
	                    var record = recordsCopy_1_1.value;
	                    var buffer = record.buffer;
	                    buffer.push(value);
	                    maxBufferSize <= buffer.length && emit(record);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
	                subscriber.next(bufferRecords.shift().buffer);
	            }
	            bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
	            subscriber.complete();
	            subscriber.unsubscribe();
	        }, undefined, function () { return (bufferRecords = null); });
	        source.subscribe(bufferTimeSubscriber);
	    });
	}

	function bufferToggle(openings, closingSelector) {
	    return operate(function (source, subscriber) {
	        var buffers = [];
	        innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {
	            var buffer = [];
	            buffers.push(buffer);
	            var closingSubscription = new Subscription();
	            var emitBuffer = function () {
	                arrRemove(buffers, buffer);
	                subscriber.next(buffer);
	                closingSubscription.unsubscribe();
	            };
	            closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop)));
	        }, noop));
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            try {
	                for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
	                    var buffer = buffers_1_1.value;
	                    buffer.push(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (buffers.length > 0) {
	                subscriber.next(buffers.shift());
	            }
	            subscriber.complete();
	        }));
	    });
	}

	function bufferWhen(closingSelector) {
	    return operate(function (source, subscriber) {
	        var buffer = null;
	        var closingSubscriber = null;
	        var openBuffer = function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            var b = buffer;
	            buffer = [];
	            b && subscriber.next(b);
	            innerFrom(closingSelector()).subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openBuffer, noop)));
	        };
	        openBuffer();
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return buffer === null || buffer === void 0 ? void 0 : buffer.push(value); }, function () {
	            buffer && subscriber.next(buffer);
	            subscriber.complete();
	        }, undefined, function () { return (buffer = closingSubscriber = null); }));
	    });
	}

	function catchError(selector) {
	    return operate(function (source, subscriber) {
	        var innerSub = null;
	        var syncUnsub = false;
	        var handledResult;
	        innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {
	            handledResult = innerFrom(selector(err, catchError(selector)(source)));
	            if (innerSub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                handledResult.subscribe(subscriber);
	            }
	            else {
	                syncUnsub = true;
	            }
	        }));
	        if (syncUnsub) {
	            innerSub.unsubscribe();
	            innerSub = null;
	            handledResult.subscribe(subscriber);
	        }
	    });
	}

	function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
	    return function (source, subscriber) {
	        var hasState = hasSeed;
	        var state = seed;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var i = index++;
	            state = hasState
	                ?
	                    accumulator(state, value, i)
	                :
	                    ((hasState = true), value);
	            emitOnNext && subscriber.next(state);
	        }, emitBeforeComplete &&
	            (function () {
	                hasState && subscriber.next(state);
	                subscriber.complete();
	            })));
	    };
	}

	function reduce(accumulator, seed) {
	    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
	}

	var arrReducer = function (arr, value) { return (arr.push(value), arr); };
	function toArray() {
	    return operate(function (source, subscriber) {
	        reduce(arrReducer, [])(source).subscribe(subscriber);
	    });
	}

	function joinAllInternals(joinFn, project) {
	    return pipe(toArray(), mergeMap(function (sources) { return joinFn(sources); }), project ? mapOneOrManyArgs(project) : identity$2);
	}

	function combineLatestAll(project) {
	    return joinAllInternals(combineLatest$1, project);
	}

	var combineAll = combineLatestAll;

	function combineLatest() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector(args);
	    return resultSelector
	        ? pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs(resultSelector))
	        : operate(function (source, subscriber) {
	            combineLatestInit(__spreadArray([source], __read(argsOrArgArray(args))))(subscriber);
	        });
	}

	function combineLatestWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
	}

	function concatMap(project, resultSelector) {
	    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
	}

	function concatMapTo(innerObservable, resultSelector) {
	    return isFunction(resultSelector) ? concatMap(function () { return innerObservable; }, resultSelector) : concatMap(function () { return innerObservable; });
	}

	function concat() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    return operate(function (source, subscriber) {
	        concatAll()(internalFromArray(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
	    });
	}

	function concatWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return concat.apply(void 0, __spreadArray([], __read(otherSources)));
	}

	function fromSubscribable(subscribable) {
	    return new Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
	}

	var DEFAULT_CONFIG = {
	    connector: function () { return new Subject(); },
	};
	function connect(selector, config) {
	    if (config === void 0) { config = DEFAULT_CONFIG; }
	    var connector = config.connector;
	    return operate(function (source, subscriber) {
	        var subject = connector();
	        from(selector(fromSubscribable(subject))).subscribe(subscriber);
	        subscriber.add(source.subscribe(subject));
	    });
	}

	function count(predicate) {
	    return reduce(function (total, value, i) { return (!predicate || predicate(value, i) ? total + 1 : total); }, 0);
	}

	function debounce(durationSelector) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        var durationSubscriber = null;
	        var emit = function () {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            durationSubscriber = null;
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            hasValue = true;
	            lastValue = value;
	            durationSubscriber = new OperatorSubscriber(subscriber, emit, noop);
	            innerFrom(durationSelector(value)).subscribe(durationSubscriber);
	        }, function () {
	            emit();
	            subscriber.complete();
	        }, undefined, function () {
	            lastValue = durationSubscriber = null;
	        }));
	    });
	}

	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler; }
	    return operate(function (source, subscriber) {
	        var activeTask = null;
	        var lastValue = null;
	        var lastTime = null;
	        var emit = function () {
	            if (activeTask) {
	                activeTask.unsubscribe();
	                activeTask = null;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        function emitWhenIdle() {
	            var targetTime = lastTime + dueTime;
	            var now = scheduler.now();
	            if (now < targetTime) {
	                activeTask = this.schedule(undefined, targetTime - now);
	                subscriber.add(activeTask);
	                return;
	            }
	            emit();
	        }
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            lastValue = value;
	            lastTime = scheduler.now();
	            if (!activeTask) {
	                activeTask = scheduler.schedule(emitWhenIdle, dueTime);
	                subscriber.add(activeTask);
	            }
	        }, function () {
	            emit();
	            subscriber.complete();
	        }, undefined, function () {
	            lastValue = activeTask = null;
	        }));
	    });
	}

	function defaultIfEmpty(defaultValue) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            subscriber.next(value);
	        }, function () {
	            if (!hasValue) {
	                subscriber.next(defaultValue);
	            }
	            subscriber.complete();
	        }));
	    });
	}

	function take(count) {
	    return count <= 0
	        ?
	            function () { return EMPTY; }
	        : operate(function (source, subscriber) {
	            var seen = 0;
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                if (++seen <= count) {
	                    subscriber.next(value);
	                    if (count <= seen) {
	                        subscriber.complete();
	                    }
	                }
	            }));
	        });
	}

	function ignoreElements() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, noop));
	    });
	}

	function mapTo(value) {
	    return map(function () { return value; });
	}

	function delayWhen(delayDurationSelector, subscriptionDelay) {
	    if (subscriptionDelay) {
	        return function (source) {
	            return concat$1(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
	        };
	    }
	    return mergeMap(function (value, index) { return delayDurationSelector(value, index).pipe(take(1), mapTo(value)); });
	}

	function delay(due, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler; }
	    var duration = timer(due, scheduler);
	    return delayWhen(function () { return duration; });
	}

	function dematerialize() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function (notification) { return observeNotification(notification, subscriber); }));
	    });
	}

	function distinct(keySelector, flushes) {
	    return operate(function (source, subscriber) {
	        var distinctKeys = new Set();
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var key = keySelector ? keySelector(value) : value;
	            if (!distinctKeys.has(key)) {
	                distinctKeys.add(key);
	                subscriber.next(value);
	            }
	        }));
	        flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber(subscriber, function () { return distinctKeys.clear(); }, noop));
	    });
	}

	function distinctUntilChanged(comparator, keySelector) {
	    if (keySelector === void 0) { keySelector = identity$2; }
	    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
	    return operate(function (source, subscriber) {
	        var previousKey;
	        var first = true;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var currentKey = keySelector(value);
	            if (first || !comparator(previousKey, currentKey)) {
	                first = false;
	                previousKey = currentKey;
	                subscriber.next(value);
	            }
	        }));
	    });
	}
	function defaultCompare(a, b) {
	    return a === b;
	}

	function distinctUntilKeyChanged(key, compare) {
	    return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
	}

	function throwIfEmpty(errorFactory) {
	    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            subscriber.next(value);
	        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
	    });
	}
	function defaultErrorFactory() {
	    return new EmptyError();
	}

	function elementAt(index, defaultValue) {
	    if (index < 0) {
	        throw new ArgumentOutOfRangeError();
	    }
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(filter(function (v, i) { return i === index; }), take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new ArgumentOutOfRangeError(); }));
	    };
	}

	function endWith() {
	    var values = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        values[_i] = arguments[_i];
	    }
	    return function (source) { return concat$1(source, of.apply(void 0, __spreadArray([], __read(values)))); };
	}

	function every(predicate, thisArg) {
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            if (!predicate.call(thisArg, value, index++, source)) {
	                subscriber.next(false);
	                subscriber.complete();
	            }
	        }, function () {
	            subscriber.next(true);
	            subscriber.complete();
	        }));
	    });
	}

	function exhaustAll() {
	    return operate(function (source, subscriber) {
	        var isComplete = false;
	        var innerSub = null;
	        source.subscribe(new OperatorSubscriber(subscriber, function (inner) {
	            if (!innerSub) {
	                innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, function () {
	                    innerSub = null;
	                    isComplete && subscriber.complete();
	                }));
	            }
	        }, function () {
	            isComplete = true;
	            !innerSub && subscriber.complete();
	        }));
	    });
	}

	var exhaust = exhaustAll;

	function exhaustMap(project, resultSelector) {
	    if (resultSelector) {
	        return function (source) {
	            return source.pipe(exhaustMap(function (a, i) { return innerFrom(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
	        };
	    }
	    return operate(function (source, subscriber) {
	        var index = 0;
	        var innerSub = null;
	        var isComplete = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (outerValue) {
	            if (!innerSub) {
	                innerSub = new OperatorSubscriber(subscriber, undefined, function () {
	                    innerSub = null;
	                    isComplete && subscriber.complete();
	                });
	                innerFrom(project(outerValue, index++)).subscribe(innerSub);
	            }
	        }, function () {
	            isComplete = true;
	            !innerSub && subscriber.complete();
	        }));
	    });
	}

	function expand(project, concurrent, scheduler) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
	    return operate(function (source, subscriber) {
	        return mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);
	    });
	}

	function finalize(callback) {
	    return operate(function (source, subscriber) {
	        try {
	            source.subscribe(subscriber);
	        }
	        finally {
	            subscriber.add(callback);
	        }
	    });
	}

	function find(predicate, thisArg) {
	    return operate(createFind(predicate, thisArg, 'value'));
	}
	function createFind(predicate, thisArg, emit) {
	    var findIndex = emit === 'index';
	    return function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var i = index++;
	            if (predicate.call(thisArg, value, i, source)) {
	                subscriber.next(findIndex ? i : value);
	                subscriber.complete();
	            }
	        }, function () {
	            subscriber.next(findIndex ? -1 : undefined);
	            subscriber.complete();
	        }));
	    };
	}

	function findIndex(predicate, thisArg) {
	    return operate(createFind(predicate, thisArg, 'index'));
	}

	function first(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
	    };
	}

	function groupBy(keySelector, elementOrOptions, duration, connector) {
	    return operate(function (source, subscriber) {
	        var element;
	        if (!elementOrOptions || typeof elementOrOptions === 'function') {
	            element = elementOrOptions;
	        }
	        else {
	            (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);
	        }
	        var groups = new Map();
	        var notify = function (cb) {
	            groups.forEach(cb);
	            cb(subscriber);
	        };
	        var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };
	        var groupBySourceSubscriber = new GroupBySubscriber(subscriber, function (value) {
	            try {
	                var key_1 = keySelector(value);
	                var group_1 = groups.get(key_1);
	                if (!group_1) {
	                    groups.set(key_1, (group_1 = connector ? connector() : new Subject()));
	                    var grouped = createGroupedObservable(key_1, group_1);
	                    subscriber.next(grouped);
	                    if (duration) {
	                        var durationSubscriber_1 = new OperatorSubscriber(group_1, function () {
	                            group_1.complete();
	                            durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
	                        }, undefined, undefined, function () { return groups.delete(key_1); });
	                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
	                    }
	                }
	                group_1.next(element ? element(value) : value);
	            }
	            catch (err) {
	                handleError(err);
	            }
	        }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); });
	        source.subscribe(groupBySourceSubscriber);
	        function createGroupedObservable(key, groupSubject) {
	            var result = new Observable(function (groupSubscriber) {
	                groupBySourceSubscriber.activeGroups++;
	                var innerSub = groupSubject.subscribe(groupSubscriber);
	                return function () {
	                    innerSub.unsubscribe();
	                    --groupBySourceSubscriber.activeGroups === 0 &&
	                        groupBySourceSubscriber.teardownAttempted &&
	                        groupBySourceSubscriber.unsubscribe();
	                };
	            });
	            result.key = key;
	            return result;
	        }
	    });
	}
	var GroupBySubscriber = (function (_super) {
	    __extends(GroupBySubscriber, _super);
	    function GroupBySubscriber() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.activeGroups = 0;
	        _this.teardownAttempted = false;
	        return _this;
	    }
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        this.teardownAttempted = true;
	        this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);
	    };
	    return GroupBySubscriber;
	}(OperatorSubscriber));

	function isEmpty() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function () {
	            subscriber.next(false);
	            subscriber.complete();
	        }, function () {
	            subscriber.next(true);
	            subscriber.complete();
	        }));
	    });
	}

	function takeLast(count) {
	    return count <= 0
	        ? function () { return EMPTY; }
	        : operate(function (source, subscriber) {
	            var buffer = [];
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                buffer.push(value);
	                count < buffer.length && buffer.shift();
	            }, function () {
	                var e_1, _a;
	                try {
	                    for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
	                        var value = buffer_1_1.value;
	                        subscriber.next(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	                subscriber.complete();
	            }, undefined, function () {
	                buffer = null;
	            }));
	        });
	}

	function last(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$2, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
	    };
	}

	function materialize() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            subscriber.next(Notification.createNext(value));
	        }, function () {
	            subscriber.next(Notification.createComplete());
	            subscriber.complete();
	        }, function (err) {
	            subscriber.next(Notification.createError(err));
	            subscriber.complete();
	        }));
	    });
	}

	function max(comparer) {
	    return reduce(isFunction(comparer) ? function (x, y) { return (comparer(x, y) > 0 ? x : y); } : function (x, y) { return (x > y ? x : y); });
	}

	var flatMap = mergeMap;

	function mergeMapTo(innerObservable, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    if (isFunction(resultSelector)) {
	        return mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
	    }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return mergeMap(function () { return innerObservable; }, concurrent);
	}

	function mergeScan(accumulator, seed, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    return operate(function (source, subscriber) {
	        var state = seed;
	        return mergeInternals(source, subscriber, function (value, index) { return accumulator(state, value, index); }, concurrent, function (value) {
	            state = value;
	        }, false, undefined, function () { return (state = null); });
	    });
	}

	function merge() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    var concurrent = popNumber(args, Infinity);
	    args = argsOrArgArray(args);
	    return operate(function (source, subscriber) {
	        mergeAll(concurrent)(internalFromArray(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
	    });
	}

	function mergeWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return merge.apply(void 0, __spreadArray([], __read(otherSources)));
	}

	function min(comparer) {
	    return reduce(isFunction(comparer) ? function (x, y) { return (comparer(x, y) < 0 ? x : y); } : function (x, y) { return (x < y ? x : y); });
	}

	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
	    if (isFunction(selector)) {
	        return connect(selector, {
	            connector: subjectFactory,
	        });
	    }
	    return function (source) { return new ConnectableObservable(source, subjectFactory); };
	}

	function pairwise() {
	    return operate(function (source, subscriber) {
	        var prev;
	        var hasPrev = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var p = prev;
	            prev = value;
	            hasPrev && subscriber.next([p, value]);
	            hasPrev = true;
	        }));
	    });
	}

	function pluck() {
	    var properties = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        properties[_i] = arguments[_i];
	    }
	    var length = properties.length;
	    if (length === 0) {
	        throw new Error('list of properties cannot be empty.');
	    }
	    return map(function (x) {
	        var currentProp = x;
	        for (var i = 0; i < length; i++) {
	            var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
	            if (typeof p !== 'undefined') {
	                currentProp = p;
	            }
	            else {
	                return undefined;
	            }
	        }
	        return currentProp;
	    });
	}

	function publish(selector) {
	    return selector ? function (source) { return connect(selector)(source); } : function (source) { return multicast(new Subject())(source); };
	}

	function publishBehavior(initialValue) {
	    return function (source) {
	        var subject = new BehaviorSubject(initialValue);
	        return new ConnectableObservable(source, function () { return subject; });
	    };
	}

	function publishLast() {
	    return function (source) {
	        var subject = new AsyncSubject();
	        return new ConnectableObservable(source, function () { return subject; });
	    };
	}

	function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
	    if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {
	        timestampProvider = selectorOrScheduler;
	    }
	    var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
	    return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
	}

	function raceWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return !otherSources.length
	        ? identity$2
	        : operate(function (source, subscriber) {
	            raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
	        });
	}

	function repeat(count) {
	    if (count === void 0) { count = Infinity; }
	    return count <= 0
	        ? function () { return EMPTY; }
	        : operate(function (source, subscriber) {
	            var soFar = 0;
	            var innerSub;
	            var subscribeForRepeat = function () {
	                var syncUnsub = false;
	                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {
	                    if (++soFar < count) {
	                        if (innerSub) {
	                            innerSub.unsubscribe();
	                            innerSub = null;
	                            subscribeForRepeat();
	                        }
	                        else {
	                            syncUnsub = true;
	                        }
	                    }
	                    else {
	                        subscriber.complete();
	                    }
	                }));
	                if (syncUnsub) {
	                    innerSub.unsubscribe();
	                    innerSub = null;
	                    subscribeForRepeat();
	                }
	            };
	            subscribeForRepeat();
	        });
	}

	function repeatWhen(notifier) {
	    return operate(function (source, subscriber) {
	        var innerSub;
	        var syncResub = false;
	        var completions$;
	        var isNotifierComplete = false;
	        var isMainComplete = false;
	        var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };
	        var getCompletionSubject = function () {
	            if (!completions$) {
	                completions$ = new Subject();
	                notifier(completions$).subscribe(new OperatorSubscriber(subscriber, function () {
	                    if (innerSub) {
	                        subscribeForRepeatWhen();
	                    }
	                    else {
	                        syncResub = true;
	                    }
	                }, function () {
	                    isNotifierComplete = true;
	                    checkComplete();
	                }));
	            }
	            return completions$;
	        };
	        var subscribeForRepeatWhen = function () {
	            isMainComplete = false;
	            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {
	                isMainComplete = true;
	                !checkComplete() && getCompletionSubject().next();
	            }));
	            if (syncResub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                syncResub = false;
	                subscribeForRepeatWhen();
	            }
	        };
	        subscribeForRepeatWhen();
	    });
	}

	function retry(configOrCount) {
	    if (configOrCount === void 0) { configOrCount = Infinity; }
	    var config;
	    if (configOrCount && typeof configOrCount === 'object') {
	        config = configOrCount;
	    }
	    else {
	        config = {
	            count: configOrCount,
	        };
	    }
	    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
	    return count <= 0
	        ? identity$2
	        : operate(function (source, subscriber) {
	            var soFar = 0;
	            var innerSub;
	            var subscribeForRetry = function () {
	                var syncUnsub = false;
	                innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                    if (resetOnSuccess) {
	                        soFar = 0;
	                    }
	                    subscriber.next(value);
	                }, undefined, function (err) {
	                    if (soFar++ < count) {
	                        var resub_1 = function () {
	                            if (innerSub) {
	                                innerSub.unsubscribe();
	                                innerSub = null;
	                                subscribeForRetry();
	                            }
	                            else {
	                                syncUnsub = true;
	                            }
	                        };
	                        if (delay != null) {
	                            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));
	                            var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {
	                                notifierSubscriber_1.unsubscribe();
	                                resub_1();
	                            }, function () {
	                                subscriber.complete();
	                            });
	                            notifier.subscribe(notifierSubscriber_1);
	                        }
	                        else {
	                            resub_1();
	                        }
	                    }
	                    else {
	                        subscriber.error(err);
	                    }
	                }));
	                if (syncUnsub) {
	                    innerSub.unsubscribe();
	                    innerSub = null;
	                    subscribeForRetry();
	                }
	            };
	            subscribeForRetry();
	        });
	}

	function retryWhen(notifier) {
	    return operate(function (source, subscriber) {
	        var innerSub;
	        var syncResub = false;
	        var errors$;
	        var subscribeForRetryWhen = function () {
	            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {
	                if (!errors$) {
	                    errors$ = new Subject();
	                    notifier(errors$).subscribe(new OperatorSubscriber(subscriber, function () {
	                        return innerSub ? subscribeForRetryWhen() : (syncResub = true);
	                    }));
	                }
	                if (errors$) {
	                    errors$.next(err);
	                }
	            }));
	            if (syncResub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                syncResub = false;
	                subscribeForRetryWhen();
	            }
	        };
	        subscribeForRetryWhen();
	    });
	}

	function sample(notifier) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            lastValue = value;
	        }));
	        var emit = function () {
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));
	    });
	}

	function sampleTime(period, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler; }
	    return sample(interval(period, scheduler));
	}

	function scan(accumulator, seed) {
	    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
	}

	function sequenceEqual(compareTo, comparator) {
	    if (comparator === void 0) { comparator = function (a, b) { return a === b; }; }
	    return operate(function (source, subscriber) {
	        var aState = createState();
	        var bState = createState();
	        var emit = function (isEqual) {
	            subscriber.next(isEqual);
	            subscriber.complete();
	        };
	        var createSubscriber = function (selfState, otherState) {
	            var sequenceEqualSubscriber = new OperatorSubscriber(subscriber, function (a) {
	                var buffer = otherState.buffer, complete = otherState.complete;
	                if (buffer.length === 0) {
	                    complete ? emit(false) : selfState.buffer.push(a);
	                }
	                else {
	                    !comparator(a, buffer.shift()) && emit(false);
	                }
	            }, function () {
	                selfState.complete = true;
	                var complete = otherState.complete, buffer = otherState.buffer;
	                complete && emit(buffer.length === 0);
	                sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
	            });
	            return sequenceEqualSubscriber;
	        };
	        source.subscribe(createSubscriber(aState, bState));
	        compareTo.subscribe(createSubscriber(bState, aState));
	    });
	}
	function createState() {
	    return {
	        buffer: [],
	        complete: false,
	    };
	}

	function share(options) {
	    if (options === void 0) { options = {}; }
	    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
	    return function (wrapperSource) {
	        var connection = null;
	        var resetConnection = null;
	        var subject = null;
	        var refCount = 0;
	        var hasCompleted = false;
	        var hasErrored = false;
	        var cancelReset = function () {
	            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
	            resetConnection = null;
	        };
	        var reset = function () {
	            cancelReset();
	            connection = subject = null;
	            hasCompleted = hasErrored = false;
	        };
	        var resetAndUnsubscribe = function () {
	            var conn = connection;
	            reset();
	            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
	        };
	        return operate(function (source, subscriber) {
	            refCount++;
	            if (!hasErrored && !hasCompleted) {
	                cancelReset();
	            }
	            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
	            subscriber.add(function () {
	                refCount--;
	                if (refCount === 0 && !hasErrored && !hasCompleted) {
	                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
	                }
	            });
	            dest.subscribe(subscriber);
	            if (!connection) {
	                connection = new SafeSubscriber({
	                    next: function (value) { return dest.next(value); },
	                    error: function (err) {
	                        hasErrored = true;
	                        cancelReset();
	                        resetConnection = handleReset(reset, resetOnError, err);
	                        dest.error(err);
	                    },
	                    complete: function () {
	                        hasCompleted = true;
	                        cancelReset();
	                        resetConnection = handleReset(reset, resetOnComplete);
	                        dest.complete();
	                    },
	                });
	                from(source).subscribe(connection);
	            }
	        })(wrapperSource);
	    };
	}
	function handleReset(reset, on) {
	    var args = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        args[_i - 2] = arguments[_i];
	    }
	    if (on === true) {
	        reset();
	        return null;
	    }
	    if (on === false) {
	        return null;
	    }
	    return on.apply(void 0, __spreadArray([], __read(args))).pipe(take(1))
	        .subscribe(function () { return reset(); });
	}

	function shareReplay(configOrBufferSize, windowTime, scheduler) {
	    var _a, _b;
	    var bufferSize;
	    var refCount = false;
	    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
	        bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;
	        windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;
	        refCount = !!configOrBufferSize.refCount;
	        scheduler = configOrBufferSize.scheduler;
	    }
	    else {
	        bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
	    }
	    return share({
	        connector: function () { return new ReplaySubject(bufferSize, windowTime, scheduler); },
	        resetOnError: true,
	        resetOnComplete: false,
	        resetOnRefCountZero: refCount
	    });
	}

	function single(predicate) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var singleValue;
	        var seenValue = false;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            seenValue = true;
	            if (!predicate || predicate(value, index++, source)) {
	                hasValue && subscriber.error(new SequenceError('Too many matching values'));
	                hasValue = true;
	                singleValue = value;
	            }
	        }, function () {
	            if (hasValue) {
	                subscriber.next(singleValue);
	                subscriber.complete();
	            }
	            else {
	                subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError());
	            }
	        }));
	    });
	}

	function skip(count) {
	    return filter(function (_, index) { return count <= index; });
	}

	function skipLast(skipCount) {
	    return skipCount <= 0
	        ?
	            identity$2
	        : operate(function (source, subscriber) {
	            var ring = new Array(skipCount);
	            var seen = 0;
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                var valueIndex = seen++;
	                if (valueIndex < skipCount) {
	                    ring[valueIndex] = value;
	                }
	                else {
	                    var index = valueIndex % skipCount;
	                    var oldValue = ring[index];
	                    ring[index] = value;
	                    subscriber.next(oldValue);
	                }
	            }));
	            return function () {
	                ring = null;
	            };
	        });
	}

	function skipUntil(notifier) {
	    return operate(function (source, subscriber) {
	        var taking = false;
	        var skipSubscriber = new OperatorSubscriber(subscriber, function () {
	            skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
	            taking = true;
	        }, noop);
	        innerFrom(notifier).subscribe(skipSubscriber);
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return taking && subscriber.next(value); }));
	    });
	}

	function skipWhile(predicate) {
	    return operate(function (source, subscriber) {
	        var taking = false;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));
	    });
	}

	function startWith() {
	    var values = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        values[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(values);
	    return operate(function (source, subscriber) {
	        (scheduler ? concat$1(values, source, scheduler) : concat$1(values, source)).subscribe(subscriber);
	    });
	}

	function switchMap(project, resultSelector) {
	    return operate(function (source, subscriber) {
	        var innerSubscriber = null;
	        var index = 0;
	        var isComplete = false;
	        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
	            var innerIndex = 0;
	            var outerIndex = index++;
	            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = new OperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
	                innerSubscriber = null;
	                checkComplete();
	            })));
	        }, function () {
	            isComplete = true;
	            checkComplete();
	        }));
	    });
	}

	function switchAll() {
	    return switchMap(identity$2);
	}

	function switchMapTo(innerObservable, resultSelector) {
	    return isFunction(resultSelector) ? switchMap(function () { return innerObservable; }, resultSelector) : switchMap(function () { return innerObservable; });
	}

	function switchScan(accumulator, seed) {
	    return operate(function (source, subscriber) {
	        var state = seed;
	        switchMap(function (value, index) { return accumulator(state, value, index); }, function (_, innerValue) { return ((state = innerValue), innerValue); })(source).subscribe(subscriber);
	        return function () {
	            state = null;
	        };
	    });
	}

	function takeUntil(notifier) {
	    return operate(function (source, subscriber) {
	        innerFrom(notifier).subscribe(new OperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop));
	        !subscriber.closed && source.subscribe(subscriber);
	    });
	}

	function takeWhile(predicate, inclusive) {
	    if (inclusive === void 0) { inclusive = false; }
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var result = predicate(value, index++);
	            (result || inclusive) && subscriber.next(value);
	            !result && subscriber.complete();
	        }));
	    });
	}

	function tap(observerOrNext, error, complete) {
	    var tapObserver = isFunction(observerOrNext) || error || complete
	        ?
	            { next: observerOrNext, error: error, complete: complete }
	        : observerOrNext;
	    return tapObserver
	        ? operate(function (source, subscriber) {
	            var _a;
	            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	            var isUnsub = true;
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                var _a;
	                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
	                subscriber.next(value);
	            }, function () {
	                var _a;
	                isUnsub = false;
	                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	                subscriber.complete();
	            }, function (err) {
	                var _a;
	                isUnsub = false;
	                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
	                subscriber.error(err);
	            }, function () {
	                var _a, _b;
	                if (isUnsub) {
	                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	                }
	                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
	            }));
	        })
	        :
	            identity$2;
	}

	var defaultThrottleConfig = {
	    leading: true,
	    trailing: false,
	};
	function throttle(durationSelector, _a) {
	    var _b = _a === void 0 ? defaultThrottleConfig : _a, leading = _b.leading, trailing = _b.trailing;
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var sendValue = null;
	        var throttled = null;
	        var isComplete = false;
	        var endThrottling = function () {
	            throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
	            throttled = null;
	            if (trailing) {
	                send();
	                isComplete && subscriber.complete();
	            }
	        };
	        var cleanupThrottling = function () {
	            throttled = null;
	            isComplete && subscriber.complete();
	        };
	        var startThrottle = function (value) {
	            return (throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));
	        };
	        var send = function () {
	            if (hasValue) {
	                hasValue = false;
	                var value = sendValue;
	                sendValue = null;
	                subscriber.next(value);
	                !isComplete && startThrottle(value);
	            }
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            sendValue = value;
	            !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
	        }, function () {
	            isComplete = true;
	            !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
	        }));
	    });
	}

	function throttleTime(duration, scheduler, config) {
	    if (scheduler === void 0) { scheduler = asyncScheduler; }
	    if (config === void 0) { config = defaultThrottleConfig; }
	    var duration$ = timer(duration, scheduler);
	    return throttle(function () { return duration$; }, config);
	}

	function timeInterval(scheduler) {
	    if (scheduler === void 0) { scheduler = async; }
	    return function (source) {
	        return defer(function () {
	            return source.pipe(scan(function (_a, value) {
	                var current = _a.current;
	                return ({ value: value, current: scheduler.now(), last: current });
	            }, {
	                current: scheduler.now(),
	                value: undefined,
	                last: undefined,
	            }), map(function (_a) {
	                var current = _a.current, last = _a.last, value = _a.value;
	                return new TimeInterval(value, current - last);
	            }));
	        });
	    };
	}
	var TimeInterval = (function () {
	    function TimeInterval(value, interval) {
	        this.value = value;
	        this.interval = interval;
	    }
	    return TimeInterval;
	}());

	function timeoutWith(due, withObservable, scheduler) {
	    var first;
	    var each;
	    var _with;
	    scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async;
	    if (isValidDate(due)) {
	        first = due;
	    }
	    else if (typeof due === 'number') {
	        each = due;
	    }
	    if (withObservable) {
	        _with = function () { return withObservable; };
	    }
	    else {
	        throw new TypeError('No observable provided to switch to');
	    }
	    if (first == null && each == null) {
	        throw new TypeError('No timeout provided.');
	    }
	    return timeout({
	        first: first,
	        each: each,
	        scheduler: scheduler,
	        with: _with,
	    });
	}

	function timestamp(timestampProvider) {
	    if (timestampProvider === void 0) { timestampProvider = dateTimestampProvider; }
	    return map(function (value) { return ({ value: value, timestamp: timestampProvider.now() }); });
	}

	function window$1(windowBoundaries) {
	    return operate(function (source, subscriber) {
	        var windowSubject = new Subject();
	        subscriber.next(windowSubject.asObservable());
	        var errorHandler = function (err) {
	            windowSubject.error(err);
	            subscriber.error(err);
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value); }, function () {
	            windowSubject.complete();
	            subscriber.complete();
	        }, errorHandler));
	        windowBoundaries.subscribe(new OperatorSubscriber(subscriber, function () {
	            windowSubject.complete();
	            subscriber.next((windowSubject = new Subject()));
	        }, noop, errorHandler));
	        return function () {
	            windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
	            windowSubject = null;
	        };
	    });
	}

	function windowCount(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) { startWindowEvery = 0; }
	    var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
	    return operate(function (source, subscriber) {
	        var windows = [new Subject()];
	        var starts = [];
	        var count = 0;
	        subscriber.next(windows[0].asObservable());
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            try {
	                for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
	                    var window_1 = windows_1_1.value;
	                    window_1.next(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            var c = count - windowSize + 1;
	            if (c >= 0 && c % startEvery === 0) {
	                windows.shift().complete();
	            }
	            if (++count % startEvery === 0) {
	                var window_2 = new Subject();
	                windows.push(window_2);
	                subscriber.next(window_2.asObservable());
	            }
	        }, function () {
	            while (windows.length > 0) {
	                windows.shift().complete();
	            }
	            subscriber.complete();
	        }, function (err) {
	            while (windows.length > 0) {
	                windows.shift().error(err);
	            }
	            subscriber.error(err);
	        }, function () {
	            starts = null;
	            windows = null;
	        }));
	    });
	}

	function windowTime(windowTimeSpan) {
	    var _a, _b;
	    var otherArgs = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        otherArgs[_i - 1] = arguments[_i];
	    }
	    var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;
	    var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
	    var maxWindowSize = otherArgs[1] || Infinity;
	    return operate(function (source, subscriber) {
	        var windowRecords = [];
	        var restartOnClose = false;
	        var closeWindow = function (record) {
	            var window = record.window, subs = record.subs;
	            window.complete();
	            subs.unsubscribe();
	            arrRemove(windowRecords, record);
	            restartOnClose && startWindow();
	        };
	        var startWindow = function () {
	            if (windowRecords) {
	                var subs = new Subscription();
	                subscriber.add(subs);
	                var window_1 = new Subject();
	                var record_1 = {
	                    window: window_1,
	                    subs: subs,
	                    seen: 0,
	                };
	                windowRecords.push(record_1);
	                subscriber.next(window_1.asObservable());
	                subs.add(scheduler.schedule(function () { return closeWindow(record_1); }, windowTimeSpan));
	            }
	        };
	        windowCreationInterval !== null && windowCreationInterval >= 0
	            ?
	                subscriber.add(scheduler.schedule(function () {
	                    startWindow();
	                    !this.closed && subscriber.add(this.schedule(null, windowCreationInterval));
	                }, windowCreationInterval))
	            : (restartOnClose = true);
	        startWindow();
	        var loop = function (cb) { return windowRecords.slice().forEach(cb); };
	        var terminate = function (cb) {
	            loop(function (_a) {
	                var window = _a.window;
	                return cb(window);
	            });
	            cb(subscriber);
	            subscriber.unsubscribe();
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            loop(function (record) {
	                record.window.next(value);
	                maxWindowSize <= ++record.seen && closeWindow(record);
	            });
	        }, function () { return terminate(function (consumer) { return consumer.complete(); }); }, function (err) { return terminate(function (consumer) { return consumer.error(err); }); }));
	        return function () {
	            windowRecords = null;
	        };
	    });
	}

	function windowToggle(openings, closingSelector) {
	    return operate(function (source, subscriber) {
	        var windows = [];
	        var handleError = function (err) {
	            while (0 < windows.length) {
	                windows.shift().error(err);
	            }
	            subscriber.error(err);
	        };
	        innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {
	            var window = new Subject();
	            windows.push(window);
	            var closingSubscription = new Subscription();
	            var closeWindow = function () {
	                arrRemove(windows, window);
	                window.complete();
	                closingSubscription.unsubscribe();
	            };
	            var closingNotifier;
	            try {
	                closingNotifier = innerFrom(closingSelector(openValue));
	            }
	            catch (err) {
	                handleError(err);
	                return;
	            }
	            subscriber.next(window.asObservable());
	            closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber(subscriber, closeWindow, noop, handleError)));
	        }, noop));
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            var windowsCopy = windows.slice();
	            try {
	                for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
	                    var window_1 = windowsCopy_1_1.value;
	                    window_1.next(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (0 < windows.length) {
	                windows.shift().complete();
	            }
	            subscriber.complete();
	        }, handleError, function () {
	            while (0 < windows.length) {
	                windows.shift().unsubscribe();
	            }
	        }));
	    });
	}

	function windowWhen(closingSelector) {
	    return operate(function (source, subscriber) {
	        var window;
	        var closingSubscriber;
	        var handleError = function (err) {
	            window.error(err);
	            subscriber.error(err);
	        };
	        var openWindow = function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            window === null || window === void 0 ? void 0 : window.complete();
	            window = new Subject();
	            subscriber.next(window.asObservable());
	            var closingNotifier;
	            try {
	                closingNotifier = innerFrom(closingSelector());
	            }
	            catch (err) {
	                handleError(err);
	                return;
	            }
	            closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError)));
	        };
	        openWindow();
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return window.next(value); }, function () {
	            window.complete();
	            subscriber.complete();
	        }, handleError, function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            window = null;
	        }));
	    });
	}

	function withLatestFrom() {
	    var inputs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        inputs[_i] = arguments[_i];
	    }
	    var project = popResultSelector(inputs);
	    return operate(function (source, subscriber) {
	        var len = inputs.length;
	        var otherValues = new Array(len);
	        var hasValue = inputs.map(function () { return false; });
	        var ready = false;
	        var _loop_1 = function (i) {
	            innerFrom(inputs[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                otherValues[i] = value;
	                if (!ready && !hasValue[i]) {
	                    hasValue[i] = true;
	                    (ready = hasValue.every(identity$2)) && (hasValue = null);
	                }
	            }, noop));
	        };
	        for (var i = 0; i < len; i++) {
	            _loop_1(i);
	        }
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            if (ready) {
	                var values = __spreadArray([value], __read(otherValues));
	                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
	            }
	        }));
	    });
	}

	function zipAll(project) {
	    return joinAllInternals(zip$1, project);
	}

	function zip() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    return operate(function (source, subscriber) {
	        zip$1.apply(void 0, __spreadArray([source], __read(sources))).subscribe(subscriber);
	    });
	}

	function zipWith() {
	    var otherInputs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherInputs[_i] = arguments[_i];
	    }
	    return zip.apply(void 0, __spreadArray([], __read(otherInputs)));
	}

	var esm5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Observable: Observable,
		ConnectableObservable: ConnectableObservable,
		observable: observable,
		animationFrames: animationFrames,
		Subject: Subject,
		BehaviorSubject: BehaviorSubject,
		ReplaySubject: ReplaySubject,
		AsyncSubject: AsyncSubject,
		asap: asap,
		asapScheduler: asapScheduler,
		async: async,
		asyncScheduler: asyncScheduler,
		queue: queue,
		queueScheduler: queueScheduler,
		animationFrame: animationFrame,
		animationFrameScheduler: animationFrameScheduler,
		VirtualTimeScheduler: VirtualTimeScheduler,
		VirtualAction: VirtualAction,
		Scheduler: Scheduler,
		Subscription: Subscription,
		Subscriber: Subscriber,
		Notification: Notification,
		get NotificationKind () { return NotificationKind; },
		pipe: pipe,
		noop: noop,
		identity: identity$2,
		isObservable: isObservable,
		lastValueFrom: lastValueFrom,
		firstValueFrom: firstValueFrom,
		ArgumentOutOfRangeError: ArgumentOutOfRangeError,
		EmptyError: EmptyError,
		NotFoundError: NotFoundError,
		ObjectUnsubscribedError: ObjectUnsubscribedError,
		SequenceError: SequenceError,
		TimeoutError: TimeoutError,
		UnsubscriptionError: UnsubscriptionError,
		bindCallback: bindCallback,
		bindNodeCallback: bindNodeCallback,
		combineLatest: combineLatest$1,
		concat: concat$1,
		connectable: connectable,
		defer: defer,
		empty: empty$1,
		forkJoin: forkJoin,
		from: from,
		fromEvent: fromEvent,
		fromEventPattern: fromEventPattern,
		generate: generate,
		iif: iif,
		interval: interval,
		merge: merge$1,
		never: never,
		of: of,
		onErrorResumeNext: onErrorResumeNext,
		pairs: pairs,
		partition: partition,
		race: race,
		range: range,
		throwError: throwError,
		timer: timer,
		using: using,
		zip: zip$1,
		scheduled: scheduled,
		EMPTY: EMPTY,
		NEVER: NEVER,
		config: config,
		audit: audit,
		auditTime: auditTime,
		buffer: buffer,
		bufferCount: bufferCount,
		bufferTime: bufferTime,
		bufferToggle: bufferToggle,
		bufferWhen: bufferWhen,
		catchError: catchError,
		combineAll: combineAll,
		combineLatestAll: combineLatestAll,
		combineLatestWith: combineLatestWith,
		concatAll: concatAll,
		concatMap: concatMap,
		concatMapTo: concatMapTo,
		concatWith: concatWith,
		connect: connect,
		count: count,
		debounce: debounce,
		debounceTime: debounceTime,
		defaultIfEmpty: defaultIfEmpty,
		delay: delay,
		delayWhen: delayWhen,
		dematerialize: dematerialize,
		distinct: distinct,
		distinctUntilChanged: distinctUntilChanged,
		distinctUntilKeyChanged: distinctUntilKeyChanged,
		elementAt: elementAt,
		endWith: endWith,
		every: every,
		exhaust: exhaust,
		exhaustAll: exhaustAll,
		exhaustMap: exhaustMap,
		expand: expand,
		filter: filter,
		finalize: finalize,
		find: find,
		findIndex: findIndex,
		first: first,
		groupBy: groupBy,
		ignoreElements: ignoreElements,
		isEmpty: isEmpty,
		last: last,
		map: map,
		mapTo: mapTo,
		materialize: materialize,
		max: max,
		mergeAll: mergeAll,
		flatMap: flatMap,
		mergeMap: mergeMap,
		mergeMapTo: mergeMapTo,
		mergeScan: mergeScan,
		mergeWith: mergeWith,
		min: min,
		multicast: multicast,
		observeOn: observeOn,
		pairwise: pairwise,
		pluck: pluck,
		publish: publish,
		publishBehavior: publishBehavior,
		publishLast: publishLast,
		publishReplay: publishReplay,
		raceWith: raceWith,
		reduce: reduce,
		repeat: repeat,
		repeatWhen: repeatWhen,
		retry: retry,
		retryWhen: retryWhen,
		refCount: refCount,
		sample: sample,
		sampleTime: sampleTime,
		scan: scan,
		sequenceEqual: sequenceEqual,
		share: share,
		shareReplay: shareReplay,
		single: single,
		skip: skip,
		skipLast: skipLast,
		skipUntil: skipUntil,
		skipWhile: skipWhile,
		startWith: startWith,
		subscribeOn: subscribeOn,
		switchAll: switchAll,
		switchMap: switchMap,
		switchMapTo: switchMapTo,
		switchScan: switchScan,
		take: take,
		takeLast: takeLast,
		takeUntil: takeUntil,
		takeWhile: takeWhile,
		tap: tap,
		throttle: throttle,
		throttleTime: throttleTime,
		throwIfEmpty: throwIfEmpty,
		timeInterval: timeInterval,
		timeout: timeout,
		timeoutWith: timeoutWith,
		timestamp: timestamp,
		toArray: toArray,
		window: window$1,
		windowCount: windowCount,
		windowTime: windowTime,
		windowToggle: windowToggle,
		windowWhen: windowWhen,
		withLatestFrom: withLatestFrom,
		zipAll: zipAll,
		zipWith: zipWith
	});

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo2$1.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo$6.packageInfo]);

	var definitions$W = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const numberTypes = {
	  Fixed64: 'Int<64, Fixed64>',
	  FixedI64: 'Int<64, FixedI64>',
	  FixedU64: 'UInt<64, FixedU64>',
	  Fixed128: 'Int<128, Fixed128>',
	  FixedI128: 'Int<128, FixedI128>',
	  FixedU128: 'UInt<128, FixedU128>',
	  I32F32: 'Int<64, I32F32>',
	  U32F32: 'UInt<64, U32F32>',
	  PerU16: 'UInt<16, PerU16>',
	  Perbill: 'UInt<32, Perbill>',
	  Percent: 'UInt<8, Percent>',
	  Permill: 'UInt<32, Permill>',
	  Perquintill: 'UInt<64, Perquintill>'
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread({}, numberTypes), {}, {
	    AccountId: 'AccountId32',
	    AccountId20: 'GenericEthereumAccountId',
	    AccountId32: 'GenericAccountId',
	    AccountIdOf: 'AccountId',
	    AccountIndex: 'GenericAccountIndex',
	    Address: 'MultiAddress',
	    AssetId: 'u32',
	    Balance: 'UInt<128, Balance>',
	    BalanceOf: 'Balance',
	    Block: 'GenericBlock',
	    BlockNumber: 'u32',
	    BlockNumberFor: 'BlockNumber',
	    BlockNumberOf: 'BlockNumber',
	    Call: 'GenericCall',
	    CallHash: 'Hash',
	    CallHashOf: 'CallHash',
	    ChangesTrieConfiguration: {
	      digestInterval: 'u32',
	      digestLevels: 'u32'
	    },
	    ChangesTrieSignal: {
	      _enum: {
	        NewConfiguration: 'Option<ChangesTrieConfiguration>'
	      }
	    },
	    ConsensusEngineId: 'GenericConsensusEngineId',
	    CodecHash: 'Hash',
	    Digest: {
	      logs: 'Vec<DigestItem>'
	    },
	    DigestItem: {
	      _enum: {
	        Other: 'Bytes',
	        // 0
	        AuthoritiesChange: 'Vec<AuthorityId>',
	        // 1
	        ChangesTrieRoot: 'Hash',
	        // 2
	        SealV0: 'SealV0',
	        // 3
	        Consensus: 'Consensus',
	        // 4
	        Seal: 'Seal',
	        // 5
	        PreRuntime: 'PreRuntime',
	        // 6
	        ChangesTrieSignal: 'ChangesTrieSignal' // 7

	      }
	    },
	    ExtrinsicsWeight: {
	      normal: 'Weight',
	      operational: 'Weight'
	    },
	    H32: '[u8; 4; H32]',
	    H64: '[u8; 8; H64]',
	    H128: '[u8; 16; H128]',
	    H160: '[u8; 20; H160]',
	    H256: '[u8; 32; H256]',
	    H512: '[u8; 64; H512]',
	    H1024: '[u8; 128; H1024]',
	    H2048: '[u8; 256; H2048]',
	    Hash: 'H256',
	    Header: {
	      parentHash: 'Hash',
	      number: 'Compact<BlockNumber>',
	      stateRoot: 'Hash',
	      extrinsicsRoot: 'Hash',
	      digest: 'Digest'
	    },
	    HeaderPartial: {
	      parentHash: 'Hash',
	      // since we only parse JSON with this, having non-compact works
	      number: 'BlockNumber'
	    },
	    IndicesLookupSource: 'GenericLookupSource',
	    Index: 'u32',
	    Justification: '(ConsensusEngineId, EncodedJustification)',
	    EncodedJustification: 'Bytes',
	    Justifications: 'Vec<Justification>',
	    KeyValue: '(StorageKey, StorageData)',
	    KeyTypeId: 'u32',
	    LockIdentifier: '[u8; 8]',
	    LookupSource: 'MultiAddress',
	    LookupTarget: 'AccountId',
	    ModuleId: 'LockIdentifier',
	    MultiAddress: 'GenericMultiAddress',
	    MultiSigner: {
	      _enum: {
	        Ed25519: '[u8; 32]',
	        Sr25519: '[u8; 32]',
	        Ecdsa: '[u8; 33]'
	      }
	    },
	    Moment: 'UInt<64, Moment>',
	    OpaqueCall: 'Bytes',
	    Origin: 'DoNotConstruct<Origin>',
	    OriginCaller: {
	      _enum: {
	        // this should be dynamically built from the actual modules, based on index
	        System: 'SystemOrigin'
	      }
	    },
	    PalletId: 'LockIdentifier',
	    PalletsOrigin: 'OriginCaller',
	    PalletVersion: {
	      major: 'u16',
	      minor: 'u8',
	      patch: 'u8'
	    },
	    Pays: {
	      _enum: ['Yes', 'No']
	    },
	    Phantom: 'Null',
	    PhantomData: 'Null',
	    Releases: {
	      _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
	    },
	    RuntimeDbWeight: {
	      read: 'Weight',
	      write: 'Weight'
	    },
	    SignedBlock: 'SignedBlockWithJustifications',
	    SignedBlockWithJustification: {
	      block: 'Block',
	      justification: 'Option<EncodedJustification>'
	    },
	    SignedBlockWithJustifications: {
	      block: 'Block',
	      justifications: 'Option<Justifications>'
	    },
	    Slot: 'u64',
	    StorageData: 'Bytes',
	    StorageProof: {
	      trieNodes: 'Vec<Bytes>'
	    },
	    TransactionPriority: 'u64',
	    TransactionInfo: {
	      _alias: {
	        dataSize: 'size'
	      },
	      chunkRoot: 'H256',
	      contentHash: 'H256',
	      dataSize: 'u32',
	      blockChunks: 'u32'
	    },
	    TransactionStorageProof: {
	      chunk: 'Vec<u8>',
	      proof: 'Vec<Vec<u8>>'
	    },
	    ValidatorId: 'AccountId',
	    ValidatorIdOf: 'ValidatorId',
	    Weight: 'u64',
	    WeightMultiplier: 'Fixed64',
	    // digest
	    PreRuntime: '(ConsensusEngineId, Bytes)',
	    SealV0: '(u64, Signature)',
	    Seal: '(ConsensusEngineId, Bytes)',
	    Consensus: '(ConsensusEngineId, Bytes)'
	  })
	};
	exports.default = _default;
	});

	var definitions$V = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    AssetApprovalKey: {
	      owner: 'AccountId',
	      delegate: 'AccountId'
	    },
	    AssetApproval: {
	      amount: 'TAssetBalance',
	      deposit: 'TAssetDepositBalance'
	    },
	    AssetBalance: {
	      balance: 'TAssetBalance',
	      isFrozen: 'bool',
	      isSufficient: 'bool'
	    },
	    AssetDestroyWitness: {
	      accounts: 'Compact<u32>',
	      sufficients: 'Compact<u32>',
	      approvals: 'Compact<u32>'
	    },
	    AssetDetails: {
	      owner: 'AccountId',
	      issuer: 'AccountId',
	      admin: 'AccountId',
	      freezer: 'AccountId',
	      supply: 'TAssetBalance',
	      deposit: 'TAssetDepositBalance',
	      minBalance: 'TAssetBalance',
	      isSufficient: 'bool',
	      accounts: 'u32',
	      sufficients: 'u32',
	      approvals: 'u32',
	      isFrozen: 'bool'
	    },
	    AssetMetadata: {
	      deposit: 'TAssetDepositBalance',
	      name: 'Vec<u8>',
	      symbol: 'Vec<u8>',
	      decimals: 'u8',
	      isFrozen: 'bool'
	    },
	    TAssetBalance: 'u64',
	    TAssetDepositBalance: 'BalanceOf'
	  }
	};
	exports.default = _default;
	});

	var definitions$U = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    UncleEntryItem: {
	      _enum: {
	        InclusionHeight: 'BlockNumber',
	        Uncle: '(Hash, Option<AccountId>)'
	      }
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$T = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    RawAuraPreDigest: {
	      slotNumber: 'u64'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$S = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    epochAuthorship: {
	      description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
	      params: [],
	      type: 'HashMap<AuthorityId, EpochAuthorship>'
	    }
	  },
	  types: {
	    AllowedSlots: {
	      _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
	    },
	    BabeAuthorityWeight: 'u64',
	    BabeEpochConfiguration: {
	      c: '(u64, u64)',
	      allowedSlots: 'AllowedSlots'
	    },
	    BabeBlockWeight: 'u32',
	    BabeEquivocationProof: {
	      offender: 'AuthorityId',
	      slotNumber: 'SlotNumber',
	      firstHeader: 'Header',
	      secondHeader: 'Header'
	    },
	    BabeWeight: 'u64',
	    MaybeRandomness: 'Option<Randomness>',
	    MaybeVrf: 'Option<VrfData>',
	    EpochAuthorship: {
	      primary: 'Vec<u64>',
	      secondary: 'Vec<u64>',
	      secondary_vrf: 'Vec<u64>'
	    },
	    NextConfigDescriptor: {
	      _enum: {
	        V0: 'Null',
	        V1: 'NextConfigDescriptorV1'
	      }
	    },
	    NextConfigDescriptorV1: {
	      c: '(u64, u64)',
	      allowedSlots: 'AllowedSlots'
	    },
	    Randomness: 'Hash',
	    RawBabePreDigest: {
	      _enum: {
	        Phantom: 'Null',
	        // index starts at 1... empty slot at 0
	        Primary: 'RawBabePreDigestPrimary',
	        SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
	        SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
	      }
	    },
	    RawBabePreDigestPrimary: {
	      authorityIndex: 'u32',
	      // AuthorityIndex (also in aura)
	      slotNumber: 'SlotNumber',
	      vrfOutput: 'VrfOutput',
	      vrfProof: 'VrfProof'
	    },
	    RawBabePreDigestSecondaryPlain: {
	      authorityIndex: 'u32',
	      // AuthorityIndex (also in aura)
	      slotNumber: 'SlotNumber'
	    },
	    RawBabePreDigestSecondaryVRF: {
	      authorityIndex: 'u32',
	      slotNumber: 'SlotNumber',
	      vrfOutput: 'VrfOutput',
	      vrfProof: 'VrfProof'
	    },
	    RawBabePreDigestTo159: {
	      _enum: {
	        Primary: 'RawBabePreDigestPrimaryTo159',
	        Secondary: 'RawBabePreDigestSecondaryTo159'
	      }
	    },
	    RawBabePreDigestPrimaryTo159: {
	      authorityIndex: 'u32',
	      slotNumber: 'SlotNumber',
	      weight: 'BabeBlockWeight',
	      vrfOutput: 'VrfOutput',
	      vrfProof: 'VrfProof'
	    },
	    RawBabePreDigestSecondaryTo159: {
	      authorityIndex: 'u32',
	      slotNumber: 'SlotNumber',
	      weight: 'BabeBlockWeight'
	    },
	    // a cross old/new compatible version of the digest, that is _only_ useful
	    // for partial parsing and extraction of the author. This assumes that all
	    // entries has the authorityIndex in the first position - and that it is all
	    // we are interested in
	    RawBabePreDigestCompat: {
	      _enum: {
	        Zero: 'u32',
	        One: 'u32',
	        Two: 'u32',
	        Three: 'u32'
	      }
	    },
	    SlotNumber: 'u64',
	    VrfData: '[u8; 32]',
	    VrfOutput: '[u8; 32]',
	    VrfProof: '[u8; 64]'
	  }
	};
	exports.default = _default;
	});

	var definitions$R = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    AccountData: {
	      free: 'Balance',
	      reserved: 'Balance',
	      miscFrozen: 'Balance',
	      feeFrozen: 'Balance'
	    },
	    BalanceLockTo212: {
	      id: 'LockIdentifier',
	      amount: 'Balance',
	      until: 'BlockNumber',
	      reasons: 'WithdrawReasons'
	    },
	    BalanceLock: {
	      id: 'LockIdentifier',
	      amount: 'Balance',
	      reasons: 'Reasons'
	    },
	    BalanceStatus: {
	      _enum: ['Free', 'Reserved']
	    },
	    Reasons: {
	      _enum: ['Fee', 'Misc', 'All']
	    },
	    ReserveData: {
	      id: 'ReserveIdentifier',
	      amount: 'Balance'
	    },
	    ReserveIdentifier: '[u8; 8]',
	    VestingSchedule: {
	      offset: 'Balance',
	      perBlock: 'Balance',
	      startingBlock: 'BlockNumber'
	    },
	    WithdrawReasons: {
	      _set: {
	        TransactionPayment: 0b00000001,
	        Transfer: 0b00000010,
	        Reserve: 0b00000100,
	        Fee: 0b00001000,
	        Tip: 0b00010000
	      }
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$Q = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    subscribeJustifications: {
	      description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
	      params: [],
	      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
	      type: 'BeefySignedCommitment'
	    }
	  },
	  types: {
	    BeefyCommitment: {
	      payload: 'BeefyPayload',
	      blockNumber: 'BlockNumber',
	      validatorSetId: 'ValidatorSetId'
	    },
	    BeefyId: '[u8; 33]',
	    BeefySignedCommitment: {
	      commitment: 'BeefyCommitment',
	      signatures: 'Vec<Option<Signature>>'
	    },
	    BeefyNextAuthoritySet: {
	      id: 'u64',
	      len: 'u32',
	      root: 'H256'
	    },
	    BeefyPayload: 'MmrRootHash',
	    MmrRootHash: 'H256',
	    ValidatorSetId: 'u64'
	  }
	};
	exports.default = _default;
	});

	var definitions$P = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    CollectiveOrigin: {
	      _enum: {
	        Members: '(MemberCount, MemberCount)',
	        Member: 'AccountId'
	      }
	    },
	    MemberCount: 'u32',
	    ProposalIndex: 'u32',
	    VotesTo230: {
	      index: 'ProposalIndex',
	      threshold: 'MemberCount',
	      ayes: 'Vec<AccountId>',
	      nays: 'Vec<AccountId>'
	    },
	    Votes: {
	      index: 'ProposalIndex',
	      threshold: 'MemberCount',
	      ayes: 'Vec<AccountId>',
	      nays: 'Vec<AccountId>',
	      end: 'BlockNumber'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$O = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    AuthorityId: 'AccountId',
	    RawVRFOutput: '[u8; 32]'
	  }
	};
	exports.default = _default;
	});

	var definitions$N = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    call: {
	      description: 'Executes a call to a contract',
	      params: [{
	        name: 'callRequest',
	        type: 'ContractCallRequest'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'ContractExecResult'
	    },
	    instantiate: {
	      description: 'Instantiate a new contract',
	      params: [{
	        name: 'request',
	        type: 'InstantiateRequest'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHstoric: true,
	        isOptional: true
	      }],
	      type: 'ContractInstantiateResult'
	    },
	    getStorage: {
	      description: 'Returns the value under a specified storage key in a contract',
	      params: [{
	        name: 'address',
	        type: 'AccountId'
	      }, {
	        name: 'key',
	        type: 'H256'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Option<Bytes>'
	    },
	    rentProjection: {
	      description: 'Returns the projected time a given contract will be able to sustain paying its rent',
	      params: [{
	        name: 'address',
	        type: 'AccountId'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Option<BlockNumber>'
	    }
	  },
	  types: {
	    AliveContractInfo: {
	      trieId: 'TrieId',
	      storageSize: 'u32',
	      pairCount: 'u32',
	      codeHash: 'CodeHash',
	      rentAllowance: 'Balance',
	      rentPaid: 'Balance',
	      deductBlock: 'BlockNumber',
	      lastWrite: 'Option<BlockNumber>',
	      _reserved: 'Option<Null>'
	    },
	    CodeHash: 'Hash',
	    ContractCallRequest: {
	      origin: 'AccountId',
	      dest: 'AccountId',
	      value: 'Balance',
	      gasLimit: 'u64',
	      inputData: 'Bytes'
	    },
	    ContractExecResultSuccessTo255: {
	      status: 'u8',
	      data: 'Raw'
	    },
	    ContractExecResultTo255: {
	      _enum: {
	        Success: 'ContractExecResultSuccessTo255',
	        Error: 'Null'
	      }
	    },
	    ContractExecResultSuccessTo260: {
	      flags: 'u32',
	      data: 'Bytes',
	      gasConsumed: 'u64'
	    },
	    ContractExecResultTo260: {
	      _enum: {
	        Success: 'ContractExecResultSuccessTo260',
	        Error: 'Null'
	      }
	    },
	    ContractExecResultErrModule: {
	      index: 'u8',
	      error: 'u8',
	      message: 'Option<Text>'
	    },
	    ContractExecResultErr: {
	      _enum: {
	        Other: 'Text',
	        CannotLookup: 'Null',
	        BadOrigin: 'Null',
	        Module: 'ContractExecResultErrModule'
	      }
	    },
	    ContractExecResultOk: {
	      flags: 'u32',
	      data: 'Bytes'
	    },
	    ContractExecResultResult: {
	      _enum: {
	        Ok: 'ContractExecResultOk',
	        Err: 'ContractExecResultErr'
	      }
	    },
	    ContractExecResultTo267: {
	      gasConsumed: 'u64',
	      debugMessage: 'Text',
	      result: 'ContractExecResultResult'
	    },
	    ContractExecResult: {
	      gasConsumed: 'u64',
	      gasRequired: 'u64',
	      debugMessage: 'Text',
	      result: 'ContractExecResultResult'
	    },
	    ContractInfo: {
	      _enum: {
	        Alive: 'AliveContractInfo',
	        Tombstone: 'TombstoneContractInfo'
	      }
	    },
	    ContractStorageKey: '[u8; 32]',
	    DeletedContract: {
	      pairCount: 'u32',
	      trieId: 'TrieId'
	    },
	    ExecReturnValue: {
	      flags: 'u32',
	      data: 'Bytes'
	    },
	    Gas: 'u64',
	    HostFnWeightsTo264: {
	      caller: 'Weight',
	      address: 'Weight',
	      gasLeft: 'Weight',
	      balance: 'Weight',
	      valueTransferred: 'Weight',
	      minimumBalance: 'Weight',
	      tombstoneDeposit: 'Weight',
	      rentAllowance: 'Weight',
	      blockNumber: 'Weight',
	      now: 'Weight',
	      weightToFee: 'Weight',
	      gas: 'Weight',
	      input: 'Weight',
	      inputPerByte: 'Weight',
	      return: 'Weight',
	      returnPerByte: 'Weight',
	      terminate: 'Weight',
	      restoreTo: 'Weight',
	      restoreToPerDelta: 'Weight',
	      random: 'Weight',
	      depositEvent: 'Weight',
	      depositEventPerTopic: 'Weight',
	      depositEventPerByte: 'Weight',
	      setRentAllowance: 'Weight',
	      setStorage: 'Weight',
	      setStoragePerByte: 'Weight',
	      clearStorage: 'Weight',
	      getStorage: 'Weight',
	      getStoragePerByte: 'Weight',
	      transfer: 'Weight',
	      call: 'Weight',
	      callTransferSurcharge: 'Weight',
	      callPerInputByte: 'Weight',
	      callPerOutputByte: 'Weight',
	      instantiate: 'Weight',
	      instantiatePerInputByte: 'Weight',
	      instantiatePerOutputByte: 'Weight',
	      hashSha2256: 'Weight',
	      hashSha2256PerByte: 'Weight',
	      hashKeccak256: 'Weight',
	      hashKeccak256PerByte: 'Weight',
	      hashBlake2256: 'Weight',
	      hashBlake2256PerByte: 'Weight',
	      hashBlake2128: 'Weight',
	      hashBlake2128PerByte: 'Weight'
	    },
	    HostFnWeights: {
	      caller: 'Weight',
	      address: 'Weight',
	      gasLeft: 'Weight',
	      balance: 'Weight',
	      valueTransferred: 'Weight',
	      minimumBalance: 'Weight',
	      tombstoneDeposit: 'Weight',
	      rentAllowance: 'Weight',
	      blockNumber: 'Weight',
	      now: 'Weight',
	      weightToFee: 'Weight',
	      gas: 'Weight',
	      input: 'Weight',
	      inputPerByte: 'Weight',
	      return: 'Weight',
	      returnPerByte: 'Weight',
	      terminate: 'Weight',
	      terminatePerCodeByte: 'Weight',
	      restoreTo: 'Weight',
	      restoreToPerCallerCodeByte: 'Weight',
	      restoreToPerTombstoneCodeByte: 'Weight',
	      restoreToPerDelta: 'Weight',
	      random: 'Weight',
	      depositEvent: 'Weight',
	      depositEventPerTopic: 'Weight',
	      depositEventPerByte: 'Weight',
	      setRentAllowance: 'Weight',
	      setStorage: 'Weight',
	      setStoragePerByte: 'Weight',
	      clearStorage: 'Weight',
	      getStorage: 'Weight',
	      getStoragePerByte: 'Weight',
	      transfer: 'Weight',
	      call: 'Weight',
	      callPerCodeByte: 'Weight',
	      callTransferSurcharge: 'Weight',
	      callPerInputByte: 'Weight',
	      callPerOutputByte: 'Weight',
	      instantiate: 'Weight',
	      instantiatePerCodeByte: 'Weight',
	      instantiatePerInputByte: 'Weight',
	      instantiatePerOutputByte: 'Weight',
	      instantiatePerSaltByte: 'Weight',
	      hashSha2256: 'Weight',
	      hashSha2256PerByte: 'Weight',
	      hashKeccak256: 'Weight',
	      hashKeccak256PerByte: 'Weight',
	      hashBlake2256: 'Weight',
	      hashBlake2256PerByte: 'Weight',
	      hashBlake2128: 'Weight',
	      hashBlake2128PerByte: 'Weight',
	      rentParams: 'Weight'
	    },
	    InstantiateRequest: {
	      origin: 'AccountId',
	      endowment: 'Balance',
	      gasLimit: 'Gas',
	      code: 'Bytes',
	      data: 'Bytes',
	      salt: 'Bytes'
	    },
	    ContractInstantiateResult: {
	      _enum: {
	        Ok: 'InstantiateReturnValue',
	        Err: 'Null'
	      }
	    },
	    InstantiateReturnValue: {
	      result: 'ExecReturnValue',
	      accountId: 'AccountId',
	      rentProjection: 'Option<RentProjection>'
	    },
	    InstructionWeights: {
	      i64const: 'u32',
	      i64load: 'u32',
	      i64store: 'u32',
	      select: 'u32',
	      rIf: 'u32',
	      br: 'u32',
	      brIf: 'u32',
	      brIable: 'u32',
	      brIablePerEntry: 'u32',
	      call: 'u32',
	      callIndirect: 'u32',
	      callIndirectPerParam: 'u32',
	      localGet: 'u32',
	      localSet: 'u32',
	      local_tee: 'u32',
	      globalGet: 'u32',
	      globalSet: 'u32',
	      memoryCurrent: 'u32',
	      memoryGrow: 'u32',
	      i64clz: 'u32',
	      i64ctz: 'u32',
	      i64popcnt: 'u32',
	      i64eqz: 'u32',
	      i64extendsi32: 'u32',
	      i64extendui32: 'u32',
	      i32wrapi64: 'u32',
	      i64eq: 'u32',
	      i64ne: 'u32',
	      i64lts: 'u32',
	      i64ltu: 'u32',
	      i64gts: 'u32',
	      i64gtu: 'u32',
	      i64les: 'u32',
	      i64leu: 'u32',
	      i64ges: 'u32',
	      i64geu: 'u32',
	      i64add: 'u32',
	      i64sub: 'u32',
	      i64mul: 'u32',
	      i64divs: 'u32',
	      i64divu: 'u32',
	      i64rems: 'u32',
	      i64remu: 'u32',
	      i64and: 'u32',
	      i64or: 'u32',
	      i64xor: 'u32',
	      i64shl: 'u32',
	      i64shrs: 'u32',
	      i64shru: 'u32',
	      i64rotl: 'u32',
	      i64rotr: 'u32'
	    },
	    LimitsTo264: {
	      eventTopics: 'u32',
	      stackHeight: 'u32',
	      globals: 'u32',
	      parameters: 'u32',
	      memoryPages: 'u32',
	      tableSize: 'u32',
	      brTableSize: 'u32',
	      subjectLen: 'u32',
	      codeSize: 'u32'
	    },
	    Limits: {
	      eventTopics: 'u32',
	      stackHeight: 'u32',
	      globals: 'u32',
	      parameters: 'u32',
	      memoryPages: 'u32',
	      tableSize: 'u32',
	      brTableSize: 'u32',
	      subjectLen: 'u32'
	    },
	    PrefabWasmModule: {
	      scheduleVersion: 'Compact<u32>',
	      initial: 'Compact<u32>',
	      maximum: 'Compact<u32>',
	      refcount: 'Compact<u64>',
	      _reserved: 'Option<Null>',
	      code: 'Bytes',
	      originalCodeLen: 'u32'
	    },
	    RentProjection: {
	      _enum: {
	        EvictionAt: 'BlockNumber',
	        NoEviction: 'Null'
	      }
	    },
	    ScheduleTo212: {
	      version: 'u32',
	      putCodePerByteCost: 'Gas',
	      growMemCost: 'Gas',
	      regularOpCost: 'Gas',
	      returnDataPerByteCost: 'Gas',
	      eventDataPerByteCost: 'Gas',
	      eventPerTopicCost: 'Gas',
	      eventBaseCost: 'Gas',
	      sandboxDataReadCost: 'Gas',
	      sandboxDataWriteCost: 'Gas',
	      maxEventTopics: 'u32',
	      maxStackHeight: 'u32',
	      maxMemoryPages: 'u32',
	      enablePrintln: 'bool',
	      maxSubjectLen: 'u32'
	    },
	    ScheduleTo258: {
	      version: 'u32',
	      putCodePerByteCost: 'Gas',
	      growMemCost: 'Gas',
	      regularOpCost: 'Gas',
	      returnDataPerByteCost: 'Gas',
	      eventDataPerByteCost: 'Gas',
	      eventPerTopicCost: 'Gas',
	      eventBaseCost: 'Gas',
	      sandboxDataReadCost: 'Gas',
	      sandboxDataWriteCost: 'Gas',
	      transferCost: 'Gas',
	      maxEventTopics: 'u32',
	      maxStackHeight: 'u32',
	      maxMemoryPages: 'u32',
	      enablePrintln: 'bool',
	      maxSubjectLen: 'u32'
	    },
	    ScheduleTo264: {
	      version: 'u32',
	      enablePrintln: 'bool',
	      limits: 'LimitsTo264',
	      instructionWeights: 'InstructionWeights',
	      hostFnWeights: 'HostFnWeightsTo264'
	    },
	    Schedule: {
	      version: 'u32',
	      enablePrintln: 'bool',
	      limits: 'Limits',
	      instructionWeights: 'InstructionWeights',
	      hostFnWeights: 'HostFnWeights'
	    },
	    SeedOf: 'Hash',
	    TombstoneContractInfo: 'Hash',
	    TrieId: 'Bytes'
	  }
	};
	exports.default = _default;
	});

	var definitions$M = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.AllConvictions = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const AllConvictions = [// 0.1x votes, unlocked.
	'None', // 1x votes, locked for an enactment period following a successful vote.
	'Locked1x', // 2x votes, locked for 2x enactment periods following a successful vote.
	'Locked2x', // 3x votes, locked for 4x...
	'Locked3x', // 4x votes, locked for 8x...
	'Locked4x', // 5x votes, locked for 16x...
	'Locked5x', /// 6x votes, locked for 32x...
	'Locked6x'];
	exports.AllConvictions = AllConvictions;
	var _default = {
	  rpc: {},
	  types: {
	    AccountVote: {
	      _enum: {
	        Standard: 'AccountVoteStandard',
	        Split: 'AccountVoteSplit'
	      }
	    },
	    AccountVoteSplit: {
	      aye: 'Balance',
	      nay: 'Balance'
	    },
	    AccountVoteStandard: {
	      vote: 'Vote',
	      balance: 'Balance'
	    },
	    Conviction: {
	      _enum: AllConvictions
	    },
	    Delegations: {
	      votes: 'Balance',
	      capital: 'Balance'
	    },
	    PreimageStatus: {
	      _enum: {
	        Missing: 'BlockNumber',
	        Available: 'PreimageStatusAvailable'
	      }
	    },
	    PreimageStatusAvailable: {
	      data: 'Bytes',
	      provider: 'AccountId',
	      deposit: 'Balance',
	      since: 'BlockNumber',
	      expiry: 'Option<BlockNumber>'
	    },
	    PriorLock: '(BlockNumber, Balance)',
	    PropIndex: 'u32',
	    Proposal: 'Call',
	    ProxyState: {
	      _enum: {
	        Open: 'AccountId',
	        Active: 'AccountId'
	      }
	    },
	    ReferendumIndex: 'u32',
	    ReferendumInfoTo239: {
	      end: 'BlockNumber',
	      proposalHash: 'Hash',
	      threshold: 'VoteThreshold',
	      delay: 'BlockNumber'
	    },
	    ReferendumInfo: {
	      _enum: {
	        Ongoing: 'ReferendumStatus',
	        Finished: 'ReferendumInfoFinished'
	      }
	    },
	    ReferendumInfoFinished: {
	      approved: 'bool',
	      end: 'BlockNumber'
	    },
	    ReferendumStatus: {
	      end: 'BlockNumber',
	      proposalHash: 'Hash',
	      threshold: 'VoteThreshold',
	      delay: 'BlockNumber',
	      tally: 'Tally'
	    },
	    Tally: {
	      ayes: 'Balance',
	      nays: 'Balance',
	      turnout: 'Balance'
	    },
	    Voting: {
	      _enum: {
	        Direct: 'VotingDirect',
	        Delegating: 'VotingDelegating'
	      }
	    },
	    VotingDirect: {
	      votes: 'Vec<VotingDirectVote>',
	      delegations: 'Delegations',
	      prior: 'PriorLock'
	    },
	    VotingDirectVote: '(ReferendumIndex, AccountVote)',
	    VotingDelegating: {
	      balance: 'Balance',
	      target: 'AccountId',
	      conviction: 'Conviction',
	      delegations: 'Delegations',
	      prior: 'PriorLock'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$L = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    ApprovalFlag: 'u32',
	    DefunctVoter: {
	      who: 'AccountId',
	      voteCount: 'Compact<u32>',
	      candidateCount: 'Compact<u32>'
	    },
	    Renouncing: {
	      _enum: {
	        Member: 'Null',
	        RunnerUp: 'Null',
	        Candidate: 'Compact<u32>'
	      }
	    },
	    SetIndex: 'u32',
	    Vote: 'GenericVote',
	    VoteIndex: 'u32',
	    VoterInfo: {
	      lastActive: 'VoteIndex',
	      lastWin: 'VoteIndex',
	      pot: 'Balance',
	      stake: 'Balance'
	    },
	    VoteThreshold: {
	      _enum: ['Super majority approval', 'Super majority rejection', 'Simple majority']
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$K = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    createBlock: {
	      description: 'Instructs the manual-seal authorship task to create a new block',
	      params: [{
	        name: 'createEmpty',
	        type: 'bool'
	      }, {
	        name: 'finalize',
	        type: 'bool'
	      }, {
	        name: 'parentHash',
	        type: 'BlockHash',
	        isOptional: true
	      }],
	      type: 'CreatedBlock'
	    },
	    finalizeBlock: {
	      description: 'Instructs the manual-seal authorship task to finalize a block',
	      params: [{
	        name: 'hash',
	        type: 'BlockHash'
	      }, {
	        name: 'justification',
	        type: 'Justification',
	        isOptional: true
	      }],
	      type: 'bool'
	    }
	  },
	  types: {
	    CreatedBlock: {
	      hash: 'BlockHash',
	      aux: 'ImportedAux'
	    },
	    ImportedAux: {
	      headerOnly: 'bool',
	      clearJustificationRequests: 'bool',
	      needsJustification: 'bool',
	      badJustification: 'bool',
	      needsFinalityProof: 'bool',
	      isNewBest: 'bool'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$J = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    EvmAccount: {
	      nonce: 'u256',
	      balance: 'u256'
	    },
	    EvmLog: {
	      address: 'H160',
	      topics: 'Vec<H256>',
	      data: 'Bytes'
	    },
	    EvmVicinity: {
	      gasPrice: 'u256',
	      origin: 'H160'
	    },
	    ExitError: {
	      _enum: {
	        StackUnderflow: 'Null',
	        StackOverflow: 'Null',
	        InvalidJump: 'Null',
	        InvalidRange: 'Null',
	        DesignatedInvalid: 'Null',
	        CallTooDeep: 'Null',
	        CreateCollision: 'Null',
	        CreateContractLimit: 'Null',
	        OutOfOffset: 'Null',
	        OutOfGas: 'Null',
	        OutOfFund: 'Null',
	        PCUnderflow: 'Null',
	        CreateEmpty: 'Null',
	        Other: 'Text'
	      }
	    },
	    ExitFatal: {
	      _enum: {
	        NotSupported: 'Null',
	        UnhandledInterrupt: 'Null',
	        CallErrorAsFatal: 'ExitError',
	        Other: 'Text'
	      }
	    },
	    ExitReason: {
	      _enum: {
	        Succeed: 'ExitSucceed',
	        Error: 'ExitError',
	        Revert: 'ExitRevert',
	        Fatal: 'ExitFatal'
	      }
	    },
	    ExitRevert: {
	      _enum: ['Reverted']
	    },
	    ExitSucceed: {
	      _enum: ['Stopped', 'Returned', 'Suicided']
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$I = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    Extrinsic: 'GenericExtrinsic',
	    ExtrinsicEra: 'GenericExtrinsicEra',
	    ExtrinsicPayload: 'GenericExtrinsicPayload',
	    ExtrinsicSignature: 'MultiSignature',
	    ExtrinsicV4: 'GenericExtrinsicV4',
	    ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
	    ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
	    ExtrinsicUnknown: 'GenericExtrinsicUnknown',
	    ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
	    // eras
	    Era: 'ExtrinsicEra',
	    ImmortalEra: 'GenericImmortalEra',
	    MortalEra: 'GenericMortalEra',
	    // signatures & signer
	    AnySignature: 'H512',
	    MultiSignature: {
	      _enum: {
	        Ed25519: 'Ed25519Signature',
	        Sr25519: 'Sr25519Signature',
	        Ecdsa: 'EcdsaSignature'
	      }
	    },
	    Signature: 'H512',
	    SignerPayload: 'GenericSignerPayload',
	    EcdsaSignature: '[u8; 65]',
	    Ed25519Signature: 'H512',
	    Sr25519Signature: 'H512'
	  }
	};
	exports.default = _default;
	});

	var definitions$H = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    AssetOptions: {
	      initalIssuance: 'Compact<Balance>',
	      permissions: 'PermissionLatest'
	    },
	    Owner: {
	      _enum: {
	        None: 'Null',
	        Address: 'AccountId'
	      }
	    },
	    PermissionsV1: {
	      update: 'Owner',
	      mint: 'Owner',
	      burn: 'Owner'
	    },
	    PermissionVersions: {
	      _enum: {
	        V1: 'PermissionsV1'
	      }
	    },
	    PermissionLatest: 'PermissionsV1'
	  }
	};
	exports.default = _default;
	});

	var definitions$G = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    ActiveGilt: {
	      proportion: 'Perquintill',
	      amount: 'Balance',
	      who: 'AccountId',
	      expiry: 'BlockNumber'
	    },
	    ActiveGiltsTotal: {
	      frozen: 'Balance',
	      proportion: 'Perquintill',
	      index: 'ActiveIndex',
	      target: 'Perquintill'
	    },
	    ActiveIndex: 'u32',
	    GiltBid: {
	      amount: 'Balance',
	      who: 'AccountId'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$F = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    proveFinality: {
	      description: 'Prove finality for the range (begin; end] hash.',
	      params: [{
	        name: 'begin',
	        type: 'BlockHash'
	      }, {
	        name: 'end',
	        type: 'BlockHash'
	      }, {
	        name: 'authoritiesSetId',
	        type: 'u64',
	        isOptional: true
	      }],
	      type: 'Option<EncodedFinalityProofs>'
	    },
	    roundState: {
	      description: 'Returns the state of the current best round state as well as the ongoing background rounds',
	      params: [],
	      type: 'ReportedRoundStates'
	    },
	    subscribeJustifications: {
	      description: 'Subscribes to grandpa justifications',
	      params: [],
	      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
	      type: 'JustificationNotification'
	    }
	  },
	  types: {
	    AuthorityIndex: 'u64',
	    AuthorityList: 'Vec<NextAuthority>',
	    AuthoritySet: {
	      currentAuthorities: 'AuthorityList',
	      setId: 'u64',
	      pendingStandardChanges: 'ForkTreePendingChange',
	      pendingForcedChanges: 'Vec<PendingChange>',
	      authoritySetChanges: 'AuthoritySetChanges'
	    },
	    ForkTreePendingChange: {
	      roots: 'Vec<ForkTreePendingChangeNode>',
	      bestFinalizedNumber: 'Option<BlockNumber>'
	    },
	    ForkTreePendingChangeNode: {
	      hash: 'BlockHash',
	      number: 'BlockNumber',
	      data: 'PendingChange',
	      // actual data, here PendingChange
	      children: 'Vec<ForkTreePendingChangeNode>'
	    },
	    AuthoritySetChange: '(U64, BlockNumber)',
	    AuthoritySetChanges: 'Vec<AuthoritySetChange>',
	    AuthorityWeight: 'u64',
	    DelayKind: {
	      _enum: {
	        Finalized: 'Null',
	        Best: 'DelayKindBest'
	      }
	    },
	    DelayKindBest: {
	      medianLastFinalized: 'BlockNumber'
	    },
	    EncodedFinalityProofs: 'Bytes',
	    GrandpaEquivocation: {
	      _enum: {
	        Prevote: 'GrandpaEquivocationValue',
	        Precommit: 'GrandpaEquivocationValue'
	      }
	    },
	    GrandpaEquivocationProof: {
	      setId: 'SetId',
	      equivocation: 'GrandpaEquivocation'
	    },
	    GrandpaEquivocationValue: {
	      roundNumber: 'u64',
	      identity: 'AuthorityId',
	      first: '(GrandpaPrevote, AuthoritySignature)',
	      second: '(GrandpaPrevote, AuthoritySignature)'
	    },
	    GrandpaPrevote: {
	      targetHash: 'Hash',
	      targetNumber: 'BlockNumber'
	    },
	    GrandpaCommit: {
	      targetHash: 'BlockHash',
	      targetNumber: 'BlockNumber',
	      precommits: 'Vec<GrandpaSignedPrecommit>'
	    },
	    GrandpaPrecommit: {
	      targetHash: 'BlockHash',
	      targetNumber: 'BlockNumber'
	    },
	    GrandpaSignedPrecommit: {
	      precommit: 'GrandpaPrecommit',
	      signature: 'AuthoritySignature',
	      id: 'AuthorityId'
	    },
	    GrandpaJustification: {
	      round: 'u64',
	      commit: 'GrandpaCommit',
	      votesAncestries: 'Vec<Header>'
	    },
	    JustificationNotification: 'Bytes',
	    KeyOwnerProof: 'MembershipProof',
	    NextAuthority: '(AuthorityId, AuthorityWeight)',
	    PendingChange: {
	      nextAuthorities: 'AuthorityList',
	      delay: 'BlockNumber',
	      canonHeight: 'BlockNumber',
	      canonHash: 'BlockHash',
	      delayKind: 'DelayKind'
	    },
	    PendingPause: {
	      scheduledAt: 'BlockNumber',
	      delay: 'BlockNumber'
	    },
	    PendingResume: {
	      scheduledAt: 'BlockNumber',
	      delay: 'BlockNumber'
	    },
	    Precommits: {
	      currentWeight: 'u32',
	      missing: 'BTreeSet<AuthorityId>'
	    },
	    Prevotes: {
	      currentWeight: 'u32',
	      missing: 'BTreeSet<AuthorityId>'
	    },
	    ReportedRoundStates: {
	      setId: 'u32',
	      best: 'RoundState',
	      background: 'Vec<RoundState>'
	    },
	    RoundState: {
	      round: 'u32',
	      totalWeight: 'u32',
	      thresholdWeight: 'u32',
	      prevotes: 'Prevotes',
	      precommits: 'Precommits'
	    },
	    SetId: 'u64',
	    StoredPendingChange: {
	      scheduledAt: 'BlockNumber',
	      delay: 'BlockNumber',
	      nextAuthorities: 'AuthorityList'
	    },
	    StoredState: {
	      _enum: {
	        Live: 'Null',
	        PendingPause: 'PendingPause',
	        Paused: 'Null',
	        PendingResume: 'PendingResume'
	      }
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$E = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    IdentityFields: {
	      _set: {
	        _bitLength: 64,
	        // Mapped here to 32 bits, in Rust these are 64-bit values
	        Display: 0b00000000000000000000000000000001,
	        Legal: 0b00000000000000000000000000000010,
	        Web: 0b00000000000000000000000000000100,
	        Riot: 0b00000000000000000000000000001000,
	        Email: 0b00000000000000000000000000010000,
	        PgpFingerprint: 0b00000000000000000000000000100000,
	        Image: 0b00000000000000000000000001000000,
	        Twitter: 0b00000000000000000000000010000000
	      }
	    },
	    IdentityInfoAdditional: '(Data, Data)',
	    IdentityInfo: {
	      additional: 'Vec<IdentityInfoAdditional>',
	      display: 'Data',
	      legal: 'Data',
	      web: 'Data',
	      riot: 'Data',
	      email: 'Data',
	      pgpFingerprint: 'Option<H160>',
	      image: 'Data',
	      twitter: 'Data'
	    },
	    IdentityJudgement: {
	      _enum: {
	        Unknown: 'Null',
	        FeePaid: 'Balance',
	        Reasonable: 'Null',
	        KnownGood: 'Null',
	        OutOfDate: 'Null',
	        LowQuality: 'Null',
	        Erroneous: 'Null'
	      }
	    },
	    RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
	    Registration: {
	      judgements: 'Vec<RegistrationJudgement>',
	      deposit: 'Balance',
	      info: 'IdentityInfo'
	    },
	    RegistrarIndex: 'u32',
	    RegistrarInfo: {
	      account: 'AccountId',
	      fee: 'Balance',
	      fields: 'IdentityFields'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$D = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    AuthIndex: 'u32',
	    AuthoritySignature: 'Signature',
	    Heartbeat: {
	      blockNumber: 'BlockNumber',
	      networkState: 'OpaqueNetworkState',
	      sessionIndex: 'SessionIndex',
	      authorityIndex: 'AuthIndex',
	      validatorsLen: 'u32'
	    },
	    HeartbeatTo244: {
	      blockNumber: 'BlockNumber',
	      networkState: 'OpaqueNetworkState',
	      sessionIndex: 'SessionIndex',
	      authorityIndex: 'AuthIndex'
	    },
	    OpaqueMultiaddr: 'Bytes',
	    OpaquePeerId: 'Bytes',
	    OpaqueNetworkState: {
	      peerId: 'OpaquePeerId',
	      externalAddresses: 'Vec<OpaqueMultiaddr>'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$C = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    CallIndex: '(u8, u8)',
	    LotteryConfig: {
	      price: 'Balance',
	      start: 'BlockNumber',
	      length: 'BlockNumber',
	      delay: 'BlockNumber',
	      repeat: 'bool'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$B = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    generateProof: {
	      description: 'Generate MMR proof for given leaf index.',
	      params: [{
	        name: 'leafIndex',
	        type: 'u64'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'MmrLeafProof'
	    }
	  },
	  types: {
	    MmrLeafProof: {
	      blockHash: 'BlockHash',
	      leaf: 'Bytes',
	      proof: 'Bytes'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$A = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
	    Kind: '[u8; 16]',
	    OffenceDetails: {
	      offender: 'Offender',
	      reporters: 'Vec<Reporter>'
	    },
	    Offender: 'IdentificationTuple',
	    OpaqueTimeSlot: 'Bytes',
	    ReportIdOf: 'Hash',
	    Reporter: 'AccountId'
	  }
	};
	exports.default = _default;
	});

	var definitions$z = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    ProxyDefinition: {
	      delegate: 'AccountId',
	      proxyType: 'ProxyType',
	      delay: 'BlockNumber'
	    },
	    ProxyType: {
	      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
	    },
	    ProxyAnnouncement: {
	      real: 'AccountId',
	      callHash: 'Hash',
	      height: 'BlockNumber'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$y = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    ActiveRecovery: {
	      created: 'BlockNumber',
	      deposit: 'Balance',
	      friends: 'Vec<AccountId>'
	    },
	    RecoveryConfig: {
	      delayPeriod: 'BlockNumber',
	      deposit: 'Balance',
	      friends: 'Vec<AccountId>',
	      threshold: 'u16'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$x = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    Period: '(BlockNumber, u32)',
	    Priority: 'u8',
	    SchedulePeriod: 'Period',
	    SchedulePriority: 'Priority',
	    Scheduled: {
	      maybeId: 'Option<Bytes>',
	      priority: 'SchedulePriority',
	      call: 'Call',
	      maybePeriodic: 'Option<SchedulePeriod>',
	      origin: 'PalletsOrigin'
	    },
	    ScheduledTo254: {
	      maybeId: 'Option<Bytes>',
	      priority: 'SchedulePriority',
	      call: 'Call',
	      maybePeriodic: 'Option<SchedulePeriod>'
	    },
	    TaskAddress: '(BlockNumber, u32)'
	  }
	};
	exports.default = _default;
	});

	var definitions$w = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	// The runtime definition of SessionKeys are passed as a Trait to session
	// Defined in `node/runtime/src/lib.rs` as follow
	//   impl_opaque_keys! {
	//     pub struct SessionKeys {
	// Here we revert to tuples to keep the interfaces "opaque", as per the use
	const keyTypes = {
	  // key for beefy
	  BeefyKey: '[u8; 33]',
	  // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
	  Keys: 'SessionKeys4',
	  SessionKeys1: '(AccountId)',
	  SessionKeys2: '(AccountId, AccountId)',
	  SessionKeys3: '(AccountId, AccountId, AccountId)',
	  SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
	  SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
	  SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
	  SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
	  SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
	  SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread({}, keyTypes), {}, {
	    FullIdentification: 'Exposure',
	    IdentificationTuple: '(ValidatorId, FullIdentification)',
	    MembershipProof: {
	      session: 'SessionIndex',
	      trieNodes: 'Vec<Vec<u8>>',
	      validatorCount: 'ValidatorCount'
	    },
	    SessionIndex: 'u32',
	    ValidatorCount: 'u32'
	  })
	};
	exports.default = _default;
	});

	var definitions$v = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    Bid: {
	      who: 'AccountId',
	      kind: 'BidKind',
	      value: 'Balance'
	    },
	    BidKind: {
	      _enum: {
	        Deposit: 'Balance',
	        Vouch: '(AccountId, Balance)'
	      }
	    },
	    // a society-specific Judgement (not the same as identity Judgement)
	    SocietyJudgement: {
	      _enum: ['Rebid', 'Reject', 'Approve']
	    },
	    // a society-specific Vote
	    SocietyVote: {
	      _enum: ['Skeptic', 'Reject', 'Approve']
	    },
	    StrikeCount: 'u32',
	    VouchingStatus: {
	      _enum: ['Vouching', 'Banned']
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$u = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const deprecated = {
	  Points: 'u32',
	  EraPoints: {
	    total: 'Points',
	    individual: 'Vec<Points>'
	  }
	};
	const phragmen = {
	  CompactAssignments: 'CompactAssignmentsWith16',
	  CompactAssignmentsWith16: {
	    votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
	    votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
	    votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
	    votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
	    votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
	    votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
	    votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
	    votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
	    votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
	    votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
	    votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
	    votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
	    votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
	    votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
	    votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
	    votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
	  },
	  CompactAssignmentsWith24: {
	    votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
	    votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
	    votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
	    votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
	    votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
	    votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
	    votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
	    votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
	    votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
	    votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
	    votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
	    votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
	    votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
	    votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
	    votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
	    votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
	    votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
	    votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
	    votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
	    votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
	    votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
	    votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
	    votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
	    votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
	  },
	  CompactAssignmentsTo265: 'CompactAssignmentsWith16',
	  CompactAssignmentsTo257: {
	    votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
	    votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
	    votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
	    votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
	    votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
	    votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
	    votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
	    votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
	    votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
	    votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
	    votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
	    votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
	    votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
	    votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
	    votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
	    votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
	  },
	  CompactScore: '(ValidatorIndex, OffchainAccuracy)',
	  CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
	  ElectionCompute: {
	    // in previous versions the last entry was "AuthorityId"
	    // (since no data attached, and it is via SCALE can rename)
	    _enum: ['OnChain', 'Signed', 'Unsigned']
	  },
	  ElectionPhase: {
	    _enum: {
	      Off: null,
	      Signed: null,
	      Unsigned: '(bool, BlockNumber)',
	      Emergency: null
	    }
	  },
	  ElectionResult: {
	    compute: 'ElectionCompute',
	    slotStake: 'Balance',
	    electedStashes: 'Vec<AccountId>',
	    exposures: 'Vec<(AccountId, Exposure)>'
	  },
	  ElectionScore: '[u128; 3]',
	  ElectionSize: {
	    validators: 'Compact<ValidatorIndex>',
	    nominators: 'Compact<NominatorIndex>'
	  },
	  ElectionStatus: {
	    _enum: {
	      Close: 'Null',
	      Open: 'BlockNumber'
	    }
	  },
	  ExtendedBalance: 'u128',
	  RawSolution: 'RawSolutionWith16',
	  RawSolutionWith16: {
	    compact: 'CompactAssignmentsWith16',
	    score: 'ElectionScore',
	    round: 'u32'
	  },
	  RawSolutionWith24: {
	    compact: 'CompactAssignmentsWith24',
	    score: 'ElectionScore',
	    round: 'u32'
	  },
	  RawSolutionTo265: 'RawSolutionWith16',
	  ReadySolution: {
	    supports: 'SolutionSupports',
	    score: 'ElectionScore',
	    compute: 'ElectionCompute'
	  },
	  RoundSnapshot: {
	    voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
	    targets: 'Vec<AccountId>'
	  },
	  SeatHolder: {
	    who: 'AccountId',
	    stake: 'Balance',
	    deposit: 'Balance'
	  },
	  SignedSubmission: {
	    _fallback: 'SignedSubmissionTo276',
	    who: 'AccountId',
	    deposit: 'Balance',
	    solution: 'RawSolution',
	    reward: 'Balance'
	  },
	  SignedSubmissionTo276: {
	    who: 'AccountId',
	    deposit: 'Balance',
	    solution: 'RawSolution'
	  },
	  SignedSubmissionOf: 'SignedSubmission',
	  SolutionOrSnapshotSize: {
	    voters: 'Compact<u32>',
	    targets: 'Compact<u32>'
	  },
	  SolutionSupport: {
	    total: 'ExtendedBalance',
	    voters: 'Vec<(AccountId, ExtendedBalance)>'
	  },
	  SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
	  Supports: 'SolutionSupports',
	  SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
	  Voter: {
	    votes: 'Vec<AccountId>',
	    stake: 'Balance',
	    deposit: 'Balance'
	  },
	  VoteWeight: 'u64'
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread(_objectSpread({}, deprecated), phragmen), {}, {
	    ActiveEraInfo: {
	      index: 'EraIndex',
	      start: 'Option<Moment>'
	    },
	    EraIndex: 'u32',
	    EraRewardPoints: {
	      total: 'RewardPoint',
	      individual: 'BTreeMap<AccountId, RewardPoint>'
	    },
	    EraRewards: {
	      total: 'u32',
	      rewards: 'Vec<u32>'
	    },
	    Exposure: {
	      total: 'Compact<Balance>',
	      own: 'Compact<Balance>',
	      others: 'Vec<IndividualExposure>'
	    },
	    Forcing: {
	      _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
	    },
	    IndividualExposure: {
	      who: 'AccountId',
	      value: 'Compact<Balance>'
	    },
	    KeyType: 'AccountId',
	    MomentOf: 'Moment',
	    Nominations: {
	      targets: 'Vec<AccountId>',
	      submittedIn: 'EraIndex',
	      suppressed: 'bool'
	    },
	    NominatorIndex: 'u32',
	    NominatorIndexCompact: 'Compact<NominatorIndex>',
	    OffchainAccuracy: 'PerU16',
	    OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
	    PhragmenScore: '[u128; 3]',
	    Points: 'u32',
	    RewardDestination: {
	      _enum: {
	        Staked: 'Null',
	        Stash: 'Null',
	        Controller: 'Null',
	        Account: 'AccountId',
	        None: 'Null'
	      }
	    },
	    RewardPoint: 'u32',
	    SlashJournalEntry: {
	      who: 'AccountId',
	      amount: 'Balance',
	      ownSlash: 'Balance'
	    },
	    SlashingSpansTo204: {
	      spanIndex: 'SpanIndex',
	      lastStart: 'EraIndex',
	      prior: 'Vec<EraIndex>'
	    },
	    SlashingSpans: {
	      spanIndex: 'SpanIndex',
	      lastStart: 'EraIndex',
	      lastNonzeroSlash: 'EraIndex',
	      prior: 'Vec<EraIndex>'
	    },
	    SpanIndex: 'u32',
	    SpanRecord: {
	      slashed: 'Balance',
	      paidOut: 'Balance'
	    },
	    StakingLedgerTo223: {
	      stash: 'AccountId',
	      total: 'Compact<Balance>',
	      active: 'Compact<Balance>',
	      unlocking: 'Vec<UnlockChunk>'
	    },
	    StakingLedgerTo240: {
	      stash: 'AccountId',
	      total: 'Compact<Balance>',
	      active: 'Compact<Balance>',
	      unlocking: 'Vec<UnlockChunk>',
	      lastReward: 'Option<EraIndex>'
	    },
	    StakingLedger: {
	      stash: 'AccountId',
	      total: 'Compact<Balance>',
	      active: 'Compact<Balance>',
	      unlocking: 'Vec<UnlockChunk>',
	      claimedRewards: 'Vec<EraIndex>'
	    },
	    UnappliedSlashOther: '(AccountId, Balance)',
	    UnappliedSlash: {
	      validator: 'AccountId',
	      own: 'Balance',
	      others: 'Vec<UnappliedSlashOther>',
	      reporters: 'Vec<AccountId>',
	      payout: 'Balance'
	    },
	    UnlockChunk: {
	      value: 'Compact<Balance>',
	      era: 'Compact<BlockNumber>'
	    },
	    ValidatorIndex: 'u16',
	    ValidatorIndexCompact: 'Compact<ValidatorIndex>',
	    ValidatorPrefs: 'ValidatorPrefsWithBlocked',
	    ValidatorPrefsWithCommission: {
	      commission: 'Compact<Perbill>'
	    },
	    ValidatorPrefsWithBlocked: {
	      commission: 'Compact<Perbill>',
	      blocked: 'bool'
	    },
	    ValidatorPrefsTo196: {
	      validatorPayment: 'Compact<Balance>'
	    },
	    ValidatorPrefsTo145: {
	      unstakeThreshold: 'Compact<u32>',
	      validatorPayment: 'Compact<Balance>'
	    }
	  })
	};
	exports.default = _default;
	});

	var definitions$t = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    WeightToFeeCoefficient: {
	      coeffInteger: 'Balance',
	      coeffFrac: 'Perbill',
	      negative: 'bool',
	      degree: 'u8'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$s = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    genSyncSpec: {
	      endpoint: 'sync_state_genSyncSpec',
	      description: 'Returns the json-serialized chainspec running the node, with a sync state.',
	      params: [{
	        name: 'raw',
	        type: 'bool'
	      }],
	      type: 'Json'
	    }
	  },
	  types: {}
	};
	exports.default = _default;
	});

	var definitions$r = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    accountNextIndex: {
	      alias: ['account_nextIndex'],
	      description: 'Retrieves the next accountIndex as available on the node',
	      params: [{
	        name: 'accountId',
	        type: 'AccountId'
	      }],
	      type: 'Index'
	    },
	    dryRun: {
	      alias: ['system_dryRunAt'],
	      description: 'Dry run an extrinsic at a given block',
	      params: [{
	        name: 'extrinsic',
	        type: 'Bytes'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'ApplyExtrinsicResult'
	    },
	    name: {
	      description: 'Retrieves the node name',
	      params: [],
	      type: 'Text'
	    },
	    version: {
	      description: 'Retrieves the version of the node',
	      params: [],
	      type: 'Text'
	    },
	    chain: {
	      description: 'Retrieves the chain',
	      params: [],
	      type: 'Text'
	    },
	    chainType: {
	      description: 'Retrieves the chain type',
	      params: [],
	      type: 'ChainType'
	    },
	    properties: {
	      description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
	      params: [],
	      type: 'ChainProperties'
	    },
	    health: {
	      description: 'Return health status of the node',
	      params: [],
	      type: 'Health'
	    },
	    localPeerId: {
	      description: 'Returns the base58-encoded PeerId of the node',
	      params: [],
	      type: 'Text'
	    },
	    localListenAddresses: {
	      description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
	      params: [],
	      type: 'Vec<Text>'
	    },
	    peers: {
	      description: 'Returns the currently connected peers',
	      params: [],
	      type: 'Vec<PeerInfo>'
	    },
	    networkState: {
	      alias: ['system_unstable_networkState'],
	      description: 'Returns current state of the network',
	      params: [],
	      type: 'NetworkState'
	    },
	    addReservedPeer: {
	      description: 'Adds a reserved peer',
	      params: [{
	        name: 'peer',
	        type: 'Text'
	      }],
	      type: 'Text'
	    },
	    removeReservedPeer: {
	      description: 'Remove a reserved peer',
	      params: [{
	        name: 'peerId',
	        type: 'Text'
	      }],
	      type: 'Text'
	    },
	    reservedPeers: {
	      description: 'Returns the list of reserved peers',
	      params: [],
	      type: 'Vec<Text>'
	    },
	    nodeRoles: {
	      description: 'Returns the roles the node is running as',
	      params: [],
	      type: 'Vec<NodeRole>'
	    },
	    syncState: {
	      description: 'Returns the state of the syncing of the node',
	      params: [],
	      type: 'SyncState'
	    },
	    addLogFilter: {
	      description: 'Adds the supplied directives to the current log filter',
	      params: [{
	        name: 'directives',
	        type: 'Text'
	      }],
	      type: 'Null'
	    },
	    resetLogFilter: {
	      description: 'Resets the log filter to Substrate defaults',
	      params: [],
	      type: 'Null'
	    }
	  },
	  types: {
	    AccountInfo: 'AccountInfoWithTripleRefCount',
	    AccountInfoWithRefCountU8: {
	      nonce: 'Index',
	      refcount: 'u8',
	      data: 'AccountData'
	    },
	    AccountInfoWithRefCount: {
	      _fallback: 'AccountInfoWithRefCountU8',
	      nonce: 'Index',
	      refcount: 'RefCount',
	      data: 'AccountData'
	    },
	    AccountInfoWithDualRefCount: {
	      _fallback: 'AccountInfoWithRefCount',
	      nonce: 'Index',
	      consumers: 'RefCount',
	      providers: 'RefCount',
	      data: 'AccountData'
	    },
	    // original naming
	    AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
	    AccountInfoWithTripleRefCount: {
	      _fallback: 'AccountInfoWithDualRefCount',
	      nonce: 'Index',
	      consumers: 'RefCount',
	      providers: 'RefCount',
	      sufficients: 'RefCount',
	      data: 'AccountData'
	    },
	    ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
	    ArithmeticError: {
	      _enum: ['Underflow', 'Overflow', 'DivisionByZero']
	    },
	    BlockLength: {
	      max: 'PerDispatchClassU32'
	    },
	    BlockWeights: {
	      baseBlock: 'Weight',
	      maxBlock: 'Weight',
	      perClass: 'PerDispatchClassWeightsPerClass'
	    },
	    ChainProperties: 'GenericChainProperties',
	    ChainType: {
	      _enum: {
	        Development: 'Null',
	        Local: 'Null',
	        Live: 'Null',
	        Custom: 'Text'
	      }
	    },
	    ConsumedWeight: 'PerDispatchClassWeight',
	    DigestOf: 'Digest',
	    DispatchClass: {
	      _enum: ['Normal', 'Operational', 'Mandatory']
	    },
	    DispatchError: {
	      _enum: {
	        Other: 'Null',
	        CannotLookup: 'Null',
	        BadOrigin: 'Null',
	        Module: 'DispatchErrorModule',
	        ConsumerRemaining: 'Null',
	        NoProviders: 'Null',
	        Token: 'TokenError',
	        Arithmetic: 'ArithmeticError'
	      }
	    },
	    DispatchErrorModule: {
	      index: 'u8',
	      error: 'u8'
	    },
	    DispatchErrorTo198: {
	      module: 'Option<u8>',
	      error: 'u8'
	    },
	    DispatchInfo: {
	      weight: 'Weight',
	      class: 'DispatchClass',
	      paysFee: 'Pays'
	    },
	    DispatchInfoTo190: {
	      weight: 'Weight',
	      class: 'DispatchClass'
	    },
	    DispatchInfoTo244: {
	      weight: 'Weight',
	      class: 'DispatchClass',
	      paysFee: 'bool'
	    },
	    DispatchOutcome: 'Result<(), DispatchError>',
	    DispatchResult: 'Result<(), DispatchError>',
	    DispatchResultOf: 'DispatchResult',
	    DispatchResultTo198: 'Result<(), Text>',
	    Event: 'GenericEvent',
	    EventId: '[u8; 2]',
	    EventIndex: 'u32',
	    EventRecord: {
	      phase: 'Phase',
	      event: 'Event',
	      topics: 'Vec<Hash>'
	    },
	    Health: {
	      peers: 'u64',
	      isSyncing: 'bool',
	      shouldHavePeers: 'bool'
	    },
	    InvalidTransaction: {
	      _enum: {
	        Call: 'Null',
	        Payment: 'Null',
	        Future: 'Null',
	        Stale: 'Null',
	        BadProof: 'Null',
	        AncientBirthBlock: 'Null',
	        ExhaustsResources: 'Null',
	        Custom: 'u8',
	        BadMandatory: 'Null',
	        MandatoryDispatch: 'Null'
	      }
	    },
	    Key: 'Bytes',
	    LastRuntimeUpgradeInfo: {
	      specVersion: 'Compact<u32>',
	      specName: 'Text'
	    },
	    NetworkState: {
	      peerId: 'Text',
	      listenedAddresses: 'Vec<Text>',
	      externalAddresses: 'Vec<Text>',
	      connectedPeers: 'HashMap<Text, Peer>',
	      notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
	      averageDownloadPerSec: 'u64',
	      averageUploadPerSec: 'u64',
	      peerset: 'NetworkStatePeerset'
	    },
	    NetworkStatePeerset: {
	      messageQueue: 'u64',
	      nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
	    },
	    NetworkStatePeersetInfo: {
	      connected: 'bool',
	      reputation: 'i32'
	    },
	    NodeRole: {
	      _enum: {
	        Full: 'Null',
	        LightClient: 'Null',
	        Authority: 'Null',
	        UnknownRole: 'u8'
	      }
	    },
	    NotConnectedPeer: {
	      knownAddresses: 'Vec<Text>',
	      latestPingTime: 'Option<PeerPing>',
	      versionString: 'Option<Text>'
	    },
	    Peer: {
	      enabled: 'bool',
	      endpoint: 'PeerEndpoint',
	      knownAddresses: 'Vec<Text>',
	      latestPingTime: 'PeerPing',
	      open: 'bool',
	      versionString: 'Text'
	    },
	    PeerEndpoint: {
	      listening: 'PeerEndpointAddr'
	    },
	    PeerEndpointAddr: {
	      _alias: {
	        localAddr: 'local_addr',
	        sendBackAddr: 'send_back_addr'
	      },
	      localAddr: 'Text',
	      sendBackAddr: 'Text'
	    },
	    PeerPing: {
	      nanos: 'u64',
	      secs: 'u64'
	    },
	    PeerInfo: {
	      peerId: 'Text',
	      roles: 'Text',
	      protocolVersion: 'u32',
	      bestHash: 'Hash',
	      bestNumber: 'BlockNumber'
	    },
	    PerDispatchClassU32: {
	      normal: 'u32',
	      operational: 'u32',
	      mandatory: 'u32'
	    },
	    PerDispatchClassWeight: {
	      normal: 'Weight',
	      operational: 'Weight',
	      mandatory: 'Weight'
	    },
	    PerDispatchClassWeightsPerClass: {
	      normal: 'WeightPerClass',
	      operational: 'WeightPerClass',
	      mandatory: 'WeightPerClass'
	    },
	    Phase: {
	      _enum: {
	        ApplyExtrinsic: 'u32',
	        Finalization: 'Null',
	        Initialization: 'Null'
	      }
	    },
	    RawOrigin: {
	      _enum: {
	        Root: 'Null',
	        Signed: 'AccountId',
	        None: 'Null'
	      }
	    },
	    RefCount: 'u32',
	    RefCountTo259: 'u8',
	    SyncState: {
	      startingBlock: 'BlockNumber',
	      currentBlock: 'BlockNumber',
	      highestBlock: 'Option<BlockNumber>'
	    },
	    SystemOrigin: 'RawOrigin',
	    TokenError: {
	      _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', // these are dropped, but still in older versions
	      // (if this adjusts, will need to take a re-look)
	      'Underflow', 'Overflow']
	    },
	    TransactionValidityError: {
	      _enum: {
	        Invalid: 'InvalidTransaction',
	        Unknown: 'UnknownTransaction'
	      }
	    },
	    UnknownTransaction: {
	      _enum: {
	        CannotLookup: 'Null',
	        NoUnsignedValidator: 'Null',
	        Custom: 'u8'
	      }
	    },
	    WeightPerClass: {
	      baseExtrinsic: 'Weight',
	      maxExtrinsic: 'Weight',
	      maxTotal: 'Option<Weight>',
	      reserved: 'Option<Weight>'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$q = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    Bounty: {
	      proposer: 'AccountId',
	      value: 'Balance',
	      fee: 'Balance',
	      curatorDeposit: 'Balance',
	      bond: 'Balance',
	      status: 'BountyStatus'
	    },
	    BountyIndex: 'u32',
	    BountyStatus: {
	      _enum: {
	        Proposed: 'Null',
	        Approved: 'Null',
	        Funded: 'Null',
	        CuratorProposed: 'BountyStatusCuratorProposed',
	        Active: 'BountyStatusActive',
	        PendingPayout: 'BountyStatusPendingPayout'
	      }
	    },
	    BountyStatusActive: {
	      curator: 'AccountId',
	      updateDue: 'BlockNumber'
	    },
	    BountyStatusCuratorProposed: {
	      curator: 'AccountId'
	    },
	    BountyStatusPendingPayout: {
	      curator: 'AccountId',
	      beneficiary: 'AccountId',
	      unlockAt: 'BlockNumber'
	    },
	    OpenTip: {
	      reason: 'Hash',
	      who: 'AccountId',
	      finder: 'AccountId',
	      deposit: 'Balance',
	      closes: 'Option<BlockNumber>',
	      tips: 'Vec<OpenTipTip>',
	      findersFee: 'bool'
	    },
	    OpenTipTo225: {
	      reason: 'Hash',
	      who: 'AccountId',
	      finder: 'Option<OpenTipFinderTo225>',
	      closes: 'Option<BlockNumber>',
	      tips: 'Vec<OpenTipTip>'
	    },
	    OpenTipFinderTo225: '(AccountId, Balance)',
	    OpenTipTip: '(AccountId, Balance)',
	    TreasuryProposal: {
	      proposer: 'AccountId',
	      value: 'Balance',
	      beneficiary: 'AccountId',
	      bond: 'Balance'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$p = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _default = {
	  rpc: {},
	  types: {
	    Multiplier: 'Fixed128'
	  }
	};
	exports.default = _default;
	});

	var definitions$o = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    ClassId: 'u32',
	    InstanceId: 'u32',
	    DepositBalance: 'Balance',
	    DepositBalanceOf: 'Balance',
	    ClassDetails: {
	      owner: 'AccountId',
	      issuer: 'AccountId',
	      admin: 'AccountId',
	      freezer: 'AccountId',
	      totalDeposit: 'DepositBalance',
	      freeHolding: 'bool',
	      instances: 'u32',
	      instanceMetadatas: 'u32',
	      attributes: 'u32',
	      isFrozen: 'bool'
	    },
	    DestroyWitness: {
	      instances: 'Compact<u32>',
	      instanceMetadatas: 'Compact<u32>',
	      attributes: 'Compact<u32>'
	    },
	    InstanceDetails: {
	      owner: 'AccountId',
	      approved: 'Option<AccountId>',
	      isFrozen: 'bool',
	      deposit: 'DepositBalance'
	    },
	    ClassMetadata: {
	      deposit: 'DepositBalance',
	      data: 'Vec<u8>',
	      isFrozen: 'bool'
	    },
	    InstanceMetadata: {
	      deposit: 'DepositBalance',
	      data: 'Vec<u8>',
	      isFrozen: 'bool'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$n = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    Multisig: {
	      when: 'Timepoint',
	      deposit: 'Balance',
	      depositor: 'AccountId',
	      approvals: 'Vec<AccountId>'
	    },
	    Timepoint: {
	      height: 'BlockNumber',
	      index: 'u32'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$m = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    VestingInfo: {
	      locked: 'Balance',
	      perBlock: 'Balance',
	      startingBlock: 'BlockNumber'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$l = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    BlockAttestations: {
	      receipt: 'CandidateReceipt',
	      valid: 'Vec<AccountId>',
	      invalid: 'Vec<AccountId>'
	    },
	    IncludedBlocks: {
	      actualNumber: 'BlockNumber',
	      session: 'SessionIndex',
	      randomSeed: 'H256',
	      activeParachains: 'Vec<ParaId>',
	      paraBlocks: 'Vec<Hash>'
	    },
	    MoreAttestations: {}
	  }
	};
	exports.default = _default;
	});

	var definitions$k = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    BridgedBlockHash: 'H256',
	    BridgedBlockNumber: 'BlockNumber',
	    BridgedHeader: 'Header',
	    CallOrigin: {
	      _enum: {
	        SourceRoot: 'Null',
	        TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
	        SourceAccount: 'AccountId'
	      }
	    },
	    ChainId: '[u8; 4]',
	    DeliveredMessages: {
	      begin: 'MessageNonce',
	      end: 'MessageNonce',
	      // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
	      dispatchResults: 'BitVec'
	    },
	    DispatchFeePayment: {
	      _enum: ['AtSourceChain', 'AtTargetChain']
	    },
	    InboundLaneData: {
	      relayers: 'Vec<UnrewardedRelayer>',
	      lastConfirmedNonce: 'MessageNonce'
	    },
	    InboundRelayer: 'AccountId',
	    InitializationData: {
	      header: 'Header',
	      authorityList: 'AuthorityList',
	      setId: 'SetId',
	      isHalted: 'bool'
	    },
	    LaneId: '[u8; 4]',
	    MessageData: {
	      payload: 'Bytes',
	      fee: 'Balance'
	    },
	    MessagesDeliveryProofOf: {
	      bridgedHeaderHash: 'BlockHash',
	      storageProof: 'Vec<Bytes>',
	      lane: 'LaneId'
	    },
	    MessageKey: {
	      laneId: 'LaneId',
	      nonce: 'MessageNonce'
	    },
	    MessageNonce: 'u64',
	    MessagesProofOf: {
	      bridgedHeaderHash: 'BridgedBlockHash',
	      storageProof: 'Vec<Bytes>',
	      lane: 'LaneId',
	      noncesStart: 'MessageNonce',
	      noncesEnd: 'MessageNonce'
	    },
	    OperatingMode: {
	      _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
	    },
	    OutboundLaneData: {
	      latestGeneratedNonce: 'MessageNonce',
	      latestReceivedNonce: 'MessageNonce',
	      oldestUnprunedNonce: 'MessageNonce'
	    },
	    OutboundMessageFee: 'Balance',
	    OutboundPayload: {
	      specVersion: 'u32',
	      weight: 'Weight',
	      origin: 'CallOrigin',
	      dispatchFeePayment: 'DispatchFeePayment',
	      call: 'Bytes'
	    },
	    Parameter: 'Null',
	    RelayerId: 'AccountId',
	    UnrewardedRelayer: {
	      relayer: 'RelayerId',
	      messages: 'DeliveredMessages'
	    },
	    UnrewardedRelayersState: {
	      unrewardedRelayer_Entries: 'MessageNonce',
	      messagesInOldestEntry: 'MessageNonce',
	      totalMessages: 'MessageNonce'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$j = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    EthereumAddress: 'H160',
	    StatementKind: {
	      _enum: ['Regular', 'Saft']
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$i = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    FundIndex: 'u32',
	    LastContribution: {
	      _enum: {
	        Never: 'Null',
	        PreEnding: 'u32',
	        Ending: 'BlockNumber'
	      }
	    },
	    FundInfo: {
	      depositor: 'AccountId',
	      verifier: 'Option<MultiSigner>',
	      deposit: 'Balance',
	      raised: 'Balance',
	      end: 'BlockNumber',
	      cap: 'Balance',
	      lastContribution: 'LastContribution',
	      firstPeriod: 'LeasePeriod',
	      lastPeriod: 'LeasePeriod',
	      trieIndex: 'TrieIndex'
	    },
	    TrieIndex: 'u32'
	  }
	};
	exports.default = _default;
	});

	var definitions$h = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const dmpQueue = {
	  ConfigData: {
	    maxIndividual: 'Weight'
	  },
	  MessageId: '[u8; 32]',
	  OverweightIndex: 'u64',
	  PageCounter: 'u32',
	  PageIndexData: {
	    beginUsed: 'PageCounter',
	    endUsed: 'PageCounter',
	    overweightCount: 'OverweightIndex'
	  }
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread({}, dmpQueue)
	};
	exports.default = _default;
	});

	var hrmp = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  HrmpChannel: {
	    maxCapacity: 'u32',
	    maxTotalSize: 'u32',
	    maxMessageSize: 'u32',
	    msgCount: 'u32',
	    totalSize: 'u32',
	    mqcHead: 'Option<Hash>',
	    senderDeposit: 'Balance',
	    recipientDeposit: 'Balance'
	  },
	  HrmpChannelId: {
	    sender: 'u32',
	    receiver: 'u32'
	  },
	  HrmpOpenChannelRequest: {
	    confirmed: 'bool',
	    age: 'SessionIndex',
	    senderDeposit: 'Balance',
	    maxMessageSize: 'u32',
	    maxCapacity: 'u32',
	    maxTotalSize: 'u32'
	  }
	};
	exports.default = _default;
	});

	var slots = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const SLOT_RANGE_COUNT = 10;
	const oldTypes = {
	  Bidder: {
	    _enum: {
	      New: 'NewBidder',
	      Existing: 'ParaId'
	    }
	  },
	  IncomingParachain: {
	    _enum: {
	      Unset: 'NewBidder',
	      Fixed: 'IncomingParachainFixed',
	      Deploy: 'IncomingParachainDeploy'
	    }
	  },
	  IncomingParachainDeploy: {
	    code: 'ValidationCode',
	    initialHeadData: 'HeadData'
	  },
	  IncomingParachainFixed: {
	    codeHash: 'Hash',
	    codeSize: 'u32',
	    initialHeadData: 'HeadData'
	  },
	  NewBidder: {
	    who: 'AccountId',
	    sub: 'SubId'
	  },
	  SubId: 'u32'
	};

	var _default = _objectSpread(_objectSpread({}, oldTypes), {}, {
	  AuctionIndex: 'u32',
	  LeasePeriod: 'BlockNumber',
	  LeasePeriodOf: 'BlockNumber',
	  SlotRange: {
	    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
	  },
	  WinningData: `[WinningDataEntry; ${SLOT_RANGE_COUNT}]`,
	  WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
	  WinnersData: 'Vec<WinnersDataTuple>',
	  WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
	});

	exports.default = _default;
	});

	var require$$1$6 = hrmp;

	var require$$2$5 = slots;

	var definitions$g = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _hrmp = interopRequireDefault(require$$1$6);

	var _slots = interopRequireDefault(require$$2$5);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// proposeParachain
	const proposeTypes = {
	  ParachainProposal: {
	    proposer: 'AccountId',
	    genesisHead: 'HeadData',
	    validators: 'Vec<ValidatorId>',
	    name: 'Bytes',
	    balance: 'Balance'
	  },
	  RegisteredParachainInfo: {
	    validators: 'Vec<ValidatorId>',
	    proposer: 'AccountId'
	  }
	};
	const cumulusTypes = {
	  ServiceQuality: {
	    _enum: ['Ordered', 'Fast']
	  }
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cumulusTypes), _hrmp.default), proposeTypes), _slots.default), {}, {
	    AbridgedCandidateReceipt: {
	      parachainIndex: 'ParaId',
	      relayParent: 'Hash',
	      headData: 'HeadData',
	      collator: 'CollatorId',
	      signature: 'CollatorSignature',
	      povBlockHash: 'Hash',
	      commitments: 'CandidateCommitments'
	    },
	    AbridgedHostConfiguration: {
	      maxCodeSize: 'u32',
	      maxHeadDataSize: 'u32',
	      maxUpwardQueueCount: 'u32',
	      maxUpwardQueueSize: 'u32',
	      maxUpwardMessageSize: 'u32',
	      maxUpwardMessageNumPerCandidate: 'u32',
	      hrmpMaxMessageNumPerCandidate: 'u32',
	      validationUpgradeFrequency: 'BlockNumber',
	      validationUpgradeDelay: 'BlockNumber'
	    },
	    AbridgedHrmpChannel: {
	      maxCapacity: 'u32',
	      maxTotalSize: 'u32',
	      maxMessageSize: 'u32',
	      msgCount: 'u32',
	      totalSize: 'u32',
	      mqcHead: 'Option<Hash>'
	    },
	    AssignmentId: 'AccountId',
	    AssignmentKind: {
	      _enum: {
	        Parachain: 'Null',
	        Parathread: '(CollatorId, u32)'
	      }
	    },
	    AttestedCandidate: {
	      candidate: 'AbridgedCandidateReceipt',
	      validityVotes: 'Vec<ValidityAttestation>',
	      validatorIndices: 'BitVec'
	    },
	    AuthorityDiscoveryId: 'AccountId',
	    AvailabilityBitfield: 'BitVec',
	    AvailabilityBitfieldRecord: {
	      bitfield: 'AvailabilityBitfield',
	      submittedTt: 'BlockNumber'
	    },
	    BackedCandidate: {
	      candidate: 'CommittedCandidateReceipt',
	      validityVotes: 'Vec<ValidityAttestation>',
	      validatorIndices: 'BitVec'
	    },
	    BufferedSessionChange: {
	      applyAt: 'BlockNumber',
	      validators: 'Vec<ValidatorId>',
	      queued: 'Vec<ValidatorId>',
	      sessionIndex: 'SessionIndex'
	    },
	    CandidateCommitments: {
	      upwardMessages: 'Vec<UpwardMessage>',
	      horizontalMessages: 'Vec<OutboundHrmpMessage>',
	      newValidationCode: 'Option<ValidationCode>',
	      headData: 'HeadData',
	      processedDownwardMessages: 'u32',
	      hrmpWatermark: 'BlockNumber'
	    },
	    CandidateDescriptor: {
	      paraId: 'ParaId',
	      relayParent: 'RelayChainHash',
	      collatorId: 'CollatorId',
	      persistedValidationDataHash: 'Hash',
	      povHash: 'Hash',
	      erasureRoot: 'Hash',
	      signature: 'CollatorSignature',
	      paraHead: 'Hash',
	      validationCodeHash: 'ValidationCodeHash'
	    },
	    CandidateHash: 'Hash',
	    CandidateInfo: {
	      who: 'AccountId',
	      deposit: 'Balance'
	    },
	    CandidatePendingAvailability: {
	      core: 'CoreIndex',
	      hash: 'CandidateHash',
	      descriptor: 'CandidateDescriptor',
	      availabilityVotes: 'BitVec',
	      backers: 'BitVec',
	      relayParentNumber: 'BlockNumber',
	      backedInNumber: 'BlockNumber',
	      backingGroup: 'GroupIndex'
	    },
	    CandidateReceipt: {
	      descriptor: 'CandidateDescriptor',
	      commitmentsHash: 'Hash'
	    },
	    GlobalValidationData: {
	      maxCodeSize: 'u32',
	      maxHeadDataSize: 'u32',
	      blockNumber: 'BlockNumber'
	    },
	    CollatorId: 'H256',
	    CollatorSignature: 'Signature',
	    CommittedCandidateReceipt: {
	      descriptor: 'CandidateDescriptor',
	      commitments: 'CandidateCommitments'
	    },
	    CoreAssignment: {
	      core: 'CoreIndex',
	      paraId: 'ParaId',
	      kind: 'AssignmentKind',
	      groupIdx: 'GroupIndex'
	    },
	    CoreIndex: 'u32',
	    CoreOccupied: {
	      _enum: {
	        Parathread: 'ParathreadEntry',
	        Parachain: 'Null'
	      }
	    },
	    DisputeStatementSet: {
	      candidateHash: 'CandidateHash',
	      session: 'SessionIndex',
	      statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
	    },
	    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
	    DisputeStatement: {
	      _enum: {
	        Valid: 'ValidDisputeStatementKind',
	        Invalid: 'InvalidDisputeStatementKind'
	      }
	    },
	    ValidDisputeStatementKind: {
	      _enum: {
	        Explicit: 'Null',
	        BackingSeconded: 'Hash',
	        BackingValid: 'Hash',
	        ApprovalChecking: 'Null'
	      }
	    },
	    InvalidDisputeStatementKind: {
	      _enum: ['Explicit']
	    },
	    ExplicitDisputeStatement: {
	      valid: 'bool',
	      candidateHash: 'CandidateHash',
	      session: 'SessionIndex'
	    },
	    DoubleVoteReport: {
	      identity: 'ValidatorId',
	      first: '(Statement, ValidatorSignature)',
	      second: '(Statement, ValidatorSignature)',
	      proof: 'MembershipProof',
	      signingContext: 'SigningContext'
	    },
	    DownwardMessage: 'Bytes',
	    GroupIndex: 'u32',
	    GlobalValidationSchedule: {
	      maxCodeSize: 'u32',
	      maxHeadDataSize: 'u32',
	      blockNumber: 'BlockNumber'
	    },
	    HeadData: 'Bytes',
	    HostConfiguration: {
	      maxCodeSize: 'u32',
	      maxHeadDataSize: 'u32',
	      maxUpwardQueueCount: 'u32',
	      maxUpwardQueueSize: 'u32',
	      maxUpwardMessageSize: 'u32',
	      maxUpwardMessageNumPerCandidate: 'u32',
	      hrmpMaxMessageNumPerCandidate: 'u32',
	      validationUpgradeFrequency: 'BlockNumber',
	      validationUpgradeDelay: 'BlockNumber',
	      maxPovSize: 'u32',
	      maxDownwardMessageSize: 'u32',
	      preferredDispatchableUpwardMessagesStepWeight: 'Weight',
	      hrmpMaxParachainOutboundChannels: 'u32',
	      hrmpMaxParathreadOutboundChannels: 'u32',
	      hrmpOpenRequestTtl: 'u32',
	      hrmpSenderDeposit: 'Balance',
	      hrmpRecipientDeposit: 'Balance',
	      hrmpChannelMaxCapacity: 'u32',
	      hrmpChannelMaxTotalSize: 'u32',
	      hrmpMaxParachainInboundChannels: 'u32',
	      hrmpMaxParathreadInboundChannels: 'u32',
	      hrmpChannelMaxMessageSize: 'u32',
	      codeRetentionPeriod: 'BlockNumber',
	      parathreadCores: 'u32',
	      parathreadRetries: 'u32',
	      groupRotationFrequency: 'BlockNumber',
	      chainAvailabilityPeriod: 'BlockNumber',
	      threadAvailabilityPeriod: 'BlockNumber',
	      schedulingLookahead: 'u32',
	      maxValidatorsPerCore: 'Option<u32>',
	      maxValidators: 'Option<u32>',
	      disputePeriod: 'SessionIndex',
	      disputePostConclusionAcceptancePeriod: 'BlockNumber',
	      disputeMaxSpamSlots: 'u32',
	      disputeConclusionByTimeOutPeriod: 'BlockNumber',
	      noShowSlots: 'u32',
	      nDelayTranches: 'u32',
	      zerothDelayTrancheWidth: 'u32',
	      neededApprovals: 'u32',
	      relayVrfModuloSamples: 'u32'
	    },
	    InboundDownwardMessage: {
	      pubSentAt: 'BlockNumber',
	      pubMsg: 'DownwardMessage'
	    },
	    InboundHrmpMessage: {
	      sentAt: 'BlockNumber',
	      data: 'Bytes'
	    },
	    InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
	    LocalValidationData: {
	      parentHead: 'HeadData',
	      balance: 'Balance',
	      codeUpgradeAllowed: 'Option<BlockNumber>'
	    },
	    MessageIngestionType: {
	      downwardMessages: 'Vec<InboundDownwardMessage>',
	      horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
	    },
	    MessageQueueChain: 'RelayChainHash',
	    OutboundHrmpMessage: {
	      recipient: 'u32',
	      data: 'Bytes'
	    },
	    ParachainDispatchOrigin: {
	      _enum: ['Signed', 'Parachain', 'Root']
	    },
	    ParachainInherentData: {
	      validationData: 'PersistedValidationData',
	      relayChainState: 'StorageProof',
	      downwardMessages: 'Vec<InboundDownwardMessage>',
	      horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
	    },
	    ParachainsInherentData: {
	      bitfields: 'SignedAvailabilityBitfields',
	      backedCandidates: 'Vec<BackedCandidate>',
	      disputes: 'MultiDisputeStatementSet',
	      parentHeader: 'Header'
	    },
	    ParaGenesisArgs: {
	      genesisHead: 'Bytes',
	      validationCode: 'Bytes',
	      parachain: 'bool'
	    },
	    ParaId: 'u32',
	    ParaInfo: {
	      manager: 'AccountId',
	      deposit: 'Balance',
	      locked: 'bool'
	    },
	    ParaLifecycle: {
	      _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
	    },
	    ParaPastCodeMeta: {
	      upgradeTimes: 'Vec<ReplacementTimes>',
	      lastPruned: 'Option<BlockNumber>'
	    },
	    ParaScheduling: {
	      _enum: ['Always', 'Dynamic']
	    },
	    ParathreadClaim: '(ParaId, CollatorId)',
	    ParathreadClaimQueue: {
	      queue: 'Vec<QueuedParathread>',
	      nextCoreOffset: 'u32'
	    },
	    ParathreadEntry: {
	      claim: 'ParathreadClaim',
	      retries: 'u32'
	    },
	    ParaValidatorIndex: 'u32',
	    PersistedValidationData: {
	      parentHead: 'HeadData',
	      relayParentNumber: 'RelayChainBlockNumber',
	      relayParentStorageRoot: 'Hash',
	      maxPovSize: 'u32'
	    },
	    QueuedParathread: {
	      claim: 'ParathreadEntry',
	      coreOffset: 'u32'
	    },
	    RelayBlockNumber: 'u32',
	    RelayChainBlockNumber: 'RelayBlockNumber',
	    RelayHash: 'Hash',
	    RelayChainHash: 'RelayHash',
	    Remark: '[u8; 32]',
	    ReplacementTimes: {
	      expectedAt: 'BlockNumber',
	      activatedAt: 'BlockNumber'
	    },
	    Retriable: {
	      _enum: {
	        Never: 'Null',
	        WithRetries: 'u32'
	      }
	    },
	    Scheduling: {
	      _enum: ['Always', 'Dynamic']
	    },
	    SessionInfo: {
	      validators: 'Vec<ValidatorId>',
	      discoveryKeys: 'Vec<AuthorityDiscoveryId>',
	      assignmentKeys: 'Vec<AssignmentId>',
	      validatorGroups: 'Vec<SessionInfoValidatorGroup>',
	      nCores: 'u32',
	      zerothDelayTrancheWidth: 'u32',
	      relayVrfModuloSamples: 'u32',
	      nDelayTranches: 'u32',
	      noShowSlots: 'u32',
	      neededApprovals: 'u32'
	    },
	    SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
	    SignedAvailabilityBitfield: {
	      payload: 'BitVec',
	      validatorIndex: 'ParaValidatorIndex',
	      signature: 'ValidatorSignature'
	    },
	    SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
	    SigningContext: {
	      sessionIndex: 'SessionIndex',
	      parentHash: 'Hash'
	    },
	    Statement: {
	      _enum: {
	        Never: 'Null',
	        // starts at 1
	        Candidate: 'Hash',
	        Valid: 'Hash',
	        Invalid: 'Hash'
	      }
	    },
	    TransientValidationData: {
	      maxCodeSize: 'u32',
	      maxHeadDataSize: 'u32',
	      balance: 'Balance',
	      codeUpgradeAllowed: 'Option<BlockNumber>',
	      dmqLength: 'u32'
	    },
	    UpgradeGoAhead: {
	      _enum: ['Abort', 'GoAhead']
	    },
	    UpgradeRestriction: {
	      _enum: ['Present']
	    },
	    UpwardMessage: 'Bytes',
	    ValidationFunctionParams: {
	      maxCodeSize: 'u32',
	      relayChainHeight: 'RelayChainBlockNumber',
	      codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
	    },
	    ValidationCode: 'Bytes',
	    ValidationCodeHash: 'Hash',
	    ValidationData: {
	      persisted: 'PersistedValidationData',
	      transient: 'TransientValidationData'
	    },
	    ValidationDataType: {
	      validationData: 'ValidationData',
	      relayChainState: 'Vec<Bytes>'
	    },
	    ValidatorSignature: 'Signature',
	    ValidityAttestation: {
	      _enum: {
	        Never: 'Null',
	        // starts at 1
	        Implicit: 'ValidatorSignature',
	        Explicit: 'ValidatorSignature'
	      }
	    },
	    MessagingStateSnapshot: {
	      relayDispatchQueueSize: '(u32, u32)',
	      egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
	    },
	    MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
	    SystemInherentData: 'ParachainInherentData',
	    VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
	  })
	};
	exports.default = _default;
	});

	var definitions$f = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    Approvals: '[bool; 4]'
	  }
	};
	exports.default = _default;
	});

	var definitions$e = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {},
	  types: {
	    AccountStatus: {
	      validity: 'AccountValidity',
	      freeBalance: 'Balance',
	      lockedBalance: 'Balance',
	      signature: 'Vec<u8>',
	      vat: 'Permill'
	    },
	    AccountValidity: {
	      _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
	    }
	  }
	};
	exports.default = _default;
	});

	var v0_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v0 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v0 = {
	  AssetInstanceV0: {
	    _enum: {
	      Undefined: 'Null',
	      Index8: 'u8',
	      Index16: 'Compact<u16>',
	      Index32: 'Compact<u32>',
	      Index64: 'Compact<u64>',
	      Index128: 'Compact<u128>',
	      Array4: '[u8; 4]',
	      Array8: '[u8; 8]',
	      Array16: '[u8; 16]',
	      Array32: '[u8; 32]',
	      Blob: 'Vec<u8>'
	    }
	  },
	  JunctionV0: {
	    _enum: {
	      Parent: 'Null',
	      Parachain: 'Compact<u32>',
	      AccountId32: {
	        network: 'NetworkId',
	        id: 'AccountId'
	      },
	      AccountIndex64: {
	        network: 'NetworkId',
	        index: 'Compact<u64>'
	      },
	      AccountKey20: {
	        network: 'NetworkId',
	        key: '[u8; 20]'
	      },
	      PalletInstance: 'u8',
	      GeneralIndex: 'Compact<u128>',
	      GeneralKey: 'Vec<u8>',
	      OnlyChild: 'Null',
	      Plurality: {
	        id: 'BodyId',
	        part: 'BodyPart'
	      }
	    }
	  },
	  MultiAssetV0: {
	    _enum: {
	      None: 'Null',
	      All: 'Null',
	      AllFungible: 'Null',
	      AllNonFungible: 'Null',
	      AllAbstractFungible: 'Vec<u8>',
	      AllAbstractNonFungible: 'Vec<u8>',
	      AllConcreteFungible: 'MultiLocationV0',
	      AllConcreteNonFungible: 'MultiLocationV0',
	      AbstractFungible: {
	        id: 'Vec<u8>',
	        instance: 'Compact<u128>'
	      },
	      AbstractNonFungible: {
	        class: 'Vec<u8>',
	        instance: 'AssetInstanceV0'
	      },
	      ConcreteFungible: {
	        id: 'MultiLocationV0',
	        amount: 'Compact<u128>'
	      },
	      ConcreteNonFungible: {
	        class: 'MultiLocationV0',
	        instance: 'AssetInstanceV0'
	      }
	    }
	  },
	  MultiLocationV0: {
	    _enum: {
	      Here: 'Null',
	      X1: 'JunctionV0',
	      X2: '(JunctionV0, JunctionV0)',
	      X3: '(JunctionV0, JunctionV0, JunctionV0)',
	      X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
	      X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
	      X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
	      X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
	      X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
	    }
	  },
	  OriginKindV0: {
	    _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
	  },
	  ResponseV0: {
	    _enum: {
	      Assets: 'Vec<MultiAssetV0>'
	    }
	  },
	  XcmV0: {
	    _enum: {
	      WithdrawAsset: {
	        assets: 'Vec<MultiAssetV0>',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      ReserveAssetDeposit: {
	        assets: 'Vec<MultiAssetV0>',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      ReceiveTeleportedAsset: {
	        assets: 'Vec<MultiAssetV0>',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      QueryResponse: {
	        queryId: 'Compact<u64>',
	        response: 'ResponseV0'
	      },
	      TransferAsset: {
	        assets: 'Vec<MultiAssetV0>',
	        dest: 'MultiLocationV0'
	      },
	      TransferReserveAsset: {
	        assets: 'Vec<MultiAssetV0>',
	        dest: 'MultiLocationV0',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      Transact: {
	        originType: 'XcmOriginKind',
	        requireWeightAtMost: 'u64',
	        call: 'DoubleEncodedCall'
	      },
	      HrmpNewChannelOpenRequest: {
	        sender: 'Compact<u32>',
	        maxMessageSize: 'Compact<u32>',
	        maxCapacity: 'Compact<u32>'
	      },
	      HrmpChannelAccepted: {
	        recipient: 'Compact<u32>'
	      },
	      HrmpChannelClosing: {
	        initiator: 'Compact<u32>',
	        sender: 'Compact<u32>',
	        recipient: 'Compact<u32>'
	      },
	      RelayedFrom: {
	        who: 'MultiLocationV0',
	        message: 'XcmV0'
	      }
	    }
	  },
	  XcmErrorV0: {
	    _enum: {
	      Undefined: 'Null',
	      Overflow: 'Null',
	      Unimplemented: 'Null',
	      UnhandledXcmVersion: 'Null',
	      UnhandledXcmMessage: 'Null',
	      UnhandledEffect: 'Null',
	      EscalationOfPrivilege: 'Null',
	      UntrustedReserveLocation: 'Null',
	      UntrustedTeleportLocation: 'Null',
	      DestinationBufferOverflow: 'Null',
	      SendFailed: 'Null',
	      CannotReachDestination: '(MultiLocation, Xcm)',
	      MultiLocationFull: 'Null',
	      FailedToDecode: 'Null',
	      BadOrigin: 'Null',
	      ExceedsMaxMessageSize: 'Null',
	      FailedToTransactAsset: 'Null',
	      WeightLimitReached: 'Weight',
	      Wildcard: 'Null',
	      TooMuchWeightRequired: 'Null',
	      NotHoldingFees: 'Null',
	      WeightNotComputable: 'Null',
	      Barrier: 'Null',
	      NotWithdrawable: 'Null',
	      LocationCannotHold: 'Null',
	      TooExpensive: 'Null'
	    }
	  },
	  XcmOrderV0: {
	    _enum: {
	      Null: 'Null',
	      DepositAsset: {
	        assets: 'Vec<MultiAssetV0>',
	        dest: 'MultiLocationV0'
	      },
	      DepositReserveAsset: {
	        assets: 'Vec<MultiAssetV0>',
	        dest: 'MultiLocationV0',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      ExchangeAsset: {
	        give: 'Vec<MultiAssetV0>',
	        receive: 'Vec<MultiAssetV0>'
	      },
	      InitiateReserveWithdraw: {
	        assets: 'Vec<MultiAssetV0>',
	        reserve: 'MultiLocationV0',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      InitiateTeleport: {
	        assets: 'Vec<MultiAsset>',
	        dest: 'MultiLocationV0',
	        effects: 'Vec<XcmOrderV0>'
	      },
	      QueryHolding: {
	        queryId: 'Compact<u64>',
	        dest: 'MultiLocationV0',
	        assets: 'Vec<MultiAssetV0>'
	      },
	      BuyExecution: {
	        fees: 'MultiAsset',
	        weight: 'u64',
	        debt: 'u64',
	        haltOnError: 'bool',
	        xcm: 'Vec<XcmV0>'
	      }
	    }
	  }
	};
	exports.v0 = v0;
	});

	var v1_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v1 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v1 = {
	  AssetInstanceV1: {
	    _enum: {
	      Undefined: 'Null',
	      Index: 'Compact<u128>',
	      Array4: '[u8; 4]',
	      Array8: '[u8; 8]',
	      Array16: '[u8; 16]',
	      Array32: '[u8; 32]',
	      Blob: 'Bytes'
	    }
	  },
	  JunctionV1: {
	    _enum: {
	      Parachain: 'Compact<u32>',
	      AccountId32: {
	        network: 'NetworkId',
	        id: 'AccountId'
	      },
	      AccountIndex64: {
	        network: 'NetworkId',
	        index: 'Compact<u64>'
	      },
	      AccountKey20: {
	        network: 'NetworkId',
	        key: '[u8; 20]'
	      },
	      PalletInstance: 'u8',
	      GeneralIndex: 'Compact<u128>',
	      GeneralKey: 'Vec<u8>',
	      OnlyChild: 'Null',
	      Plurality: {
	        id: 'BodyId',
	        part: 'BodyPart'
	      }
	    }
	  },
	  JunctionsV1: {
	    _enum: {
	      Here: 'Null',
	      X1: 'JunctionV1',
	      X2: '(JunctionV1, JunctionV1)',
	      X3: '(JunctionV1, JunctionV1, JunctionV1)',
	      X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
	      X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
	      X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
	      X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
	      X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
	    }
	  },
	  MultiAssetsV1: 'Vec<MultiAssetV1>',
	  MultiAssetV1: {
	    id: 'XcmAssetId',
	    fungibility: 'Fungibility'
	  },
	  MultiAssetFilterV1: {
	    _enum: {
	      Definite: 'MultiAssetsV1',
	      Wild: 'WildMultiAssetV1'
	    }
	  },
	  MultiLocationV1: {
	    parents: 'u8',
	    interior: 'JunctionsV1'
	  },
	  OriginKindV1: 'OriginKindV0',
	  ResponseV1: {
	    _enum: {
	      Assets: 'MultiAssetsV1'
	    }
	  },
	  WildMultiAssetV1: {
	    _enum: {
	      All: 'Null',
	      AllOf: {
	        id: 'XcmAssetId',
	        fungibility: 'WildFungibility'
	      }
	    }
	  },
	  XcmV1: {
	    _enum: {
	      WithdrawAsset: {
	        Vassets: 'MultiAssetsV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      ReserveAssetDeposit: {
	        Vassets: 'MultiAssetsV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      ReceiveTeleportedAsset: {
	        Vassets: 'MultiAssetsV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      QueryResponse: {
	        queryId: 'Compact<u64>',
	        response: 'ResponseV1'
	      },
	      TransferAsset: {
	        Vassets: 'MultiAssetsV1',
	        dest: 'MultiLocationV1'
	      },
	      TransferReserveAsset: {
	        Vassets: 'MultiAssetsV1',
	        dest: 'MultiLocationV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      Transact: {
	        originType: 'XcmOriginKind',
	        requireWeightAtMost: 'u64',
	        call: 'DoubleEncodedCall'
	      },
	      HrmpNewChannelOpenRequest: {
	        sender: 'Compact<u32>',
	        maxMessageSize: 'Compact<u32>',
	        maxCapacity: 'Compact<u32>'
	      },
	      HrmpChannelAccepted: {
	        recipient: 'Compact<u32>'
	      },
	      HrmpChannelClosing: {
	        initiator: 'Compact<u32>',
	        sender: 'Compact<u32>',
	        recipient: 'Compact<u32>'
	      },
	      RelayedFrom: {
	        who: 'MultiLocationV1',
	        message: 'XcmV1'
	      }
	    }
	  },
	  XcmErrorV1: {
	    _enum: {
	      Undefined: 'Null',
	      Overflow: 'Null',
	      Unimplemented: 'Null',
	      UnhandledXcmVersion: 'Null',
	      UnhandledXcmMessage: 'Null',
	      UnhandledEffect: 'Null',
	      EscalationOfPrivilege: 'Null',
	      UntrustedReserveLocation: 'Null',
	      UntrustedTeleportLocation: 'Null',
	      DestinationBufferOverflow: 'Null',
	      SendFailed: 'Null',
	      CannotReachDestination: '(MultiLocationV1, XcmV1)',
	      MultiLocationFull: 'Null',
	      FailedToDecode: 'Null',
	      BadOrigin: 'Null',
	      ExceedsMaxMessageSize: 'Null',
	      FailedToTransactAsset: 'Null',
	      WeightLimitReached: 'Weight',
	      Wildcard: 'Null',
	      TooMuchWeightRequired: 'Null',
	      NotHoldingFees: 'Null',
	      WeightNotComputable: 'Null',
	      Barrier: 'Null',
	      NotWithdrawable: 'Null',
	      LocationCannotHold: 'Null',
	      TooExpensive: 'Null',
	      AssetNotFound: 'Null',
	      DestinationUnsupported: 'Null',
	      RecursionLimitReached: 'Null'
	    }
	  },
	  XcmOrderV1: {
	    _enum: {
	      Noop: 'Null',
	      DepositAsset: {
	        assets: 'MultiAssetFilterV1',
	        maxAssets: 'u32',
	        beneficiary: 'MultiLocationV1'
	      },
	      DepositReserveAsset: {
	        assets: 'MultiAssetFilterV1',
	        maxAssets: 'u32',
	        dest: 'MultiLocationV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      ExchangeAsset: {
	        give: 'MultiAssetFilterV1',
	        receive: 'MultiAssetsV1'
	      },
	      InitiateReserveWithdraw: {
	        assets: 'MultiAssetFilterV1',
	        reserve: 'MultiLocationV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      InitiateTeleport: {
	        assets: 'MultiAssetFilterV1',
	        dest: 'MultiLocationV1',
	        effects: 'Vec<XcmOrderV1>'
	      },
	      QueryHolding: {
	        queryId: 'Compact<u64>',
	        dest: 'MultiLocationV1',
	        assets: 'MultiAssetFilterV1'
	      },
	      BuyExecution: {
	        fees: 'MultiAsset',
	        weight: 'u64',
	        debt: 'u64',
	        haltOnError: 'bool',
	        orders: 'Vec<XcmOrderV1>',
	        instructions: 'Vec<XcmV1>'
	      }
	    }
	  }
	};
	exports.v1 = v1;
	});

	var v2_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v2 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v2 = {
	  JunctionV2: 'JunctionV1',
	  JunctionsV2: 'JunctionsV1',
	  MultiAssetsV2: 'MultiAssetsV1',
	  MultiAssetV2: 'MultiAssetV1',
	  MultiAssetFilterV2: 'MultiAssetFilterV1',
	  MultiLocationV2: 'MultiLocationV1',
	  OriginKindV2: 'OriginKindV1',
	  ResponseV2: {
	    _enum: {
	      Null: 'Null',
	      Assets: 'MultiAssetsV2',
	      ExecutionResult: 'ResponseV2Result'
	    }
	  },
	  ResponseV2Error: '(u32, XcmErrorV2)',
	  ResponseV2Result: 'Result<Null, ResponseV2Error>',
	  WeightLimitV2: {
	    _enum: {
	      Unlimited: 'Null',
	      Limited: 'Compact<u64>'
	    }
	  },
	  InstructionV2: {
	    _enum: {
	      WithdrawAsset: 'MultiAssetsV2',
	      ReserveAssetDeposited: 'MultiAssetsV2',
	      ReceiveTeleportedAsset: 'MultiAssetsV2',
	      QueryResponse: {
	        queryId: 'Compact<u64>',
	        response: 'ResponseV2',
	        maxWeight: 'Compact<u64>'
	      },
	      TransferAsset: {
	        assets: 'MultiAssetsV2',
	        beneficiary: 'MultiLocationV2'
	      },
	      TransferReserveAsset: {
	        assets: 'MultiAssetsV2',
	        dest: 'MultiLocationV2',
	        xcm: 'XcmV2'
	      },
	      Transact: {
	        originType: 'OriginKindV2',
	        requireWeightAtMost: 'u64',
	        call: 'DoubleEncodedCall'
	      },
	      HrmpNewChannelOpenRequest: {
	        sender: 'Compact<u32>',
	        maxMessageSize: 'Compact<u32>',
	        maxCapacity: 'Compact<u32>'
	      },
	      HrmpChannelAccepted: {
	        recipient: 'Compact<u32>'
	      },
	      HrmpChannelClosing: {
	        initiator: 'Compact<u32>',
	        sender: 'Compact<u32>',
	        recipient: 'Compact<u32>'
	      },
	      ClearOrigin: 'Null',
	      DescendOrigin: 'InteriorMultiLocation',
	      ReportError: {
	        queryId: 'Compact<u64>',
	        dest: 'MultiLocationV2',
	        maxResponseWeight: 'Compact<u64>'
	      },
	      DepositAsset: {
	        assets: 'MultiAssetFilterV2',
	        maxAssets: 'u32',
	        beneficiary: 'MultiLocationV2'
	      },
	      DepositReserveAsset: {
	        assets: 'MultiAssetFilterV2',
	        maxAssets: 'u32',
	        dest: 'MultiLocationV2',
	        xcm: 'XcmV2'
	      },
	      ExchangeAsset: {
	        give: 'MultiAssetFilterV2',
	        receive: 'MultiAssetsV2'
	      },
	      InitiateReserveWithdraw: {
	        assets: 'MultiAssetFilterV2',
	        reserve: 'MultiLocationV2',
	        xcm: 'XcmV2'
	      },
	      InitiateTeleport: {
	        assets: 'MultiAssetFilterV2',
	        dest: 'MultiLocationV2',
	        xcm: 'XcmV2'
	      },
	      QueryHolding: {
	        query_id: 'Compact<u64>',
	        dest: 'MultiLocationV2',
	        assets: 'MultiAssetFilterV2',
	        maxResponse_Weight: 'Compact<u64>'
	      },
	      BuyExecution: {
	        fees: 'MultiAssetV2',
	        weightLimit: 'WeightLimitV2'
	      },
	      RefundSurplus: 'Null',
	      SetErrorHandler: 'XcmV2',
	      SetAppendix: 'XcmV2',
	      ClearError: 'Null',
	      ClaimAsset: {
	        assets: 'MultiAssetsV2',
	        ticket: 'MultiLocationV2'
	      },
	      Trap: 'u64'
	    }
	  },
	  XcmV2: 'Vec<InstructionV2>',
	  XcmErrorV2: {
	    _enum: {
	      Undefined: 'Null',
	      Overflow: 'Null',
	      Unimplemented: 'Null',
	      UnhandledXcmVersion: 'Null',
	      UnhandledXcmMessage: 'Null',
	      UnhandledEffect: 'Null',
	      EscalationOfPrivilege: 'Null',
	      UntrustedReserveLocation: 'Null',
	      UntrustedTeleportLocation: 'Null',
	      DestinationBufferOverflow: 'Null',
	      MultiLocationFull: 'Null',
	      MultiLocationNotInvertible: 'Null',
	      FailedToDecode: 'Null',
	      BadOrigin: 'Null',
	      ExceedsMaxMessageSize: 'Null',
	      FailedToTransactAsset: 'Null',
	      WeightLimitReached: 'Weight',
	      Wildcard: 'Null',
	      TooMuchWeightRequired: 'Null',
	      NotHoldingFees: 'Null',
	      WeightNotComputable: 'Null',
	      Barrier: 'Null',
	      NotWithdrawable: 'Null',
	      LocationCannotHold: 'Null',
	      TooExpensive: 'Null',
	      AssetNotFound: 'Null',
	      DestinationUnsupported: 'Null',
	      RecursionLimitReached: 'Null',
	      Transport: 'Null',
	      Unroutable: 'Null',
	      UnknownWeightRequired: 'Null',
	      Trap: 'u64',
	      UnknownClaim: 'Null'
	    }
	  }
	};
	exports.v2 = v2;
	});

	var _v$2 = v0_1$1;

	var _v2$1 = v1_1;

	var _v3$1 = v2_1;

	var definitions$d = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);







	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const xcm = {
	  XcmOrigin: {
	    _enum: {
	      Xcm: 'MultiLocation'
	    }
	  },
	  Xcm: 'XcmV1',
	  XcmpMessageFormat: {
	    _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
	  },
	  XcmError: 'XcmErrorV1',
	  XcmOrder: 'XcmOrderV1',
	  XcmAssetId: {
	    _enum: {
	      Concrete: 'MultiLocation',
	      Abstract: 'Bytes'
	    }
	  },
	  AssetInstance: 'AssetInstanceV1',
	  Fungibility: {
	    _enum: {
	      Fungible: 'u128',
	      NonFungible: 'AssetInstance'
	    }
	  },
	  InboundStatus: {
	    _enum: ['Ok', 'Suspended']
	  },
	  OutboundStatus: {
	    _enum: ['Ok', 'Suspended']
	  },
	  MultiAssetFilter: 'MultiAssetFilterV1',
	  MultiAsset: 'MultiAssetV1',
	  MultiAssets: 'Vec<MultiAsset>',
	  WildFungibility: {
	    _enum: ['Fungible', 'NonFungible']
	  },
	  WildMultiAsset: 'WildMultiAssetV1'
	};
	const location = {
	  BodyId: {
	    _enum: {
	      Unit: 'Null',
	      Named: 'Vec<u8>',
	      Index: 'Compact<u32>',
	      Executive: 'Null',
	      Technical: 'Null',
	      Legislative: 'Null',
	      Judicial: 'Null'
	    }
	  },
	  BodyPart: {
	    _enum: {
	      Voice: 'Null',
	      Members: 'Compact<u32>',
	      Fraction: {
	        nom: 'Compact<u32>',
	        denom: 'Compact<u32>'
	      },
	      AtLeastProportion: {
	        nom: 'Compact<u32>',
	        denom: 'Compact<u32>'
	      },
	      MoreThanProportion: {
	        nom: 'Compact<u32>',
	        denom: 'Compact<u32>'
	      }
	    }
	  },
	  InteriorMultiLocation: 'Junctions',
	  Junction: 'JunctionV1',
	  Junctions: 'JunctionsV1',
	  MultiLocation: 'MultiLocationV1',
	  NetworkId: {
	    _enum: {
	      Any: 'Null',
	      Named: 'Vec<u8>',
	      Polkadot: 'Null',
	      Kusama: 'Null'
	    }
	  }
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, location), xcm), _v$2.v0), _v2$1.v1), _v3$1.v2), {}, {
	    DoubleEncodedCall: {
	      encoded: 'Vec<u8>'
	    },
	    XcmOriginKind: {
	      _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
	    },
	    Response: 'ResponseV1',
	    Outcome: {
	      _enum: {
	        Complete: 'Weight',
	        Incomplete: '(Weight, XcmErrorV0)',
	        Error: 'XcmErrorV0'
	      }
	    },
	    QueryId: 'u64',
	    QueryStatus: {
	      _enum: {
	        Pending: {
	          responder: 'VersionedMultiLocation',
	          maybeNotify: 'Option<(u8, u8)>',
	          timeout: 'BlockNumber'
	        },
	        Ready: {
	          response: 'VersionedResponse',
	          at: 'BlockNumber'
	        }
	      }
	    },
	    QueueConfigData: {
	      suspendThreshold: 'u32',
	      dropThreshold: 'u32',
	      resumeThreshold: 'u32',
	      thresholdWeight: 'Weight',
	      weightRestrictDecay: 'Weight'
	    },
	    VersionMigrationStage: {
	      _enum: {
	        MigrateSupportedVersion: 'Null',
	        MigrateVersionNotifiers: 'Null',
	        NotifyCurrentTargets: 'Option<Bytes>',
	        MigrateAndNotifyOldTargets: 'Null'
	      }
	    },
	    VersionedMultiAsset: {
	      _enum: {
	        V0: 'MultiAssetV0',
	        V1: 'MultiAssetV1',
	        V2: 'MultiAssetV2'
	      }
	    },
	    VersionedMultiAssets: {
	      _enum: {
	        V0: 'Vec<MultiAssetV0>',
	        V1: 'MultiAssetsV1',
	        V2: 'MultiAssetsV2'
	      }
	    },
	    VersionedMultiLocation: {
	      _enum: {
	        V0: 'MultiLocationV0',
	        V1: 'MultiLocationV1',
	        V2: 'MultiLocationV2'
	      }
	    },
	    VersionedResponse: {
	      V0: 'ResponseV0',
	      V1: 'ResponseV1',
	      V2: 'ResponseV2'
	    },
	    VersionedXcm: {
	      _enum: {
	        V0: 'XcmV0',
	        V1: 'XcmV1',
	        V2: 'XcmV2'
	      }
	    },
	    XcmVersion: 'u32'
	  })
	};
	exports.default = _default;
	});

	var definitions$c = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const layout = {
	  ContractCryptoHasher: {
	    _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
	  },
	  ContractDiscriminant: 'u32',
	  ContractLayoutArray: {
	    offset: 'ContractLayoutKey',
	    len: 'u32',
	    cellsPerElem: 'u64',
	    layout: 'ContractStorageLayout'
	  },
	  ContractLayoutCell: {
	    key: 'ContractLayoutKey',
	    ty: 'Si0LookupTypeId'
	  },
	  ContractLayoutEnum: {
	    dispatchKey: 'ContractLayoutKey',
	    variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
	  },
	  ContractLayoutHash: {
	    offset: 'ContractLayoutKey',
	    strategy: 'ContractLayoutHashingStrategy',
	    layout: 'ContractStorageLayout'
	  },
	  ContractLayoutHashingStrategy: {
	    hasher: 'ContractCryptoHasher',
	    postfix: 'Vec<u8>',
	    prefix: 'Vec<u8>'
	  },
	  ContractLayoutKey: '[u8; 32]',
	  ContractLayoutStruct: {
	    fields: 'Vec<ContractLayoutStructField>'
	  },
	  ContractLayoutStructField: {
	    layout: 'ContractStorageLayout',
	    name: 'Text'
	  },
	  ContractStorageLayout: {
	    _enum: {
	      Cell: 'ContractLayoutCell',
	      Hash: 'ContractLayoutHash',
	      Array: 'ContractLayoutArray',
	      Struct: 'ContractLayoutStruct',
	      Enum: 'ContractLayoutEnum'
	    }
	  }
	};
	const spec = {
	  ContractConstructorSpec: {
	    name: 'Text',
	    selector: 'ContractSelector',
	    args: 'Vec<ContractMessageParamSpec>',
	    docs: 'Vec<Text>'
	  },
	  ContractContractSpec: {
	    constructors: 'Vec<ContractConstructorSpec>',
	    messages: 'Vec<ContractMessageSpec>',
	    events: 'Vec<ContractEventSpec>',
	    docs: 'Vec<Text>'
	  },
	  ContractDisplayName: 'Si0Path',
	  ContractEventParamSpec: {
	    name: 'Text',
	    indexed: 'bool',
	    type: 'ContractTypeSpec',
	    docs: 'Vec<Text>'
	  },
	  ContractEventSpec: {
	    name: 'Text',
	    args: 'Vec<ContractEventParamSpec>',
	    docs: 'Vec<Text>'
	  },
	  ContractMessageParamSpec: {
	    name: 'Text',
	    type: 'ContractTypeSpec'
	  },
	  ContractMessageSpec: {
	    name: 'Text',
	    selector: 'ContractSelector',
	    mutates: 'bool',
	    payable: 'bool',
	    args: 'Vec<ContractMessageParamSpec>',
	    returnType: 'Option<ContractTypeSpec>',
	    docs: 'Vec<Text>'
	  },
	  ContractSelector: '[u8; 4]',
	  ContractTypeSpec: {
	    type: 'Si0LookupTypeId',
	    displayName: 'ContractDisplayName'
	  }
	};
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread(_objectSpread({}, layout), spec), {}, {
	    ContractProject: {
	      // added by ABI serialization
	      metadataVersion: 'Text',
	      source: 'ContractProjectSource',
	      contract: 'ContractProjectContract',
	      // expanded scale registry: RegistryReadOnly
	      // NOTE Previous generation of the Si0Type definition
	      types: 'Vec<Si0Type>',
	      // renamed from layout (ignored for now, incomplete)
	      // storage: 'ContractStorageLayout',
	      spec: 'ContractContractSpec'
	    },
	    ContractProjectContract: {
	      _alias: {
	        docs: 'documentation'
	      },
	      name: 'Text',
	      version: 'Text',
	      authors: 'Vec<Text>',
	      description: 'Option<Text>',
	      docs: 'Option<Text>',
	      repository: 'Option<Text>',
	      homepage: 'Option<Text>',
	      license: 'Option<Text>'
	    },
	    ContractProjectSource: {
	      _alias: {
	        wasmHash: 'hash'
	      },
	      wasmHash: '[u8; 32]',
	      language: 'Text',
	      compiler: 'Text',
	      wasm: 'Raw'
	    }
	  })
	};
	exports.default = _default;
	});

	var v0_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v0 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v0 = {
	  Si0Field: {
	    name: 'Option<Text>',
	    type: 'Si0LookupTypeId',
	    typeName: 'Option<Text>',
	    docs: 'Vec<Text>'
	  },
	  Si0LookupTypeId: 'u32',
	  Si0Path: 'Vec<Text>',
	  Si0Type: {
	    path: 'Si0Path',
	    params: 'Vec<Si0LookupTypeId>',
	    def: 'Si0TypeDef'
	  },
	  Si0TypeDef: {
	    _enum: {
	      Composite: 'Si0TypeDefComposite',
	      Variant: 'Si0TypeDefVariant',
	      Sequence: 'Si0TypeDefSequence',
	      Array: 'Si0TypeDefArray',
	      Tuple: 'Si0TypeDefTuple',
	      Primitive: 'Si0TypeDefPrimitive',
	      Compact: 'Si0TypeDefCompact',
	      Phantom: 'Si0TypeDefPhantom',
	      BitSequence: 'Si0TypeDefBitSequence'
	    }
	  },
	  Si0TypeDefArray: {
	    len: 'u32',
	    type: 'Si0LookupTypeId'
	  },
	  Si0TypeDefBitSequence: {
	    bitStoreType: 'Si0LookupTypeId',
	    bitOrderType: 'Si0LookupTypeId'
	  },
	  Si0TypeDefCompact: {
	    type: 'Si0LookupTypeId'
	  },
	  Si0TypeDefComposite: {
	    fields: 'Vec<Si0Field>'
	  },
	  Si0TypeDefPhantom: 'Null',
	  Si0TypeDefVariant: {
	    variants: 'Vec<Si0Variant>'
	  },
	  Si0TypeDefPrimitive: {
	    _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
	  },
	  Si0TypeDefSequence: {
	    type: 'Si0LookupTypeId'
	  },
	  Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
	  Si0TypeParameter: {
	    name: 'Text',
	    type: 'Option<Si0LookupTypeId>'
	  },
	  Si0Variant: {
	    name: 'Text',
	    fields: 'Vec<Si0Field>',
	    index: 'Option<u8>',
	    discriminant: 'Option<u64>',
	    docs: 'Vec<Text>'
	  }
	};
	exports.v0 = v0;
	});

	var _v$1 = v0_1;

	var definitions$b = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.SiVariant = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);



	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// order important in structs... :)

	/* eslint-disable sort-keys */
	const SiVariant = {
	  name: 'Text',
	  fields: 'Vec<SiField>',
	  index: 'u8',
	  docs: 'Vec<Text>'
	};
	exports.SiVariant = SiVariant;
	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread({}, _v$1.v0), {}, {
	    SiField: {
	      name: 'Option<Text>',
	      type: 'SiLookupTypeId',
	      typeName: 'Option<Text>',
	      docs: 'Vec<Text>'
	    },
	    SiLookupTypeId: 'Compact<u32>',
	    SiPath: 'Vec<Text>',
	    SiType: {
	      path: 'SiPath',
	      params: 'Vec<SiTypeParameter>',
	      def: 'SiTypeDef',
	      docs: 'Vec<Text>'
	    },
	    SiTypeDef: {
	      _enum: {
	        Composite: 'SiTypeDefComposite',
	        Variant: 'SiTypeDefVariant',
	        Sequence: 'SiTypeDefSequence',
	        Array: 'SiTypeDefArray',
	        Tuple: 'SiTypeDefTuple',
	        Primitive: 'SiTypeDefPrimitive',
	        Compact: 'SiTypeDefCompact',
	        BitSequence: 'SiTypeDefBitSequence',
	        // NOTE: This is specific to the implementation for pre-v14 metadata
	        // compatibility (always keep this as the last entry in the enum)
	        HistoricMetaCompat: 'Type'
	      }
	    },
	    SiTypeDefArray: {
	      len: 'u32',
	      type: 'SiLookupTypeId'
	    },
	    SiTypeDefBitSequence: {
	      bitStoreType: 'SiLookupTypeId',
	      bitOrderType: 'SiLookupTypeId'
	    },
	    SiTypeDefCompact: {
	      type: 'SiLookupTypeId'
	    },
	    SiTypeDefComposite: {
	      fields: 'Vec<SiField>'
	    },
	    SiTypeDefPrimitive: {
	      _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
	    },
	    SiTypeDefSequence: {
	      type: 'SiLookupTypeId'
	    },
	    SiTypeDefTuple: 'Vec<SiLookupTypeId>',
	    SiTypeParameter: {
	      name: 'Text',
	      type: 'Option<SiLookupTypeId>'
	    },
	    SiTypeDefVariant: {
	      variants: 'Vec<SiVariant>'
	    },
	    SiVariant
	  })
	};
	exports.default = _default;
	});

	var rpc_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.rpc = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// As per frontier
	// We use aliasSection here to override since these are in another namespace
	const netRpc = {
	  listening: {
	    aliasSection: 'net',
	    description: 'Returns true if client is actively listening for network connections. Otherwise false.',
	    params: [],
	    type: 'bool'
	  },
	  peerCount: {
	    aliasSection: 'net',
	    description: 'Returns number of peers connected to node.',
	    params: [],
	    type: 'String'
	  },
	  version: {
	    aliasSection: 'net',
	    description: 'Returns protocol version.',
	    params: [],
	    type: 'String'
	  }
	};
	const web3Rpc = {
	  clientVersion: {
	    aliasSection: 'web3',
	    description: 'Returns current client version.',
	    params: [],
	    type: 'String'
	  },
	  sha3: {
	    aliasSection: 'web3',
	    description: 'Returns sha3 of the given data',
	    params: [{
	      name: 'data',
	      type: 'Bytes'
	    }],
	    type: 'H256'
	  }
	};

	const rpc = _objectSpread(_objectSpread(_objectSpread({}, netRpc), web3Rpc), {}, {
	  accounts: {
	    description: 'Returns accounts list.',
	    params: [],
	    type: 'Vec<H160>'
	  },
	  blockNumber: {
	    description: 'Returns the blockNumber',
	    params: [],
	    type: 'U256'
	  },
	  call: {
	    description: 'Call contract, returning the output data.',
	    params: [{
	      name: 'request',
	      type: 'EthCallRequest'
	    }, {
	      isOptional: true,
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'Bytes'
	  },
	  chainId: {
	    description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
	    params: [],
	    type: 'U64'
	  },
	  coinbase: {
	    description: 'Returns block author.',
	    params: [],
	    type: 'H160'
	  },
	  estimateGas: {
	    description: 'Estimate gas needed for execution of given contract.',
	    params: [{
	      name: 'request',
	      type: 'EthCallRequest'
	    }, {
	      isOptional: true,
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'U256'
	  },
	  gasPrice: {
	    description: 'Returns current gas price.',
	    params: [],
	    type: 'U256'
	  },
	  getBalance: {
	    description: 'Returns balance of the given account.',
	    params: [{
	      name: 'address',
	      type: 'H160'
	    }, {
	      isOptional: true,
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'U256'
	  },
	  getBlockByHash: {
	    description: 'Returns block with given hash.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }, {
	      name: 'full',
	      type: 'bool'
	    }],
	    type: 'Option<EthRichBlock>'
	  },
	  getBlockByNumber: {
	    description: 'Returns block with given number.',
	    params: [{
	      name: 'block',
	      type: 'BlockNumber'
	    }, {
	      name: 'full',
	      type: 'bool'
	    }],
	    type: 'Option<EthRichBlock>'
	  },
	  getBlockTransactionCountByHash: {
	    description: 'Returns the number of transactions in a block with given hash.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }],
	    type: 'U256'
	  },
	  getBlockTransactionCountByNumber: {
	    description: 'Returns the number of transactions in a block with given block number.',
	    params: [{
	      name: 'block',
	      type: 'BlockNumber'
	    }],
	    type: 'U256'
	  },
	  getCode: {
	    description: 'Returns the code at given address at given time (block number).',
	    params: [{
	      name: 'address',
	      type: 'H160'
	    }, {
	      isOptional: true,
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'Bytes'
	  },
	  getFilterChanges: {
	    description: 'Returns filter changes since last poll.',
	    params: [{
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'EthFilterChanges'
	  },
	  getFilterLogs: {
	    description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
	    params: [{
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'Vec<EthLog>'
	  },
	  getLogs: {
	    description: 'Returns logs matching given filter object.',
	    params: [{
	      name: 'filter',
	      type: 'EthFilter'
	    }],
	    type: 'Vec<EthLog>'
	  },
	  getProof: {
	    description: 'Returns proof for account and storage.',
	    params: [{
	      name: 'address',
	      type: 'H160'
	    }, {
	      name: 'storageKeys',
	      type: 'Vec<H256>'
	    }, {
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'EthAccount'
	  },
	  getStorageAt: {
	    description: 'Returns content of the storage at given address.',
	    params: [{
	      name: 'address',
	      type: 'H160'
	    }, {
	      name: 'index',
	      type: 'U256'
	    }, {
	      isOptional: true,
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'H256'
	  },
	  getTransactionByBlockHashAndIndex: {
	    description: 'Returns transaction at given block hash and index.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }, {
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'EthTransaction'
	  },
	  getTransactionByBlockNumberAndIndex: {
	    description: 'Returns transaction by given block number and index.',
	    params: [{
	      name: 'number',
	      type: 'BlockNumber'
	    }, {
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'EthTransaction'
	  },
	  getTransactionByHash: {
	    description: 'Get transaction by its hash.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }],
	    type: 'EthTransaction'
	  },
	  getTransactionCount: {
	    description: 'Returns the number of transactions sent from given address at given time (block number).',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }, {
	      isOptional: true,
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'U256'
	  },
	  getTransactionReceipt: {
	    description: 'Returns transaction receipt by transaction hash.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }],
	    type: 'EthReceipt'
	  },
	  getUncleByBlockHashAndIndex: {
	    description: 'Returns an uncles at given block and index.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }, {
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'EthRichBlock'
	  },
	  getUncleByBlockNumberAndIndex: {
	    description: 'Returns an uncles at given block and index.',
	    params: [{
	      name: 'number',
	      type: 'BlockNumber'
	    }, {
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'EthRichBlock'
	  },
	  getUncleCountByBlockHash: {
	    description: 'Returns the number of uncles in a block with given hash.',
	    params: [{
	      name: 'hash',
	      type: 'H256'
	    }],
	    type: 'U256'
	  },
	  getUncleCountByBlockNumber: {
	    description: 'Returns the number of uncles in a block with given block number.',
	    params: [{
	      name: 'number',
	      type: 'BlockNumber'
	    }],
	    type: 'U256'
	  },
	  getWork: {
	    description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
	    params: [],
	    type: 'EthWork'
	  },
	  hashrate: {
	    description: 'Returns the number of hashes per second that the node is mining with.',
	    params: [],
	    type: 'U256'
	  },
	  mining: {
	    description: 'Returns true if client is actively mining new blocks.',
	    params: [],
	    type: 'bool'
	  },
	  newBlockFilter: {
	    description: 'Returns id of new block filter.',
	    params: [],
	    type: 'U256'
	  },
	  newFilter: {
	    description: 'Returns id of new filter.',
	    params: [{
	      name: 'filter',
	      type: 'EthFilter'
	    }],
	    type: 'U256'
	  },
	  newPendingTransactionFilter: {
	    description: 'Returns id of new block filter.',
	    params: [],
	    type: 'U256'
	  },
	  protocolVersion: {
	    description: 'Returns protocol version encoded as a string (quotes are necessary).',
	    params: [],
	    type: 'u64'
	  },
	  sendRawTransaction: {
	    description: 'Sends signed transaction, returning its hash.',
	    params: [{
	      name: 'bytes',
	      type: 'Bytes'
	    }],
	    type: 'H256'
	  },
	  sendTransaction: {
	    description: 'Sends transaction; will block waiting for signer to return the transaction hash',
	    params: [{
	      name: 'tx',
	      type: 'EthTransactionRequest'
	    }],
	    type: 'H256'
	  },
	  submitHashrate: {
	    description: 'Used for submitting mining hashrate.',
	    params: [{
	      name: 'index',
	      type: 'U256'
	    }, {
	      name: 'hash',
	      type: 'H256'
	    }],
	    type: 'bool'
	  },
	  submitWork: {
	    description: 'Used for submitting a proof-of-work solution.',
	    params: [{
	      name: 'nonce',
	      type: 'H64'
	    }, {
	      name: 'headerHash',
	      type: 'H256'
	    }, {
	      name: 'mixDigest',
	      type: 'H256'
	    }],
	    type: 'bool'
	  },
	  subscribe: {
	    description: 'Subscribe to Eth subscription.',
	    params: [{
	      name: 'kind',
	      type: 'EthSubKind'
	    }, {
	      isOptional: true,
	      name: 'params',
	      type: 'EthSubParams'
	    }],
	    pubsub: ['subscription', 'subscribe', 'unsubscribe'],
	    type: 'Null'
	  },
	  syncing: {
	    description: 'Returns an object with data about the sync status or false.',
	    params: [],
	    type: 'EthSyncStatus'
	  },
	  uninstallFilter: {
	    description: 'Uninstalls filter.',
	    params: [{
	      name: 'index',
	      type: 'U256'
	    }],
	    type: 'bool'
	  }
	});

	exports.rpc = rpc;
	});

	var _rpc = rpc_1;

	var definitions$a = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	// As per frontier
	const types = {
	  EthereumAccountId: 'GenericEthereumAccountId',
	  EthereumLookupSource: 'GenericEthereumLookupSource',
	  EthereumSignature: '[u8; 65]',
	  EthAccount: {
	    address: 'H160',
	    balance: 'U256',
	    nonce: 'U256',
	    codeHash: 'H256',
	    storageHash: 'H256',
	    accountProof: 'Vec<Bytes>',
	    storageProof: 'Vec<EthStorageProof>'
	  },
	  EthBlock: {
	    header: 'EthHeader',
	    transactions: 'Vec<EthTransaction>',
	    ommers: 'Vec<EthHeader>'
	  },
	  EthHeader: {
	    parentHash: 'H256',
	    ommersHash: 'H256',
	    beneficiary: 'H160',
	    stateRoot: 'H256',
	    transactionsRoot: 'H256',
	    receiptsRoot: 'H256',
	    logsBloom: 'EthBloom',
	    difficulty: 'U256',
	    number: 'U256',
	    gasLimit: 'U256',
	    gasUsed: 'U256',
	    timestamp: 'u64',
	    extraData: 'Bytes',
	    mixMash: 'H256',
	    nonce: 'H64'
	  },
	  EthRichBlock: {
	    _alias: {
	      blockHash: 'hash',
	      blockSize: 'size'
	    },
	    blockHash: 'Option<H256>',
	    parentHash: 'H256',
	    sha3Uncles: 'H256',
	    author: 'H160',
	    miner: 'H160',
	    stateRoot: 'H256',
	    transactionsRoot: 'H256',
	    receiptsRoot: 'H256',
	    number: 'Option<U256>',
	    gasUsed: 'U256',
	    gasLimit: 'U256',
	    extraData: 'Bytes',
	    logsBloom: 'EthBloom',
	    timestamp: 'U256',
	    difficulty: 'U256',
	    totalDifficulty: 'Option<U256>',
	    sealFields: 'Vec<Bytes>',
	    uncles: 'Vec<H256>',
	    transactions: 'Vec<EthTransaction>',
	    blockSize: 'Option<U256>'
	  },
	  EthBloom: 'H2048',
	  EthCallRequest: {
	    from: 'Option<H160>',
	    to: 'Option<H160>',
	    gasPrice: 'Option<U256>',
	    gas: 'Option<U256>',
	    value: 'Option<U256>',
	    data: 'Option<Bytes>',
	    nonce: 'Option<U256>'
	  },
	  EthFilter: {
	    fromBlock: 'Option<BlockNumber>',
	    toBlock: 'Option<BlockNumber>',
	    blockHash: 'Option<H256>',
	    address: 'Option<EthFilterAddress>',
	    topics: 'Option<EthFilterTopic>'
	  },
	  EthFilterAddress: {
	    _enum: {
	      Single: 'H160',
	      Multiple: 'Vec<H160>',
	      Null: 'Null'
	    }
	  },
	  EthFilterChanges: {
	    _enum: {
	      Logs: 'Vec<EthLog>',
	      Hashes: 'Vec<H256>',
	      Empty: 'Null'
	    }
	  },
	  EthFilterTopic: {
	    _enum: {
	      Single: 'EthFilterTopicInner',
	      Multiple: 'Vec<EthFilterTopicInner>',
	      Null: 'Null'
	    }
	  },
	  EthFilterTopicEntry: 'Option<H256>',
	  EthFilterTopicInner: {
	    _enum: {
	      Single: 'EthFilterTopicEntry',
	      Multiple: 'Vec<EthFilterTopicEntry>',
	      Null: 'Null'
	    }
	  },
	  EthRichHeader: {
	    _alias: {
	      blockHash: 'hash',
	      blockSize: 'size'
	    },
	    blockHash: 'Option<H256>',
	    parentHash: 'H256',
	    sha3Uncles: 'H256',
	    author: 'H160',
	    miner: 'H160',
	    stateRoot: 'H256',
	    transactionsRoot: 'H256',
	    receiptsRoot: 'H256',
	    number: 'Option<U256>',
	    gasUsed: 'U256',
	    gasLimit: 'U256',
	    extraData: 'Bytes',
	    logsBloom: 'EthBloom',
	    timestamp: 'U256',
	    difficulty: 'U256',
	    sealFields: 'Vec<Bytes>',
	    blockSize: 'Option<U256>'
	  },
	  EthLog: {
	    address: 'H160',
	    topics: 'Vec<H256>',
	    data: 'Bytes',
	    blockHash: 'Option<H256>',
	    blockNumber: 'Option<U256>',
	    transactionHash: 'Option<H256>',
	    transactionIndex: 'Option<U256>',
	    logIndex: 'Option<U256>',
	    transactionLogIndex: 'Option<U256>',
	    removed: 'bool'
	  },
	  EthReceipt: {
	    transactionHash: 'Option<H256>',
	    transactionIndex: 'Option<U256>',
	    blockHash: 'Option<H256>',
	    from: 'Option<H160>',
	    to: 'Option<H160>',
	    blockNumber: 'Option<U256>',
	    cumulativeGasUsed: 'U256',
	    gasUsed: 'Option<U256>',
	    contractAddress: 'Option<H160>',
	    logs: 'Vec<EthLog>',
	    root: 'Option<H256>',
	    logsBloom: 'EthBloom',
	    statusCode: 'Option<U64>'
	  },
	  EthStorageProof: {
	    key: 'U256',
	    value: 'U256',
	    proof: 'Vec<Bytes>'
	  },
	  EthSubKind: {
	    _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
	  },
	  EthSubParams: {
	    _enum: {
	      None: 'Null',
	      Logs: 'EthFilter'
	    }
	  },
	  EthSubResult: {
	    _enum: {
	      Header: 'EthRichHeader',
	      Log: 'EthLog',
	      TransactionHash: 'H256',
	      SyncState: 'EthSyncStatus'
	    }
	  },
	  EthSyncInfo: {
	    startingBlock: 'U256',
	    currentBlock: 'U256',
	    highestBlock: 'U256',
	    warpChunksAmount: 'Option<U256>',
	    warpChunksProcessed: 'Option<U256>'
	  },
	  EthSyncStatus: {
	    _enum: {
	      Info: 'EthSyncInfo',
	      None: 'Null'
	    }
	  },
	  EthTransaction: {
	    nonce: 'U256',
	    gasPrice: 'U256',
	    gasLimit: 'U256',
	    action: 'EthTransactionAction',
	    value: 'U256',
	    input: 'Bytes',
	    signature: 'EthTransactionSignature'
	  },
	  EthTransactionSignature: {
	    v: 'u64',
	    r: 'H256',
	    s: 'H256'
	  },
	  EthTransactionAction: {
	    _enum: {
	      Call: 'H160',
	      Create: 'Null'
	    }
	  },
	  EthTransactionCondition: {
	    _enum: {
	      block: 'u64',
	      time: 'u64'
	    }
	  },
	  EthTransactionRequest: {
	    from: 'Option<H160>',
	    to: 'Option<H160>',
	    gasPrice: 'Option<U256>',
	    gas: 'Option<U256>',
	    value: 'Option<U256>',
	    data: 'Option<Bytes>',
	    nonce: 'Option<U256>'
	  },
	  EthTransactionStatus: {
	    transactionHash: 'H256',
	    transactionIndex: 'u32',
	    from: 'H160',
	    to: 'Option<H160>',
	    contractAddress: 'Option<H160>',
	    logs: 'Vec<EthLog>',
	    logsBloom: 'EthBloom'
	  },
	  EthWork: {
	    powHash: 'H256',
	    seedHash: 'H256',
	    target: 'H256',
	    number: 'Option<u64>'
	  }
	};
	var _default = {
	  rpc: _rpc.rpc,
	  types
	};
	exports.default = _default;
	});

	var hashers = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AllHashers = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const AllHashers = {
	  Blake2_128: null,
	  // eslint-disable-line camelcase
	  Blake2_256: null,
	  // eslint-disable-line camelcase
	  Blake2_128Concat: null,
	  // eslint-disable-line camelcase
	  Twox128: null,
	  Twox256: null,
	  Twox64Concat: null,
	  // new in v11
	  Identity: null
	};
	exports.AllHashers = AllHashers;
	});

	var v9_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v9 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v9 = {
	  // v9
	  ErrorMetadataV9: {
	    name: 'Text',
	    docs: 'Vec<Text>'
	  },
	  EventMetadataV9: {
	    name: 'Text',
	    args: 'Vec<Type>',
	    docs: 'Vec<Text>'
	  },
	  FunctionArgumentMetadataV9: {
	    name: 'Text',
	    type: 'Type'
	  },
	  FunctionMetadataV9: {
	    name: 'Text',
	    args: 'Vec<FunctionArgumentMetadataV9>',
	    docs: 'Vec<Text>'
	  },
	  MetadataV9: {
	    modules: 'Vec<ModuleMetadataV9>'
	  },
	  ModuleConstantMetadataV9: {
	    name: 'Text',
	    type: 'Type',
	    value: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  ModuleMetadataV9: {
	    name: 'Text',
	    storage: 'Option<StorageMetadataV9>',
	    calls: 'Option<Vec<FunctionMetadataV9>>',
	    events: 'Option<Vec<EventMetadataV9>>',
	    constants: 'Vec<ModuleConstantMetadataV9>',
	    errors: 'Vec<ErrorMetadataV9>'
	  },
	  StorageEntryMetadataV9: {
	    name: 'Text',
	    modifier: 'StorageEntryModifierV9',
	    type: 'StorageEntryTypeV9',
	    fallback: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  StorageEntryModifierV9: {
	    _enum: ['Optional', 'Default', 'Required']
	  },
	  StorageEntryTypeV9: {
	    _enum: {
	      Plain: 'Type',
	      Map: {
	        hasher: 'StorageHasherV9',
	        key: 'Type',
	        value: 'Type',
	        linked: 'bool'
	      },
	      DoubleMap: {
	        hasher: 'StorageHasherV9',
	        key1: 'Type',
	        key2: 'Type',
	        value: 'Type',
	        key2Hasher: 'StorageHasherV9'
	      }
	    }
	  },
	  StorageHasherV9: {
	    _enum: {
	      Blake2_128: null,
	      // eslint-disable-line camelcase
	      Blake2_256: null,
	      // eslint-disable-line camelcase
	      Twox128: null,
	      Twox256: null,
	      Twox64Concat: null
	    }
	  },
	  StorageMetadataV9: {
	    prefix: 'Text',
	    items: 'Vec<StorageEntryMetadataV9>'
	  }
	};
	exports.v9 = v9;
	});

	var v10_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v10 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v10 = {
	  // v10
	  ErrorMetadataV10: 'ErrorMetadataV9',
	  EventMetadataV10: 'EventMetadataV9',
	  FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
	  FunctionMetadataV10: 'FunctionMetadataV9',
	  MetadataV10: {
	    modules: 'Vec<ModuleMetadataV10>'
	  },
	  ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
	  ModuleMetadataV10: {
	    name: 'Text',
	    storage: 'Option<StorageMetadataV10>',
	    calls: 'Option<Vec<FunctionMetadataV10>>',
	    events: 'Option<Vec<EventMetadataV10>>',
	    constants: 'Vec<ModuleConstantMetadataV10>',
	    errors: 'Vec<ErrorMetadataV10>'
	  },
	  StorageEntryModifierV10: 'StorageEntryModifierV9',
	  StorageEntryMetadataV10: {
	    name: 'Text',
	    modifier: 'StorageEntryModifierV10',
	    type: 'StorageEntryTypeV10',
	    fallback: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  StorageEntryTypeV10: {
	    _enum: {
	      Plain: 'Type',
	      Map: {
	        hasher: 'StorageHasherV10',
	        key: 'Type',
	        value: 'Type',
	        linked: 'bool'
	      },
	      DoubleMap: {
	        hasher: 'StorageHasherV10',
	        key1: 'Type',
	        key2: 'Type',
	        value: 'Type',
	        key2Hasher: 'StorageHasherV10'
	      }
	    }
	  },
	  StorageMetadataV10: {
	    prefix: 'Text',
	    items: 'Vec<StorageEntryMetadataV10>'
	  },
	  StorageHasherV10: {
	    _enum: {
	      Blake2_128: null,
	      // eslint-disable-line camelcase
	      Blake2_256: null,
	      // eslint-disable-line camelcase
	      Blake2_128Concat: null,
	      // eslint-disable-line camelcase
	      Twox128: null,
	      Twox256: null,
	      Twox64Concat: null
	    }
	  }
	};
	exports.v10 = v10;
	});

	var _hashers = hashers;

	var v11_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v11 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v11 = {
	  // v11
	  ErrorMetadataV11: 'ErrorMetadataV10',
	  EventMetadataV11: 'EventMetadataV10',
	  ExtrinsicMetadataV11: {
	    version: 'u8',
	    signedExtensions: 'Vec<Text>'
	  },
	  FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
	  FunctionMetadataV11: 'FunctionMetadataV10',
	  MetadataV11: {
	    modules: 'Vec<ModuleMetadataV11>',
	    extrinsic: 'ExtrinsicMetadataV11'
	  },
	  ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
	  ModuleMetadataV11: {
	    name: 'Text',
	    storage: 'Option<StorageMetadataV11>',
	    calls: 'Option<Vec<FunctionMetadataV11>>',
	    events: 'Option<Vec<EventMetadataV11>>',
	    constants: 'Vec<ModuleConstantMetadataV11>',
	    errors: 'Vec<ErrorMetadataV11>'
	  },
	  StorageEntryModifierV11: 'StorageEntryModifierV10',
	  StorageEntryMetadataV11: {
	    name: 'Text',
	    modifier: 'StorageEntryModifierV11',
	    type: 'StorageEntryTypeV11',
	    fallback: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  StorageEntryTypeV11: {
	    _enum: {
	      Plain: 'Type',
	      Map: {
	        hasher: 'StorageHasherV11',
	        key: 'Type',
	        value: 'Type',
	        linked: 'bool'
	      },
	      DoubleMap: {
	        hasher: 'StorageHasherV11',
	        key1: 'Type',
	        key2: 'Type',
	        value: 'Type',
	        key2Hasher: 'StorageHasherV11'
	      }
	    }
	  },
	  StorageMetadataV11: {
	    prefix: 'Text',
	    items: 'Vec<StorageEntryMetadataV11>'
	  },
	  StorageHasherV11: {
	    _enum: _hashers.AllHashers
	  }
	};
	exports.v11 = v11;
	});

	var v12_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v12 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v12 = {
	  // v12
	  ErrorMetadataV12: 'ErrorMetadataV11',
	  EventMetadataV12: 'EventMetadataV11',
	  ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
	  FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
	  FunctionMetadataV12: 'FunctionMetadataV11',
	  MetadataV12: {
	    modules: 'Vec<ModuleMetadataV12>',
	    extrinsic: 'ExtrinsicMetadataV12'
	  },
	  ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
	  ModuleMetadataV12: {
	    name: 'Text',
	    storage: 'Option<StorageMetadataV12>',
	    calls: 'Option<Vec<FunctionMetadataV12>>',
	    events: 'Option<Vec<EventMetadataV12>>',
	    constants: 'Vec<ModuleConstantMetadataV12>',
	    errors: 'Vec<ErrorMetadataV12>',
	    index: 'u8'
	  },
	  StorageEntryModifierV12: 'StorageEntryModifierV11',
	  StorageEntryMetadataV12: 'StorageEntryMetadataV11',
	  StorageEntryTypeV12: 'StorageEntryTypeV11',
	  StorageMetadataV12: 'StorageMetadataV11',
	  StorageHasherV12: 'StorageHasherV11'
	};
	exports.v12 = v12;
	});

	var v13_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v13 = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const v13 = {
	  // v13
	  ErrorMetadataV13: 'ErrorMetadataV12',
	  EventMetadataV13: 'EventMetadataV12',
	  ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
	  FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
	  FunctionMetadataV13: 'FunctionMetadataV12',
	  MetadataV13: {
	    modules: 'Vec<ModuleMetadataV13>',
	    extrinsic: 'ExtrinsicMetadataV13'
	  },
	  ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
	  ModuleMetadataV13: {
	    name: 'Text',
	    storage: 'Option<StorageMetadataV13>',
	    calls: 'Option<Vec<FunctionMetadataV13>>',
	    events: 'Option<Vec<EventMetadataV13>>',
	    constants: 'Vec<ModuleConstantMetadataV13>',
	    errors: 'Vec<ErrorMetadataV13>',
	    index: 'u8'
	  },
	  StorageEntryModifierV13: 'StorageEntryModifierV12',
	  StorageEntryMetadataV13: {
	    name: 'Text',
	    modifier: 'StorageEntryModifierV13',
	    type: 'StorageEntryTypeV13',
	    fallback: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  StorageEntryTypeV13: {
	    _enum: {
	      Plain: 'Type',
	      Map: {
	        hasher: 'StorageHasherV13',
	        key: 'Type',
	        value: 'Type',
	        linked: 'bool'
	      },
	      DoubleMap: {
	        hasher: 'StorageHasherV13',
	        key1: 'Type',
	        key2: 'Type',
	        value: 'Type',
	        key2Hasher: 'StorageHasherV13'
	      },
	      NMap: {
	        keyVec: 'Vec<Type>',
	        hashers: 'Vec<StorageHasherV13>',
	        value: 'Type'
	      }
	    }
	  },
	  StorageMetadataV13: {
	    prefix: 'Text',
	    items: 'Vec<StorageEntryMetadataV13>'
	  },
	  StorageHasherV13: 'StorageHasherV12'
	};
	exports.v13 = v13;
	});

	var require$$47 = definitions$b;

	var v14_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.v14 = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);



	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const v14 = {
	  // registry
	  PortableRegistry: 'GenericPortableRegistry',
	  PortableType: {
	    id: 'SiLookupTypeId',
	    type: 'SiType'
	  },
	  // compatibility with earlier layouts, i.e. don't break previous users
	  ErrorMetadataV14: _objectSpread(_objectSpread({}, require$$47.SiVariant), {}, {
	    args: 'Vec<Type>'
	  }),
	  EventMetadataV14: _objectSpread(_objectSpread({}, require$$47.SiVariant), {}, {
	    args: 'Vec<Type>'
	  }),
	  FunctionArgumentMetadataV14: 'FunctionArgumentMetadataV13',
	  FunctionMetadataV14: _objectSpread(_objectSpread({}, require$$47.SiVariant), {}, {
	    args: 'Vec<FunctionArgumentMetadataLatest>'
	  }),
	  // V14
	  ExtrinsicMetadataV14: {
	    type: 'SiLookupTypeId',
	    version: 'u8',
	    signedExtensions: 'Vec<SignedExtensionMetadataV14>'
	  },
	  MetadataV14: {
	    lookup: 'PortableRegistry',
	    pallets: 'Vec<PalletMetadataV14>',
	    extrinsic: 'ExtrinsicMetadataV14'
	  },
	  PalletCallMetadataV14: {
	    type: 'SiLookupTypeId'
	  },
	  PalletConstantMetadataV14: {
	    name: 'Text',
	    type: 'SiLookupTypeId',
	    value: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  PalletErrorMetadataV14: {
	    type: 'SiLookupTypeId'
	  },
	  PalletEventMetadataV14: {
	    type: 'SiLookupTypeId'
	  },
	  PalletMetadataV14: {
	    name: 'Text',
	    storage: 'Option<PalletStorageMetadataV14>',
	    calls: 'Option<PalletCallMetadataV14>',
	    events: 'Option<PalletEventMetadataV14>',
	    constants: 'Vec<PalletConstantMetadataV14>',
	    errors: 'Option<PalletErrorMetadataV14>',
	    index: 'u8'
	  },
	  PalletStorageMetadataV14: {
	    prefix: 'Text',
	    // NOTE: Renamed from entries
	    items: 'Vec<StorageEntryMetadataV14>'
	  },
	  SignedExtensionMetadataV14: {
	    identifier: 'Text',
	    type: 'SiLookupTypeId',
	    additionalSigned: 'SiLookupTypeId'
	  },
	  StorageEntryMetadataV14: {
	    name: 'Text',
	    modifier: 'StorageEntryModifierV14',
	    type: 'StorageEntryTypeV14',
	    fallback: 'Bytes',
	    docs: 'Vec<Text>'
	  },
	  StorageEntryModifierV14: 'StorageEntryModifierV13',
	  StorageEntryTypeV14: {
	    _enum: {
	      Plain: 'SiLookupTypeId',
	      Map: {
	        hashers: 'Vec<StorageHasherV14>',
	        key: 'SiLookupTypeId',
	        // NOTE: Renamed from "keys"
	        value: 'SiLookupTypeId'
	      }
	    }
	  },
	  StorageHasherV14: 'StorageHasherV13'
	};
	exports.v14 = v14;
	});

	var _v = v9_1;

	var _v2 = v10_1;

	var _v3 = v11_1;

	var _v4 = v12_1;

	var _v5 = v13_1;

	var _v6 = v14_1;

	var definitions$9 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "AllHashers", {
	  enumerable: true,
	  get: function () {
	    return _hashers.AllHashers;
	  }
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);















	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var _default = {
	  rpc: {},
	  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _v.v9), _v2.v10), _v3.v11), _v4.v12), _v5.v13), _v6.v14), {}, {
	    //
	    // will be available once v14 is the default
	    // TODO: Comment out all commented stuff below and remove block below
	    //
	    // ExtrinsicMetadataLatest: 'ExtrinsicMetadataV14',
	    // FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV13',
	    // FunctionMetadataLatest: 'FunctionMetadataV14',
	    // MetadataLatest: 'MetadataV14',
	    PalletCallMetadataLatest: 'PalletCallMetadataV14',
	    PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
	    PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
	    PalletEventMetadataLatest: 'PalletEventMetadataV14',
	    PalletMetadataLatest: 'PalletMetadataV14',
	    PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
	    SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
	    // StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
	    // StorageEntryModifierLatest: 'StorageEntryModifierV14',
	    // StorageEntryTypeLatest: 'StorageEntryTypeV14',
	    // This always maps to the latest
	    ErrorMetadataLatest: 'ErrorMetadataV13',
	    EventMetadataLatest: 'EventMetadataV13',
	    ExtrinsicMetadataLatest: 'ExtrinsicMetadataV13',
	    FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV13',
	    FunctionMetadataLatest: 'FunctionMetadataV13',
	    MetadataLatest: 'MetadataV13',
	    ModuleConstantMetadataLatest: 'ModuleConstantMetadataV13',
	    ModuleMetadataLatest: 'ModuleMetadataV13',
	    StorageEntryMetadataLatest: 'StorageEntryMetadataV13',
	    StorageEntryModifierLatest: 'StorageEntryModifierV13',
	    StorageEntryTypeLatest: 'StorageEntryTypeV13',
	    StorageMetadataLatest: 'StorageMetadataV13',
	    StorageHasher: 'StorageHasherV13',
	    // the enum containing all the mappings
	    MetadataAll: {
	      _enum: {
	        V0: 'DoNotConstruct<MetadataV0>',
	        V1: 'DoNotConstruct<MetadataV1>',
	        V2: 'DoNotConstruct<MetadataV2>',
	        V3: 'DoNotConstruct<MetadataV3>',
	        V4: 'DoNotConstruct<MetadataV4>',
	        V5: 'DoNotConstruct<MetadataV5>',
	        V6: 'DoNotConstruct<MetadataV6>',
	        V7: 'DoNotConstruct<MetadataV7>',
	        V8: 'DoNotConstruct<MetadataV8>',
	        // First version on Kusama in V9, dropping will be problematic
	        V9: 'MetadataV9',
	        V10: 'MetadataV10',
	        V11: 'MetadataV11',
	        V12: 'MetadataV12',
	        V13: 'MetadataV13',
	        V14: 'MetadataV14'
	      }
	    }
	  })
	};
	exports.default = _default;
	});

	var definitions$8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    methods: {
	      description: 'Retrieves the list of RPC methods that are exposed by the node',
	      params: [],
	      type: 'RpcMethods'
	    }
	  },
	  types: {
	    RpcMethods: {
	      version: 'u32',
	      methods: 'Vec<Text>'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    hasKey: {
	      description: 'Returns true if the keystore has private keys for the given public key and key type.',
	      params: [{
	        name: 'publicKey',
	        type: 'Bytes'
	      }, {
	        name: 'keyType',
	        type: 'Text'
	      }],
	      type: 'bool'
	    },
	    hasSessionKeys: {
	      description: 'Returns true if the keystore has private keys for the given session public keys.',
	      params: [{
	        name: 'sessionKeys',
	        type: 'Bytes'
	      }],
	      type: 'bool'
	    },
	    removeExtrinsic: {
	      description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
	      params: [{
	        name: 'bytesOrHash',
	        type: 'Vec<ExtrinsicOrHash>'
	      }],
	      type: 'Vec<Hash>'
	    },
	    insertKey: {
	      description: 'Insert a key into the keystore.',
	      params: [{
	        name: 'keyType',
	        type: 'Text'
	      }, {
	        name: 'suri',
	        type: 'Text'
	      }, {
	        name: 'publicKey',
	        type: 'Bytes'
	      }],
	      type: 'Bytes'
	    },
	    rotateKeys: {
	      description: 'Generate new session keys and returns the corresponding public keys',
	      params: [],
	      type: 'Bytes'
	    },
	    pendingExtrinsics: {
	      description: 'Returns all pending extrinsics, potentially grouped by sender',
	      params: [],
	      type: 'Vec<Extrinsic>'
	    },
	    submitExtrinsic: {
	      isSigned: true,
	      description: 'Submit a fully formatted extrinsic for block inclusion',
	      params: [{
	        name: 'extrinsic',
	        type: 'Extrinsic'
	      }],
	      type: 'Hash'
	    },
	    submitAndWatchExtrinsic: {
	      description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
	      isSigned: true,
	      params: [{
	        name: 'extrinsic',
	        type: 'Extrinsic'
	      }],
	      pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],
	      type: 'ExtrinsicStatus'
	    }
	  },
	  types: {
	    ExtrinsicOrHash: {
	      _enum: {
	        Hash: 'Hash',
	        Extrinsic: 'Bytes'
	      }
	    },
	    ExtrinsicStatus: {
	      _enum: {
	        Future: 'Null',
	        Ready: 'Null',
	        Broadcast: 'Vec<Text>',
	        InBlock: 'Hash',
	        Retracted: 'Hash',
	        FinalityTimeout: 'Hash',
	        Finalized: 'Hash',
	        Usurped: 'Hash',
	        Dropped: 'Null',
	        Invalid: 'Null'
	      }
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    getHeader: {
	      alias: ['chain_getHead'],
	      description: 'Retrieves the header for a specific block',
	      params: [{
	        name: 'hash',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Header'
	    },
	    getBlock: {
	      description: 'Get header and body of a relay chain block',
	      params: [{
	        name: 'hash',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'SignedBlock'
	    },
	    getBlockHash: {
	      description: 'Get the block hash for a specific block',
	      params: [{
	        name: 'blockNumber',
	        type: 'BlockNumber',
	        isOptional: true
	      }],
	      type: 'BlockHash'
	    },
	    getFinalizedHead: {
	      alias: ['chain_getFinalisedHead'],
	      description: 'Get hash of the last finalized block in the canon chain',
	      params: [],
	      type: 'BlockHash'
	    },
	    subscribeNewHeads: {
	      alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
	      description: 'Retrieves the best header via subscription',
	      params: [],
	      // NOTE These still has the aliassed version, compatible with 1.x
	      pubsub: ['newHead', 'subscribeNewHead', 'unsubscribeNewHead'],
	      type: 'Header'
	    },
	    subscribeFinalizedHeads: {
	      alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
	      description: 'Retrieves the best finalized header via subscription',
	      params: [],
	      pubsub: ['finalizedHead', 'subscribeFinalizedHeads', 'unsubscribeFinalizedHeads'],
	      type: 'Header'
	    },
	    subscribeAllHeads: {
	      description: 'Retrieves the newest header via subscription',
	      params: [],
	      pubsub: ['allHead', 'subscribeAllHeads', 'unsubscribeAllHeads'],
	      type: 'Header'
	    }
	  },
	  types: {
	    BlockHash: 'Hash'
	  }
	};
	exports.default = _default;
	});

	var definitions$5 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    getKeys: {
	      description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
	      params: [{
	        name: 'childKey',
	        type: 'PrefixedStorageKey'
	      }, {
	        name: 'prefix',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'Hash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<StorageKey>'
	    },
	    getKeysPaged: {
	      alias: ['childstate_getKeysPagedAt'],
	      description: 'Returns the keys with prefix from a child storage with pagination support',
	      params: [{
	        name: 'childKey',
	        type: 'PrefixedStorageKey'
	      }, {
	        name: 'prefix',
	        type: 'StorageKey'
	      }, {
	        name: 'count',
	        type: 'u32'
	      }, {
	        name: 'startKey',
	        type: 'StorageKey',
	        isOptional: true
	      }, {
	        name: 'at',
	        type: 'Hash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<StorageKey>'
	    },
	    getStorage: {
	      description: 'Returns a child storage entry at a specific block state',
	      params: [{
	        name: 'childKey',
	        type: 'PrefixedStorageKey'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'Hash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Option<StorageData>'
	    },
	    getStorageHash: {
	      description: 'Returns the hash of a child storage entry at a block state',
	      params: [{
	        name: 'childKey',
	        type: 'PrefixedStorageKey'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'Hash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Option<Hash>'
	    },
	    getStorageSize: {
	      description: 'Returns the size of a child storage entry at a block state',
	      params: [{
	        name: 'childKey',
	        type: 'PrefixedStorageKey'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'Hash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Option<u64>'
	    }
	  },
	  types: {
	    // StorageKey extends Bytes
	    PrefixedStorageKey: 'StorageKey'
	  }
	};
	exports.default = _default;
	});

	var definitions$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    localStorageSet: {
	      description: 'Set offchain local storage under given key and prefix',
	      params: [{
	        name: 'kind',
	        type: 'StorageKind'
	      }, {
	        name: 'key',
	        type: 'Bytes'
	      }, {
	        name: 'value',
	        type: 'Bytes'
	      }],
	      type: 'Null'
	    },
	    localStorageGet: {
	      description: 'Get offchain local storage under given key and prefix',
	      params: [{
	        name: 'kind',
	        type: 'StorageKind'
	      }, {
	        name: 'key',
	        type: 'Bytes'
	      }],
	      type: 'Option<Bytes>'
	    }
	  },
	  types: {
	    StorageKind: {
	      _enum: {
	        PERSISTENT: 1,
	        LOCAL: 2
	      }
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	const QUERY_PARAMS = [{
	  name: 'extrinsic',
	  type: 'Bytes'
	}, {
	  name: 'at',
	  type: 'BlockHash',
	  isHistoric: true,
	  isOptional: true
	}];
	var _default = {
	  rpc: {
	    queryInfo: {
	      description: 'Retrieves the fee information for an encoded extrinsic',
	      params: QUERY_PARAMS,
	      type: 'RuntimeDispatchInfo'
	    },
	    queryFeeDetails: {
	      description: 'Query the detailed fee of a given encoded extrinsic',
	      params: QUERY_PARAMS,
	      type: 'FeeDetails'
	    }
	  },
	  types: {
	    FeeDetails: {
	      inclusionFee: 'Option<InclusionFee>' // skipped in serde
	      // tip: 'Balance'

	    },
	    InclusionFee: {
	      baseFee: 'Balance',
	      lenFee: 'Balance',
	      adjustedWeightFee: 'Balance'
	    },
	    RuntimeDispatchInfo: {
	      weight: 'Weight',
	      class: 'DispatchClass',
	      partialFee: 'Balance'
	    }
	  }
	};
	exports.default = _default;
	});

	var definitions$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// order important in structs... :)

	/* eslint-disable sort-keys */
	var _default = {
	  rpc: {
	    call: {
	      alias: ['state_callAt'],
	      description: 'Perform a call to a builtin on the chain',
	      params: [{
	        name: 'method',
	        type: 'Text'
	      }, {
	        name: 'data',
	        type: 'Bytes'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Bytes'
	    },
	    getKeys: {
	      description: 'Retrieves the keys with a certain prefix',
	      params: [{
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<StorageKey>'
	    },
	    getPairs: {
	      description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
	      params: [{
	        name: 'prefix',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<KeyValue>'
	    },
	    getKeysPaged: {
	      alias: ['state_getKeysPagedAt'],
	      description: 'Returns the keys with prefix with pagination support.',
	      params: [{
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'count',
	        type: 'u32'
	      }, {
	        name: 'startKey',
	        type: 'StorageKey',
	        isOptional: true
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<StorageKey>'
	    },
	    getStorage: {
	      alias: ['state_getStorageAt'],
	      description: 'Retrieves the storage for a key',
	      params: [{
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'StorageData'
	    },
	    getStorageHash: {
	      alias: ['state_getStorageHashAt'],
	      description: 'Retrieves the storage hash',
	      params: [{
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Hash'
	    },
	    getStorageSize: {
	      alias: ['state_getStorageSizeAt'],
	      description: 'Retrieves the storage size',
	      params: [{
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'u64'
	    },
	    getChildKeys: {
	      description: 'Retrieves the keys with prefix of a specific child storage',
	      params: [{
	        name: 'childStorageKey',
	        type: 'StorageKey'
	      }, {
	        name: 'childDefinition',
	        type: 'StorageKey'
	      }, {
	        name: 'childType',
	        type: 'u32'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<StorageKey>'
	    },
	    getChildStorage: {
	      description: 'Retrieves the child storage for a key',
	      params: [{
	        name: 'childStorageKey',
	        type: 'StorageKey'
	      }, {
	        name: 'childDefinition',
	        type: 'StorageKey'
	      }, {
	        name: 'childType',
	        type: 'u32'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'StorageData'
	    },
	    getChildStorageHash: {
	      description: 'Retrieves the child storage hash',
	      params: [{
	        name: 'childStorageKey',
	        type: 'StorageKey'
	      }, {
	        name: 'childDefinition',
	        type: 'StorageKey'
	      }, {
	        name: 'childType',
	        type: 'u32'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Hash'
	    },
	    getChildStorageSize: {
	      description: 'Retrieves the child storage size',
	      params: [{
	        name: 'childStorageKey',
	        type: 'StorageKey'
	      }, {
	        name: 'childDefinition',
	        type: 'StorageKey'
	      }, {
	        name: 'childType',
	        type: 'u32'
	      }, {
	        name: 'key',
	        type: 'StorageKey'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'u64'
	    },
	    getMetadata: {
	      description: 'Returns the runtime metadata',
	      params: [{
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Metadata'
	    },
	    getRuntimeVersion: {
	      alias: ['chain_getRuntimeVersion'],
	      description: 'Get the runtime version',
	      params: [{
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'RuntimeVersion'
	    },
	    queryStorage: {
	      description: 'Query historical storage entries (by key) starting from a start block',
	      params: [{
	        name: 'keys',
	        type: 'Vec<StorageKey>'
	      }, {
	        name: 'fromBlock',
	        type: 'Hash'
	      }, {
	        name: 'toBlock',
	        type: 'BlockHash',
	        isOptional: true
	      }],
	      type: 'Vec<StorageChangeSet>'
	    },
	    queryStorageAt: {
	      description: 'Query storage entries (by key) starting at block hash given as the second parameter',
	      params: [{
	        name: 'keys',
	        type: 'Vec<StorageKey>'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'Vec<StorageChangeSet>'
	    },
	    getChildReadProof: {
	      description: 'Returns proof of storage for child key entries at a specific block state.',
	      params: [{
	        name: 'childStorageKey',
	        type: 'PrefixedStorageKey'
	      }, {
	        name: 'keys',
	        type: 'Vec<StorageKey>'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'ReadProof'
	    },
	    getReadProof: {
	      description: 'Returns proof of storage entries at a specific block state',
	      params: [{
	        name: 'keys',
	        type: 'Vec<StorageKey>'
	      }, {
	        name: 'at',
	        type: 'BlockHash',
	        isHistoric: true,
	        isOptional: true
	      }],
	      type: 'ReadProof'
	    },
	    subscribeRuntimeVersion: {
	      alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
	      description: 'Retrieves the runtime version via subscription',
	      params: [],
	      pubsub: ['runtimeVersion', 'subscribeRuntimeVersion', 'unsubscribeRuntimeVersion'],
	      type: 'RuntimeVersion'
	    },
	    subscribeStorage: {
	      description: 'Subscribes to storage changes for the provided keys',
	      params: [{
	        name: 'keys',
	        type: 'Vec<StorageKey>',
	        isOptional: true
	      }],
	      pubsub: ['storage', 'subscribeStorage', 'unsubscribeStorage'],
	      type: 'StorageChangeSet'
	    },
	    traceBlock: {
	      description: 'Provides a way to trace the re-execution of a single block',
	      params: [{
	        name: 'block',
	        type: 'Hash'
	      }, {
	        name: 'targets',
	        type: 'Option<Text>'
	      }, {
	        name: 'storageKeys',
	        type: 'Option<Text>'
	      }],
	      type: 'TraceBlockResponse'
	    }
	  },
	  types: {
	    ApiId: '[u8; 8]',
	    BlockTrace: {
	      blockHash: 'Text',
	      parentHash: 'Text',
	      tracingTargets: 'Text',
	      storageKeys: 'Text',
	      spans: 'Vec<BlockTraceSpan>',
	      events: 'Vec<BlockTraceEvent>'
	    },
	    BlockTraceEvent: {
	      target: 'Text',
	      data: 'BlockTraceEventData',
	      parentId: 'Option<u64>'
	    },
	    BlockTraceEventData: {
	      stringValues: 'HashMap<Text, Text>'
	    },
	    BlockTraceSpan: {
	      id: 'u64',
	      parentId: 'Option<u64>',
	      name: 'Text',
	      target: 'Text',
	      wasm: 'bool'
	    },
	    KeyValueOption: '(StorageKey, Option<StorageData>)',
	    ReadProof: {
	      at: 'Hash',
	      proof: 'Vec<Bytes>'
	    },
	    RuntimeVersionApi: '(ApiId, u32)',
	    RuntimeVersion: {
	      specName: 'Text',
	      implName: 'Text',
	      authoringVersion: 'u32',
	      specVersion: 'u32',
	      implVersion: 'u32',
	      apis: 'Vec<RuntimeVersionApi>',
	      transactionVersion: 'u32'
	    },
	    RuntimeVersionPartial: {
	      specName: 'Text',
	      specVersion: 'u32'
	    },
	    StorageChangeSet: {
	      block: 'Hash',
	      changes: 'Vec<KeyValueOption>'
	    },
	    TraceBlockResponse: {
	      _enum: {
	        TraceError: 'TraceError',
	        BlockTrace: 'BlockTrace'
	      }
	    },
	    TraceError: {
	      error: 'Text'
	    }
	  }
	};
	exports.default = _default;
	});

	var require$$0$4 = definitions$W;

	var require$$1$5 = definitions$V;

	var require$$2$4 = definitions$U;

	var require$$3$3 = definitions$T;

	var require$$4$3 = definitions$S;

	var require$$5$2 = definitions$R;

	var require$$6$2 = definitions$Q;

	var require$$7$2 = definitions$P;

	var require$$8$2 = definitions$O;

	var require$$9$1 = definitions$N;

	var require$$10$1 = definitions$M;

	var require$$11$1 = definitions$L;

	var require$$12$1 = definitions$K;

	var require$$13$1 = definitions$J;

	var require$$14$1 = definitions$I;

	var require$$15$1 = definitions$H;

	var require$$16$1 = definitions$G;

	var require$$17$1 = definitions$F;

	var require$$18$1 = definitions$E;

	var require$$19 = definitions$D;

	var require$$20 = definitions$C;

	var require$$21 = definitions$B;

	var require$$22 = definitions$A;

	var require$$23 = definitions$z;

	var require$$24 = definitions$y;

	var require$$25 = definitions$x;

	var require$$26 = definitions$w;

	var require$$27 = definitions$v;

	var require$$28 = definitions$u;

	var require$$29 = definitions$t;

	var require$$30 = definitions$s;

	var require$$31 = definitions$r;

	var require$$32 = definitions$q;

	var require$$33 = definitions$p;

	var require$$34 = definitions$o;

	var require$$35 = definitions$n;

	var require$$36 = definitions$m;

	var require$$37 = definitions$l;

	var require$$38 = definitions$k;

	var require$$39 = definitions$j;

	var require$$40 = definitions$i;

	var require$$41 = definitions$h;

	var require$$42 = definitions$g;

	var require$$43 = definitions$f;

	var require$$44 = definitions$e;

	var require$$45 = definitions$d;

	var require$$46 = definitions$c;

	var require$$48 = definitions$a;

	var require$$49 = definitions$9;

	var require$$50 = definitions$8;

	var require$$51 = definitions$7;

	var require$$52 = definitions$6;

	var require$$53 = definitions$5;

	var require$$54 = definitions$4;

	var require$$55 = definitions$3;

	var require$$56 = definitions$2;

	var definitions$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "runtime", {
	  enumerable: true,
	  get: function () {
	    return _definitions.default;
	  }
	});
	Object.defineProperty(exports, "assets", {
	  enumerable: true,
	  get: function () {
	    return _definitions2.default;
	  }
	});
	Object.defineProperty(exports, "authorship", {
	  enumerable: true,
	  get: function () {
	    return _definitions3.default;
	  }
	});
	Object.defineProperty(exports, "aura", {
	  enumerable: true,
	  get: function () {
	    return _definitions4.default;
	  }
	});
	Object.defineProperty(exports, "babe", {
	  enumerable: true,
	  get: function () {
	    return _definitions5.default;
	  }
	});
	Object.defineProperty(exports, "balances", {
	  enumerable: true,
	  get: function () {
	    return _definitions6.default;
	  }
	});
	Object.defineProperty(exports, "beefy", {
	  enumerable: true,
	  get: function () {
	    return _definitions7.default;
	  }
	});
	Object.defineProperty(exports, "collective", {
	  enumerable: true,
	  get: function () {
	    return _definitions8.default;
	  }
	});
	Object.defineProperty(exports, "consensus", {
	  enumerable: true,
	  get: function () {
	    return _definitions9.default;
	  }
	});
	Object.defineProperty(exports, "contracts", {
	  enumerable: true,
	  get: function () {
	    return _definitions10.default;
	  }
	});
	Object.defineProperty(exports, "democracy", {
	  enumerable: true,
	  get: function () {
	    return _definitions11.default;
	  }
	});
	Object.defineProperty(exports, "elections", {
	  enumerable: true,
	  get: function () {
	    return _definitions12.default;
	  }
	});
	Object.defineProperty(exports, "engine", {
	  enumerable: true,
	  get: function () {
	    return _definitions13.default;
	  }
	});
	Object.defineProperty(exports, "evm", {
	  enumerable: true,
	  get: function () {
	    return _definitions14.default;
	  }
	});
	Object.defineProperty(exports, "extrinsics", {
	  enumerable: true,
	  get: function () {
	    return _definitions15.default;
	  }
	});
	Object.defineProperty(exports, "genericAsset", {
	  enumerable: true,
	  get: function () {
	    return _definitions16.default;
	  }
	});
	Object.defineProperty(exports, "gilt", {
	  enumerable: true,
	  get: function () {
	    return _definitions17.default;
	  }
	});
	Object.defineProperty(exports, "grandpa", {
	  enumerable: true,
	  get: function () {
	    return _definitions18.default;
	  }
	});
	Object.defineProperty(exports, "identity", {
	  enumerable: true,
	  get: function () {
	    return _definitions19.default;
	  }
	});
	Object.defineProperty(exports, "imOnline", {
	  enumerable: true,
	  get: function () {
	    return _definitions20.default;
	  }
	});
	Object.defineProperty(exports, "lottery", {
	  enumerable: true,
	  get: function () {
	    return _definitions21.default;
	  }
	});
	Object.defineProperty(exports, "mmr", {
	  enumerable: true,
	  get: function () {
	    return _definitions22.default;
	  }
	});
	Object.defineProperty(exports, "offences", {
	  enumerable: true,
	  get: function () {
	    return _definitions23.default;
	  }
	});
	Object.defineProperty(exports, "proxy", {
	  enumerable: true,
	  get: function () {
	    return _definitions24.default;
	  }
	});
	Object.defineProperty(exports, "recovery", {
	  enumerable: true,
	  get: function () {
	    return _definitions25.default;
	  }
	});
	Object.defineProperty(exports, "scheduler", {
	  enumerable: true,
	  get: function () {
	    return _definitions26.default;
	  }
	});
	Object.defineProperty(exports, "session", {
	  enumerable: true,
	  get: function () {
	    return _definitions27.default;
	  }
	});
	Object.defineProperty(exports, "society", {
	  enumerable: true,
	  get: function () {
	    return _definitions28.default;
	  }
	});
	Object.defineProperty(exports, "staking", {
	  enumerable: true,
	  get: function () {
	    return _definitions29.default;
	  }
	});
	Object.defineProperty(exports, "support", {
	  enumerable: true,
	  get: function () {
	    return _definitions30.default;
	  }
	});
	Object.defineProperty(exports, "syncstate", {
	  enumerable: true,
	  get: function () {
	    return _definitions31.default;
	  }
	});
	Object.defineProperty(exports, "system", {
	  enumerable: true,
	  get: function () {
	    return _definitions32.default;
	  }
	});
	Object.defineProperty(exports, "treasury", {
	  enumerable: true,
	  get: function () {
	    return _definitions33.default;
	  }
	});
	Object.defineProperty(exports, "txpayment", {
	  enumerable: true,
	  get: function () {
	    return _definitions34.default;
	  }
	});
	Object.defineProperty(exports, "uniques", {
	  enumerable: true,
	  get: function () {
	    return _definitions35.default;
	  }
	});
	Object.defineProperty(exports, "utility", {
	  enumerable: true,
	  get: function () {
	    return _definitions36.default;
	  }
	});
	Object.defineProperty(exports, "vesting", {
	  enumerable: true,
	  get: function () {
	    return _definitions37.default;
	  }
	});
	Object.defineProperty(exports, "attestations", {
	  enumerable: true,
	  get: function () {
	    return _definitions38.default;
	  }
	});
	Object.defineProperty(exports, "bridges", {
	  enumerable: true,
	  get: function () {
	    return _definitions39.default;
	  }
	});
	Object.defineProperty(exports, "claims", {
	  enumerable: true,
	  get: function () {
	    return _definitions40.default;
	  }
	});
	Object.defineProperty(exports, "crowdloan", {
	  enumerable: true,
	  get: function () {
	    return _definitions41.default;
	  }
	});
	Object.defineProperty(exports, "cumulus", {
	  enumerable: true,
	  get: function () {
	    return _definitions42.default;
	  }
	});
	Object.defineProperty(exports, "parachains", {
	  enumerable: true,
	  get: function () {
	    return _definitions43.default;
	  }
	});
	Object.defineProperty(exports, "poll", {
	  enumerable: true,
	  get: function () {
	    return _definitions44.default;
	  }
	});
	Object.defineProperty(exports, "purchase", {
	  enumerable: true,
	  get: function () {
	    return _definitions45.default;
	  }
	});
	Object.defineProperty(exports, "xcm", {
	  enumerable: true,
	  get: function () {
	    return _definitions46.default;
	  }
	});
	Object.defineProperty(exports, "contractsAbi", {
	  enumerable: true,
	  get: function () {
	    return _definitions47.default;
	  }
	});
	Object.defineProperty(exports, "scaleInfo", {
	  enumerable: true,
	  get: function () {
	    return _definitions48.default;
	  }
	});
	Object.defineProperty(exports, "eth", {
	  enumerable: true,
	  get: function () {
	    return _definitions49.default;
	  }
	});
	Object.defineProperty(exports, "metadata", {
	  enumerable: true,
	  get: function () {
	    return _definitions50.default;
	  }
	});
	Object.defineProperty(exports, "rpc", {
	  enumerable: true,
	  get: function () {
	    return _definitions51.default;
	  }
	});
	Object.defineProperty(exports, "author", {
	  enumerable: true,
	  get: function () {
	    return _definitions52.default;
	  }
	});
	Object.defineProperty(exports, "chain", {
	  enumerable: true,
	  get: function () {
	    return _definitions53.default;
	  }
	});
	Object.defineProperty(exports, "childstate", {
	  enumerable: true,
	  get: function () {
	    return _definitions54.default;
	  }
	});
	Object.defineProperty(exports, "offchain", {
	  enumerable: true,
	  get: function () {
	    return _definitions55.default;
	  }
	});
	Object.defineProperty(exports, "payment", {
	  enumerable: true,
	  get: function () {
	    return _definitions56.default;
	  }
	});
	Object.defineProperty(exports, "state", {
	  enumerable: true,
	  get: function () {
	    return _definitions57.default;
	  }
	});

	var _definitions = interopRequireDefault(require$$0$4);

	var _definitions2 = interopRequireDefault(require$$1$5);

	var _definitions3 = interopRequireDefault(require$$2$4);

	var _definitions4 = interopRequireDefault(require$$3$3);

	var _definitions5 = interopRequireDefault(require$$4$3);

	var _definitions6 = interopRequireDefault(require$$5$2);

	var _definitions7 = interopRequireDefault(require$$6$2);

	var _definitions8 = interopRequireDefault(require$$7$2);

	var _definitions9 = interopRequireDefault(require$$8$2);

	var _definitions10 = interopRequireDefault(require$$9$1);

	var _definitions11 = interopRequireDefault(require$$10$1);

	var _definitions12 = interopRequireDefault(require$$11$1);

	var _definitions13 = interopRequireDefault(require$$12$1);

	var _definitions14 = interopRequireDefault(require$$13$1);

	var _definitions15 = interopRequireDefault(require$$14$1);

	var _definitions16 = interopRequireDefault(require$$15$1);

	var _definitions17 = interopRequireDefault(require$$16$1);

	var _definitions18 = interopRequireDefault(require$$17$1);

	var _definitions19 = interopRequireDefault(require$$18$1);

	var _definitions20 = interopRequireDefault(require$$19);

	var _definitions21 = interopRequireDefault(require$$20);

	var _definitions22 = interopRequireDefault(require$$21);

	var _definitions23 = interopRequireDefault(require$$22);

	var _definitions24 = interopRequireDefault(require$$23);

	var _definitions25 = interopRequireDefault(require$$24);

	var _definitions26 = interopRequireDefault(require$$25);

	var _definitions27 = interopRequireDefault(require$$26);

	var _definitions28 = interopRequireDefault(require$$27);

	var _definitions29 = interopRequireDefault(require$$28);

	var _definitions30 = interopRequireDefault(require$$29);

	var _definitions31 = interopRequireDefault(require$$30);

	var _definitions32 = interopRequireDefault(require$$31);

	var _definitions33 = interopRequireDefault(require$$32);

	var _definitions34 = interopRequireDefault(require$$33);

	var _definitions35 = interopRequireDefault(require$$34);

	var _definitions36 = interopRequireDefault(require$$35);

	var _definitions37 = interopRequireDefault(require$$36);

	var _definitions38 = interopRequireDefault(require$$37);

	var _definitions39 = interopRequireDefault(require$$38);

	var _definitions40 = interopRequireDefault(require$$39);

	var _definitions41 = interopRequireDefault(require$$40);

	var _definitions42 = interopRequireDefault(require$$41);

	var _definitions43 = interopRequireDefault(require$$42);

	var _definitions44 = interopRequireDefault(require$$43);

	var _definitions45 = interopRequireDefault(require$$44);

	var _definitions46 = interopRequireDefault(require$$45);

	var _definitions47 = interopRequireDefault(require$$46);

	var _definitions48 = interopRequireDefault(require$$47);

	var _definitions49 = interopRequireDefault(require$$48);

	var _definitions50 = interopRequireDefault(require$$49);

	var _definitions51 = interopRequireDefault(require$$50);

	var _definitions52 = interopRequireDefault(require$$51);

	var _definitions53 = interopRequireDefault(require$$52);

	var _definitions54 = interopRequireDefault(require$$53);

	var _definitions55 = interopRequireDefault(require$$54);

	var _definitions56 = interopRequireDefault(require$$55);

	var _definitions57 = interopRequireDefault(require$$56);
	});

	var require$$0$3 = definitions$1;

	var jsonrpc_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var definitions = _interopRequireWildcard(require$$0$3);

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const jsonrpc = {};
	Object.keys(definitions).filter(key => Object.keys(definitions[key].rpc || {}).length !== 0).forEach(_section => {
	  jsonrpc[_section] = {};
	  Object.entries(definitions[_section].rpc).forEach(([method, def]) => {
	    const isSubscription = !!def.pubsub;
	    const section = def.aliasSection || _section; // allow for section overrides

	    if (!jsonrpc[section]) {
	      jsonrpc[section] = {};
	    }

	    jsonrpc[section][method] = _objectSpread(_objectSpread({}, def), {}, {
	      isSubscription,
	      jsonrpc: `${section}_${method}`,
	      method,
	      section
	    });
	  });
	});
	var _default = jsonrpc;
	exports.default = _default;
	});

	var hasEq_1 = hasEq;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hasEq(o) {
	  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	  return (0, _util$5.isFunction)(o.eq);
	}

	var util$a = /*#__PURE__*/Object.defineProperty({
		hasEq: hasEq_1
	}, '__esModule', {value: true});

	var _util2$1 = util$a;

	var compareArray_2 = compareArray;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// NOTE These are used internally and when comparing objects, expects that
	// when the second is an Codec[] that the first has to be as well
	function compareArray(a, b) {
	  if (Array.isArray(b)) {
	    return a.length === b.length && (0, _util$5.isUndefined)(a.find((value, index) => (0, _util2$1.hasEq)(value) ? !value.eq(b[index]) : value !== b[index]));
	  }

	  return false;
	}

	var compareArray_1 = /*#__PURE__*/Object.defineProperty({
		compareArray: compareArray_2
	}, '__esModule', {value: true});

	var _compareArray = compareArray_1;

	var AbstractArray_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AbstractArray = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name AbstractArray
	 * @description
	 * This manages codec arrays. It is an extension to Array, providing
	 * specific encoding/decoding on top of the base type.
	 * @noInheritDoc
	 */
	class AbstractArray extends Array {
	  constructor(registry, values) {
	    super(values.length);
	    this.registry = void 0;
	    this.createdAtHash = void 0;

	    for (let i = 0; i < values.length; i++) {
	      this[i] = values[i];
	    }

	    this.registry = registry;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.reduce((total, entry) => total + entry.encodedLength, (0, _util$5.compactToU8a)(this.length).length);
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return this.length === 0;
	  }
	  /**
	   * @description The length of the value
	   */


	  get length() {
	    // only included here since we ignore inherited docs
	    return super.length;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _compareArray.compareArray)(this, other);
	  }
	  /**
	   * @description Converts the Object to an standard JavaScript Array
	   */


	  toArray() {
	    return Array.from(this);
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return this.map(entry => entry.toHuman(isExtended));
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.map(entry => entry.toJSON());
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  /**
	   * @description Returns the string representation of the value
	   */
	  toString() {
	    // Overwrite the default toString representation of Array.
	    const data = this.map(entry => entry.toString());
	    return `[${data.join(', ')}]`;
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    const encoded = this.map(entry => entry.toU8a(isBare));
	    return isBare ? (0, _util$5.u8aConcat)(...encoded) : (0, _util$5.u8aConcat)((0, _util$5.compactToU8a)(this.length), ...encoded);
	  } // Below are methods that we override. When we do a `new Vec(...).map()`,
	  // we want it to return an Array. We only override the methods that return a
	  // new instance.

	  /**
	   * @description Concatenates two arrays
	   */


	  concat(other) {
	    return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);
	  }
	  /**
	   * @description Filters the array with the callback
	   */


	  filter(callbackfn, thisArg) {
	    return this.toArray().filter(callbackfn, thisArg);
	  }
	  /**
	   * @description Maps the array with the callback
	   */


	  map(callbackfn, thisArg) {
	    return this.toArray().map(callbackfn, thisArg);
	  }
	  /**
	   * @description Checks if the array includes a specific value
	   */


	  includes(check) {
	    return this.some(value => value.eq(check));
	  }
	  /**
	   * @description Returns a slice of an array
	   */


	  slice(start, end) {
	    return this.toArray().slice(start, end);
	  }

	}

	exports.AbstractArray = AbstractArray;
	});

	var Null_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Null = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name Null
	 * @description
	 * Implements a type that does not contain anything (apart from `null`)
	 */
	class Null {
	  constructor(registry) {
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    this.registry = registry;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return 0;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    throw new Error('.hash is not implemented on Null');
	  }
	  /**
	   * @description Checks if the value is an empty value (always true)
	   */


	  get isEmpty() {
	    return true;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return other instanceof Null || (0, _util$5.isNull)(other);
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return '0x';
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return null;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Null';
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return '';
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    return new Uint8Array();
	  }

	}

	exports.Null = Null;
	});

	var compareMap_2 = compareMap;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hasMismatch(a, b) {
	  return (0, _util$5.isUndefined)(a) || ((0, _util2$1.hasEq)(a) ? !a.eq(b) : a !== b);
	}

	function notEntry(value) {
	  return !Array.isArray(value) || value.length !== 2;
	}

	function compareMapArray(a, b) {
	  // equal number of entries and each entry in the array should match
	  return a.size === b.length && !b.some(entry => notEntry(entry) || hasMismatch(a.get(entry[0]), entry[1]));
	} // NOTE These are used internally and when comparing objects, expects that
	// when the second is an Map<string, Codec> that the first has to be as well


	function compareMap(a, b) {
	  if (Array.isArray(b)) {
	    return compareMapArray(a, b);
	  } else if (b instanceof Map) {
	    return compareMapArray(a, [...b.entries()]);
	  } else if ((0, _util$5.isObject)(b)) {
	    return compareMapArray(a, Object.entries(b));
	  }

	  return false;
	}

	var compareMap_1 = /*#__PURE__*/Object.defineProperty({
		compareMap: compareMap_2
	}, '__esModule', {value: true});

	var compareSet_2 = compareSet;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function compareSetArray(a, b) {
	  // equal number of entries and each entry in the array should match
	  return a.size === b.length && !b.some(entry => !a.has(entry));
	} // NOTE These are used internally and when comparing objects, expects that
	// when the second is an Set<string, Codec> that the first has to be as well


	function compareSet(a, b) {
	  if (Array.isArray(b)) {
	    return compareSetArray(a, b);
	  } else if (b instanceof Set) {
	    return compareSetArray(a, [...b.values()]);
	  } else if ((0, _util$5.isObject)(b)) {
	    return compareSetArray(a, Object.values(b));
	  }

	  return false;
	}

	var compareSet_1 = /*#__PURE__*/Object.defineProperty({
		compareSet: compareSet_2
	}, '__esModule', {value: true});

	var decodeU8a_2 = decodeU8a;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * Given an u8a, and an array of Type constructors, decode the u8a against the
	 * types, and return an array of decoded values.
	 *
	 * @param u8a - The u8a to decode.
	 * @param types - The array of Constructor to decode the U8a against.
	 */
	function decodeU8a(registry, u8a, _types, _keys) {
	  const [types, keys] = Array.isArray(_types) ? [_types, _keys || []] : [Object.values(_types), Object.keys(_types)];
	  const result = [];
	  let offset = 0;

	  for (let i = 0; i < types.length; i++) {
	    const Type = types[i];

	    try {
	      const value = new Type(registry, u8a.subarray(offset));
	      result.push(value);
	      offset += value.encodedLength;
	    } catch (error) {
	      let rawType;

	      try {
	        rawType = new Type(registry).toRawType();
	      } catch {
	        rawType = '';
	      }

	      throw new Error(`decodeU8a: failed at ${(0, _util$5.u8aToHex)(u8a.subarray(offset).slice(0, 8))}… on ${keys[i] ? `${keys[i]}` : ''}${rawType ? `: ${rawType}` : ''}:: ${error.message}`);
	    }
	  }

	  return result;
	}

	var decodeU8a_1 = /*#__PURE__*/Object.defineProperty({
		decodeU8a: decodeU8a_2
	}, '__esModule', {value: true});

	var typeToConstructor_2 = typeToConstructor;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function typeToConstructor(registry, type) {
	  return (0, _util$5.isString)(type) ? registry.createClass(type) : type;
	}

	var typeToConstructor_1 = /*#__PURE__*/Object.defineProperty({
		typeToConstructor: typeToConstructor_2
	}, '__esModule', {value: true});

	var _typeToConstructor = typeToConstructor_1;

	var mapToTypeMap_2 = mapToTypeMap;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @description takes an input map of the form `{ [string]: string | Constructor }` and returns a map of `{ [string]: Constructor }`
	 */
	function mapToTypeMap(registry, input) {
	  return Object.entries(input).reduce((output, [key, type]) => {
	    output[key] = (0, _typeToConstructor.typeToConstructor)(registry, type);
	    return output;
	  }, {});
	}

	var mapToTypeMap_1 = /*#__PURE__*/Object.defineProperty({
		mapToTypeMap: mapToTypeMap_2
	}, '__esModule', {value: true});

	var sortAsc_1 = sortAsc;
	var sortSet_1 = sortSet;
	var sortMap_1 = sortMap;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal **/
	function isArrayLike(arg) {
	  return arg instanceof Uint8Array || Array.isArray(arg);
	}
	/** @internal **/


	function isCodec(arg) {
	  return (0, _util$5.isFunction)(arg && arg.toU8a);
	}
	/** @internal **/


	function isEnum(arg) {
	  return isCodec(arg) && (0, _util$5.isNumber)(arg.index) && isCodec(arg.value);
	}
	/** @internal */


	function isNumberLike(arg) {
	  return (0, _util$5.isNumber)(arg) || (0, _util$5.isBn)(arg) || (0, _util$5.isBigInt)(arg);
	}
	/** @internal */


	function sortArray(a, b) {
	  // Vec, Tuple, Bytes etc.
	  let sortRes = 0;
	  const minLen = Math.min(a.length, b.length);

	  for (let i = 0; i < minLen; ++i) {
	    sortRes = sortAsc(a[i], b[i]);

	    if (sortRes !== 0) {
	      return sortRes;
	    }
	  }

	  return a.length - b.length;
	}
	/**
	* Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
	* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
	* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
	*/


	function sortAsc(a, b) {
	  if (isNumberLike(a) && isNumberLike(b)) {
	    return (0, _util$5.bnToBn)(a).cmp((0, _util$5.bnToBn)(b));
	  } else if (a instanceof Map && b instanceof Map) {
	    return sortAsc(Array.from(a.values()), Array.from(b.values()));
	  } else if (isEnum(a) && isEnum(b)) {
	    return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
	  } else if (isArrayLike(a) && isArrayLike(b)) {
	    return sortArray(a, b);
	  } else if (isCodec(a) && isCodec(b)) {
	    // Text, Bool etc.
	    return sortAsc(a.toU8a(true), b.toU8a(true));
	  }

	  throw new Error(`Attempting to sort unrecognized values: ${(0, _util$5.stringify)(a)} (typeof ${typeof a}) <-> ${(0, _util$5.stringify)(b)} (typeof ${typeof b})`);
	}

	function sortSet(set) {
	  return new Set(Array.from(set).sort(sortAsc));
	}

	function sortMap(map) {
	  return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
	}

	var sortValues = /*#__PURE__*/Object.defineProperty({
		sortAsc: sortAsc_1,
		sortSet: sortSet_1,
		sortMap: sortMap_1
	}, '__esModule', {value: true});

	var _compareMap = compareMap_1;

	var _compareSet = compareSet_1;

	var _decodeU8a = decodeU8a_1;

	var _mapToTypeMap = mapToTypeMap_1;

	var _sortValues = sortValues;

	var utils = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "compareArray", {
	  enumerable: true,
	  get: function () {
	    return _compareArray.compareArray;
	  }
	});
	Object.defineProperty(exports, "compareMap", {
	  enumerable: true,
	  get: function () {
	    return _compareMap.compareMap;
	  }
	});
	Object.defineProperty(exports, "compareSet", {
	  enumerable: true,
	  get: function () {
	    return _compareSet.compareSet;
	  }
	});
	Object.defineProperty(exports, "decodeU8a", {
	  enumerable: true,
	  get: function () {
	    return _decodeU8a.decodeU8a;
	  }
	});
	Object.defineProperty(exports, "mapToTypeMap", {
	  enumerable: true,
	  get: function () {
	    return _mapToTypeMap.mapToTypeMap;
	  }
	});
	Object.defineProperty(exports, "typeToConstructor", {
	  enumerable: true,
	  get: function () {
	    return _typeToConstructor.typeToConstructor;
	  }
	});
	Object.defineProperty(exports, "sortAsc", {
	  enumerable: true,
	  get: function () {
	    return _sortValues.sortAsc;
	  }
	});
	Object.defineProperty(exports, "sortSet", {
	  enumerable: true,
	  get: function () {
	    return _sortValues.sortSet;
	  }
	});
	Object.defineProperty(exports, "sortMap", {
	  enumerable: true,
	  get: function () {
	    return _sortValues.sortMap;
	  }
	});
	});

	var _index$f = utils;

	var Struct_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Struct = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeStructFromObject(registry, Types, value, jsonMap) {
	  let jsonObj;
	  const inputKeys = Object.keys(Types);
	  (0, _util$5.assert)(!Array.isArray(value) || value.length === inputKeys.length, () => `Struct: Unable to map ${(0, _util$5.stringify)(value)} array to object with known keys ${inputKeys.join(', ')}`);
	  return inputKeys.reduce((raw, key, index) => {
	    // The key in the JSON can be snake_case (or other cases), but in our
	    // Types, result or any other maps, it's camelCase
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	    const jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;

	    try {
	      if (Array.isArray(value)) {
	        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
	        raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);
	      } else if (value instanceof Map) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
	        const mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

	        raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);
	      } else if ((0, _util$5.isObject)(value)) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
	        let assign = value[jsonKey];

	        if ((0, _util$5.isUndefined)(assign)) {
	          if ((0, _util$5.isUndefined)(jsonObj)) {
	            jsonObj = Object.entries(value).reduce((all, [key, value]) => {
	              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
	              all[(0, _util$5.stringCamelCase)(key)] = value;
	              return all;
	            }, {});
	          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment


	          assign = jsonObj[jsonKey];
	        } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access


	        raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);
	      } else {
	        throw new Error(`Cannot decode value ${(0, _util$5.stringify)(value)} (typeof ${typeof value}), expected an input object with known keys`);
	      }
	    } catch (error) {
	      let type = Types[key].name;

	      try {
	        type = new Types[key](registry).toRawType();
	      } catch (error) {// ignore
	      }

	      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
	    }

	    return raw;
	  }, {});
	}
	/**
	 * Decode input to pass into constructor.
	 *
	 * @param Types - Types definition.
	 * @param value - Value to decode, one of:
	 * - null
	 * - undefined
	 * - hex
	 * - Uint8Array
	 * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`
	 * are also keys in `Types`
	 * - array with `[value1, value2]` assuming the array has the same length as
	 * `Object.keys(Types)`
	 * @param jsonMap
	 * @internal
	 */


	function decodeStruct(registry, Types, value, jsonMap) {
	  if ((0, _util$5.isHex)(value)) {
	    return decodeStruct(registry, Types, (0, _util$5.hexToU8a)(value), jsonMap);
	  } else if ((0, _util$5.isU8a)(value)) {
	    const keys = Object.keys(Types);
	    const values = (0, _index$f.decodeU8a)(registry, value, Object.values(Types), keys); // Transform array of values to {key: value} mapping

	    return keys.reduce((raw, key, index) => {
	      // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	      raw[key] = values[index];
	      return raw;
	    }, {});
	  } else if (!value) {
	    return {};
	  } // We assume from here that value is a JS object (Array, Map, Object)


	  return decodeStructFromObject(registry, Types, value, jsonMap);
	}
	/**
	 * @name Struct
	 * @description
	 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
	 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
	 * values in the constructor and it manages the decoding. It is important that the constructor
	 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
	 * it needs to decoded in the specific defined order.
	 * @noInheritDoc
	 */


	var _jsonMap = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("jsonMap");

	var _Types = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Types");

	class Struct extends Map {
	  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
	  constructor(registry, Types, value = {}, jsonMap = new Map()) {
	    super(Object.entries(decodeStruct(registry, (0, _index$f.mapToTypeMap)(registry, Types), value, jsonMap)));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _jsonMap, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _Types, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _jsonMap)[_jsonMap] = jsonMap;
	    (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types] = (0, _index$f.mapToTypeMap)(registry, Types);
	  }

	  static with(Types, jsonMap) {
	    return class extends Struct {
	      constructor(registry, value) {
	        super(registry, Types, value, jsonMap);
	        Object.keys(Types).forEach(key => {
	          (0, _util$5.isUndefined)(this[key]) && Object.defineProperty(this, key, {
	            enumerable: true,
	            get: () => this.get(key)
	          });
	        });
	      }

	    };
	  }

	  static typesToMap(registry, Types) {
	    return Object.entries(Types).reduce((result, [key, Type]) => {
	      result[key] = registry.getClassName(Type) || new Type(registry).toRawType();
	      return result;
	    }, {});
	  }
	  /**
	   * @description The available keys for this struct
	   */


	  get defKeys() {
	    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]);
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    const items = this.toArray();

	    for (let i = 0; i < items.length; i++) {
	      if (!items[i].isEmpty) {
	        return false;
	      }
	    }

	    return true;
	  }
	  /**
	   * @description Returns the Type description to sthe structure
	   */


	  get Type() {
	    return Object.entries((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]).reduce((result, [key, Type]) => {
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	      result[key] = new Type(this.registry).toRawType();
	      return result;
	    }, {});
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.toArray().reduce((length, entry) => {
	      length += entry.encodedLength;
	      return length;
	    }, 0);
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _index$f.compareMap)(this, other);
	  }
	  /**
	   * @description Returns a specific names entry in the structure
	   * @param name The name of the entry to retrieve
	   */


	  get(name) {
	    return super.get(name);
	  }
	  /**
	   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
	   */


	  getAtIndex(index) {
	    return this.toArray()[index];
	  }
	  /**
	   * @description Converts the Object to an standard JavaScript Array
	   */


	  toArray() {
	    return [...this.values()];
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return [...this.keys()].reduce((json, key) => {
	      const value = this.get(key);
	      json[key] = value && value.toHuman(isExtended);
	      return json;
	    }, {});
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return [...this.keys()].reduce((json, key) => {
	      const jsonKey = (0, _classPrivateFieldLooseBase2.default)(this, _jsonMap)[_jsonMap].get(key) || key;
	      const value = this.get(key);
	      json[jsonKey] = value && value.toJSON();
	      return json;
	    }, {});
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return (0, _util$5.stringify)(Struct.typesToMap(this.registry, (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]));
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _util$5.stringify)(this.toJSON());
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    // we have keyof S here, cast to string to make it compatible with isBare
	    const entries = [...this.entries()];
	    return (0, _util$5.u8aConcat)(...entries // eslint-disable-next-line @typescript-eslint/unbound-method
	    .filter(([, value]) => (0, _util$5.isFunction)(value === null || value === void 0 ? void 0 : value.toU8a)).map(([key, value]) => value.toU8a(!isBare || (0, _util$5.isBoolean)(isBare) ? isBare : isBare[key])));
	  }

	}

	exports.Struct = Struct;
	});

	var _Null = Null_1;

	var _Struct = Struct_1;

	var Enum_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Enum = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);









	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isRustEnum(def) {
	  const defValues = Object.values(def);

	  if (defValues.some(v => (0, _util$5.isNumber)(v))) {
	    (0, _util$5.assert)(defValues.every(v => (0, _util$5.isNumber)(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
	    return false;
	  }

	  return true;
	}

	function extractDef(registry, _def) {
	  if (Array.isArray(_def)) {
	    return {
	      def: _def.reduce((def, key, index) => {
	        def[key] = {
	          Type: _Null.Null,
	          index
	        };
	        return def;
	      }, {}),
	      isBasic: true,
	      isIndexed: false
	    };
	  }

	  let isBasic;
	  let isIndexed;
	  let def;

	  if (isRustEnum(_def)) {
	    def = Object.entries((0, _index$f.mapToTypeMap)(registry, _def)).reduce((def, [key, Type], index) => {
	      def[key] = {
	        Type,
	        index
	      };
	      return def;
	    }, {});
	    isBasic = !Object.values(def).some(({
	      Type
	    }) => Type !== _Null.Null);
	    isIndexed = false;
	  } else {
	    def = Object.entries(_def).reduce((def, [key, index]) => {
	      def[key] = {
	        Type: _Null.Null,
	        index
	      };
	      return def;
	    }, {});
	    isBasic = true;
	    isIndexed = true;
	  }

	  return {
	    def,
	    isBasic,
	    isIndexed
	  };
	}

	function createFromValue(registry, def, index = 0, value) {
	  const entry = Object.values(def).find(e => e.index === index);
	  (0, _util$5.assert)(!(0, _util$5.isUndefined)(entry), () => `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);
	  return {
	    index,
	    value: value instanceof entry.Type ? value : new entry.Type(registry, value)
	  };
	}

	function decodeFromJSON(registry, def, key, value) {
	  // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
	  // additionally force to lower to ensure forward compat
	  const keys = Object.keys(def).map(k => k.toLowerCase());
	  const keyLower = key.toLowerCase();
	  const index = keys.indexOf(keyLower);
	  (0, _util$5.assert)(index !== -1, () => `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);

	  try {
	    return createFromValue(registry, def, Object.values(def)[index].index, value);
	  } catch (error) {
	    throw new Error(`Enum(${key}):: ${error.message}`);
	  }
	}

	function decodeFromString(registry, def, value) {
	  return (0, _util$5.isHex)(value) // eslint-disable-next-line @typescript-eslint/no-use-before-define
	  ? decodeFromValue(registry, def, (0, _util$5.hexToU8a)(value)) : decodeFromJSON(registry, def, value);
	}

	function decodeFromValue(registry, def, value) {
	  if ((0, _util$5.isU8a)(value)) {
	    // nested, we don't want to match isObject below
	    if (value.length) {
	      return createFromValue(registry, def, value[0], value.subarray(1));
	    }
	  } else if ((0, _util$5.isNumber)(value)) {
	    return createFromValue(registry, def, value);
	  } else if ((0, _util$5.isString)(value)) {
	    return decodeFromString(registry, def, value.toString());
	  } else if ((0, _util$5.isObject)(value)) {
	    const key = Object.keys(value)[0];
	    return decodeFromJSON(registry, def, key, value[key]);
	  } // Worst-case scenario, return the first with default


	  return createFromValue(registry, def, Object.values(def)[0].index);
	}

	function decodeEnum(registry, def, value, index) {
	  // NOTE We check the index path first, before looking at values - this allows treating
	  // the optional indexes before anything else, more-specific > less-specific
	  if ((0, _util$5.isNumber)(index)) {
	    return createFromValue(registry, def, index, value); // eslint-disable-next-line @typescript-eslint/no-use-before-define
	  } else if (value instanceof Enum) {
	    return createFromValue(registry, def, value.index, value.value);
	  }

	  return decodeFromValue(registry, def, value);
	}
	/**
	 * @name Enum
	 * @description
	 * This implements an enum, that based on the value wraps a different type. It is effectively
	 * an extension to enum where the value type is determined by the actual index.
	 */


	var _def2 = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("def");

	var _entryIndex = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("entryIndex");

	var _indexes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("indexes");

	var _isBasic = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isBasic");

	var _isIndexed = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isIndexed");

	var _raw = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("raw");

	class Enum {
	  constructor(registry, def, value, index) {
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _def2, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _entryIndex, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _indexes, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _isBasic, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _isIndexed, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _raw, {
	      writable: true,
	      value: void 0
	    });
	    const defInfo = extractDef(registry, def);
	    const decoded = decodeEnum(registry, defInfo.def, value, index);
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2] = defInfo.def;
	    (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] = defInfo.isBasic;
	    (0, _classPrivateFieldLooseBase2.default)(this, _isIndexed)[_isIndexed] = defInfo.isIndexed;
	    (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes] = Object.values(defInfo.def).map(({
	      index
	    }) => index);
	    (0, _classPrivateFieldLooseBase2.default)(this, _entryIndex)[_entryIndex] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes].indexOf(decoded.index) || 0;
	    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded.value;
	  }

	  static with(Types) {
	    return class extends Enum {
	      constructor(registry, value, index) {
	        super(registry, Types, value, index);
	        Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]).forEach(_key => {
	          const name = (0, _util$5.stringUpperFirst)((0, _util$5.stringCamelCase)(_key.replace(' ', '_')));
	          const askey = `as${name}`;
	          const iskey = `is${name}`;
	          (0, _util$5.isUndefined)(this[iskey]) && Object.defineProperty(this, iskey, {
	            enumerable: true,
	            get: () => this.type === _key
	          });
	          (0, _util$5.isUndefined)(this[askey]) && Object.defineProperty(this, askey, {
	            enumerable: true,
	            get: () => {
	              (0, _util$5.assert)(this[iskey], () => `Cannot convert '${this.type}' via ${askey}`);
	              return this.value;
	            }
	          });
	        });
	      }

	    };
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description The index of the enum value
	   */


	  get index() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][(0, _classPrivateFieldLooseBase2.default)(this, _entryIndex)[_entryIndex]];
	  }
	  /**
	   * @description true if this is a basic enum (no values)
	   */


	  get isBasic() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic];
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;
	  }
	  /**
	   * @description Checks if the Enum points to a [[Null]] type
	   */


	  get isNone() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.Null;
	  }
	  /**
	   * @description Checks if the Enum points to a [[Null]] type
	   * @deprecated use isNone
	   */


	  get isNull() {
	    return this.isNone;
	  }
	  /**
	   * @description The available keys for this enum
	   */


	  get defIndexes() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes];
	  }
	  /**
	   * @description The available keys for this enum
	   */


	  get defKeys() {
	    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);
	  }
	  /**
	   * @description The name of the type this enum value represents
	   */


	  get type() {
	    return this.defKeys[(0, _classPrivateFieldLooseBase2.default)(this, _entryIndex)[_entryIndex]];
	  }
	  /**
	   * @description The value of the enum
	   */


	  get value() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    // cater for the case where we only pass the enum index
	    if ((0, _util$5.isNumber)(other)) {
	      return this.toNumber() === other;
	    } else if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] && (0, _util$5.isString)(other)) {
	      return this.type === other;
	    } else if ((0, _util$5.isU8a)(other)) {
	      return !this.toU8a().some((entry, index) => entry !== other[index]);
	    } else if ((0, _util$5.isHex)(other)) {
	      return this.toHex() === other;
	    } else if (other instanceof Enum) {
	      return this.index === other.index && this.value.eq(other.value);
	    } else if ((0, _util$5.isObject)(other)) {
	      return this.value.eq(other[this.type]);
	    } // compare the actual wrapper value


	    return this.value.eq(other);
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] || this.isNone ? this.type : {
	      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended)
	    };
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {
	      [(0, _util$5.stringCamelCase)(this.type)]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON()
	    };
	  }
	  /**
	   * @description Returns the number representation for the value
	   */


	  toNumber() {
	    return this.index;
	  }
	  /**
	   * @description Returns a raw struct representation of the enum types
	   */


	  _toRawStruct() {
	    if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic]) {
	      return (0, _classPrivateFieldLooseBase2.default)(this, _isIndexed)[_isIndexed] ? this.defKeys.reduce((out, key, index) => {
	        out[key] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][index];
	        return out;
	      }, {}) : this.defKeys;
	    }

	    const typeMap = Object.entries((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]).reduce((out, [key, {
	      Type
	    }]) => {
	      out[key] = Type;
	      return out;
	    }, {});
	    return _Struct.Struct.typesToMap(this.registry, typeMap);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return (0, _util$5.stringify)({
	      _enum: this._toRawStruct()
	    });
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return this.isNull ? this.type : (0, _util$5.stringify)(this.toJSON());
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    return (0, _util$5.u8aConcat)(new Uint8Array(isBare ? [] : [this.index]), (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(isBare));
	  }

	}

	exports.Enum = Enum;
	});

	var _AbstractArray = AbstractArray_1;

	var _Enum = Enum_1;

	var _Map$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CodecMap = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);











	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l = (0, _util$5.logger)('Map');
	/** @internal */

	function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
	  const output = new Map();
	  const [offset, length] = (0, _util$5.compactFromU8a)(u8a);
	  const types = [];

	  for (let i = 0; i < length.toNumber(); i++) {
	    types.push(KeyClass, ValClass);
	  }

	  const values = (0, _index$f.decodeU8a)(registry, u8a.subarray(offset), types);

	  for (let i = 0; i < values.length; i += 2) {
	    output.set(values[i], values[i + 1]);
	  }

	  return output;
	}
	/** @internal */


	function decodeMapFromMap(registry, KeyClass, ValClass, value) {
	  const output = new Map();
	  value.forEach((val, key) => {
	    const isComplex = KeyClass.prototype instanceof _AbstractArray.AbstractArray || KeyClass.prototype instanceof _Struct.Struct || KeyClass.prototype instanceof _Enum.Enum;

	    try {
	      output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
	    } catch (error) {
	      l.error('Failed to decode key or value:', error.message);
	      throw error;
	    }
	  });
	  return output;
	}
	/**
	 * Decode input to pass into constructor.
	 *
	 * @param KeyClass - Type of the map key
	 * @param ValClass - Type of the map value
	 * @param value - Value to decode, one of:
	 * - null
	 * - undefined
	 * - hex
	 * - Uint8Array
	 * - Map<any, any>, where both key and value types are either
	 *   constructors or decodeable values for their types.
	 * @param jsonMap
	 * @internal
	 */


	function decodeMap(registry, keyType, valType, value) {
	  const KeyClass = (0, _index$f.typeToConstructor)(registry, keyType);
	  const ValClass = (0, _index$f.typeToConstructor)(registry, valType);

	  if (!value) {
	    return new Map();
	  } else if ((0, _util$5.isU8a)(value) || (0, _util$5.isHex)(value)) {
	    return decodeMapFromU8a(registry, KeyClass, ValClass, (0, _util$5.u8aToU8a)(value));
	  } else if (value instanceof Map) {
	    return decodeMapFromMap(registry, KeyClass, ValClass, value);
	  } else if ((0, _util$5.isObject)(value)) {
	    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
	  }

	  throw new Error('Map: cannot decode type');
	}

	var _KeyClass = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("KeyClass");

	var _ValClass = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ValClass");

	var _type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("type");

	class CodecMap extends Map {
	  constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
	    const decoded = decodeMap(registry, keyType, valType, rawValue);
	    super(type === 'BTreeMap' ? (0, _index$f.sortMap)(decoded) : decoded);
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _KeyClass, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _ValClass, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _type, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass] = (0, _index$f.typeToConstructor)(registry, keyType);
	    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _index$f.typeToConstructor)(registry, valType);
	    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = type;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    let len = (0, _util$5.compactToU8a)(this.size).length;
	    this.forEach((v, k) => {
	      len += v.encodedLength + k.encodedLength;
	    });
	    return len;
	  }
	  /**
	   * @description Returns a hash of the value
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return this.size === 0;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _index$f.compareMap)(this, other);
	  }
	  /**
	   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    const json = {};
	    this.forEach((v, k) => {
	      json[k.toString()] = v.toHuman(isExtended);
	    });
	    return json;
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    const json = {};
	    this.forEach((v, k) => {
	      json[k.toString()] = v.toJSON();
	    });
	    return json;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `${(0, _classPrivateFieldLooseBase2.default)(this, _type)[_type]}<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _util$5.stringify)(this.toJSON());
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    const encoded = new Array();

	    if (!isBare) {
	      encoded.push((0, _util$5.compactToU8a)(this.size));
	    }

	    this.forEach((v, k) => {
	      encoded.push(k.toU8a(isBare), v.toU8a(isBare));
	    });
	    return (0, _util$5.u8aConcat)(...encoded);
	  }

	}

	exports.CodecMap = CodecMap;
	});

	var _Map = _Map$1;

	var BTreeMap_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BTreeMap = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	class BTreeMap extends _Map.CodecMap {
	  static with(keyType, valType) {
	    return class extends BTreeMap {
	      constructor(registry, value) {
	        super(registry, keyType, valType, value, 'BTreeMap');
	      }

	    };
	  }

	}

	exports.BTreeMap = BTreeMap;
	});

	var BTreeSet_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BTreeSet = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l = (0, _util$5.logger)('BTreeSet');
	/** @internal */

	function decodeSetFromU8a(registry, ValClass, u8a) {
	  const output = new Set();
	  const [offset, length] = (0, _util$5.compactFromU8a)(u8a);
	  const types = [];

	  for (let i = 0; i < length.toNumber(); i++) {
	    types.push(ValClass);
	  }

	  const values = (0, _index$f.decodeU8a)(registry, u8a.subarray(offset), types);

	  for (let i = 0; i < values.length; i++) {
	    output.add(values[i]);
	  }

	  return output;
	}
	/** @internal */


	function decodeSetFromSet(registry, ValClass, value) {
	  const output = new Set();
	  value.forEach(val => {
	    try {
	      output.add(val instanceof ValClass ? val : new ValClass(registry, val));
	    } catch (error) {
	      l.error('Failed to decode key or value:', error.message);
	      throw error;
	    }
	  });
	  return output;
	}
	/**
	 * Decode input to pass into constructor.
	 *
	 * @param ValClass - Type of the map value
	 * @param value - Value to decode, one of:
	 * - null
	 * - undefined
	 * - hex
	 * - Uint8Array
	 * - Set<any>, where both key and value types are either
	 *   constructors or decodeable values for their types.
	 * @param jsonSet
	 * @internal
	 */


	function decodeSet(registry, valType, value) {
	  if (!value) {
	    return new Set();
	  }

	  const ValClass = (0, _index$f.typeToConstructor)(registry, valType);

	  if ((0, _util$5.isHex)(value) || (0, _util$5.isU8a)(value)) {
	    return decodeSetFromU8a(registry, ValClass, (0, _util$5.u8aToU8a)(value));
	  } else if (Array.isArray(value) || value instanceof Set) {
	    return decodeSetFromSet(registry, ValClass, value);
	  }

	  throw new Error('BTreeSet: cannot decode type');
	}

	var _ValClass = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ValClass");

	class BTreeSet extends Set {
	  constructor(registry, valType, rawValue) {
	    super((0, _index$f.sortSet)(decodeSet(registry, valType, rawValue)));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _ValClass, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _index$f.typeToConstructor)(registry, valType);
	  }

	  static with(valType) {
	    return class extends BTreeSet {
	      constructor(registry, value) {
	        super(registry, valType, value);
	      }

	    };
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    let len = (0, _util$5.compactToU8a)(this.size).length;
	    this.forEach(v => {
	      len += v.encodedLength;
	    });
	    return len;
	  }
	  /**
	   * @description Returns a hash of the value
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return this.size === 0;
	  }
	  /**
	   * @description The actual set values as a string[]
	   */


	  get strings() {
	    return [...super.values()].map(v => v.toString());
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _index$f.compareSet)(this, other);
	  }
	  /**
	   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    const json = [];
	    this.forEach(v => {
	      json.push(v.toHuman(isExtended));
	    });
	    return json;
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    const json = [];
	    this.forEach(v => {
	      json.push(v.toJSON());
	    });
	    return json;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `BTreeSet<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _util$5.stringify)(this.toJSON());
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    const encoded = new Array();

	    if (!isBare) {
	      encoded.push((0, _util$5.compactToU8a)(this.size));
	    }

	    this.forEach(v => {
	      encoded.push(v.toU8a(isBare));
	    });
	    return (0, _util$5.u8aConcat)(...encoded);
	  }

	}

	exports.BTreeSet = BTreeSet;
	});

	var Compact_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Compact = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

	var _raw = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("raw");

	/**
	 * @name Compact
	 * @description
	 * A compact length-encoding codec wrapper. It performs the same function as Length, however
	 * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
	 * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
	 * a number and making the compact representation thereof
	 */
	class Compact {
	  constructor(registry, Type, value = 0) {
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _Type, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _raw, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = (0, _index$f.typeToConstructor)(registry, Type);
	    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = Compact.decodeCompact(registry, (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type], value);
	  }

	  static with(Type) {
	    return class extends Compact {
	      constructor(registry, value) {
	        super(registry, Type, value);
	      }

	    };
	  }
	  /** @internal */


	  static decodeCompact(registry, Type, value) {
	    if (value instanceof Compact) {
	      return new Type(registry, (0, _classPrivateFieldLooseBase2.default)(value, _raw)[_raw]);
	    } else if ((0, _util$5.isString)(value) || (0, _util$5.isNumber)(value) || (0, _util$5.isBn)(value) || (0, _util$5.isBigInt)(value)) {
	      return new Type(registry, value);
	    }

	    return new Type(registry, (0, _util$5.compactFromU8a)(value)[1]);
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.toU8a().length;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;
	  }
	  /**
	   * @description Returns the number of bits in the value
	   */


	  bitLength() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].bitLength();
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].eq(other instanceof Compact ? (0, _classPrivateFieldLooseBase2.default)(other, _raw)[_raw] : other);
	  }
	  /**
	   * @description Returns a BigInt representation of the number
	   */


	  toBigInt() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBigInt();
	  }
	  /**
	   * @description Returns the BN representation of the number
	   */


	  toBn() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn();
	  }
	  /**
	   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
	   */


	  toHex(isLe) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHex(isLe);
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended);
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON();
	  }
	  /**
	   * @description Returns the number representation for the value
	   */


	  toNumber() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toNumber();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `Compact<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toRawType()}>`;
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toString();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    return (0, _util$5.compactToU8a)((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn());
	  }
	  /**
	   * @description Returns the embedded [[UInt]] or [[Moment]] value
	   */


	  unwrap() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
	  }

	}

	exports.Compact = Compact;
	});

	var DoNotConstruct_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DoNotConstruct = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);

	var _neverError = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("neverError");

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name DoNotConstruct
	 * @description
	 * An unknown type that fails on construction with the type info
	 */
	class DoNotConstruct {
	  constructor(registry, typeName = 'DoNotConstruct') {
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _neverError, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError] = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  static with(typeName) {
	    return class extends DoNotConstruct {
	      constructor(registry) {
	        super(registry, typeName);
	      }

	    };
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }
	  /**
	   * @description Checks if the value is an empty value (always true)
	   */


	  get isEmpty() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  eq() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  toHex() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  toHuman() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  toJSON() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  toRawType() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  toString() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	  toU8a() {
	    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
	  }

	}

	exports.DoNotConstruct = DoNotConstruct;
	});

	var HashMap_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HashMap = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	class HashMap extends _Map.CodecMap {
	  static with(keyType, valType) {
	    return class extends HashMap {
	      constructor(registry, value) {
	        super(registry, keyType, valType, value);
	      }

	    };
	  }

	}

	exports.HashMap = HashMap;
	});

	var AbstractInt_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AbstractInt = exports.DEFAULT_UINT_BITS = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
	// In this case however, we always print any >32 as hex

	exports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;
	const MAX_NUMBER_BITS = 52;
	const MUL_P = new _util$5.BN(10000);
	const FORMATTERS = [['Perquintill', _util$5.BN_QUINTILL], ['Perbill', _util$5.BN_BILLION], ['Permill', _util$5.BN_MILLION], ['Percent', _util$5.BN_HUNDRED]];

	function toPercentage(value, divisor) {
	  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
	}
	/** @internal */


	function decodeAbstracIntU8a(value, bitLength, isNegative) {
	  if (!value.length) {
	    return '0';
	  }

	  try {
	    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian
	    return (0, _util$5.u8aToBn)(value.subarray(0, bitLength / 8), {
	      isLe: true,
	      isNegative
	    }).toString();
	  } catch (error) {
	    throw new Error(`AbstractInt: failed on ${(0, _util$5.stringify)(value)}:: ${error.message}`);
	  }
	}
	/** @internal */


	function decodeAbstractInt(value, bitLength, isNegative) {
	  // This function returns a string, which will be passed in the BN
	  // constructor. It would be ideal to actually return a BN, but there's a
	  // bug: https://github.com/indutny/bn.js/issues/206.
	  if ((0, _util$5.isHex)(value, -1, true)) {
	    return (0, _util$5.hexToBn)(value, {
	      isLe: false,
	      isNegative
	    }).toString();
	  } else if ((0, _util$5.isU8a)(value)) {
	    return decodeAbstracIntU8a(value, bitLength, isNegative);
	  } else if ((0, _util$5.isString)(value)) {
	    return new _util$5.BN(value.toString(), 10).toString();
	  }

	  return (0, _util$5.bnToBn)(value).toString();
	}
	/**
	 * @name AbstractInt
	 * @ignore
	 * @noInheritDoc
	 */


	var _bitLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("bitLength");

	var _isSigned = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isSigned");

	class AbstractInt extends _util$5.BN {
	  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
	    super(decodeAbstractInt(value, bitLength, isSigned));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _bitLength, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _isSigned, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] = bitLength;
	    (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned] = isSigned;
	    const isPositive = this.gte(_util$5.BN_ZERO);
	    const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);
	    (0, _util$5.assert)(isSigned || isPositive, () => `${this.toRawType()}: Negative number passed to unsigned type`);
	    (0, _util$5.assert)(super.bitLength() <= maxBits, () => `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is a zero value (align elsewhere)
	   */


	  get isEmpty() {
	    return this.isZero();
	  }
	  /**
	   * @description Checks if the value is an unsigned type
	   */


	  get isUnsigned() {
	    return !(0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned];
	  }
	  /**
	   * @description Returns the number of bits in the value
	   */


	  bitLength() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength];
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */
	  // eslint-disable-next-line @typescript-eslint/no-explicit-any


	  eq(other) {
	    // Here we are actually overriding the built-in .eq to take care of both
	    // number and BN inputs (no `.eqn` needed) - numbers will be converted
	    return super.eq((0, _util$5.isHex)(other) ? (0, _util$5.hexToBn)(other.toString(), {
	      isLe: false,
	      isNegative: (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned]
	    }) : (0, _util$5.bnToBn)(other));
	  }
	  /**
	   * @description True if this value is the max of the type
	   */


	  isMax() {
	    const u8a = this.toU8a().filter(b => b === 0xff);
	    return u8a.length === (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;
	  }
	  /**
	   * @description Returns a BigInt representation of the number
	   */


	  toBigInt() {
	    return BigInt(this.toString());
	  }
	  /**
	   * @description Returns the BN representation of the number. (Compatibility)
	   */


	  toBn() {
	    return this;
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex(isLe = false) {
	    // For display/JSON, this is BE, for compare, use isLe
	    return (0, _util$5.bnToHex)(this, {
	      bitLength: this.bitLength(),
	      isLe,
	      isNegative: !this.isUnsigned
	    });
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toHuman(isExpanded) {
	    const rawType = this.toRawType();

	    if (rawType === 'Balance') {
	      return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs
	      // to. as it stands we will always format (incorrectly) against the first token defined
	      : (0, _util$5.formatBalance)(this, {
	        decimals: this.registry.chainDecimals[0],
	        withSi: true,
	        withUnit: this.registry.chainTokens[0]
	      });
	    }

	    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
	    return divisor ? toPercentage(this, divisor) : (0, _util$5.formatNumber)(this);
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON(onlyHex = false) {
	    // FIXME this return type should by string | number, however BN returns string
	    // Options here are
	    //   - super.bitLength() - the actual used bits
	    //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
	    return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    // NOTE In the case of balances, which have a special meaning on the UI
	    // and can be interpreted differently, return a specific value for it so
	    // underlying it always matches (no matter which length it actually is)
	    return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
	  }
	  /**
	   * @description Returns the string representation of the value
	   * @param base The base to use for the conversion
	   */


	  toString(base) {
	    // only included here since we do not inherit docs
	    return super.toString(base);
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    return (0, _util$5.bnToU8a)(this, {
	      bitLength: this.bitLength(),
	      isLe: true,
	      isNegative: !this.isUnsigned
	    });
	  }

	}

	exports.AbstractInt = AbstractInt;
	});

	var _AbstractInt = AbstractInt_1;

	var Int_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Int = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name Int
	 * @description
	 * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
	 * this handles the encoding and decoding of those numbers. Upon construction
	 * the bitLength is provided and any additional use keeps the number to this
	 * length. This extends `BN`, so all methods available on a normal `BN` object
	 * is available here.
	 * @noInheritDoc
	 */
	class Int extends _AbstractInt.AbstractInt {
	  constructor(registry, value = 0, bitLength) {
	    super(registry, value, bitLength, true);
	  }

	  static with(bitLength, typeName) {
	    return class extends Int {
	      constructor(registry, value) {
	        super(registry, value, bitLength);
	      }

	      toRawType() {
	        return typeName || super.toRawType();
	      }

	    };
	  }

	}

	exports.Int = Int;
	});

	var Json_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Json = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeJson(value) {
	  return Object.entries(value || {});
	}
	/**
	 * @name Json
	 * @description
	 * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
	 * implements a Codec, it is limited in that it can only be used with input objects via RPC,
	 * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
	 * @noInheritDoc
	 */


	class Json extends Map {
	  constructor(registry, value) {
	    const decoded = decodeJson(value);
	    super(decoded);
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    this.registry = registry;
	    decoded.forEach(([key]) => {
	      (0, _util$5.isUndefined)(this[key]) && Object.defineProperty(this, key, {
	        enumerable: true,
	        get: () => this.get(key)
	      });
	    });
	  }
	  /**
	   * @description Always 0, never encodes as a Uint8Array
	   */


	  get encodedLength() {
	    return 0;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return [...this.keys()].length === 0;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _index$f.compareMap)(this, other);
	  }
	  /**
	   * @description Unimplemented, will throw
	   */


	  toHex() {
	    throw new Error('Unimplemented');
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return [...this.entries()].reduce((json, [key, value]) => {
	      json[key] = (0, _util$5.isFunction)(value.toHuman) ? value.toHuman() : value;
	      return json;
	    }, {});
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return [...this.entries()].reduce((json, [key, value]) => {
	      json[key] = value;
	      return json;
	    }, {});
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Json';
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _util$5.stringify)(this.toJSON());
	  }
	  /**
	   * @description Unimplemented, will throw
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    throw new Error('Unimplemented');
	  }

	}

	exports.Json = Json;
	});

	var Option_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Option = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeOptionU8a(registry, Type, value) {
	  return !value.length || value[0] === 0 ? new _Null.Null(registry) : new Type(registry, value.subarray(1));
	}
	/** @internal */


	function decodeOption(registry, typeName, value) {
	  if ((0, _util$5.isNull)(value) || (0, _util$5.isUndefined)(value) || value instanceof _Null.Null) {
	    return new _Null.Null(registry);
	  }

	  const Type = (0, _index$f.typeToConstructor)(registry, typeName); // eslint-disable-next-line @typescript-eslint/no-use-before-define

	  if (value instanceof Option) {
	    return decodeOption(registry, Type, value.value);
	  } else if (value instanceof Type) {
	    // don't re-create, use as it (which also caters for derived types)
	    return value;
	  } else if ((0, _util$5.isU8a)(value)) {
	    // the isU8a check happens last in the if-tree - since the wrapped value
	    // may be an instance of it, so Type and Option checks go in first
	    return decodeOptionU8a(registry, Type, value);
	  }

	  return new Type(registry, value);
	}
	/**
	 * @name Option
	 * @description
	 * An Option is an optional field. Basically the first byte indicates that there is
	 * is value to follow. If the byte is `1` there is an actual value. So the Option
	 * implements that - decodes, checks for optionality and wraps the required structure
	 * with a value if/as required/found.
	 */


	var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

	var _raw = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("raw");

	class Option {
	  constructor(registry, typeName, value) {
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _Type, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _raw, {
	      writable: true,
	      value: void 0
	    });
	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = (0, _index$f.typeToConstructor)(registry, typeName);
	    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decodeOption(registry, typeName, value);
	  }

	  static with(Type) {
	    return class extends Option {
	      constructor(registry, value) {
	        super(registry, Type, value);
	      }

	    };
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    // boolean byte (has value, doesn't have) along with wrapped length
	    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the Option has no value
	   */


	  get isEmpty() {
	    return this.isNone;
	  }
	  /**
	   * @description Checks if the Option has no value
	   */


	  get isNone() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.Null;
	  }
	  /**
	   * @description Checks if the Option has a value
	   */


	  get isSome() {
	    return !this.isNone;
	  }
	  /**
	   * @description The actual value for the Option
	   */


	  get value() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    if (other instanceof Option) {
	      return this.isSome === other.isSome && this.value.eq(other.value);
	    }

	    return this.value.eq(other);
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    // This attempts to align with the JSON encoding - actually in this case
	    // the isSome value is correct, however the `isNone` may be problematic
	    return this.isNone ? '0x' : (0, _util$5.u8aToHex)(this.toU8a().subarray(1));
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended);
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType(isBare) {
	    const wrapped = this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType();
	    return isBare ? wrapped : `Option<${wrapped}>`;
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toString();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    if (isBare) {
	      return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(true);
	    }

	    const u8a = new Uint8Array(this.encodedLength);

	    if (this.isSome) {
	      u8a.set([1]);
	      u8a.set((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(), 1);
	    }

	    return u8a;
	  }
	  /**
	   * @description Returns the value that the Option represents (if available), throws if null
	   */


	  unwrap() {
	    (0, _util$5.assert)(this.isSome, 'Option: unwrapping a None value');
	    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
	  }
	  /**
	   * @description Returns the value that the Option represents (if available) or defaultValue if none
	   * @param defaultValue The value to return if the option isNone
	   */


	  unwrapOr(defaultValue) {
	    return this.isSome ? this.unwrap() : defaultValue;
	  }
	  /**
	   * @description Returns the value that the Option represents (if available) or defaultValue if none
	   * @param defaultValue The value to return if the option isNone
	   */


	  unwrapOrDefault() {
	    return this.isSome ? this.unwrap() : new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry);
	  }

	}

	exports.Option = Option;
	});

	var Tuple_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Tuple = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeTuple(registry, _Types, value) {
	  if ((0, _util$5.isU8a)(value) || (0, _util$5.isHex)(value)) {
	    return (0, _index$f.decodeU8a)(registry, (0, _util$5.u8aToU8a)(value), _Types);
	  }

	  const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);
	  return Types.map((Type, index) => {
	    try {
	      const entry = value === null || value === void 0 ? void 0 : value[index];

	      if (entry instanceof Type) {
	        return entry;
	      }

	      return new Type(registry, entry);
	    } catch (error) {
	      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
	    }
	  });
	}
	/**
	 * @name Tuple
	 * @description
	 * A Tuple defines an anonymous fixed-length array, where each element has its
	 * own type. It extends the base JS `Array` object.
	 */


	class Tuple extends _AbstractArray.AbstractArray {
	  constructor(registry, Types, value) {
	    const Clazzes = Array.isArray(Types) ? Types.map(t => (0, _index$f.typeToConstructor)(registry, t)) : (0, _util$5.isFunction)(Types) || (0, _util$5.isString)(Types) ? [(0, _index$f.typeToConstructor)(registry, Types)] : (0, _index$f.mapToTypeMap)(registry, Types);
	    super(registry, decodeTuple(registry, Clazzes, value));
	    this._Types = void 0;
	    this._Types = Clazzes;
	  }

	  static with(Types) {
	    return class extends Tuple {
	      constructor(registry, value) {
	        super(registry, Types, value);
	      }

	    };
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.reduce((total, entry) => total + entry.encodedLength, 0);
	  }
	  /**
	   * @description The types definition of the tuple
	   */


	  get Types() {
	    return Array.isArray(this._Types) ? this._Types.map(Type => new Type(this.registry).toRawType()) : Object.keys(this._Types);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    const types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(Type => this.registry.getClassName(Type) || new Type(this.registry).toRawType());
	    return `(${types.join(',')})`;
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    // Overwrite the default toString representation of Array.
	    return (0, _util$5.stringify)(this.toJSON());
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    return (0, _util$5.u8aConcat)(...this.map(entry => entry.toU8a(isBare)));
	  }

	}

	exports.Tuple = Tuple;
	});

	var Vec_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Vec = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const MAX_LENGTH = 64 * 1024;
	const l = (0, _util$5.logger)('Vec');
	/**
	 * @name Vec
	 * @description
	 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
	 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
	 * specific encoding/decoding on top of the base type.
	 */

	class Vec extends _AbstractArray.AbstractArray {
	  constructor(registry, Type, value = []) {
	    const Clazz = (0, _index$f.typeToConstructor)(registry, Type);
	    super(registry, Vec.decodeVec(registry, Clazz, value));
	    this._Type = void 0;
	    this._Type = Clazz;
	  }
	  /** @internal */


	  static decodeVec(registry, Type, value) {
	    if (Array.isArray(value)) {
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
	      return value.map((entry, index) => {
	        try {
	          return entry instanceof Type ? entry : new Type(registry, entry);
	        } catch (error) {
	          l.error(`Unable to decode on index ${index}`, error.message);
	          throw error;
	        }
	      });
	    }

	    const u8a = (0, _util$5.u8aToU8a)(value);
	    const [offset, length] = (0, _util$5.compactFromU8a)(u8a);
	    (0, _util$5.assert)(length.lten(MAX_LENGTH), () => `Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
	    return (0, _index$f.decodeU8a)(registry, u8a.subarray(offset), new Array(length.toNumber()).fill(Type));
	  }

	  static with(Type) {
	    return class extends Vec {
	      constructor(registry, value) {
	        super(registry, Type, value);
	      }

	    };
	  }
	  /**
	   * @description The type for the items
	   */


	  get Type() {
	    return this._Type.name;
	  }
	  /**
	   * @description Finds the index of the value in the array
	   */


	  indexOf(_other) {
	    // convert type first, this removes overhead from the eq
	    const other = _other instanceof this._Type ? _other : new this._Type(this.registry, _other);

	    for (let i = 0; i < this.length; i++) {
	      if (other.eq(this[i])) {
	        return i;
	      }
	    }

	    return -1;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `Vec<${this.registry.getClassName(this._Type) || new this._Type(this.registry).toRawType()}>`;
	  }

	}

	exports.Vec = Vec;
	});

	var _Option = Option_1;

	var _Tuple = Tuple_1;

	var _Vec = Vec_1;

	var Linkage_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LinkageResult = exports.Linkage = void 0;









	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const EMPTY = new Uint8Array();
	/**
	 * @name Linkage
	 * @description The wrapper for the result from a LinkedMap
	 */

	class Linkage extends _Struct.Struct {
	  constructor(registry, Type, value) {
	    super(registry, {
	      previous: _Option.Option.with(Type),
	      // eslint-disable-next-line sort-keys
	      next: _Option.Option.with(Type)
	    }, value);
	  }

	  static withKey(Type) {
	    return class extends Linkage {
	      constructor(registry, value) {
	        super(registry, Type, value);
	      }

	    };
	  }

	  get previous() {
	    return this.get('previous');
	  }

	  get next() {
	    return this.get('next');
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `Linkage<${this.next.toRawType(true)}>`;
	  }
	  /**
	   * @description Custom toU8a which with bare mode does not return the linkage if empty
	   */


	  toU8a() {
	    // As part of a storage query (where these appear), in the case of empty, the values
	    // are NOT populated by the node - follow the same logic, leaving it empty
	    return this.isEmpty ? EMPTY : super.toU8a();
	  }

	}
	/**
	 * @name LinkageResult
	 * @description A Linkage keys/Values tuple
	 */


	exports.Linkage = Linkage;

	class LinkageResult extends _Tuple.Tuple {
	  constructor(registry, [TypeKey, keys], [TypeValue, values]) {
	    super(registry, {
	      Keys: _Vec.Vec.with(TypeKey),
	      Values: _Vec.Vec.with(TypeValue)
	    }, [keys, values]);
	  }

	}

	exports.LinkageResult = LinkageResult;
	});

	var Range_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RangeInclusive = exports.Range = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _rangeName = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("rangeName");

	/**
	 * @name Range
	 * @description
	 * Rust `Range<T>` representation
	 */
	class Range extends _Tuple.Tuple {
	  constructor(registry, Type, value, rangeName = 'Range') {
	    super(registry, {
	      end: Type,
	      start: Type
	    }, value);
	    Object.defineProperty(this, _rangeName, {
	      writable: true,
	      value: void 0
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _rangeName)[_rangeName] = rangeName;
	  }

	  static with(Types) {
	    return class extends Range {
	      constructor(registry, value) {
	        super(registry, Types, value);
	      }

	    };
	  }
	  /**
	   * @description Returns the starting range value
	   */


	  get start() {
	    return this[0];
	  }
	  /**
	   * @description Returns the ending range value
	   */


	  get end() {
	    return this[1];
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `${(0, _classPrivateFieldLooseBase2.default)(this, _rangeName)[_rangeName]}<${this.start.toRawType()}>`;
	  }

	}

	exports.Range = Range;

	class RangeInclusive extends Range {
	  constructor(registry, type, value) {
	    super(registry, type, value, 'RangeInclusive');
	  }

	  static with(Types) {
	    return class extends RangeInclusive {
	      constructor(registry, value) {
	        super(registry, Types, value);
	      }

	    };
	  }

	}

	exports.RangeInclusive = RangeInclusive;
	});

	var Raw_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Raw = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name Raw
	 * @description
	 * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
	 * from other implementations where it will consume the full Uint8Array as passed to it.
	 * As such it is meant to be subclassed where the wrapper takes care of the
	 * actual lengths instead of used directly.
	 * @noInheritDoc
	 */
	class Raw extends Uint8Array {
	  constructor(registry, value) {
	    super((0, _util$5.u8aToU8a)(value));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    this.registry = registry;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.length;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Returns true if the wrapped value contains only ASCII printable characters
	   */


	  get isAscii() {
	    return (0, _util$5.isAscii)(this);
	  }
	  /**
	   * @description Returns true if the type wraps an empty/default all-0 value
	   */


	  get isEmpty() {
	    return !this.length || (0, _util$5.isUndefined)(this.find(value => !!value));
	  }
	  /**
	   * @description Returns true if the wrapped value contains only utf8 characters
	   */


	  get isUtf8() {
	    return (0, _util$5.isUtf8)(this);
	  }
	  /**
	   * @description The length of the value
	   */


	  get length() {
	    // only included here since we ignore inherited docs
	    return super.length;
	  }
	  /**
	   * @description Returns the number of bits in the value
	   */


	  bitLength() {
	    return this.length * 8;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    if (other instanceof Uint8Array) {
	      return this.length === other.length && !this.some((value, index) => value !== other[index]);
	    }

	    return this.eq((0, _util$5.u8aToU8a)(other));
	  }
	  /**
	   * @description Create a new slice from the actual buffer. (compat)
	   * @param start The position to start at
	   * @param end The position to end at
	   */


	  slice(start, end) {
	    // Like subarray below, we have to follow this approach since we are extending the TypeArray.
	    // This happens especially when it comes to further extensions, the length may be an override
	    return Uint8Array.from(this).slice(start, end);
	  }
	  /**
	   * @description Create a new subarray from the actual buffer. (compat)
	   * @param begin The position to start at
	   * @param end The position to end at
	   */


	  subarray(begin, end) {
	    return Uint8Array.from(this).subarray(begin, end);
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this);
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.isAscii ? this.toUtf8() : this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toHex();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Raw';
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return this.toHex();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    return Uint8Array.from(this);
	  }
	  /**
	   * @description Returns the wrapped data as a UTF-8 string
	   */


	  toUtf8() {
	    (0, _util$5.assert)(this.isUtf8, 'The character sequence is not a valid Utf8 string');
	    return (0, _util$5.u8aToString)(this);
	  }

	}

	exports.Raw = Raw;
	});

	var Result_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Result = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name Result
	 * @description
	 * A Result maps to the Rust Result type, that can either wrap a success or error value
	 */
	class Result extends _Enum.Enum {
	  constructor(registry, Ok, Err, value) {
	    // NOTE This is order-dependent, Ok (with index 0) needs to be first
	    // eslint-disable-next-line sort-keys
	    super(registry, {
	      Ok,
	      Err
	    }, value);
	  }

	  static with(Types) {
	    return class extends Result {
	      constructor(registry, value) {
	        super(registry, Types.Ok, Types.Err, value);
	      }

	    };
	  }
	  /**
	   * @description Returns the wrapper Err value (if isErr)
	   */


	  get asErr() {
	    (0, _util$5.assert)(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');
	    return this.value;
	  }
	  /**
	   * @deprecated Use asErr
	   */


	  get asError() {
	    return this.asErr;
	  }
	  /**
	   * @description Returns the wrapper Ok value (if isOk)
	   */


	  get asOk() {
	    (0, _util$5.assert)(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');
	    return this.value;
	  }
	  /**
	   * @description Checks if the Result has no value
	   */


	  get isEmpty() {
	    return this.isOk && this.value.isEmpty;
	  }
	  /**
	   * @description Checks if the Result wraps an Err value
	   */


	  get isErr() {
	    return !this.isOk;
	  }
	  /**
	   * @deprecated Use isErr
	   */


	  get isError() {
	    return this.isErr;
	  }
	  /**
	   * @description Checks if the Result wraps an Ok value
	   */


	  get isOk() {
	    return this.index === 0;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    const Types = this._toRawStruct();

	    return `Result<${Types.Ok},${Types.Err}>`;
	  }

	}

	exports.Result = Result;
	});

	var _Set$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CodecSet = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function encodeSet(setValues, value) {
	  return value.reduce((result, value) => {
	    return result.or((0, _util$5.bnToBn)(setValues[value] || 0));
	  }, new _util$5.BN(0));
	}
	/** @internal */


	function decodeSetArray(setValues, value) {
	  return value.reduce((result, key) => {
	    (0, _util$5.assert)(!(0, _util$5.isUndefined)(setValues[key]), () => `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
	    result.push(key);
	    return result;
	  }, []);
	}
	/** @internal */


	function decodeSetNumber(setValues, _value) {
	  const bn = (0, _util$5.bnToBn)(_value);
	  const result = Object.keys(setValues).reduce((result, key) => {
	    if (bn.and((0, _util$5.bnToBn)(setValues[key])).eq((0, _util$5.bnToBn)(setValues[key]))) {
	      result.push(key);
	    }

	    return result;
	  }, []);
	  const computed = encodeSet(setValues, result);
	  (0, _util$5.assert)(bn.eq(computed), () => `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
	  return result;
	}
	/** @internal */


	function decodeSet(setValues, value = 0, bitLength) {
	  (0, _util$5.assert)(bitLength % 8 === 0, () => `Expected valid bitLength, power of 8, found ${bitLength}`);
	  const byteLength = bitLength / 8;

	  if ((0, _util$5.isString)(value)) {
	    return decodeSet(setValues, (0, _util$5.u8aToU8a)(value), byteLength);
	  } else if ((0, _util$5.isU8a)(value)) {
	    return value.length === 0 ? [] : decodeSetNumber(setValues, (0, _util$5.u8aToBn)(value.subarray(0, byteLength), {
	      isLe: true
	    }));
	  } else if (value instanceof Set || Array.isArray(value)) {
	    const input = Array.isArray(value) ? value : [...value.values()];
	    return decodeSetArray(setValues, input);
	  }

	  return decodeSetNumber(setValues, value);
	}
	/**
	 * @name Set
	 * @description
	 * An Set is an array of string values, represented an an encoded type by
	 * a bitwise representation of the values.
	 */


	var _allowed = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("allowed");

	var _byteLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("byteLength");

	class CodecSet extends Set {
	  constructor(registry, setValues, value, bitLength = 8) {
	    super(decodeSet(setValues, value, bitLength));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _allowed, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _byteLength, {
	      writable: true,
	      value: void 0
	    });

	    this.add = key => {
	      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
	      // we have the isUndefined(this._setValues) in here as well, add is used internally
	      // in the Set constructor (so it is undefined at this point, and should allow)
	      (0, _util$5.assert)((0, _util$5.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]) || !(0, _util$5.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed][key]), () => `Set: Invalid key '${key}' on add`);
	      super.add(key);
	      return this;
	    };

	    this.registry = registry;
	    (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed] = setValues;
	    (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] = bitLength / 8;
	  }

	  static with(values, bitLength) {
	    return class extends CodecSet {
	      constructor(registry, value) {
	        super(registry, values, value, bitLength);
	        Object.keys(values).forEach(_key => {
	          const iskey = `is${(0, _util$5.stringUpperFirst)((0, _util$5.stringCamelCase)(_key))}`;
	          (0, _util$5.isUndefined)(this[iskey]) && Object.defineProperty(this, iskey, {
	            enumerable: true,
	            get: () => this.strings.includes(_key)
	          });
	        });
	      }

	    };
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength];
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description true is the Set contains no values
	   */


	  get isEmpty() {
	    return this.size === 0;
	  }
	  /**
	   * @description The actual set values as a string[]
	   */


	  get strings() {
	    return [...super.values()];
	  }
	  /**
	   * @description The encoded value for the set members
	   */


	  get valueEncoded() {
	    return encodeSet((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed], this.strings);
	  }
	  /**
	   * @description adds a value to the Set (extended to allow for validity checking)
	   */


	  /**
	   * @description Compares the value of the input to see if there is a match
	   */
	  eq(other) {
	    if (Array.isArray(other)) {
	      // we don't actually care about the order, sort the values
	      return (0, _index$f.compareArray)(this.strings.sort(), other.sort());
	    } else if (other instanceof Set) {
	      return this.eq([...other.values()]);
	    } else if ((0, _util$5.isNumber)(other) || (0, _util$5.isBn)(other)) {
	      return this.valueEncoded.eq((0, _util$5.bnToBn)(other));
	    }

	    return false;
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.strings;
	  }
	  /**
	   * @description The encoded value for the set members
	   */


	  toNumber() {
	    return this.valueEncoded.toNumber();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return (0, _util$5.stringify)({
	      _set: (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]
	    });
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return `[${this.strings.join(', ')}]`;
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    return (0, _util$5.bnToU8a)(this.valueEncoded, {
	      bitLength: (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] * 8,
	      isLe: true
	    });
	  }

	}

	exports.CodecSet = CodecSet;
	});

	var UInt_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UInt = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name UInt
	 * @description
	 * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
	 * this handles the encoding and decoding of those numbers. Upon construction
	 * the bitLength is provided and any additional use keeps the number to this
	 * length. This extends `BN`, so all methods available on a normal `BN` object
	 * is available here.
	 * @noInheritDoc
	 */
	class UInt extends _AbstractInt.AbstractInt {
	  static with(bitLength, typeName) {
	    return class extends UInt {
	      constructor(registry, value) {
	        super(registry, value, bitLength);
	      }

	      toRawType() {
	        return typeName || super.toRawType();
	      }

	    };
	  }

	}

	exports.UInt = UInt;
	});

	var _Raw = Raw_1;

	var U8aFixed_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.U8aFixed = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeU8aFixed(value, bitLength) {
	  if (Array.isArray(value) || (0, _util$5.isString)(value)) {
	    return decodeU8aFixed((0, _util$5.u8aToU8a)(value), bitLength);
	  }

	  const byteLength = bitLength / 8;
	  const u8a = new Uint8Array(byteLength);

	  if (!value || !value.length) {
	    return u8a;
	  }

	  (0, _util$5.assert)(value.length >= byteLength, () => `Expected at least ${byteLength} bytes (${bitLength} bits), found ${value.length} bytes`);
	  return value.subarray(0, byteLength);
	}
	/**
	 * @name U8aFixed
	 * @description
	 * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
	 * to be used directly, rather is should be subclassed with the specific lengths.
	 */


	class U8aFixed extends _Raw.Raw {
	  constructor(registry, value = new Uint8Array(), bitLength = 256) {
	    super(registry, decodeU8aFixed(value, bitLength));
	  }

	  static with(bitLength, typeName) {
	    return class extends U8aFixed {
	      constructor(registry, value) {
	        super(registry, value, bitLength);
	      }

	      toRawType() {
	        return typeName || super.toRawType();
	      }

	    };
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `[u8;${this.length}]`;
	  }

	}

	exports.U8aFixed = U8aFixed;
	});

	var VecFixed_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.VecFixed = void 0;









	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeVecFixed(registry, Type, allocLength, value) {
	  const values = _Vec.Vec.decodeVec(registry, Type, (0, _util$5.isU8a)(value) || (0, _util$5.isHex)(value) ? (0, _util$5.u8aConcat)((0, _util$5.compactToU8a)(allocLength), value) : value);

	  while (values.length < allocLength) {
	    values.push(new Type(registry));
	  }

	  (0, _util$5.assert)(values.length === allocLength, () => `Expected a length of exactly ${allocLength} entries`);
	  return values;
	}
	/**
	 * @name VecFixed
	 * @description
	 * This manages codec arrays of a fixed length
	 */


	class VecFixed extends _AbstractArray.AbstractArray {
	  constructor(registry, Type, length, value = []) {
	    const Clazz = (0, _index$f.typeToConstructor)(registry, Type);
	    super(registry, decodeVecFixed(registry, Clazz, length, value));
	    this._Type = void 0;
	    this._Type = Clazz;
	  }

	  static with(Type, length) {
	    return class extends VecFixed {
	      constructor(registry, value) {
	        super(registry, Type, length, value);
	      }

	    };
	  }
	  /**
	   * @description The type for the items
	   */


	  get Type() {
	    return new this._Type(this.registry).toRawType();
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.reduce((total, entry) => total + entry.encodedLength, 0);
	  }

	  toU8a() {
	    // we override, we don't add the length prefix for ourselves, and at the same time we
	    // ignore isBare on entries, since they should be properly encoded at all times
	    const encoded = this.map(entry => entry.toU8a());
	    return encoded.length ? (0, _util$5.u8aConcat)(...encoded) : new Uint8Array([]);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return `[${this.Type};${this.length}]`;
	  }

	}

	exports.VecFixed = VecFixed;
	});

	var _BTreeMap = BTreeMap_1;

	var _BTreeSet = BTreeSet_1;

	var _Compact = Compact_1;

	var _DoNotConstruct = DoNotConstruct_1;

	var _HashMap = HashMap_1;

	var _Int = Int_1;

	var _Json = Json_1;

	var _Linkage = Linkage_1;

	var _Range = Range_1;

	var _Result$1 = Result_1;

	var _Set = _Set$1;

	var _UInt = UInt_1;

	var _U8aFixed = U8aFixed_1;

	var _VecFixed = VecFixed_1;

	var codec$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "BTreeMap", {
	  enumerable: true,
	  get: function () {
	    return _BTreeMap.BTreeMap;
	  }
	});
	Object.defineProperty(exports, "BTreeSet", {
	  enumerable: true,
	  get: function () {
	    return _BTreeSet.BTreeSet;
	  }
	});
	Object.defineProperty(exports, "Compact", {
	  enumerable: true,
	  get: function () {
	    return _Compact.Compact;
	  }
	});
	Object.defineProperty(exports, "DoNotConstruct", {
	  enumerable: true,
	  get: function () {
	    return _DoNotConstruct.DoNotConstruct;
	  }
	});
	Object.defineProperty(exports, "Enum", {
	  enumerable: true,
	  get: function () {
	    return _Enum.Enum;
	  }
	});
	Object.defineProperty(exports, "HashMap", {
	  enumerable: true,
	  get: function () {
	    return _HashMap.HashMap;
	  }
	});
	Object.defineProperty(exports, "Int", {
	  enumerable: true,
	  get: function () {
	    return _Int.Int;
	  }
	});
	Object.defineProperty(exports, "Json", {
	  enumerable: true,
	  get: function () {
	    return _Json.Json;
	  }
	});
	Object.defineProperty(exports, "Linkage", {
	  enumerable: true,
	  get: function () {
	    return _Linkage.Linkage;
	  }
	});
	Object.defineProperty(exports, "CodecMap", {
	  enumerable: true,
	  get: function () {
	    return _Map.CodecMap;
	  }
	});
	Object.defineProperty(exports, "Map", {
	  enumerable: true,
	  get: function () {
	    return _Map.CodecMap;
	  }
	});
	Object.defineProperty(exports, "Option", {
	  enumerable: true,
	  get: function () {
	    return _Option.Option;
	  }
	});
	Object.defineProperty(exports, "Range", {
	  enumerable: true,
	  get: function () {
	    return _Range.Range;
	  }
	});
	Object.defineProperty(exports, "RangeInclusive", {
	  enumerable: true,
	  get: function () {
	    return _Range.RangeInclusive;
	  }
	});
	Object.defineProperty(exports, "Raw", {
	  enumerable: true,
	  get: function () {
	    return _Raw.Raw;
	  }
	});
	Object.defineProperty(exports, "Result", {
	  enumerable: true,
	  get: function () {
	    return _Result$1.Result;
	  }
	});
	Object.defineProperty(exports, "CodecSet", {
	  enumerable: true,
	  get: function () {
	    return _Set.CodecSet;
	  }
	});
	Object.defineProperty(exports, "Set", {
	  enumerable: true,
	  get: function () {
	    return _Set.CodecSet;
	  }
	});
	Object.defineProperty(exports, "Struct", {
	  enumerable: true,
	  get: function () {
	    return _Struct.Struct;
	  }
	});
	Object.defineProperty(exports, "Tuple", {
	  enumerable: true,
	  get: function () {
	    return _Tuple.Tuple;
	  }
	});
	Object.defineProperty(exports, "UInt", {
	  enumerable: true,
	  get: function () {
	    return _UInt.UInt;
	  }
	});
	Object.defineProperty(exports, "U8aFixed", {
	  enumerable: true,
	  get: function () {
	    return _U8aFixed.U8aFixed;
	  }
	});
	Object.defineProperty(exports, "Vec", {
	  enumerable: true,
	  get: function () {
	    return _Vec.Vec;
	  }
	});
	Object.defineProperty(exports, "VecFixed", {
	  enumerable: true,
	  get: function () {
	    return _VecFixed.VecFixed;
	  }
	});
	});

	var BitVec_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BitVec = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeBitVecU8a(value) {
	  if (!value || !value.length) {
	    return [0, new Uint8Array()];
	  } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded


	  const [offset, length] = (0, _util$5.compactFromU8a)(value);
	  const total = offset + Math.ceil(length.toNumber() / 8);
	  (0, _util$5.assert)(total <= value.length, () => `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
	  return [length.toNumber(), value.subarray(offset, total)];
	}
	/** @internal */


	function decodeBitVec(value) {
	  if (Array.isArray(value) || (0, _util$5.isString)(value)) {
	    const u8a = (0, _util$5.u8aToU8a)(value);
	    return [u8a.length / 8, u8a];
	  }

	  return decodeBitVecU8a(value);
	}
	/**
	 * @name BitVec
	 * @description
	 * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
	 * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
	 */


	class BitVec extends _Raw.Raw {
	  constructor(registry, value) {
	    const [decodedLength, u8a] = decodeBitVec(value);
	    super(registry, u8a);
	    this._decodedLength = void 0;
	    this._decodedLength = decodedLength;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.length + (0, _util$5.compactToU8a)(this._decodedLength).length;
	  }

	  toHuman() {
	    return `0b${[...this.toU8a(true)].map(d => `00000000${d.toString(2)}`.slice(-8)).join('_')}`;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'BitVec';
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    const bitVec = super.toU8a();
	    return isBare ? bitVec : (0, _util$5.u8aConcat)((0, _util$5.compactToU8a)(this._decodedLength), bitVec);
	  }

	}

	exports.BitVec = BitVec;
	});

	var Bool = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.bool = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeBool(value) {
	  if (value instanceof Boolean) {
	    return value.valueOf();
	  } else if ((0, _util$5.isU8a)(value)) {
	    return value[0] === 1;
	  }

	  return !!value;
	}
	/**
	 * @name bool
	 * @description
	 * Representation for a boolean value in the system. It extends the base JS `Boolean` class
	 * @noInheritDoc
	 */


	class bool extends Boolean {
	  // eslint-disable-next-line @typescript-eslint/ban-types
	  constructor(registry, value = false) {
	    super(decodeBool(value));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    this.registry = registry;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return 1;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value (true when it wraps false/default)
	   */


	  get isEmpty() {
	    return this.isFalse;
	  }
	  /**
	   * @description Checks if the value is an empty value (always false)
	   */


	  get isFalse() {
	    return !this.isTrue;
	  }
	  /**
	   * @description Checks if the value is an empty value (always false)
	   */


	  get isTrue() {
	    return this.valueOf();
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.valueOf();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'bool';
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return this.toJSON().toString();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    return new Uint8Array([this.valueOf() ? 1 : 0]);
	  }

	}

	exports.bool = bool;
	});

	var Bytes_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Bytes = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Bytes are used for things like on-chain code, so it has a healthy limit
	const MAX_LENGTH = 10 * 1024 * 1024;
	/** @internal */

	function decodeBytesU8a(value) {
	  if (!value.length) {
	    return new Uint8Array();
	  } // handle all other Uint8Array inputs, these do have a length prefix


	  const [offset, length] = (0, _util$5.compactFromU8a)(value);
	  const total = offset + length.toNumber();
	  (0, _util$5.assert)(length.lten(MAX_LENGTH), () => `Bytes length ${length.toString()} exceeds ${MAX_LENGTH}`);
	  (0, _util$5.assert)(total <= value.length, () => `Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
	  return value.subarray(offset, total);
	}
	/** @internal */


	function decodeBytes(value) {
	  if (Array.isArray(value) || (0, _util$5.isString)(value)) {
	    return (0, _util$5.u8aToU8a)(value);
	  } else if (!(value instanceof _Raw.Raw) && (0, _util$5.isU8a)(value)) {
	    // We are ensuring we are not a Raw instance. In the case of a Raw we already have gotten
	    // rid of the length, i.e. new Bytes(new Bytes(...)) will work as expected
	    return decodeBytesU8a(value);
	  }

	  return value;
	}
	/**
	 * @name Bytes
	 * @description
	 * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
	 * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
	 * as what is found in [[Text]] and [[Vec]])
	 */


	class Bytes extends _Raw.Raw {
	  constructor(registry, value) {
	    super(registry, decodeBytes(value));
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.length + (0, _util$5.compactToU8a)(this.length).length;
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Bytes';
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    return isBare ? super.toU8a(isBare) : (0, _util$5.compactAddLength)(this);
	  }

	}

	exports.Bytes = Bytes;
	});

	var Data_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Data = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeDataU8a(registry, value) {
	  const indicator = value[0];

	  if (!indicator) {
	    return [undefined, undefined];
	  } else if (indicator >= 1 && indicator <= 33) {
	    const length = indicator - 1;
	    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)

	    return [registry.createType('Raw', data), 1];
	  } else if (indicator >= 34 && indicator <= 37) {
	    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
	  }

	  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
	}
	/** @internal */


	function decodeData(registry, value) {
	  if (!value) {
	    return [undefined, undefined];
	  } else if ((0, _util$5.isU8a)(value) || (0, _util$5.isString)(value)) {
	    return decodeDataU8a(registry, (0, _util$5.u8aToU8a)(value));
	  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding


	  return [value, undefined];
	}
	/**
	 * @name Data
	 * @description
	 * A [[Data]] container with node, raw or hashed data
	 */


	class Data extends _Enum.Enum {
	  constructor(registry, value) {
	    super(registry, {
	      None: 'Null',
	      // 0
	      Raw: 'Bytes',
	      // 1
	      // eslint-disable-next-line sort-keys
	      BlakeTwo256: 'H256',
	      // 2
	      Sha256: 'H256',
	      // 3
	      // eslint-disable-next-line sort-keys
	      Keccak256: 'H256',
	      // 4
	      ShaThree256: 'H256' // 5

	    }, ...decodeData(registry, value));
	    (0, _util$5.assert)(!this.isRaw || this.asRaw.length <= 32, 'Data.Raw values are limited to a maximum length of 32 bytes');
	  }

	  get asBlakeTwo256() {
	    return this.value;
	  }

	  get asKeccak256() {
	    return this.value;
	  }

	  get asRaw() {
	    return this.value;
	  }

	  get asSha256() {
	    return this.value;
	  }

	  get asShaThree256() {
	    return this.value;
	  }

	  get isBlakeTwo256() {
	    return this.index === 2;
	  }

	  get isKeccak256() {
	    return this.index === 4;
	  }

	  get isNone() {
	    return this.index === 0;
	  }

	  get isRaw() {
	    return this.index === 1;
	  }

	  get isSha256() {
	    return this.index === 3;
	  }

	  get isShaThree256() {
	    return this.index === 5;
	  }
	  /**
	   * @description The encoded length
	   */


	  get encodedLength() {
	    return this.toU8a().length;
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   */


	  toU8a() {
	    if (this.index === 0) {
	      return new Uint8Array(1);
	    } else if (this.index === 1) {
	      // don't add the length, just the data
	      const data = this.value.toU8a(true);
	      const length = Math.min(data.length, 32);
	      const u8a = new Uint8Array(length + 1);
	      u8a.set([length + 1], 0);
	      u8a.set(data.subarray(0, length), 1);
	      return u8a;
	    } // otherwise we simply have a hash


	    const u8a = new Uint8Array(33);
	    u8a.set([this.index + 32], 0);
	    u8a.set(this.value.toU8a(), 1);
	    return u8a;
	  }

	}

	exports.Data = Data;
	});

	var I8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.i8 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name i8
	 * @description
	 * An 8-bit signed integer
	 */
	class i8 extends _Int.Int.with(8) {
	  constructor(...args) {
	    super(...args);
	    this.__IntType = 'i8';
	  }

	}

	exports.i8 = i8;
	});

	var I16 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.i16 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name i16
	 * @description
	 * A 16-bit signed integer
	 */
	class i16 extends _Int.Int.with(16) {
	  constructor(...args) {
	    super(...args);
	    this.__IntType = 'i16';
	  }

	}

	exports.i16 = i16;
	});

	var I32 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.i32 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name i32
	 * @description
	 * A 32-bit signed integer
	 */
	class i32 extends _Int.Int.with(32) {
	  constructor(...args) {
	    super(...args);
	    this.__IntType = 'i32';
	  }

	}

	exports.i32 = i32;
	});

	var I64 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.i64 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name i64
	 * @description
	 * A 64-bit signed integer
	 */
	class i64 extends _Int.Int.with(64) {
	  constructor(...args) {
	    super(...args);
	    this.__IntType = 'i64';
	  }

	}

	exports.i64 = i64;
	});

	var I128 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.i128 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name i128
	 * @description
	 * A 128-bit signed integer
	 */
	class i128 extends _Int.Int.with(128) {
	  constructor(...args) {
	    super(...args);
	    this.__IntType = 'i128';
	  }

	}

	exports.i128 = i128;
	});

	var I256 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.i256 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name i256
	 * @description
	 * A 256-bit signed integer
	 */
	class i256 extends _Int.Int.with(256) {
	  constructor(...args) {
	    super(...args);
	    this.__IntType = 'i256';
	  }

	}

	exports.i256 = i256;
	});

	var _Bytes = Bytes_1;

	var StorageKey_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.unwrapStorageType = unwrapStorageType;
	exports.StorageKey = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const HASHER_MAP = {
	  // opaque
	  Blake2_128: [16, false],
	  // eslint-disable-line camelcase
	  Blake2_128Concat: [16, true],
	  // eslint-disable-line camelcase
	  Blake2_256: [32, false],
	  // eslint-disable-line camelcase
	  Identity: [0, true],
	  Twox128: [16, false],
	  Twox256: [32, false],
	  Twox64Concat: [8, true]
	};
	/** @internal */

	function unwrapStorageType(_, type, isOptional) {
	  const outputType = type.isPlain ? type.asPlain.toString() : type.isMap ? type.asMap.value.toString() : type.isDoubleMap ? type.asDoubleMap.value.toString() : type.asNMap.value.toString();
	  return isOptional ? `Option<${outputType}>` : outputType;
	}
	/** @internal */


	function decodeStorageKey(value) {
	  // eslint-disable-next-line @typescript-eslint/no-use-before-define
	  if (value instanceof StorageKey) {
	    return {
	      key: value,
	      method: value.method,
	      section: value.section
	    };
	  } else if (!value || (0, _util$5.isString)(value) || (0, _util$5.isU8a)(value)) {
	    // let Bytes handle these inputs
	    return {
	      key: value
	    };
	  } else if ((0, _util$5.isFunction)(value)) {
	    return {
	      key: value(),
	      method: value.method,
	      section: value.section
	    };
	  } else if (Array.isArray(value)) {
	    const [fn, arg] = value;
	    (0, _util$5.assert)((0, _util$5.isFunction)(fn), 'Expected function input for key construction');
	    return {
	      key: fn(arg),
	      method: fn.method,
	      section: fn.section
	    };
	  }

	  throw new Error(`Unable to convert input ${value} to StorageKey`);
	}
	/** @internal */


	function decodeHashers(registry, value, hashers) {
	  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
	  let offset = 32;
	  return hashers.reduce((result, [hasher, type]) => {
	    const [hashLen, canDecode] = HASHER_MAP[hasher.type];
	    const decoded = canDecode ? registry.createType(type, value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));
	    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
	    result.push(decoded);
	    return result;
	  }, []);
	}
	/** @internal */


	function decodeArgsFromMeta(registry, value, meta) {
	  if (!meta || !(meta.type.isMap || meta.type.isDoubleMap || meta.type.isNMap)) {
	    return [];
	  }

	  if (meta.type.isMap) {
	    const mapInfo = meta.type.asMap;
	    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key.toString()]]);
	  } else if (meta.type.isDoubleMap) {
	    const mapInfo = meta.type.asDoubleMap;
	    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key1.toString()], [mapInfo.key2Hasher, mapInfo.key2.toString()]]);
	  }

	  const mapInfo = meta.type.asNMap;
	  return decodeHashers(registry, value, mapInfo.hashers.map((h, i) => [h, mapInfo.keyVec[i].toString()]));
	}
	/** @internal */


	function getMeta(value) {
	  if (value instanceof StorageKey) {
	    return value.meta;
	  } else if ((0, _util$5.isFunction)(value)) {
	    return value.meta;
	  } else if (Array.isArray(value)) {
	    const [fn] = value;
	    return fn.meta;
	  }

	  return undefined;
	}
	/** @internal */


	function getType(registry, value) {
	  if (value instanceof StorageKey) {
	    return value.outputType;
	  } else if ((0, _util$5.isFunction)(value)) {
	    return unwrapStorageType(registry, value.meta.type);
	  } else if (Array.isArray(value)) {
	    const [fn] = value;

	    if (fn.meta) {
	      return unwrapStorageType(registry, fn.meta.type);
	    }
	  } // If we have no type set, default to Raw


	  return 'Raw';
	}
	/**
	 * @name StorageKey
	 * @description
	 * A representation of a storage key (typically hashed) in the system. It can be
	 * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
	 */


	class StorageKey extends _Bytes.Bytes {
	  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // @ts-ignore This is assigned via this.decodeArgsFromMeta()
	  constructor(registry, value, override = {}) {
	    const {
	      key,
	      method,
	      section
	    } = decodeStorageKey(value);
	    super(registry, key);
	    this._args = void 0;
	    this._meta = void 0;
	    this._outputType = void 0;
	    this._method = void 0;
	    this._section = void 0;
	    this._outputType = getType(registry, value); // decode the args (as applicable based on the key and the hashers, after all init)

	    this.setMeta(getMeta(value), override.section || section, override.method || method);
	  }
	  /**
	   * @description Return the decoded arguments (applicable to map/doublemap with decodable values)
	   */


	  get args() {
	    return this._args;
	  }
	  /**
	   * @description The metadata or `undefined` when not available
	   */


	  get meta() {
	    return this._meta;
	  }
	  /**
	   * @description The key method or `undefined` when not specified
	   */


	  get method() {
	    return this._method;
	  }
	  /**
	   * @description The output type
	   */


	  get outputType() {
	    return this._outputType;
	  }
	  /**
	   * @description The key section or `undefined` when not specified
	   */


	  get section() {
	    return this._section;
	  }

	  is(key) {
	    return key.section === this.section && key.method === this.method;
	  }
	  /**
	   * @description Sets the meta for this key
	   */


	  setMeta(meta, section, method) {
	    this._meta = meta;
	    this._method = method || this._method;
	    this._section = section || this._section;

	    if (meta) {
	      this._outputType = unwrapStorageType(this.registry, meta.type);
	    }

	    try {
	      this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);
	    } catch (error) {// ignore...
	    }

	    return this;
	  }
	  /**
	   * @description Returns the Human representation for this type
	   */


	  toHuman() {
	    return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();
	  }
	  /**
	   * @description Returns the raw type for this
	   */


	  toRawType() {
	    return 'StorageKey';
	  }

	}

	exports.StorageKey = StorageKey;
	});

	var Text_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Text = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const MAX_LENGTH = 128 * 1024;
	/** @internal */

	function decodeText(value) {
	  if ((0, _util$5.isHex)(value)) {
	    return (0, _util$5.u8aToString)((0, _util$5.hexToU8a)(value));
	  } else if (value instanceof Uint8Array) {
	    if (!value.length) {
	      return '';
	    } // for Raw, the internal buffer does not have an internal length
	    // (the same applies in e.g. Bytes, where length is added at encoding-time)


	    if (value instanceof _Raw.Raw) {
	      return (0, _util$5.u8aToString)(value);
	    }

	    const [offset, length] = (0, _util$5.compactFromU8a)(value);
	    const total = offset + length.toNumber();
	    (0, _util$5.assert)(length.lten(MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
	    (0, _util$5.assert)(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
	    return (0, _util$5.u8aToString)(value.subarray(offset, total));
	  }

	  return value ? value.toString() : '';
	}
	/**
	 * @name Text
	 * @description
	 * This is a string wrapper, along with the length. It is used both for strings as well
	 * as items such as documentation. It simply extends the standard JS `String` built-in
	 * object, inheriting all methods exposed from `String`.
	 * @noInheritDoc
	 */
	// TODO
	//   - Strings should probably be trimmed (docs do come through with extra padding)


	var _override = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("override");

	class Text extends String {
	  constructor(registry, value) {
	    super(decodeText(value));
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    Object.defineProperty(this, _override, {
	      writable: true,
	      value: null
	    });
	    this.registry = registry;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.toU8a().length;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return this.length === 0;
	  }
	  /**
	   * @description The length of the value
	   */


	  get length() {
	    // only included here since we ignore inherited docs
	    return super.length;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return (0, _util$5.isString)(other) ? this.toString() === other.toString() : false;
	  }
	  /**
	   * @description Set an override value for this
	   */


	  setOverride(override) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] = override;
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    // like with Vec<u8>, when we are encoding to hex, we don't actually add
	    // the length prefix (it is already implied by the actual string length)
	    return (0, _util$5.u8aToHex)(this.toU8a(true));
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toString();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Text';
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] || super.toString();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    // NOTE Here we use the super toString (we are not taking overrides into account,
	    // rather encoding the original value the string was constructed with)
	    const encoded = (0, _util$5.stringToU8a)(super.toString());
	    return isBare ? encoded : (0, _util$5.compactAddLength)(encoded);
	  }

	}

	exports.Text = Text;
	});

	var findClosing_1 = findClosing;
	var alias_1 = alias;
	var cleanupCompact_1 = cleanupCompact;
	var flattenSingleTuple_1 = flattenSingleTuple;
	var removeExtensions_1 = removeExtensions;
	var removeColons_1 = removeColons;
	var removeGenerics_1 = removeGenerics;
	var removePairOf_1 = removePairOf;
	var removeTraits_1 = removeTraits;
	var removeWrap_1 = removeWrap;
	var sanitize_2 = sanitize;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
	const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt']);
	const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple

	const mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
	alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>
	cleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>
	removeExtensions('Bounded', true), // Change WeakVec<Type> to Vec<Type>
	removeExtensions('Weak', false), // Remove all the trait prefixes
	removeTraits(), // remove PairOf<T> -> (T, T)
	removePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`
	removeWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
	removeGenerics(), // alias String -> Text (compat with jsonrpc methods)
	alias('String', 'Text'), // alias Vec<u8> -> Bytes
	alias('Vec<u8>', 'Bytes'), alias('&\\[u8\\]', 'Bytes'), alias("&'static\\[u8\\]", 'Bytes'), // alias RawAddress -> Address
	alias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime
	alias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec
	alias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`
	flattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
	removeColons()]; // given a starting index, find the closing >

	function findClosing(value, start) {
	  let depth = 0;

	  for (let index = start; index < value.length; index++) {
	    if (value[index] === '>') {
	      if (!depth) {
	        return index;
	      }

	      depth--;
	    } else if (value[index] === '<') {
	      depth++;
	    }
	  }

	  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
	}

	function alias(src, dest, withChecks = true) {
	  return value => value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);
	}

	function cleanupCompact() {
	  return value => {
	    for (let index = 0; index < value.length; index++) {
	      if (value[index] === '<') {
	        const end = findClosing(value, index + 1) - 14;

	        if (value.substr(end, 14) === ' as HasCompact') {
	          value = `Compact<${value.substr(index + 1, end - index - 1)}>`;
	        }
	      }
	    }

	    return value;
	  };
	}

	function flattenSingleTuple() {
	  return value => value // tuples may have trailing commas, e.g. (u32, BlockNumber, )
	  .replace(/,\)/g, ')') // change (u32) -> u32
	  .replace(/\(([^,]+)\)/, '$1');
	}

	function replaceTagWith(value, matcher, replacer) {
	  let index = -1;

	  while (true) {
	    index = value.indexOf(matcher, index + 1);

	    if (index === -1) {
	      return value;
	    }

	    const start = index + matcher.length;
	    const end = findClosing(value, start);
	    value = `${value.substr(0, index)}${replacer(value.substr(start, end - start))}${value.substr(end + 1)}`;
	  }
	} // remove the Bounded* or Weak* wrappers


	function removeExtensions(type, isSized) {
	  return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `${type}${tag}<`, inner => {
	    const parts = inner.split(',').map(s => s.trim()).filter(s => s);

	    if (isSized) {
	      parts.pop();
	    }

	    return `${tag}<${parts.join(',')}>`;
	  }), value);
	}

	function removeColons() {
	  return (value, {
	    allowNamespaces
	  } = {}) => {
	    let index = 0;

	    while (index !== -1) {
	      index = value.indexOf('::');

	      if (index === 0) {
	        value = value.substr(2);
	      } else if (index !== -1) {
	        if (allowNamespaces) {
	          return value;
	        }

	        let start = index;

	        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
	          start--;
	        }

	        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;
	      }
	    }

	    return value;
	  };
	}

	function removeGenerics() {
	  return value => {
	    for (let index = 0; index < value.length; index++) {
	      if (value[index] === '<') {
	        // check against the allowed wrappers, be it Vec<..>, Option<...> ...
	        const box = ALLOWED_BOXES.find(box => {
	          const start = index - box.length;
	          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
	          start === 0 || BOX_PRECEDING.includes(value[start - 1]));
	        }); // we have not found anything, unwrap generic innards

	        if (!box) {
	          const end = findClosing(value, index + 1);
	          value = `${value.substr(0, index)}${value.substr(end + 1)}`;
	        }
	      }
	    }

	    return value;
	  };
	} // remove the PairOf wrappers


	function removePairOf() {
	  const replacer = inner => `(${inner},${inner})`;

	  return value => replaceTagWith(value, 'PairOf<', replacer);
	} // remove the type traits


	function removeTraits() {
	  return value => value // remove all whitespaces
	  .replace(/\s/g, '') // anything `T::<type>` to end up as `<type>`
	  .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)
	  .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)
	  .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>
	  .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`
	  .replace(/::Type/g, '');
	} // remove wrapping values, i.e. Box<Proposal> -> Proposal


	function removeWrap(check) {
	  const replacer = inner => inner;

	  return value => replaceTagWith(value, check, replacer);
	} // eslint-disable-next-line @typescript-eslint/ban-types


	function sanitize(value, options) {
	  return mappings.reduce((result, fn) => fn(result, options), value.toString()).trim();
	}

	var sanitize_1 = /*#__PURE__*/Object.defineProperty({
		findClosing: findClosing_1,
		alias: alias_1,
		cleanupCompact: cleanupCompact_1,
		flattenSingleTuple: flattenSingleTuple_1,
		removeExtensions: removeExtensions_1,
		removeColons: removeColons_1,
		removeGenerics: removeGenerics_1,
		removePairOf: removePairOf_1,
		removeTraits: removeTraits_1,
		removeWrap: removeWrap_1,
		sanitize: sanitize_2
	}, '__esModule', {value: true});

	var _sanitize = sanitize_1;

	var _Text = Text_1;

	var Type_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Type = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name Type
	 * @description
	 * This is a extended version of Text, specifically to handle types. Here we rely fully
	 * on what Text provides us, however we also adjust the types received from the runtime,
	 * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
	 */
	class Type extends _Text.Text {
	  constructor(registry, value = '') {
	    super(registry, value);
	    this.setOverride((0, _sanitize.sanitize)(this.toString()));
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Type';
	  }

	}

	exports.Type = Type;
	});

	var U8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.u8 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u8
	 * @description
	 * An 8-bit unsigned integer
	 */
	class u8 extends _UInt.UInt.with(8) {
	  constructor(...args) {
	    super(...args);
	    this.__UIntType = 'u8';
	  }

	}

	exports.u8 = u8;
	});

	var U16 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.u16 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u16
	 * @description
	 * A 16-bit unsigned integer
	 */
	class u16 extends _UInt.UInt.with(16) {
	  constructor(...args) {
	    super(...args);
	    this.__UIntType = 'u16';
	  }

	}

	exports.u16 = u16;
	});

	var U32 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.u32 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u32
	 * @description
	 * A 32-bit unsigned integer
	 */
	class u32 extends _UInt.UInt.with(32) {
	  constructor(...args) {
	    super(...args);
	    this.__UIntType = 'u32';
	  }

	}

	exports.u32 = u32;
	});

	var U64 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.u64 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u64
	 * @description
	 * A 64-bit unsigned integer
	 */
	class u64 extends _UInt.UInt.with(64) {
	  constructor(...args) {
	    super(...args);
	    this.__UIntType = 'u64';
	  }

	}

	exports.u64 = u64;
	});

	var U128 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.u128 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u128
	 * @description
	 * A 128-bit unsigned integer
	 */
	class u128 extends _UInt.UInt.with(128) {
	  constructor(...args) {
	    super(...args);
	    this.__UIntType = 'u128';
	  }

	}

	exports.u128 = u128;
	});

	var U256 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.u256 = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name u256
	 * @description
	 * A 256-bit unsigned integer
	 */
	class u256 extends _UInt.UInt.with(256) {
	  constructor(...args) {
	    super(...args);
	    this.__UIntType = 'u256';
	  }

	}

	exports.u256 = u256;
	});

	var _U$2 = U32;

	var USize = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.usize = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name USize
	 * @description
	 * A System default unsigned number, typically used in RPC to report non-consensus
	 * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
	 * It is not to be used, since it created consensus mismatches.
	 */
	class usize extends _U$2.u32 {
	  constructor(registry, value) {
	    super(registry, value);
	    throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
	  }

	}

	exports.usize = usize;
	});

	var _BitVec = BitVec_1;

	var _Bool = Bool;

	var _Data = Data_1;

	var _I = I8;

	var _I2 = I16;

	var _I3 = I32;

	var _I4 = I64;

	var _I5 = I128;

	var _I6 = I256;

	var _StorageKey = StorageKey_1;

	var _Type = Type_1;

	var _U$1 = U8;

	var _U2 = U16;

	var _U = U64;

	var _U5 = U128;

	var _U6 = U256;

	var _USize = USize;

	var primitive = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "BitVec", {
	  enumerable: true,
	  get: function () {
	    return _BitVec.BitVec;
	  }
	});
	Object.defineProperty(exports, "bool", {
	  enumerable: true,
	  get: function () {
	    return _Bool.bool;
	  }
	});
	Object.defineProperty(exports, "Bool", {
	  enumerable: true,
	  get: function () {
	    return _Bool.bool;
	  }
	});
	Object.defineProperty(exports, "Bytes", {
	  enumerable: true,
	  get: function () {
	    return _Bytes.Bytes;
	  }
	});
	Object.defineProperty(exports, "Data", {
	  enumerable: true,
	  get: function () {
	    return _Data.Data;
	  }
	});
	Object.defineProperty(exports, "i8", {
	  enumerable: true,
	  get: function () {
	    return _I.i8;
	  }
	});
	Object.defineProperty(exports, "I8", {
	  enumerable: true,
	  get: function () {
	    return _I.i8;
	  }
	});
	Object.defineProperty(exports, "i16", {
	  enumerable: true,
	  get: function () {
	    return _I2.i16;
	  }
	});
	Object.defineProperty(exports, "I16", {
	  enumerable: true,
	  get: function () {
	    return _I2.i16;
	  }
	});
	Object.defineProperty(exports, "i32", {
	  enumerable: true,
	  get: function () {
	    return _I3.i32;
	  }
	});
	Object.defineProperty(exports, "I32", {
	  enumerable: true,
	  get: function () {
	    return _I3.i32;
	  }
	});
	Object.defineProperty(exports, "i64", {
	  enumerable: true,
	  get: function () {
	    return _I4.i64;
	  }
	});
	Object.defineProperty(exports, "I64", {
	  enumerable: true,
	  get: function () {
	    return _I4.i64;
	  }
	});
	Object.defineProperty(exports, "i128", {
	  enumerable: true,
	  get: function () {
	    return _I5.i128;
	  }
	});
	Object.defineProperty(exports, "I128", {
	  enumerable: true,
	  get: function () {
	    return _I5.i128;
	  }
	});
	Object.defineProperty(exports, "i256", {
	  enumerable: true,
	  get: function () {
	    return _I6.i256;
	  }
	});
	Object.defineProperty(exports, "I256", {
	  enumerable: true,
	  get: function () {
	    return _I6.i256;
	  }
	});
	Object.defineProperty(exports, "Null", {
	  enumerable: true,
	  get: function () {
	    return _Null.Null;
	  }
	});
	Object.defineProperty(exports, "StorageKey", {
	  enumerable: true,
	  get: function () {
	    return _StorageKey.StorageKey;
	  }
	});
	Object.defineProperty(exports, "Text", {
	  enumerable: true,
	  get: function () {
	    return _Text.Text;
	  }
	});
	Object.defineProperty(exports, "Type", {
	  enumerable: true,
	  get: function () {
	    return _Type.Type;
	  }
	});
	Object.defineProperty(exports, "u8", {
	  enumerable: true,
	  get: function () {
	    return _U$1.u8;
	  }
	});
	Object.defineProperty(exports, "U8", {
	  enumerable: true,
	  get: function () {
	    return _U$1.u8;
	  }
	});
	Object.defineProperty(exports, "u16", {
	  enumerable: true,
	  get: function () {
	    return _U2.u16;
	  }
	});
	Object.defineProperty(exports, "U16", {
	  enumerable: true,
	  get: function () {
	    return _U2.u16;
	  }
	});
	Object.defineProperty(exports, "u32", {
	  enumerable: true,
	  get: function () {
	    return _U$2.u32;
	  }
	});
	Object.defineProperty(exports, "U32", {
	  enumerable: true,
	  get: function () {
	    return _U$2.u32;
	  }
	});
	Object.defineProperty(exports, "u64", {
	  enumerable: true,
	  get: function () {
	    return _U.u64;
	  }
	});
	Object.defineProperty(exports, "U64", {
	  enumerable: true,
	  get: function () {
	    return _U.u64;
	  }
	});
	Object.defineProperty(exports, "u128", {
	  enumerable: true,
	  get: function () {
	    return _U5.u128;
	  }
	});
	Object.defineProperty(exports, "U128", {
	  enumerable: true,
	  get: function () {
	    return _U5.u128;
	  }
	});
	Object.defineProperty(exports, "u256", {
	  enumerable: true,
	  get: function () {
	    return _U6.u256;
	  }
	});
	Object.defineProperty(exports, "U256", {
	  enumerable: true,
	  get: function () {
	    return _U6.u256;
	  }
	});
	Object.defineProperty(exports, "usize", {
	  enumerable: true,
	  get: function () {
	    return _USize.usize;
	  }
	});
	Object.defineProperty(exports, "USize", {
	  enumerable: true,
	  get: function () {
	    return _USize.usize;
	  }
	});
	});

	var types$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TypeDefInfo = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	let TypeDefInfo;
	exports.TypeDefInfo = TypeDefInfo;

	(function (TypeDefInfo) {
	  TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
	  TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
	  TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
	  TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
	  TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
	  TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
	  TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
	  TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
	  TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
	  TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
	  TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
	  TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
	  TypeDefInfo[TypeDefInfo["Result"] = 12] = "Result";
	  TypeDefInfo[TypeDefInfo["Set"] = 13] = "Set";
	  TypeDefInfo[TypeDefInfo["Si"] = 14] = "Si";
	  TypeDefInfo[TypeDefInfo["Struct"] = 15] = "Struct";
	  TypeDefInfo[TypeDefInfo["Tuple"] = 16] = "Tuple";
	  TypeDefInfo[TypeDefInfo["UInt"] = 17] = "UInt";
	  TypeDefInfo[TypeDefInfo["Vec"] = 18] = "Vec";
	  TypeDefInfo[TypeDefInfo["VecFixed"] = 19] = "VecFixed";
	})(TypeDefInfo || (exports.TypeDefInfo = TypeDefInfo = {}));
	});

	var typeSplit_2 = typeSplit;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isNotNested(...counters) {
	  return !counters.some(counter => counter !== 0);
	} // safely split a string on ', ' while taking care of any nested occurences


	function typeSplit(type) {
	  let [cDepth, fDepth, sDepth, tDepth, start] = [0, 0, 0, 0, 0];
	  const result = [];

	  const extract = index => {
	    if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {
	      result.push(type.substr(start, index - start).trim());
	      start = index + 1;
	    }
	  };

	  for (let index = 0; index < type.length; index++) {
	    switch (type[index]) {
	      // if we are not nested, add the type
	      case ',':
	        extract(index);
	        break;
	      // adjust compact/vec (and friends) depth

	      case '<':
	        cDepth++;
	        break;

	      case '>':
	        cDepth--;
	        break;
	      // adjust fixed vec depths

	      case '[':
	        fDepth++;
	        break;

	      case ']':
	        fDepth--;
	        break;
	      // adjust struct depth

	      case '{':
	        sDepth++;
	        break;

	      case '}':
	        sDepth--;
	        break;
	      // adjust tuple depth

	      case '(':
	        tDepth++;
	        break;

	      case ')':
	        tDepth--;
	        break;
	    }
	  }

	  (0, _util$5.assert)(isNotNested(cDepth, fDepth, sDepth, tDepth), () => `Invalid definition (missing terminators) found in ${type}`); // the final leg of the journey

	  result.push(type.substr(start, type.length - start).trim());
	  return result;
	}

	var typeSplit_1 = /*#__PURE__*/Object.defineProperty({
		typeSplit: typeSplit_2
	}, '__esModule', {value: true});

	var _types$1 = types$2;

	var _typeSplit = typeSplit_1;

	var getTypeDef_2 = getTypeDef;

	var _defineProperty2$n = interopRequireDefault(defineProperty);









	function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$n(Object(source), true).forEach(function (key) { (0, _defineProperty2$n.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const MAX_NESTED = 64;
	const KNOWN_INTERNALS = ['_alias', '_fallback'];

	function getTypeString(typeOrObj) {
	  return (0, _util$5.isString)(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
	}

	function isRustEnum(details) {
	  const values = Object.values(details);

	  if (values.some(v => (0, _util$5.isNumber)(v))) {
	    (0, _util$5.assert)(values.every(v => (0, _util$5.isNumber)(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
	    return false;
	  }

	  return true;
	} // decode an enum of either of the following forms
	//  { _enum: ['A', 'B', 'C'] }
	//  { _enum: { A: AccountId, B: Balance, C: u32 } }
	//  { _enum: { A: 1, B: 2 } }


	function _decodeEnum(value, details, count) {
	  value.info = _types$1.TypeDefInfo.Enum; // not as pretty, but remain compatible with oo7 for both struct and Array types

	  if (Array.isArray(details)) {
	    value.sub = details.map((name, index) => ({
	      index,
	      info: _types$1.TypeDefInfo.Plain,
	      name,
	      type: 'Null'
	    }));
	  } else if (isRustEnum(details)) {
	    value.sub = Object.entries(details).map(([name, typeOrObj], index) => _objectSpread$n(_objectSpread$n({}, getTypeDef(getTypeString(typeOrObj || 'Null'), {
	      name
	    }, count)), {}, {
	      index
	    }));
	  } else {
	    value.sub = Object.entries(details).map(([name, index]) => ({
	      index,
	      info: _types$1.TypeDefInfo.Plain,
	      name,
	      type: 'Null'
	    }));
	  }

	  return value;
	} // decode a set of the form
	//   { _set: { A: 0b0001, B: 0b0010, C: 0b0100 } }


	function _decodeSet(value, details) {
	  value.info = _types$1.TypeDefInfo.Set;
	  value.length = details._bitLength;
	  value.sub = Object.entries(details).filter(([name]) => !name.startsWith('_')).map(([name, index]) => ({
	    index,
	    info: _types$1.TypeDefInfo.Plain,
	    name,
	    type: name
	  }));
	  return value;
	} // decode a struct, set or enum
	// eslint-disable-next-line @typescript-eslint/no-unused-vars


	function _decodeStruct(value, type, _, count) {
	  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
	  const parsed = JSON.parse(type);
	  const keys = Object.keys(parsed);

	  if (keys.length === 1 && keys[0] === '_enum') {
	    return _decodeEnum(value, parsed[keys[0]], count);
	  } else if (keys.length === 1 && keys[0] === '_set') {
	    return _decodeSet(value, parsed[keys[0]]);
	  }

	  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
	  value.fallbackType = parsed._fallback;
	  value.sub = keys.filter(name => !KNOWN_INTERNALS.includes(name)).map(name => getTypeDef(getTypeString(parsed[name]), {
	    name
	  }, count));
	  return value;
	} // decode a fixed vector, e.g. [u8;32]
	// eslint-disable-next-line @typescript-eslint/no-unused-vars


	function _decodeFixedVec(value, type, _, count) {
	  const max = type.length - 1;
	  let index = -1;
	  let inner = 0;

	  for (let i = 1; i < max && index === -1; i++) {
	    if (type[i] === ';' && inner === 0) {
	      index = i;
	    } else if (['[', '(', '<'].includes(type[i])) {
	      inner++;
	    } else if ([']', ')', '>'].includes(type[i])) {
	      inner--;
	    }
	  }

	  (0, _util$5.assert)(index !== -1, () => `${type}: Unable to extract location of ';'`);
	  const vecType = type.substr(1, index - 1);
	  const [strLength, displayName] = type.substr(index + 1, max - index - 1).split(';');
	  const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

	  (0, _util$5.assert)(length <= 256, () => `${type}: Only support for [Type; <length>], where length <= 256`);
	  value.displayName = displayName;
	  value.length = length;
	  value.sub = getTypeDef(vecType, {}, count);
	  return value;
	}

	function _decodeRange(value, _, subType) {
	  const Type = getTypeDef(subType);
	  value.sub = [Type, Type];
	  return value;
	} // decode a tuple


	function _decodeTuple(value, _, subType, count) {
	  value.sub = subType.length === 0 ? [] : (0, _typeSplit.typeSplit)(subType).map(inner => getTypeDef(inner, {}, count));
	  return value;
	} // decode a Int/UInt<bitLength[, name]>
	// eslint-disable-next-line @typescript-eslint/no-unused-vars


	function _decodeAnyInt(value, type, _, clazz) {
	  const [strLength, displayName] = type.substr(clazz.length + 1, type.length - clazz.length - 1 - 1).split(',');
	  const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

	  (0, _util$5.assert)(length <= 8192 && length % 8 === 0, () => `${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
	  value.displayName = displayName;
	  value.length = length;
	  return value;
	}

	function _decodeInt(value, type, subType) {
	  return _decodeAnyInt(value, type, subType, 'Int');
	}

	function _decodeUInt(value, type, subType) {
	  return _decodeAnyInt(value, type, subType, 'UInt');
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function _decodeDoNotConstruct(value, type, _) {
	  const NAME_LENGTH = 'DoNotConstruct'.length;
	  value.displayName = type.substr(NAME_LENGTH + 1, type.length - NAME_LENGTH - 1 - 1);
	  return value;
	}

	function hasWrapper(type, [start, end]) {
	  return type.substr(0, start.length) === start && type.substr(-1 * end.length) === end;
	}

	const nestedExtraction = [['[', ']', _types$1.TypeDefInfo.VecFixed, _decodeFixedVec], ['{', '}', _types$1.TypeDefInfo.Struct, _decodeStruct], ['(', ')', _types$1.TypeDefInfo.Tuple, _decodeTuple], // the inner for these are the same as tuple, multiple values
	['BTreeMap<', '>', _types$1.TypeDefInfo.BTreeMap, _decodeTuple], ['HashMap<', '>', _types$1.TypeDefInfo.HashMap, _decodeTuple], ['Int<', '>', _types$1.TypeDefInfo.Int, _decodeInt], // Not sure about these, have a specific implementation?
	['Range<', '>', _types$1.TypeDefInfo.Tuple, _decodeRange], ['RangeInclusive<', '>', _types$1.TypeDefInfo.Tuple, _decodeRange], ['Result<', '>', _types$1.TypeDefInfo.Result, _decodeTuple], ['UInt<', '>', _types$1.TypeDefInfo.UInt, _decodeUInt], ['DoNotConstruct<', '>', _types$1.TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]];
	const wrappedExtraction = [['BTreeSet<', '>', _types$1.TypeDefInfo.BTreeSet], ['Compact<', '>', _types$1.TypeDefInfo.Compact], ['Linkage<', '>', _types$1.TypeDefInfo.Linkage], ['Option<', '>', _types$1.TypeDefInfo.Option], ['Vec<', '>', _types$1.TypeDefInfo.Vec]];

	function extractSubType(type, [start, end]) {
	  return type.substr(start.length, type.length - start.length - end.length);
	} // eslint-disable-next-line @typescript-eslint/ban-types


	function getTypeDef(_type, {
	  displayName,
	  name
	} = {}, count = 0) {
	  // create the type via Type, allowing types to be sanitized
	  const type = (0, _sanitize.sanitize)(_type);
	  const value = {
	    displayName,
	    info: _types$1.TypeDefInfo.Plain,
	    name,
	    type
	  };
	  (0, _util$5.assert)(++count !== MAX_NESTED, 'getTypeDef: Maximum nested limit reached');
	  const nested = nestedExtraction.find(nested => hasWrapper(type, nested));

	  if (nested) {
	    value.info = nested[2];
	    return nested[3](value, type, extractSubType(type, nested), count);
	  }

	  const wrapped = wrappedExtraction.find(wrapped => hasWrapper(type, wrapped));

	  if (wrapped) {
	    value.info = wrapped[2];
	    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
	  }

	  return value;
	}

	var getTypeDef_1 = /*#__PURE__*/Object.defineProperty({
		getTypeDef: getTypeDef_2
	}, '__esModule', {value: true});

	var _index$e = codec$1;

	var _index$d = primitive;

	var _getTypeDef = getTypeDef_1;

	var getTypeClass_1 = getTypeClass;
	var createClass_2$1 = createClass$1;











	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function getSubDefArray(value) {
	  (0, _util$5.assert)(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${(0, _util$5.stringify)(value)}`);
	  return value.sub;
	}

	function getSubDef(value) {
	  (0, _util$5.assert)(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${(0, _util$5.stringify)(value)}`);
	  return value.sub;
	}

	function getSubType(value) {
	  return getSubDef(value).type;
	} // create a maps of type string constructors from the input


	function getTypeClassMap(value) {
	  const result = {};
	  return getSubDefArray(value).reduce((result, sub) => {
	    result[sub.name] = sub.type;
	    return result;
	  }, result);
	} // create an array of type string constructors from the input


	function getTypeClassArray(value) {
	  return getSubDefArray(value).map(({
	    type
	  }) => type);
	}

	function createInt({
	  displayName,
	  length
	}, Clazz) {
	  (0, _util$5.assert)((0, _util$5.isNumber)(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
	  return Clazz.with(length, displayName);
	}

	function createHashMap(value, Clazz) {
	  const [keyType, valueType] = getTypeClassArray(value);
	  return Clazz.with(keyType, valueType);
	}

	const infoMapping = {
	  [_types$1.TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, _index$e.BTreeMap),
	  [_types$1.TypeDefInfo.BTreeSet]: (registry, value) => _index$e.BTreeSet.with(getSubType(value)),
	  [_types$1.TypeDefInfo.Compact]: (registry, value) => _index$e.Compact.with(getSubType(value)),
	  [_types$1.TypeDefInfo.DoNotConstruct]: (registry, value) => _index$e.DoNotConstruct.with(value.displayName || value.type),
	  [_types$1.TypeDefInfo.Enum]: (registry, value) => {
	    const subs = getSubDefArray(value);
	    return _index$e.Enum.with(subs.every(({
	      type
	    }) => type === 'Null') ? subs.reduce((out, {
	      index,
	      name
	    }, count) => {
	      out[name] = index || count;
	      return out;
	    }, {}) : getTypeClassMap(value));
	  },
	  [_types$1.TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, _index$e.HashMap),
	  [_types$1.TypeDefInfo.Int]: (registry, value) => createInt(value, _index$e.Int),
	  // We have circular deps between Linkage & Struct
	  [_types$1.TypeDefInfo.Linkage]: (registry, value) => {
	    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys

	    const Clazz = _index$e.Struct.with({
	      previous: type,
	      next: type
	    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access


	    Clazz.prototype.toRawType = function () {
	      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
	      return `Linkage<${this.next.toRawType(true)}>`;
	    };

	    return Clazz;
	  },
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  [_types$1.TypeDefInfo.Null]: (registry, _) => _index$d.Null,
	  [_types$1.TypeDefInfo.Option]: (registry, value) => _index$e.Option.with(getSubType(value)),
	  [_types$1.TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
	  [_types$1.TypeDefInfo.Range]: (registry, value) => (value.type.includes('RangeInclusive') ? _index$e.RangeInclusive : _index$e.Range).with(getSubType(value)),
	  [_types$1.TypeDefInfo.Result]: (registry, value) => {
	    const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define

	    return _index$e.Result.with({
	      Err,
	      Ok
	    });
	  },
	  [_types$1.TypeDefInfo.Set]: (registry, value) => {
	    const result = {};
	    return _index$e.CodecSet.with(getSubDefArray(value).reduce((result, {
	      index,
	      name
	    }) => {
	      result[name] = index;
	      return result;
	    }, result), value.length);
	  },
	  [_types$1.TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
	  [_types$1.TypeDefInfo.Struct]: (registry, value) => _index$e.Struct.with(getTypeClassMap(value), value.alias),
	  [_types$1.TypeDefInfo.Tuple]: (registry, value) => _index$e.Tuple.with(getTypeClassArray(value)),
	  [_types$1.TypeDefInfo.UInt]: (registry, value) => createInt(value, _index$e.UInt),
	  [_types$1.TypeDefInfo.Vec]: (registry, value) => {
	    const subType = getSubType(value);
	    return subType === 'u8' ? _index$d.Bytes : _index$e.Vec.with(subType);
	  },
	  [_types$1.TypeDefInfo.VecFixed]: (registry, {
	    displayName,
	    length,
	    sub
	  }) => {
	    (0, _util$5.assert)((0, _util$5.isNumber)(length) && !(0, _util$5.isUndefined)(sub), 'Expected length & type information for fixed vector');
	    const subType = sub.type;
	    return subType === 'u8' ? _index$e.U8aFixed.with(length * 8, displayName) : _index$e.VecFixed.with(subType, length);
	  }
	}; // Returns the type Class for construction

	function getTypeClass(registry, typeDef) {
	  let Type = registry.get(typeDef.type);

	  if (Type) {
	    return Type;
	  }

	  try {
	    Type = infoMapping[typeDef.info](registry, typeDef);
	    (0, _util$5.assert)(Type, 'No class created'); // don't clobber any existing

	    if (!Type.__fallbackType && typeDef.fallbackType) {
	      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	      // @ts-ignore ...this is the only place we we actually assign this...
	      Type.__fallbackType = typeDef.fallbackType;
	    }

	    return Type;
	  } catch (error) {
	    throw new Error(`Unable to construct class from ${(0, _util$5.stringify)(typeDef)}: ${error.message}`);
	  }
	}

	function createClass$1(registry, type) {
	  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : (0, _getTypeDef.getTypeDef)(type));
	}

	var createClass_1$1 = /*#__PURE__*/Object.defineProperty({
		getTypeClass: getTypeClass_1,
		createClass: createClass_2$1
	}, '__esModule', {value: true});

	var _createClass$1 = createClass_1$1;

	var createTypeUnsafe_1 = createTypeUnsafe;
	var createType_2 = createType;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// With isPedantic, actually check that the encoding matches that supplied. This
	// is much slower, but verifies that we have the correct types defined
	function checkInstance(created, matcher) {
	  const u8a = created.toU8a();
	  const rawType = created.toRawType();
	  const isOk = // full match, all ok
	  (0, _util$5.u8aEq)(u8a, matcher) || // on a length-prefixed type, just check the actual length
	  ['Bytes', 'Text', 'Type'].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
	  created.isEmpty && matcher.every(v => !v);
	  (0, _util$5.assert)(isOk, () => `${rawType}:: Decoded input doesn't match input, received ${(0, _util$5.u8aToHex)(matcher, 512)} (${matcher.length} bytes), created ${(0, _util$5.u8aToHex)(u8a, 512)} (${u8a.length} bytes)`);
	}

	function checkPedantic(created, [value], isPedantic = false) {
	  if (isPedantic) {
	    if ((0, _util$5.isU8a)(value)) {
	      checkInstance(created, value);
	    } else if ((0, _util$5.isHex)(value)) {
	      checkInstance(created, (0, _util$5.u8aToU8a)(value));
	    }
	  }
	} // Initializes a type with a value. This also checks for fallbacks and in the cases
	// where isPedantic is specified (storage decoding), also check the format/structure


	function initType(registry, Type, params = [], {
	  blockHash,
	  isOptional,
	  isPedantic
	} = {}) {
	  const created = new (isOptional ? _Option.Option.with(Type) : Type)(registry, ...params);
	  checkPedantic(created, params, isPedantic);

	  if (blockHash) {
	    created.createdAtHash = createType(registry, 'Hash', blockHash);
	  } // eslint-disable-next-line @typescript-eslint/no-unsafe-return


	  return created;
	} // An unsafe version of the `createType` below. It's unsafe because the `type`
	// argument here can be any string, which, when it cannot parse, will yield a
	// runtime error.


	function createTypeUnsafe(registry, type, params = [], options = {}) {
	  let Clazz = null;
	  let firstError = null;

	  try {
	    Clazz = (0, _createClass$1.createClass)(registry, type);
	    return initType(registry, Clazz, params, options);
	  } catch (error) {
	    firstError = new Error(`createType(${type}):: ${error.message}`);
	  }

	  if (Clazz && Clazz.__fallbackType) {
	    try {
	      Clazz = (0, _createClass$1.createClass)(registry, Clazz.__fallbackType);
	      return initType(registry, Clazz, params, options);
	    } catch {// swallow, we will throw the first error again
	    }
	  }

	  throw firstError;
	}
	/**
	 * Create an instance of a `type` with a given `params`.
	 * @param type - A recognizable string representing the type to create an
	 * instance from
	 * @param params - The value to instantiate the type with
	 */


	function createType(registry, type, ...params) {
	  return createTypeUnsafe(registry, type, params);
	}

	var createType_1 = /*#__PURE__*/Object.defineProperty({
		createTypeUnsafe: createTypeUnsafe_1,
		createType: createType_2
	}, '__esModule', {value: true});

	var paramsNotation_1 = paramsNotation;
	var encodeTypeDef_1 = encodeTypeDef;
	var withTypeString_1 = withTypeString;

	var _defineProperty2$m = interopRequireDefault(defineProperty);





	function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$m(Object(source), true).forEach(function (key) { (0, _defineProperty2$m.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const stringIdentity = value => value.toString();

	const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];

	function paramsNotation(outer, inner, transform = stringIdentity) {
	  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;
	}

	function encodeWithParams(registry, typeDef, outer) {
	  const {
	    info,
	    sub
	  } = typeDef;

	  switch (info) {
	    case _types$1.TypeDefInfo.BTreeMap:
	    case _types$1.TypeDefInfo.BTreeSet:
	    case _types$1.TypeDefInfo.Compact:
	    case _types$1.TypeDefInfo.HashMap:
	    case _types$1.TypeDefInfo.Linkage:
	    case _types$1.TypeDefInfo.Option:
	    case _types$1.TypeDefInfo.Result:
	    case _types$1.TypeDefInfo.Vec:
	      return paramsNotation(outer, sub, param => encodeTypeDef(registry, param));
	  }

	  throw new Error(`Unable to encode ${(0, _util$5.stringify)(typeDef)} with params`);
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function encodeDoNotConstruct(registry, {
	  displayName
	}) {
	  return `DoNotConstruct<${displayName || 'Unknown'}>`;
	}

	function encodeSubTypes(registry, sub, asEnum, extra) {
	  const names = sub.map(({
	    name
	  }) => name);
	  (0, _util$5.assert)(names.every(n => !!n), () => `Subtypes does not have consistent names, ${names.join(', ')}`);
	  const inner = sub.reduce((result, type) => _objectSpread$m(_objectSpread$m({}, result), {}, {
	    [type.name]: encodeTypeDef(registry, type)
	  }), _objectSpread$m({}, extra));
	  return (0, _util$5.stringify)(asEnum ? {
	    _enum: inner
	  } : inner);
	}

	function encodeEnum(registry, typeDef) {
	  (0, _util$5.assert)(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Enum type');
	  const sub = typeDef.sub; // c-like enums have all Null entries
	  // TODO We need to take the disciminant into account and auto-add empty entries

	  return sub.every(({
	    type
	  }) => type === 'Null') ? (0, _util$5.stringify)({
	    _enum: sub.map(({
	      name
	    }, index) => `${name || `Empty${index}`}`)
	  }) : encodeSubTypes(registry, sub, true);
	}

	function encodeStruct(registry, typeDef) {
	  (0, _util$5.assert)(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Struct type');
	  return encodeSubTypes(registry, typeDef.sub, false, _objectSpread$m({}, typeDef.alias ? {
	    _alias: [...typeDef.alias.entries()].reduce((all, [k, v]) => _objectSpread$m(_objectSpread$m({}, all), {}, {
	      [k]: v
	    }), {})
	  } : {}));
	}

	function encodeTuple(registry, typeDef) {
	  (0, _util$5.assert)(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Tuple type');
	  return `(${typeDef.sub.map(type => encodeTypeDef(registry, type)).join(',')})`;
	}

	function encodeUInt(registry, {
	  length
	}, type) {
	  (0, _util$5.assert)((0, _util$5.isNumber)(length), 'Unable to encode VecFixed type');
	  return `${type}<${length}>`;
	} // eslint-disable-next-line @typescript-eslint/no-unused-vars


	function encodeVecFixed(registry, {
	  length,
	  sub
	}) {
	  (0, _util$5.assert)((0, _util$5.isNumber)(length) && !(0, _util$5.isUndefined)(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');
	  return `[${sub.type};${length}]`;
	} // We setup a record here to ensure we have comprehensive coverage (any item not covered will result
	// in a compile-time error with the missing index)


	const encoders = {
	  [_types$1.TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
	  [_types$1.TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
	  [_types$1.TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
	  [_types$1.TypeDefInfo.DoNotConstruct]: (registry, typeDef) => encodeDoNotConstruct(registry, typeDef),
	  [_types$1.TypeDefInfo.Enum]: (registry, typeDef) => encodeEnum(registry, typeDef),
	  [_types$1.TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
	  [_types$1.TypeDefInfo.Int]: (registry, typeDef) => encodeUInt(registry, typeDef, 'Int'),
	  [_types$1.TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  [_types$1.TypeDefInfo.Null]: (registry, typeDef) => 'Null',
	  [_types$1.TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  [_types$1.TypeDefInfo.Plain]: (registry, typeDef) => typeDef.displayName || typeDef.type,
	  [_types$1.TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, typeDef.type.includes('RangeInclusive') ? 'RangeInclusive' : 'Range'),
	  [_types$1.TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  [_types$1.TypeDefInfo.Set]: (registry, typeDef) => typeDef.type,
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  [_types$1.TypeDefInfo.Si]: (registry, typeDef) => typeDef.lookupName || typeDef.type,
	  [_types$1.TypeDefInfo.Struct]: (registry, typeDef) => encodeStruct(registry, typeDef),
	  [_types$1.TypeDefInfo.Tuple]: (registry, typeDef) => encodeTuple(registry, typeDef),
	  [_types$1.TypeDefInfo.UInt]: (registry, typeDef) => encodeUInt(registry, typeDef, 'UInt'),
	  [_types$1.TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
	  [_types$1.TypeDefInfo.VecFixed]: (registry, typeDef) => encodeVecFixed(registry, typeDef)
	};

	function encodeType(registry, typeDef, withLookup = true) {
	  const encoder = encoders[typeDef.info];
	  (0, _util$5.assert)(encoder, () => `Cannot encode type ${(0, _util$5.stringify)(typeDef)}`);
	  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoder(registry, typeDef);
	}

	function encodeTypeDef(registry, typeDef) {
	  (0, _util$5.assert)(!(0, _util$5.isUndefined)(typeDef.info), () => `Invalid type definition with no instance info, typeDef=${(0, _util$5.stringify)(typeDef)}`); // In the case of contracts we do have the unfortunate situation where the displayName would
	  // refer to "Option" when it is an option. For these, string it out, only using when actually
	  // not a top-level element to be used

	  if (typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i)) {
	    return typeDef.displayName;
	  }

	  return encodeType(registry, typeDef);
	}

	function withTypeString(registry, typeDef) {
	  return _objectSpread$m(_objectSpread$m({}, typeDef), {}, {
	    type: encodeType(registry, typeDef, false)
	  });
	}

	var encodeTypes = /*#__PURE__*/Object.defineProperty({
		paramsNotation: paramsNotation_1,
		encodeTypeDef: encodeTypeDef_1,
		withTypeString: withTypeString_1
	}, '__esModule', {value: true});

	var emptyCheck_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.emptyCheck = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const emptyCheck = {
	  extrinsic: {},
	  payload: {}
	};
	exports.emptyCheck = emptyCheck;
	});

	var _emptyCheck = emptyCheck_1;

	var polkadot_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.polkadot = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const polkadot = {
	  LimitParathreadCommits: _emptyCheck.emptyCheck,
	  OnlyStakingAndClaims: _emptyCheck.emptyCheck,
	  PrevalidateAttests: _emptyCheck.emptyCheck,
	  RestrictFunctionality: _emptyCheck.emptyCheck,
	  TransactionCallFilter: _emptyCheck.emptyCheck,
	  ValidateDoubleVoteReports: _emptyCheck.emptyCheck
	};
	exports.polkadot = polkadot;
	});

	var shell_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.shell = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const shell = {
	  DisallowSigned: _emptyCheck.emptyCheck
	};
	exports.shell = shell;
	});

	var statemint_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.statemint = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const statemint = {
	  ChargeAssetTxPayment: {
	    extrinsic: {
	      tip: 'Compact<Balance>',
	      // eslint-disable-next-line sort-keys
	      assetId: 'Option<AssetId>'
	    },
	    payload: {}
	  }
	};
	exports.statemint = statemint;
	});

	var substrate_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.substrate = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CheckMortality = {
	  extrinsic: {
	    era: 'ExtrinsicEra'
	  },
	  payload: {
	    blockHash: 'Hash'
	  }
	};
	const substrate = {
	  ChargeTransactionPayment: {
	    extrinsic: {
	      tip: 'Compact<Balance>'
	    },
	    payload: {}
	  },
	  CheckBlockGasLimit: _emptyCheck.emptyCheck,
	  CheckEra: CheckMortality,
	  CheckGenesis: {
	    extrinsic: {},
	    payload: {
	      genesisHash: 'Hash'
	    }
	  },
	  CheckMortality,
	  CheckNonce: {
	    extrinsic: {
	      nonce: 'Compact<Index>'
	    },
	    payload: {}
	  },
	  CheckSpecVersion: {
	    extrinsic: {},
	    payload: {
	      specVersion: 'u32'
	    }
	  },
	  CheckTxVersion: {
	    extrinsic: {},
	    payload: {
	      transactionVersion: 'u32'
	    }
	  },
	  CheckVersion: {
	    extrinsic: {},
	    payload: {
	      specVersion: 'u32'
	    }
	  },
	  CheckWeight: _emptyCheck.emptyCheck,
	  LockStakingStatus: _emptyCheck.emptyCheck,
	  ValidateEquivocationReport: _emptyCheck.emptyCheck
	};
	exports.substrate = substrate;
	});

	var _polkadot = polkadot_1;

	var _shell = shell_1;

	var _statemint = statemint_1;

	var _substrate$1 = substrate_1$1;

	var signedExtensions = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.findUnknownExtensions = findUnknownExtensions;
	exports.expandExtensionTypes = expandExtensionTypes;
	exports.fallbackExtensions = exports.allExtensions = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);









	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// A mapping of the known signed extensions to the extra fields that they contain. Unlike in the actual extensions,
	// we define the extra fields not as a Tuple, but rather as a struct so they can be named. These will be expanded
	// into the various fields when added to the payload (we only support V4 onwards with these, V3 and earlier are
	// deemed fixed and non-changeable)
	const allExtensions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _substrate$1.substrate), _polkadot.polkadot), _shell.shell), _statemint.statemint); // the v4 signed extensions prior to the point of exposing these to the metadata.
	// This may not match 100% with the current defaults and are used when not specified
	// in the metadata (which is for very old chains). The order is important here, as
	// applied by default


	exports.allExtensions = allExtensions;
	const fallbackExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];
	exports.fallbackExtensions = fallbackExtensions;

	function findUnknownExtensions(extensions, userExtensions = {}) {
	  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
	  return extensions.filter(key => !names.includes(key));
	}

	function expandExtensionTypes(extensions, type, userExtensions = {}) {
	  return extensions // Always allow user extensions first - these should provide overrides
	  .map(key => userExtensions[key] || allExtensions[key]).filter(info => !!info).reduce((result, info) => _objectSpread(_objectSpread({}, result), info[type]), {});
	}
	});

	var Event = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericEvent = exports.GenericEventData = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);







	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	/** @internal */
	function decodeEvent(registry, value) {
	  if (!value || !value.length) {
	    return {
	      DataType: _Null.Null
	    };
	  }

	  const index = value.subarray(0, 2);
	  return {
	    DataType: registry.findMetaEvent(index),
	    value: {
	      data: value.subarray(2),
	      index
	    }
	  };
	}
	/**
	 * @name GenericEventData
	 * @description
	 * Wrapper for the actual data that forms part of an [[Event]]
	 */


	var _meta = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("meta");

	var _method = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("method");

	var _section = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("section");

	var _typeDef = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("typeDef");

	class GenericEventData extends _Tuple.Tuple {
	  constructor(registry, value, Types = [], typeDef = [], meta, section = '<unknown>', method = '<unknown>') {
	    super(registry, Types, value);
	    Object.defineProperty(this, _meta, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _method, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _section, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _typeDef, {
	      writable: true,
	      value: void 0
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta] = meta;
	    (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method] = method;
	    (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section] = section;
	    (0, _classPrivateFieldLooseBase2.default)(this, _typeDef)[_typeDef] = typeDef;
	  }
	  /**
	   * @description The wrapped [[EventMetadata]]
	   */


	  get meta() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta];
	  }
	  /**
	   * @description The method as a string
	   */


	  get method() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method];
	  }
	  /**
	   * @description The section as a string
	   */


	  get section() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section];
	  }
	  /**
	   * @description The [[TypeDef]] for this event
	   */


	  get typeDef() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _typeDef)[_typeDef];
	  }

	}
	/**
	 * @name GenericEvent
	 * @description
	 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
	 * specific to a specific Substrate runtime
	 */


	exports.GenericEventData = GenericEventData;

	class GenericEvent extends _Struct.Struct {
	  // Currently we _only_ decode from Uint8Array, since we expect it to
	  // be used via EventRecord
	  constructor(registry, _value) {
	    const {
	      DataType,
	      value
	    } = decodeEvent(registry, _value);
	    super(registry, {
	      index: 'EventId',
	      // eslint-disable-next-line sort-keys
	      data: DataType
	    }, value);
	  }
	  /**
	   * @description The wrapped [[EventData]]
	   */


	  get data() {
	    return this.get('data');
	  }
	  /**
	   * @description The [[EventId]], identifying the raw event
	   */


	  get index() {
	    return this.get('index');
	  }
	  /**
	   * @description The [[EventMetadata]] with the documentation
	   */


	  get meta() {
	    return this.data.meta;
	  }
	  /**
	   * @description The method string identifying the event
	   */


	  get method() {
	    return this.data.method;
	  }
	  /**
	   * @description The section string identifying the event
	   */


	  get section() {
	    return this.data.section;
	  }
	  /**
	   * @description The [[TypeDef]] for the event
	   */


	  get typeDef() {
	    return this.data.typeDef;
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExpanded) {
	    return _objectSpread(_objectSpread({
	      method: this.method,
	      section: this.section
	    }, isExpanded ? {
	      docs: this.meta.docs.map(d => d.toString())
	    } : {}), super.toHuman(isExpanded));
	  }

	}

	exports.GenericEvent = GenericEvent;
	});

	var Base_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Base = void 0;

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name Base
	 * @description A type extends the Base class, when it holds a value
	 */
	class Base {
	  constructor(registry, value) {
	    this.registry = void 0;
	    this.createdAtHash = void 0;
	    this._raw = void 0;
	    this.registry = registry;
	    this._raw = value;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.toU8a().length;
	  }
	  /**
	   * @description returns a hash of the contents
	   */


	  get hash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description Checks if the value is an empty value
	   */


	  get isEmpty() {
	    return this._raw.isEmpty;
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return this._raw.eq(other);
	  }
	  /**
	   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
	   */


	  toHex(isLe) {
	    return this._raw.toHex(isLe);
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return this._raw.toHuman(isExtended);
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this._raw.toJSON();
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return this._raw.toString();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    return this._raw.toU8a(isBare);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Base';
	  }

	}

	exports.Base = Base;
	});

	var constants$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UNMASK_VERSION = exports.IMMORTAL_ERA = exports.DEFAULT_VERSION = exports.EMPTY_U8A = exports.BIT_UNSIGNED = exports.BIT_SIGNED = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const BIT_SIGNED = 0b10000000;
	exports.BIT_SIGNED = BIT_SIGNED;
	const BIT_UNSIGNED = 0;
	exports.BIT_UNSIGNED = BIT_UNSIGNED;
	const EMPTY_U8A = new Uint8Array();
	exports.EMPTY_U8A = EMPTY_U8A;
	const DEFAULT_VERSION = 4;
	exports.DEFAULT_VERSION = DEFAULT_VERSION;
	const IMMORTAL_ERA = new Uint8Array([0]);
	exports.IMMORTAL_ERA = IMMORTAL_ERA;
	const UNMASK_VERSION = 0b01111111;
	exports.UNMASK_VERSION = UNMASK_VERSION;
	});

	var Extrinsic$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicV4 = exports.EXTRINSIC_VERSION = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const EXTRINSIC_VERSION = 4;
	exports.EXTRINSIC_VERSION = EXTRINSIC_VERSION;

	/**
	 * @name GenericExtrinsicV4
	 * @description
	 * The third generation of compact extrinsics
	 */
	class GenericExtrinsicV4 extends _Struct.Struct {
	  constructor(registry, value, {
	    isSigned
	  } = {}) {
	    super(registry, {
	      signature: 'ExtrinsicSignatureV4',
	      // eslint-disable-next-line sort-keys
	      method: 'Call'
	    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
	  }
	  /** @internal */


	  static decodeExtrinsic(registry, value, isSigned = false) {
	    if (value instanceof GenericExtrinsicV4) {
	      return value;
	    } else if (value instanceof registry.createClass('Call')) {
	      return {
	        method: value
	      };
	    } else if ((0, _util$5.isU8a)(value)) {
	      // here we decode manually since we need to pull through the version information
	      const signature = registry.createType('ExtrinsicSignatureV4', value, {
	        isSigned
	      });
	      const method = registry.createType('Call', value.subarray(signature.encodedLength));
	      return {
	        method,
	        signature
	      };
	    }

	    return value || {};
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.toU8a().length;
	  }
	  /**
	   * @description The [[Call]] this extrinsic wraps
	   */


	  get method() {
	    return this.get('method');
	  }
	  /**
	   * @description The [[ExtrinsicSignatureV4]]
	   */


	  get signature() {
	    return this.get('signature');
	  }
	  /**
	   * @description The version for the signature
	   */


	  get version() {
	    return EXTRINSIC_VERSION;
	  }
	  /**
	   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
	   */


	  addSignature(signer, signature, payload) {
	    this.signature.addSignature(signer, signature, payload);
	    return this;
	  }
	  /**
	   * @description Sign the extrinsic with a specific keypair
	   */


	  sign(account, options) {
	    this.signature.sign(this.method, account, options);
	    return this;
	  }
	  /**
	   * @describe Adds a fake signature to the extrinsic
	   */


	  signFake(signer, options) {
	    this.signature.signFake(this.method, signer, options);
	    return this;
	  }

	}

	exports.GenericExtrinsicV4 = GenericExtrinsicV4;
	});

	var _Base = Base_1;

	var _constants$1 = constants$2;

	var _Extrinsic$1 = Extrinsic$1;

	var Extrinsic = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "LATEST_EXTRINSIC_VERSION", {
	  enumerable: true,
	  get: function () {
	    return _Extrinsic$1.EXTRINSIC_VERSION;
	  }
	});
	exports.GenericExtrinsic = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);









	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const VERSIONS = ['ExtrinsicUnknown', // v0 is unknown
	'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];

	class ExtrinsicBase extends _Base.Base {
	  /**
	   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
	   */
	  get args() {
	    return this.method.args;
	  }
	  /**
	   * @description The argument definitions, compatible with [[Call]]
	   */


	  get argsDef() {
	    return this.method.argsDef;
	  }
	  /**
	   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
	   */


	  get callIndex() {
	    return this.method.callIndex;
	  }
	  /**
	   * @description The actual data for the Call
	   */


	  get data() {
	    return this.method.data;
	  }
	  /**
	   * @description The era for this extrinsic
	   */


	  get era() {
	    return this._raw.signature.era;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.toU8a().length;
	  }
	  /**
	   * @description `true` id the extrinsic is signed
	   */


	  get isSigned() {
	    return this._raw.signature.isSigned;
	  }
	  /**
	   * @description The length of the actual data, excluding prefix
	   */


	  get length() {
	    return this.toU8a(true).length;
	  }
	  /**
	   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
	   */


	  get meta() {
	    return this.method.meta;
	  }
	  /**
	   * @description The [[Call]] this extrinsic wraps
	   */


	  get method() {
	    return this._raw.method;
	  }
	  /**
	   * @description The nonce for this extrinsic
	   */


	  get nonce() {
	    return this._raw.signature.nonce;
	  }
	  /**
	   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
	   */


	  get signature() {
	    return this._raw.signature.signature;
	  }
	  /**
	   * @description The [[Address]] that signed
	   */


	  get signer() {
	    return this._raw.signature.signer;
	  }
	  /**
	   * @description Forwards compat
	   */


	  get tip() {
	    return this._raw.signature.tip;
	  }
	  /**
	   * @description Returns the raw transaction version (not flagged with signing information)
	  */


	  get type() {
	    return this._raw.version;
	  }
	  /**
	   * @description Returns the encoded version flag
	  */


	  get version() {
	    return this.type | (this.isSigned ? _constants$1.BIT_SIGNED : _constants$1.BIT_UNSIGNED);
	  }
	  /**
	   * @description Checks if the source matches this in type
	   */


	  is(other) {
	    return this.method.is(other);
	  }

	}
	/**
	 * @name GenericExtrinsic
	 * @description
	 * Representation of an Extrinsic in the system. It contains the actual call,
	 * (optional) signature and encodes with an actual length prefix
	 *
	 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
	 *
	 * Can be:
	 * - signed, to create a transaction
	 * - left as is, to create an inherent
	 */


	class GenericExtrinsic extends ExtrinsicBase {
	  constructor(registry, value, {
	    version
	  } = {}) {
	    super(registry, GenericExtrinsic._decodeExtrinsic(registry, value, version));
	  }
	  /** @internal */


	  static _newFromValue(registry, value, version) {
	    if (value instanceof GenericExtrinsic) {
	      return value._raw;
	    }

	    const isSigned = (version & _constants$1.BIT_SIGNED) === _constants$1.BIT_SIGNED;
	    const type = VERSIONS[version & _constants$1.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a
	    // slice for "only add extrinsic types", and more string definitions become unwieldy

	    return registry.createType(type, value, {
	      isSigned,
	      version
	    });
	  }
	  /** @internal */


	  static _decodeExtrinsic(registry, value, version = _constants$1.DEFAULT_VERSION) {
	    if ((0, _util$5.isU8a)(value) || Array.isArray(value) || (0, _util$5.isHex)(value)) {
	      return GenericExtrinsic._decodeU8a(registry, (0, _util$5.u8aToU8a)(value), version);
	    } else if (value instanceof registry.createClass('Call')) {
	      return GenericExtrinsic._newFromValue(registry, {
	        method: value
	      }, version);
	    }

	    return GenericExtrinsic._newFromValue(registry, value, version);
	  }
	  /** @internal */


	  static _decodeU8a(registry, value, version) {
	    if (!value.length) {
	      return GenericExtrinsic._newFromValue(registry, new Uint8Array(), version);
	    }

	    const [offset, length] = (0, _util$5.compactFromU8a)(value);
	    const total = offset + length.toNumber();
	    (0, _util$5.assert)(total <= value.length, () => `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
	    const data = value.subarray(offset, total);
	    return GenericExtrinsic._newFromValue(registry, data.subarray(1), data[0]);
	  }
	  /**
	   * @description Injects an already-generated signature into the extrinsic
	   */


	  addSignature(signer, signature, payload) {
	    this._raw.addSignature(signer, signature, payload);

	    return this;
	  }
	  /**
	   * @description Sign the extrinsic with a specific keypair
	   */


	  sign(account, options) {
	    this._raw.sign(account, options);

	    return this;
	  }
	  /**
	   * @describe Adds a fake signature to the extrinsic
	   */


	  signFake(signer, options) {
	    this._raw.signFake(signer, options);

	    return this;
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex(isBare) {
	    return (0, _util$5.u8aToHex)(this.toU8a(isBare));
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExpanded) {
	    return _objectSpread({
	      isSigned: this.isSigned,
	      method: this.method.toHuman(isExpanded)
	    }, this.isSigned ? {
	      era: this.era.toHuman(isExpanded),
	      nonce: this.nonce.toHuman(isExpanded),
	      signature: this.signature.toHex(),
	      signer: this.signer.toHuman(isExpanded),
	      tip: this.tip.toHuman(isExpanded)
	    } : {});
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toHex();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Extrinsic';
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value is not length-prefixed
	   */


	  toU8a(isBare) {
	    // we do not apply bare to the internal values, rather this only determines out length addition,
	    // where we strip all lengths this creates an extrinsic that cannot be decoded
	    const encoded = (0, _util$5.u8aConcat)(new Uint8Array([this.version]), this._raw.toU8a());
	    return isBare ? encoded : (0, _util$5.compactAddLength)(encoded);
	  }

	}

	exports.GenericExtrinsic = GenericExtrinsic;
	});

	var ExtrinsicEra = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicEra = exports.MortalEra = exports.ImmortalEra = void 0;













	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function getTrailingZeros(period) {
	  const binary = period.toString(2);
	  let index = 0;

	  while (binary[binary.length - 1 - index] === '0') {
	    index++;
	  }

	  return index;
	}
	/**
	 * @name ImmortalEra
	 * @description
	 * The ImmortalEra for an extrinsic
	 */


	class ImmortalEra extends _Raw.Raw {
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  constructor(registry, value) {
	    // For immortals, we always provide the known value (i.e. treated as a
	    // constant no matter how it is constructed - it is a fixed structure)
	    super(registry, _constants$1.IMMORTAL_ERA);
	  }

	}
	/**
	 * @name MortalEra
	 * @description
	 * The MortalEra for an extrinsic, indicating period and phase
	 */


	exports.ImmortalEra = ImmortalEra;

	class MortalEra extends _Tuple.Tuple {
	  constructor(registry, value) {
	    super(registry, {
	      period: _U.u64,
	      phase: _U.u64
	    }, MortalEra._decodeMortalEra(registry, value));
	  }
	  /** @internal */


	  static _decodeMortalEra(registry, value) {
	    if (!value) {
	      return [new _U.u64(registry), new _U.u64(registry)];
	    } else if ((0, _util$5.isU8a)(value) || (0, _util$5.isHex)(value) || Array.isArray(value)) {
	      return MortalEra._decodeMortalU8a(registry, (0, _util$5.u8aToU8a)(value));
	    } else if ((0, _util$5.isObject)(value)) {
	      return MortalEra._decodeMortalObject(registry, value);
	    }

	    throw new Error('Invalid data passed to Mortal era');
	  }
	  /** @internal */


	  static _decodeMortalObject(registry, value) {
	    const {
	      current,
	      period
	    } = value;
	    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
	    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
	    const phase = current % calPeriod;
	    const quantizeFactor = Math.max(calPeriod >> 12, 1);
	    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
	    return [new _U.u64(registry, calPeriod), new _U.u64(registry, quantizedPhase)];
	  }
	  /** @internal */


	  static _decodeMortalU8a(registry, value) {
	    if (value.length === 0) {
	      return [new _U.u64(registry), new _U.u64(registry)];
	    }

	    const first = (0, _util$5.u8aToBn)(value.subarray(0, 1)).toNumber();
	    const second = (0, _util$5.u8aToBn)(value.subarray(1, 2)).toNumber();
	    const encoded = first + (second << 8);
	    const period = 2 << encoded % (1 << 4);
	    const quantizeFactor = Math.max(period >> 12, 1);
	    const phase = (encoded >> 4) * quantizeFactor;
	    (0, _util$5.assert)(period >= 4 && phase < period, 'Invalid data passed to Mortal era');
	    return [new _U.u64(registry, period), new _U.u64(registry, phase)];
	  }
	  /**
	   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
	   */


	  get encodedLength() {
	    return 2;
	  }
	  /**
	   * @description The period of this Mortal wraps as a [[U64]]
	   */


	  get period() {
	    return this[0];
	  }
	  /**
	   * @description The phase of this Mortal wraps as a [[U64]]
	   */


	  get phase() {
	    return this[1];
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return {
	      period: (0, _util$5.formatNumber)(this.period),
	      phase: (0, _util$5.formatNumber)(this.phase)
	    };
	  }
	  /**
	   * @description Returns a JSON representation of the actual value
	   */


	  toJSON() {
	    return this.toHex();
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   * Period and phase are encoded:
	   *   - The period of validity from the block hash found in the signing material.
	   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
	   *     implies which block hash is included in the signature material). If the `period` is
	   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
	   *     `period` is.
	   */
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars


	  toU8a(isBare) {
	    const period = this.period.toNumber();
	    const phase = this.phase.toNumber();
	    const quantizeFactor = Math.max(period >> 12, 1);
	    const trailingZeros = getTrailingZeros(period);
	    const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);
	    const first = encoded >> 8;
	    const second = encoded & 0xff;
	    return new Uint8Array([second, first]);
	  }
	  /**
	   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
	   */


	  birth(current) {
	    // FIXME No toNumber() here
	    return Math.floor((Math.max((0, _util$5.bnToBn)(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();
	  }
	  /**
	   * @description Get the block number of the first block at which the era has ended.
	   */


	  death(current) {
	    // FIXME No toNumber() here
	    return this.birth(current) + this.period.toNumber();
	  }

	}
	/**
	 * @name GenericExtrinsicEra
	 * @description
	 * The era for an extrinsic, indicating either a mortal or immortal extrinsic
	 */


	exports.MortalEra = MortalEra;

	class GenericExtrinsicEra extends _Enum.Enum {
	  constructor(registry, value) {
	    super(registry, {
	      ImmortalEra,
	      MortalEra
	    }, GenericExtrinsicEra._decodeExtrinsicEra(value));
	  }
	  /** @internal */
	  // eslint-disable-next-line @typescript-eslint/ban-types


	  static _decodeExtrinsicEra(value = new Uint8Array()) {
	    if (value instanceof GenericExtrinsicEra) {
	      return GenericExtrinsicEra._decodeExtrinsicEra(value.toU8a());
	    } else if ((0, _util$5.isHex)(value)) {
	      return GenericExtrinsicEra._decodeExtrinsicEra((0, _util$5.hexToU8a)(value));
	    } else if (!value || (0, _util$5.isU8a)(value)) {
	      return !(value !== null && value !== void 0 && value.length) || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
	    } else if ((0, _util$5.isObject)(value)) {
	      const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
	      const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
	      const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera'); // this is to de-serialize from JSON

	      return mortal ? {
	        MortalEra: mortal[1]
	      } : immortal ? {
	        ImmortalEra: immortal[1]
	      } : {
	        MortalEra: value
	      };
	    }

	    throw new Error('Invalid data passed to Era');
	  }
	  /**
	   * @description Override the encoded length method
	   */


	  get encodedLength() {
	    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
	  }
	  /**
	   * @description Returns the item as a [[ImmortalEra]]
	   */


	  get asImmortalEra() {
	    (0, _util$5.assert)(this.isImmortalEra, () => `Cannot convert '${this.type}' via asImmortalEra`);
	    return this.value;
	  }
	  /**
	   * @description Returns the item as a [[MortalEra]]
	   */


	  get asMortalEra() {
	    (0, _util$5.assert)(this.isMortalEra, () => `Cannot convert '${this.type}' via asMortalEra`);
	    return this.value;
	  }
	  /**
	   * @description `true` if Immortal
	   */


	  get isImmortalEra() {
	    return this.index === 0;
	  }
	  /**
	   * @description `true` if Mortal
	   */


	  get isMortalEra() {
	    return this.index > 0;
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
	  }

	}

	exports.GenericExtrinsicEra = GenericExtrinsicEra;
	});

	var ExtrinsicPayload$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicPayload = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown
	'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];
	/**
	 * @name GenericExtrinsicPayload
	 * @description
	 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
	 * on the contents included
	 */

	class GenericExtrinsicPayload extends _Base.Base {
	  constructor(registry, value, {
	    version
	  } = {}) {
	    super(registry, GenericExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));
	  }
	  /** @internal */


	  static decodeExtrinsicPayload(registry, value, version = _constants$1.DEFAULT_VERSION) {
	    if (value instanceof GenericExtrinsicPayload) {
	      return value._raw;
	    }

	    return registry.createType(VERSIONS[version] || VERSIONS[0], value, {
	      version
	    });
	  }
	  /**
	   * @description The block [[Hash]] the signature applies to (mortal/immortal)
	   */


	  get blockHash() {
	    return this._raw.blockHash;
	  }
	  /**
	   * @description The [[ExtrinsicEra]]
	   */


	  get era() {
	    return this._raw.era;
	  }
	  /**
	   * @description The genesis block [[Hash]] the signature applies to
	   */


	  get genesisHash() {
	    // NOTE only v3+
	    return this._raw.genesisHash || this.registry.createType('Hash');
	  }
	  /**
	   * @description The [[Raw]] contained in the payload
	   */


	  get method() {
	    return this._raw.method;
	  }
	  /**
	   * @description The [[Index]]
	   */


	  get nonce() {
	    return this._raw.nonce;
	  }
	  /**
	   * @description The specVersion as a [[u32]] for this payload
	   */


	  get specVersion() {
	    // NOTE only v3+
	    return this._raw.specVersion || this.registry.createType('u32');
	  }
	  /**
	   * @description The [[Balance]]
	   */


	  get tip() {
	    // NOTE from v2+
	    return this._raw.tip || this.registry.createType('Compact<Balance>');
	  }
	  /**
	   * @description The transaction version as a [[u32]] for this payload
	   */


	  get transactionVersion() {
	    // NOTE only v4+
	    return this._raw.transactionVersion || this.registry.createType('u32');
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return this._raw.eq(other);
	  }
	  /**
	   * @description Sign the payload with the keypair
	   */


	  sign(signerPair) {
	    const signature = this._raw.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra
	    // information, such as for instance the payload, i.e. `payload: this.toHex()`
	    // For the case here we sign via the extrinsic, we ignore the return, so generally
	    // this is applicable for external signing


	    return {
	      signature: (0, _util$5.u8aToHex)(signature)
	    };
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExtended) {
	    return this._raw.toHuman(isExtended);
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toHex();
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return this.toHex();
	  }
	  /**
	   * @description Returns a serialized u8a form
	   */


	  toU8a(isBare) {
	    // call our parent, with only the method stripped
	    return super.toU8a(isBare ? {
	      method: true
	    } : false);
	  }

	}

	exports.GenericExtrinsicPayload = GenericExtrinsicPayload;
	});

	var ExtrinsicPayloadUnknown = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicPayloadUnknown = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name GenericExtrinsicPayloadUnknown
	 * @description
	 * A default handler for payloads where the version is not known (default throw)
	 */
	class GenericExtrinsicPayloadUnknown extends _Struct.Struct {
	  constructor(registry, value, {
	    version = 0
	  } = {}) {
	    super(registry, {});
	    throw new Error(`Unsupported extrinsic payload version ${version}`);
	  }

	}

	exports.GenericExtrinsicPayloadUnknown = GenericExtrinsicPayloadUnknown;
	});

	var ExtrinsicUnknown = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicUnknown = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name GenericExtrinsicUnknown
	 * @description
	 * A default handler for extrinsics where the version is not known (default throw)
	 */
	class GenericExtrinsicUnknown extends _Struct.Struct {
	  constructor(registry, value, {
	    isSigned = false,
	    version = 0
	  } = {}) {
	    super(registry, {});
	    throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & _constants$1.UNMASK_VERSION}`);
	  }

	}

	exports.GenericExtrinsicUnknown = GenericExtrinsicUnknown;
	});

	var SignerPayload = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericSignerPayload = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);





	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const knownTypes = {
	  address: 'Address',
	  blockHash: 'Hash',
	  blockNumber: 'BlockNumber',
	  era: 'ExtrinsicEra',
	  genesisHash: 'Hash',
	  method: 'Call',
	  nonce: 'Compact<Index>',
	  runtimeVersion: 'RuntimeVersion',
	  signedExtensions: 'Vec<Text>',
	  tip: 'Compact<Balance>',
	  version: 'u8'
	};
	/**
	 * @name GenericSignerPayload
	 * @description
	 * A generic signer payload that can be used for serialization between API and signer
	 */

	class GenericSignerPayload extends _Struct.Struct {
	  constructor(registry, value) {
	    const extensionTypes = _objectSpread(_objectSpread({}, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra());

	    super(registry, _objectSpread(_objectSpread({}, extensionTypes), knownTypes), value); // add all extras that are not in the base types

	    this._extraTypes = void 0;
	    this._extraTypes = Object.entries(extensionTypes).reduce((map, [key, type]) => {
	      if (!knownTypes[key]) {
	        map[key] = type;
	      }

	      return map;
	    }, {});
	  }

	  get address() {
	    return this.get('address');
	  }

	  get blockHash() {
	    return this.get('blockHash');
	  }

	  get blockNumber() {
	    return this.get('blockNumber');
	  }

	  get era() {
	    return this.get('era');
	  }

	  get genesisHash() {
	    return this.get('genesisHash');
	  }

	  get method() {
	    return this.get('method');
	  }

	  get nonce() {
	    return this.get('nonce');
	  }

	  get runtimeVersion() {
	    return this.get('runtimeVersion');
	  }

	  get signedExtensions() {
	    return this.get('signedExtensions');
	  }

	  get tip() {
	    return this.get('tip');
	  }

	  get version() {
	    return this.get('version');
	  }
	  /**
	   * @description Creates an representation of the structure as an ISignerPayload JSON
	   */


	  toPayload() {
	    return _objectSpread(_objectSpread({}, Object.keys(this._extraTypes).reduce((map, key) => {
	      map[key] = this.get(key).toHex();
	      return map;
	    }, {})), {}, {
	      // the known defaults as managed explicitly and has different
	      // formatting in cases, e.g. we mostly expose a hex format here
	      address: this.address.toString(),
	      blockHash: this.blockHash.toHex(),
	      blockNumber: this.blockNumber.toHex(),
	      era: this.era.toHex(),
	      genesisHash: this.genesisHash.toHex(),
	      method: this.method.toHex(),
	      nonce: this.nonce.toHex(),
	      signedExtensions: this.signedExtensions.map(e => e.toString()),
	      specVersion: this.runtimeVersion.specVersion.toHex(),
	      tip: this.tip.toHex(),
	      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
	      version: this.version.toNumber()
	    });
	  }
	  /**
	   * @description Creates a representation of the payload in raw Exrinsic form
	   */


	  toRaw() {
	    const payload = this.toPayload();
	    const data = (0, _util$5.u8aToHex)(this.registry.createType('ExtrinsicPayload', payload, {
	      version: payload.version
	    }) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
	    .toU8a({
	      method: true
	    }));
	    return {
	      address: payload.address,
	      data,
	      type: 'payload'
	    };
	  }

	}

	exports.GenericSignerPayload = GenericSignerPayload;
	});

	var sign_1 = sign;

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// a helper function for both types of payloads, Raw and metadata-known
	function sign(registry, signerPair, u8a, options) {
	  const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
	  return signerPair.sign(encoded, options);
	}

	var util$9 = /*#__PURE__*/Object.defineProperty({
		sign: sign_1
	}, '__esModule', {value: true});

	var _util$4 = util$9;

	var ExtrinsicPayload = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicPayloadV4 = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);







	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var _signOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signOptions");

	/**
	 * @name GenericExtrinsicPayloadV4
	 * @description
	 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
	 * on the contents included
	 */
	class GenericExtrinsicPayloadV4 extends _Struct.Struct {
	  constructor(registry, value) {
	    super(registry, _objectSpread(_objectSpread({
	      method: 'Bytes'
	    }, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra()), value); // Do detection for the type of extrinsic, in the case of MultiSignature this is an
	    // enum, in the case of AnySignature, this is a Hash only (may be 64 or 65 bytes)

	    Object.defineProperty(this, _signOptions, {
	      writable: true,
	      value: void 0
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _signOptions)[_signOptions] = {
	      withType: registry.createType('ExtrinsicSignature') instanceof _Enum.Enum
	    };
	  }
	  /**
	   * @description The block [[Hash]] the signature applies to (mortal/immortal)
	   */


	  get blockHash() {
	    return this.get('blockHash');
	  }
	  /**
	   * @description The [[ExtrinsicEra]]
	   */


	  get era() {
	    return this.get('era');
	  }
	  /**
	   * @description The genesis [[Hash]] the signature applies to (mortal/immortal)
	   */


	  get genesisHash() {
	    return this.get('genesisHash');
	  }
	  /**
	   * @description The [[Bytes]] contained in the payload
	   */


	  get method() {
	    return this.get('method');
	  }
	  /**
	   * @description The [[Index]]
	   */


	  get nonce() {
	    return this.get('nonce');
	  }
	  /**
	   * @description The specVersion for this signature
	   */


	  get specVersion() {
	    return this.get('specVersion');
	  }
	  /**
	   * @description The tip [[Balance]]
	   */


	  get tip() {
	    return this.get('tip');
	  }
	  /**
	   * @description The transactionVersion for this signature
	   */


	  get transactionVersion() {
	    return this.get('transactionVersion');
	  }
	  /**
	   * @description Sign the payload with the keypair
	   */


	  sign(signerPair) {
	    // NOTE The `toU8a({ method: true })` argument is absolutely critical - we don't want the method (Bytes)
	    // to have the length prefix included. This means that the data-as-signed is un-decodable,
	    // but is also doesn't need the extra information, only the pure data (and is not decoded)
	    // ... The same applies to V1..V3, if we have a V5, carry move this comment to latest
	    return (0, _util$4.sign)(this.registry, signerPair, this.toU8a({
	      method: true
	    }), (0, _classPrivateFieldLooseBase2.default)(this, _signOptions)[_signOptions]);
	  }

	}

	exports.GenericExtrinsicPayloadV4 = GenericExtrinsicPayloadV4;
	});

	var _ExtrinsicPayload$1 = ExtrinsicPayload;

	var ExtrinsicSignature = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericExtrinsicSignatureV4 = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);











	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const FAKE_NONE = new Uint8Array();
	const FAKE_SOME = new Uint8Array([1]);

	function toAddress(registry, address) {
	  return registry.createType('Address', (0, _util$5.isU8a)(address) ? (0, _util$5.u8aToHex)(address) : address);
	}
	/**
	 * @name GenericExtrinsicSignatureV4
	 * @description
	 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
	 */


	var _fakePrefix = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("fakePrefix");

	class GenericExtrinsicSignatureV4 extends _Struct.Struct {
	  constructor(registry, value, {
	    isSigned
	  } = {}) {
	    super(registry, _objectSpread({
	      signer: 'Address',
	      // eslint-disable-next-line sort-keys
	      signature: 'ExtrinsicSignature'
	    }, registry.getSignedExtensionTypes()), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
	    Object.defineProperty(this, _fakePrefix, {
	      writable: true,
	      value: void 0
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _fakePrefix)[_fakePrefix] = registry.createType('ExtrinsicSignature') instanceof _Enum.Enum ? FAKE_SOME : FAKE_NONE;
	  }
	  /** @internal */


	  static decodeExtrinsicSignature(value, isSigned = false) {
	    if (!value) {
	      return _constants$1.EMPTY_U8A;
	    } else if (value instanceof GenericExtrinsicSignatureV4) {
	      return value;
	    }

	    return isSigned ? value : _constants$1.EMPTY_U8A;
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    return this.isSigned ? super.encodedLength : 0;
	  }
	  /**
	   * @description `true` if the signature is valid
	   */


	  get isSigned() {
	    return !this.signature.isEmpty;
	  }
	  /**
	   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
	   */


	  get era() {
	    return this.get('era');
	  }
	  /**
	   * @description The [[Index]] for the signature
	   */


	  get nonce() {
	    return this.get('nonce');
	  }
	  /**
	   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
	   */


	  get signature() {
	    // the second case here is when we don't have an enum signature, treat as raw
	    return this.multiSignature.value || this.multiSignature;
	  }
	  /**
	   * @description The raw [[ExtrinsicSignature]]
	   */


	  get multiSignature() {
	    return this.get('signature');
	  }
	  /**
	   * @description The [[Address]] that signed
	   */


	  get signer() {
	    return this.get('signer');
	  }
	  /**
	   * @description The [[Balance]] tip
	   */


	  get tip() {
	    return this.get('tip');
	  }

	  _injectSignature(signer, signature, {
	    era,
	    nonce,
	    tip
	  }) {
	    this.set('era', era);
	    this.set('nonce', nonce);
	    this.set('signer', signer);
	    this.set('signature', signature);
	    this.set('tip', tip);
	    return this;
	  }
	  /**
	   * @description Adds a raw signature
	   */


	  addSignature(signer, signature, payload) {
	    return this._injectSignature(toAddress(this.registry, signer), this.registry.createType('ExtrinsicSignature', signature), new _ExtrinsicPayload$1.GenericExtrinsicPayloadV4(this.registry, payload));
	  }
	  /**
	   * @description Creates a payload from the supplied options
	   */


	  createPayload(method, {
	    blockHash,
	    era,
	    genesisHash,
	    nonce,
	    runtimeVersion: {
	      specVersion,
	      transactionVersion
	    },
	    tip
	  }) {
	    return new _ExtrinsicPayload$1.GenericExtrinsicPayloadV4(this.registry, {
	      blockHash,
	      era: era || _constants$1.IMMORTAL_ERA,
	      genesisHash,
	      method: method.toHex(),
	      nonce,
	      specVersion,
	      tip: tip || 0,
	      transactionVersion: transactionVersion || 0
	    });
	  }
	  /**
	   * @description Generate a payload and applies the signature from a keypair
	   */


	  sign(method, account, options) {
	    (0, _util$5.assert)(account && account.addressRaw, () => `Expected a valid keypair for signing, found ${(0, _util$5.stringify)(account)}`);
	    const signer = toAddress(this.registry, account.addressRaw);
	    const payload = this.createPayload(method, options);
	    const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));
	    return this._injectSignature(signer, signature, payload);
	  }
	  /**
	   * @description Generate a payload and applies a fake signature
	   */


	  signFake(method, address, options) {
	    (0, _util$5.assert)(address, () => `Expected a valid address for signing, found ${(0, _util$5.stringify)(address)}`);
	    const signer = toAddress(this.registry, address);
	    const payload = this.createPayload(method, options);
	    const signature = this.registry.createType('ExtrinsicSignature', (0, _util$5.u8aConcat)((0, _classPrivateFieldLooseBase2.default)(this, _fakePrefix)[_fakePrefix], new Uint8Array(64).fill(0x42)));
	    return this._injectSignature(signer, signature, payload);
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    return this.isSigned ? super.toU8a(isBare) : _constants$1.EMPTY_U8A;
	  }

	}

	exports.GenericExtrinsicSignatureV4 = GenericExtrinsicSignatureV4;
	});

	var _ExtrinsicSignature = ExtrinsicSignature;

	var v4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "GenericExtrinsicV4", {
	  enumerable: true,
	  get: function () {
	    return _Extrinsic$1.GenericExtrinsicV4;
	  }
	});
	Object.defineProperty(exports, "GenericExtrinsicPayloadV4", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicPayload$1.GenericExtrinsicPayloadV4;
	  }
	});
	Object.defineProperty(exports, "GenericExtrinsicSignatureV4", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicSignature.GenericExtrinsicSignatureV4;
	  }
	});
	});

	var _Extrinsic = Extrinsic;

	var _ExtrinsicEra = ExtrinsicEra;

	var _ExtrinsicPayload = ExtrinsicPayload$1;

	var _ExtrinsicPayloadUnknown = ExtrinsicPayloadUnknown;

	var _ExtrinsicUnknown = ExtrinsicUnknown;

	var _SignerPayload = SignerPayload;

	var _index$c = v4;

	var extrinsic$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  GenericExtrinsic: true,
	  GenericExtrinsicEra: true,
	  GenericMortalEra: true,
	  GenericImmortalEra: true,
	  GenericExtrinsicPayload: true,
	  GenericExtrinsicPayloadUnknown: true,
	  GenericExtrinsicUnknown: true,
	  GenericSignerPayload: true
	};
	Object.defineProperty(exports, "GenericExtrinsic", {
	  enumerable: true,
	  get: function () {
	    return _Extrinsic.GenericExtrinsic;
	  }
	});
	Object.defineProperty(exports, "GenericExtrinsicEra", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicEra.GenericExtrinsicEra;
	  }
	});
	Object.defineProperty(exports, "GenericMortalEra", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicEra.MortalEra;
	  }
	});
	Object.defineProperty(exports, "GenericImmortalEra", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicEra.ImmortalEra;
	  }
	});
	Object.defineProperty(exports, "GenericExtrinsicPayload", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicPayload.GenericExtrinsicPayload;
	  }
	});
	Object.defineProperty(exports, "GenericExtrinsicPayloadUnknown", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicPayloadUnknown.GenericExtrinsicPayloadUnknown;
	  }
	});
	Object.defineProperty(exports, "GenericExtrinsicUnknown", {
	  enumerable: true,
	  get: function () {
	    return _ExtrinsicUnknown.GenericExtrinsicUnknown;
	  }
	});
	Object.defineProperty(exports, "GenericSignerPayload", {
	  enumerable: true,
	  get: function () {
	    return _SignerPayload.GenericSignerPayload;
	  }
	});















	Object.keys(_index$c).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index$c[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$c[key];
	    }
	  });
	});
	});

	var AccountId$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericEthereumAccountId = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeAccountId(value) {
	  if ((0, _util$5.isU8a)(value) || Array.isArray(value)) {
	    return (0, _util$5.u8aToU8a)(value);
	  } else if ((0, _util$5.isHex)(value) || (0, _utilCrypto.isEthereumAddress)(value)) {
	    return (0, _util$5.hexToU8a)(value);
	  } else if ((0, _util$5.isString)(value)) {
	    return (0, _util$5.u8aToU8a)(value);
	  }

	  return value;
	}
	/**
	 * @name GenericEthereumAccountId
	 * @description
	 * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
	 * underlying addresses (20 bytes in length), we extend from U8aFixed which is
	 * just a Uint8Array wrapper with a fixed length.
	 */


	class GenericEthereumAccountId extends _U8aFixed.U8aFixed {
	  constructor(registry, value = new Uint8Array()) {
	    super(registry, decodeAccountId(value), 160);
	  }

	  static encode(value) {
	    return (0, _utilCrypto.ethereumEncode)(value);
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return super.eq(decodeAccountId(other));
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toString();
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return GenericEthereumAccountId.encode(this);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'AccountId';
	  }

	}

	exports.GenericEthereumAccountId = GenericEthereumAccountId;
	});

	var AccountIndex = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericAccountIndex = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const PREFIX_1BYTE = 0xef;
	const PREFIX_2BYTE = 0xfc;
	const PREFIX_4BYTE = 0xfd;
	const PREFIX_8BYTE = 0xfe;
	const MAX_1BYTE = new _util$5.BN(PREFIX_1BYTE);
	const MAX_2BYTE = new _util$5.BN(1).shln(16);
	const MAX_4BYTE = new _util$5.BN(1).shln(32);
	/** @internal */

	function decodeAccountIndex(value) {
	  // eslint-disable-next-line @typescript-eslint/no-use-before-define
	  if (value instanceof GenericAccountIndex) {
	    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
	    // AccountIndex), which has the initial `toString()` implementation.
	    return value.toBn();
	  } else if ((0, _util$5.isBn)(value) || (0, _util$5.isNumber)(value) || (0, _util$5.isHex)(value) || (0, _util$5.isU8a)(value) || (0, _util$5.isBigInt)(value)) {
	    return value;
	  }

	  return decodeAccountIndex((0, _utilCrypto.decodeAddress)(value));
	}
	/**
	 * @name GenericAccountIndex
	 * @description
	 * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
	 * for an Account. We extends from [[U32]] to provide the number-like properties.
	 */


	class GenericAccountIndex extends _U$2.u32 {
	  constructor(registry, value = new _util$5.BN(0)) {
	    super(registry, decodeAccountIndex(value));
	  }

	  static calcLength(_value) {
	    const value = (0, _util$5.bnToBn)(_value);

	    if (value.lte(MAX_1BYTE)) {
	      return 1;
	    } else if (value.lt(MAX_2BYTE)) {
	      return 2;
	    } else if (value.lt(MAX_4BYTE)) {
	      return 4;
	    }

	    return 8;
	  }

	  static readLength(input) {
	    const first = input[0];

	    if (first === PREFIX_2BYTE) {
	      return [1, 2];
	    } else if (first === PREFIX_4BYTE) {
	      return [1, 4];
	    } else if (first === PREFIX_8BYTE) {
	      return [1, 8];
	    }

	    return [0, 1];
	  }

	  static writeLength(input) {
	    switch (input.length) {
	      case 2:
	        return new Uint8Array([PREFIX_2BYTE]);

	      case 4:
	        return new Uint8Array([PREFIX_4BYTE]);

	      case 8:
	        return new Uint8Array([PREFIX_8BYTE]);

	      default:
	        return new Uint8Array([]);
	    }
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    // shortcut for BN or Number, don't create an object
	    if ((0, _util$5.isBn)(other) || (0, _util$5.isNumber)(other)) {
	      return super.eq(other);
	    } // convert and compare


	    return super.eq(this.registry.createType('AccountIndex', other));
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toString();
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    const length = GenericAccountIndex.calcLength(this);
	    return (0, _utilCrypto.encodeAddress)(this.toU8a().subarray(0, length), this.registry.chainSS58);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'AccountIndex';
	  }

	}

	exports.GenericAccountIndex = GenericAccountIndex;
	});

	var _AccountIndex = AccountIndex;

	var _AccountId$1 = AccountId$1;

	var LookupSource$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericEthereumLookupSource = exports.ACCOUNT_ID_PREFIX = void 0;











	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
	/** @internal */

	exports.ACCOUNT_ID_PREFIX = ACCOUNT_ID_PREFIX;

	function decodeString(registry, value) {
	  const decoded = (0, _utilCrypto.decodeAddress)(value);
	  return decoded.length === 20 ? registry.createType('EthereumAccountId', decoded) : registry.createType('AccountIndex', (0, _util$5.u8aToBn)(decoded, true));
	}
	/** @internal */


	function decodeU8a(registry, value) {
	  // This allows us to instantiate an address with a raw publicKey. Do this first before
	  // we checking the first byte, otherwise we may split an already-existent valid address
	  if (value.length === 20) {
	    return registry.createType('EthereumAccountId', value);
	  } else if (value[0] === 0xff) {
	    return registry.createType('EthereumAccountId', value.subarray(1));
	  }

	  const [offset, length] = _AccountIndex.GenericAccountIndex.readLength(value);

	  return registry.createType('AccountIndex', (0, _util$5.u8aToBn)(value.subarray(offset, offset + length), true));
	}
	/**
	 * @name GenericEthereumLookupSource
	 * @description
	 * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
	 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
	 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
	 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
	 */


	class GenericEthereumLookupSource extends _Base.Base {
	  constructor(registry, value = new Uint8Array()) {
	    super(registry, GenericEthereumLookupSource._decodeAddress(registry, value));
	  }
	  /** @internal */


	  static _decodeAddress(registry, value) {
	    return value instanceof GenericEthereumLookupSource ? value._raw : value instanceof _AccountId$1.GenericEthereumAccountId || value instanceof _AccountIndex.GenericAccountIndex ? value : (0, _util$5.isBn)(value) || (0, _util$5.isNumber)(value) || (0, _util$5.isBigInt)(value) ? registry.createType('AccountIndex', value) : Array.isArray(value) || (0, _util$5.isHex)(value) || (0, _util$5.isU8a)(value) ? decodeU8a(registry, (0, _util$5.u8aToU8a)(value)) : decodeString(registry, value);
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    const rawLength = this._rawLength;
	    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
	    rawLength > 1 ? 1 : 0);
	  }
	  /**
	   * @description The length of the raw value, either AccountIndex or AccountId
	   */


	  get _rawLength() {
	    return this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Address';
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    const encoded = this._raw.toU8a().subarray(0, this._rawLength);

	    return isBare ? encoded : (0, _util$5.u8aConcat)(this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
	  }

	}

	exports.GenericEthereumLookupSource = GenericEthereumLookupSource;
	});

	var _LookupSource$1 = LookupSource$1;

	var ethereum = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "GenericEthereumAccountId", {
	  enumerable: true,
	  get: function () {
	    return _AccountId$1.GenericEthereumAccountId;
	  }
	});
	Object.defineProperty(exports, "GenericEthereumLookupSource", {
	  enumerable: true,
	  get: function () {
	    return _LookupSource$1.GenericEthereumLookupSource;
	  }
	});
	});

	var AccountId = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericAccountId = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decodeAccountId(value) {
	  if (!value) {
	    return new Uint8Array();
	  } else if ((0, _util$5.isU8a)(value) || Array.isArray(value)) {
	    return (0, _util$5.u8aToU8a)(value);
	  } else if ((0, _util$5.isHex)(value)) {
	    return (0, _util$5.hexToU8a)(value);
	  } else if ((0, _util$5.isString)(value)) {
	    return (0, _utilCrypto.decodeAddress)(value);
	  }

	  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
	}
	/**
	 * @name GenericAccountId
	 * @description
	 * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
	 * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
	 * just a Uint8Array wrapper with a fixed length.
	 */


	class GenericAccountId extends _U8aFixed.U8aFixed {
	  constructor(registry, value) {
	    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)

	    (0, _util$5.assert)(decoded.length >= 32 || !decoded.some(b => b), () => `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
	    super(registry, decoded, 256);
	  }
	  /**
	   * @description Compares the value of the input to see if there is a match
	   */


	  eq(other) {
	    return super.eq(decodeAccountId(other));
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toJSON();
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    return this.toString();
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return (0, _utilCrypto.encodeAddress)(this, this.registry.chainSS58);
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'AccountId';
	  }

	}

	exports.GenericAccountId = GenericAccountId;
	});

	var Block = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericBlock = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name GenericBlock
	 * @description
	 * A block encoded with header and extrinsics
	 */
	class GenericBlock extends _Struct.Struct {
	  constructor(registry, value) {
	    super(registry, {
	      header: 'Header',
	      // eslint-disable-next-line sort-keys
	      extrinsics: 'Vec<Extrinsic>'
	    }, value);
	  }
	  /**
	   * @description Encodes a content [[Hash]] for the block
	   */


	  get contentHash() {
	    return this.registry.hash(this.toU8a());
	  }
	  /**
	   * @description The [[Extrinsic]] contained in the block
	   */


	  get extrinsics() {
	    return this.get('extrinsics');
	  }
	  /**
	   * @description Block/header [[Hash]]
	   */


	  get hash() {
	    return this.header.hash;
	  }
	  /**
	   * @description The [[Header]] of the block
	   */


	  get header() {
	    return this.get('header');
	  }

	}

	exports.GenericBlock = GenericBlock;
	});

	var Call = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericCall = exports.GenericCallIndex = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);











	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	/**
	 * Get a mapping of `argument name -> argument type` for the function, from
	 * its metadata.
	 *
	 * @param meta - The function metadata used to get the definition.
	 * @internal
	 */
	function getArgsDef(registry, meta) {
	  // eslint-disable-next-line @typescript-eslint/no-use-before-define
	  return GenericCall.filterOrigin(meta).reduce((result, {
	    name,
	    type
	  }) => {
	    const Type = (0, _createClass$1.getTypeClass)(registry, (0, _getTypeDef.getTypeDef)(type));
	    result[name.toString()] = Type;
	    return result;
	  }, {});
	}
	/** @internal */


	function decodeCallViaObject(registry, value, _meta) {
	  // we only pass args/methodsIndex out
	  const {
	    args,
	    callIndex
	  } = value; // Get the correct lookupIndex
	  // eslint-disable-next-line @typescript-eslint/no-use-before-define

	  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex; // Find metadata with callIndex

	  const meta = _meta || registry.findMetaCall(lookupIndex).meta;

	  return {
	    args,
	    argsDef: getArgsDef(registry, meta),
	    callIndex,
	    meta
	  };
	}
	/** @internal */


	function decodeCallViaU8a(registry, value, _meta) {
	  // We need 2 bytes for the callIndex
	  const callIndex = new Uint8Array(2);
	  callIndex.set(value.subarray(0, 2), 0); // Find metadata with callIndex

	  const meta = _meta || registry.findMetaCall(callIndex).meta;

	  return {
	    args: value.subarray(2),
	    argsDef: getArgsDef(registry, meta),
	    callIndex,
	    meta
	  };
	}
	/**
	 * Decode input to pass into constructor.
	 *
	 * @param value - Value to decode, one of:
	 * - hex
	 * - Uint8Array
	 * - {@see DecodeMethodInput}
	 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
	 * necessary.
	 * @internal
	 */


	function decodeCall(registry, value = new Uint8Array(), _meta) {
	  if ((0, _util$5.isHex)(value) || (0, _util$5.isU8a)(value)) {
	    return decodeCallViaU8a(registry, (0, _util$5.u8aToU8a)(value), _meta);
	  } else if ((0, _util$5.isObject)(value) && value.callIndex && value.args) {
	    return decodeCallViaObject(registry, value, _meta);
	  }

	  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
	}
	/**
	 * @name GenericCallIndex
	 * @description
	 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
	 */


	class GenericCallIndex extends _U8aFixed.U8aFixed {
	  constructor(registry, value) {
	    super(registry, value, 16);
	  }

	}
	/**
	 * @name GenericCall
	 * @description
	 * Extrinsic function descriptor
	 */


	exports.GenericCallIndex = GenericCallIndex;

	class GenericCall extends _Struct.Struct {
	  constructor(registry, value, meta) {
	    const decoded = decodeCall(registry, value, meta);

	    try {
	      super(registry, {
	        callIndex: GenericCallIndex,
	        // eslint-disable-next-line sort-keys
	        args: _Struct.Struct.with(decoded.argsDef)
	      }, decoded);
	      this._meta = void 0;
	    } catch (error) {
	      let method = 'unknown.unknown';

	      try {
	        const c = registry.findMetaCall(decoded.callIndex);
	        method = `${c.section}.${c.method}`;
	      } catch (error) {// ignore
	      }

	      throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
	    }

	    this._meta = decoded.meta;
	  } // If the extrinsic function has an argument of type `Origin`, we ignore it


	  static filterOrigin(meta) {
	    // FIXME should be `arg.type !== Origin`, but doesn't work...
	    return meta ? meta.args.filter(({
	      type
	    }) => type.toString() !== 'Origin') : [];
	  }
	  /**
	   * @description The arguments for the function call
	   */


	  get args() {
	    // FIXME This should return a Struct instead of an Array
	    return [...this.get('args').values()];
	  }
	  /**
	   * @description The argument definitions
	   */


	  get argsDef() {
	    return getArgsDef(this.registry, this.meta);
	  }
	  /**
	   * @description The encoded `[sectionIndex, methodIndex]` identifier
	   */


	  get callIndex() {
	    return this.get('callIndex').toU8a();
	  }
	  /**
	   * @description The encoded data
	   */


	  get data() {
	    return this.get('args').toU8a();
	  }
	  /**
	   * @description The [[FunctionMetadata]]
	   */


	  get meta() {
	    return this._meta;
	  }
	  /**
	   * @description Returns the name of the method
	   */


	  get method() {
	    return this.registry.findMetaCall(this.callIndex).method;
	  }
	  /**
	   * @description Returns the module containing the method
	   */


	  get section() {
	    return this.registry.findMetaCall(this.callIndex).section;
	  }
	  /**
	   * @description Checks if the source matches this in type
	   */


	  is(other) {
	    return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExpanded) {
	    var _call, _call2;

	    let call;

	    try {
	      call = this.registry.findMetaCall(this.callIndex);
	    } catch (error) {// swallow
	    }

	    return _objectSpread({
	      args: this.args.map(arg => arg.toHuman(isExpanded)),
	      // args: this.args.map((arg, index) => call
	      //   ? { [call.meta.args[index].name.toString()]: arg.toHuman(isExpanded) }
	      //   : arg.toHuman(isExpanded)
	      // ),
	      // callIndex: u8aToHex(this.callIndex),
	      method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,
	      section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section
	    }, isExpanded && call ? {
	      docs: call.meta.docs.map(d => d.toString())
	    } : {});
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Call';
	  }

	}

	exports.GenericCall = GenericCall;
	});

	var ChainProperties = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericChainProperties = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function createValue(registry, type, value, asArray = true) {
	  // We detect codec here as well - when found, generally this is constructed from itself
	  if (value && (0, _util$5.isFunction)(value.unwrapOrDefault)) {
	    return value;
	  }

	  return registry.createType(type, asArray ? (0, _util$5.isNull)(value) || (0, _util$5.isUndefined)(value) ? null : Array.isArray(value) ? value : [value] : value);
	}

	function decodeValue(registry, key, value) {
	  return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;
	}

	function decode(registry, value) {
	  return ( // allow decoding from a map as well (ourselves)
	  value && (0, _util$5.isFunction)(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {
	    all[key] = decodeValue(registry, key, value);
	    return all;
	  }, {
	    ss58Format: registry.createType('Option<u32>'),
	    tokenDecimals: registry.createType('Option<Vec<u32>>'),
	    tokenSymbol: registry.createType('Option<Vec<Text>>')
	  });
	}

	class GenericChainProperties extends _Json.Json {
	  constructor(registry, value) {
	    super(registry, decode(registry, value));
	  }
	  /**
	   * @description The chain ss58Format
	   */


	  get ss58Format() {
	    return this.get('ss58Format');
	  }
	  /**
	   * @description The decimals for each of the tokens
	   */


	  get tokenDecimals() {
	    return this.get('tokenDecimals');
	  }
	  /**
	   * @description The symbols for the tokens
	   */


	  get tokenSymbol() {
	    return this.get('tokenSymbol');
	  }

	}

	exports.GenericChainProperties = GenericChainProperties;
	});

	var ConsensusEngineId = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericConsensusEngineId = exports.CID_POW = exports.CID_GRPA = exports.CID_BABE = exports.CID_AURA = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CID_AURA = (0, _util$5.stringToU8a)('aura');
	exports.CID_AURA = CID_AURA;
	const CID_BABE = (0, _util$5.stringToU8a)('BABE');
	exports.CID_BABE = CID_BABE;
	const CID_GRPA = (0, _util$5.stringToU8a)('FRNK');
	exports.CID_GRPA = CID_GRPA;
	const CID_POW = (0, _util$5.stringToU8a)('pow_');
	/**
	 * @name GenericConsensusEngineId
	 * @description
	 * A 4-byte identifier identifying the engine
	 */

	exports.CID_POW = CID_POW;

	class GenericConsensusEngineId extends _U8aFixed.U8aFixed {
	  constructor(registry, value) {
	    super(registry, (0, _util$5.isNumber)(value) ? (0, _util$5.bnToU8a)(value, {
	      isLe: false
	    }) : value, 32);
	  }
	  /**
	   * @description `true` if the engine matches aura
	   */


	  get isAura() {
	    return this.eq(CID_AURA);
	  }
	  /**
	   * @description `true` is the engine matches babe
	   */


	  get isBabe() {
	    return this.eq(CID_BABE);
	  }
	  /**
	   * @description `true` is the engine matches grandpa
	   */


	  get isGrandpa() {
	    return this.eq(CID_GRPA);
	  }
	  /**
	   * @description `true` is the engine matches pow
	   */


	  get isPow() {
	    return this.eq(CID_POW);
	  }

	  _getAuraAuthor(bytes, sessionValidators) {
	    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new _util$5.BN(sessionValidators.length)).toNumber()];
	  }

	  _getBabeAuthor(bytes, sessionValidators) {
	    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));
	    return sessionValidators[digest.value.toNumber()];
	  }

	  _getBytesAsAuthor(bytes) {
	    return this.registry.createType('AccountId', bytes);
	  }
	  /**
	   * @description From the input bytes, decode into an author
	   */


	  extractAuthor(bytes, sessionValidators) {
	    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {
	      if (this.isAura) {
	        return this._getAuraAuthor(bytes, sessionValidators);
	      } else if (this.isBabe) {
	        return this._getBabeAuthor(bytes, sessionValidators);
	      }
	    } // For pow & Moonbeam, the bytes are the actual author


	    if (this.isPow || bytes.length === 20) {
	      return this._getBytesAsAuthor(bytes);
	    }

	    return undefined;
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman() {
	    return this.toString();
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'ConsensusEngineId';
	  }
	  /**
	   * @description Override the default toString to return a 4-byte string
	   */


	  toString() {
	    return this.isAscii ? (0, _util$5.u8aToString)(this) : (0, _util$5.u8aToHex)(this);
	  }

	}

	exports.GenericConsensusEngineId = GenericConsensusEngineId;
	});

	var _AccountId = AccountId;

	var LookupSource = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericLookupSource = exports.ACCOUNT_ID_PREFIX = void 0;











	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
	/** @internal */

	exports.ACCOUNT_ID_PREFIX = ACCOUNT_ID_PREFIX;

	function decodeString(registry, value) {
	  const decoded = (0, _utilCrypto.decodeAddress)(value);
	  return decoded.length === 32 ? registry.createType('AccountId', decoded) : registry.createType('AccountIndex', (0, _util$5.u8aToBn)(decoded, true));
	}
	/** @internal */


	function decodeU8a(registry, value) {
	  // This allows us to instantiate an address with a raw publicKey. Do this first before
	  // we checking the first byte, otherwise we may split an already-existent valid address
	  if (value.length === 32) {
	    return registry.createType('AccountId', value);
	  } else if (value[0] === 0xff) {
	    return registry.createType('AccountId', value.subarray(1));
	  }

	  const [offset, length] = _AccountIndex.GenericAccountIndex.readLength(value);

	  return registry.createType('AccountIndex', (0, _util$5.u8aToBn)(value.subarray(offset, offset + length), true));
	}
	/**
	 * @name LookupSource
	 * @description
	 * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
	 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
	 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
	 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
	 */


	class GenericLookupSource extends _Base.Base {
	  constructor(registry, value = new Uint8Array()) {
	    super(registry, GenericLookupSource._decodeAddress(registry, value));
	  }
	  /** @internal */


	  static _decodeAddress(registry, value) {
	    return value instanceof GenericLookupSource ? value._raw : value instanceof _AccountId.GenericAccountId || value instanceof _AccountIndex.GenericAccountIndex ? value : (0, _util$5.isBn)(value) || (0, _util$5.isNumber)(value) || (0, _util$5.isBigInt)(value) ? registry.createType('AccountIndex', value) : Array.isArray(value) || (0, _util$5.isHex)(value) || (0, _util$5.isU8a)(value) ? decodeU8a(registry, (0, _util$5.u8aToU8a)(value)) : decodeString(registry, value);
	  }
	  /**
	   * @description The length of the value when encoded as a Uint8Array
	   */


	  get encodedLength() {
	    const rawLength = this._rawLength;
	    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
	    rawLength > 1 ? 1 : 0);
	  }
	  /**
	   * @description The length of the raw value, either AccountIndex or AccountId
	   */


	  get _rawLength() {
	    return this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
	  }
	  /**
	   * @description Returns a hex string representation of the value
	   */


	  toHex() {
	    return (0, _util$5.u8aToHex)(this.toU8a());
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Address';
	  }
	  /**
	   * @description Encodes the value as a Uint8Array as per the SCALE specifications
	   * @param isBare true when the value has none of the type-specific prefixes (internal)
	   */


	  toU8a(isBare) {
	    const encoded = this._raw.toU8a().subarray(0, this._rawLength);

	    return isBare ? encoded : (0, _util$5.u8aConcat)(this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
	  }

	}

	exports.GenericLookupSource = GenericLookupSource;
	});

	var MultiAddress = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericMultiAddress = void 0;











	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function decodeU8a(registry, u8a) {
	  if ([0, 32].includes(u8a.length)) {
	    return {
	      Id: u8a
	    };
	  } else if (u8a.length === 20) {
	    return {
	      Address20: u8a
	    };
	  } else if (u8a.length <= 8) {
	    return {
	      Index: registry.createType('AccountIndex', u8a).toNumber()
	    };
	  }

	  return u8a;
	}

	function decodeMultiAny(registry, value) {
	  if (value instanceof GenericMultiAddress) {
	    return value;
	  } else if (value instanceof _AccountId.GenericAccountId) {
	    return {
	      Id: value
	    };
	  } else if (value instanceof _AccountIndex.GenericAccountIndex || (0, _util$5.isBn)(value) || (0, _util$5.isNumber)(value)) {
	    return {
	      Index: (0, _util$5.isNumber)(value) ? value : value.toNumber()
	    };
	  } else if ((0, _util$5.isString)(value)) {
	    return decodeU8a(registry, (0, _utilCrypto.decodeAddress)(value.toString()));
	  } else if ((0, _util$5.isU8a)(value)) {
	    return decodeU8a(registry, value);
	  }

	  return value;
	}

	class GenericMultiAddress extends _Enum.Enum {
	  constructor(registry, value) {
	    super(registry, {
	      Id: 'AccountId',
	      Index: 'Compact<AccountIndex>',
	      Raw: 'Bytes',
	      // eslint-disable-next-line sort-keys
	      Address32: 'H256',
	      // eslint-disable-next-line sort-keys
	      Address20: 'H160'
	    }, decodeMultiAny(registry, value));
	  }
	  /**
	   * @description Returns the string representation of the value
	   */


	  toString() {
	    return this.value.toString();
	  }

	}

	exports.GenericMultiAddress = GenericMultiAddress;
	});

	var calls = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var codec = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var definitions = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var detect = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var events$2 = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var extrinsic = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var interfaces = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var registry$1 = /*#__PURE__*/Object.freeze({
		__proto__: null
	});

	var _calls = /*@__PURE__*/getAugmentedNamespace(calls);

	var _codec = /*@__PURE__*/getAugmentedNamespace(codec);

	var _definitions = /*@__PURE__*/getAugmentedNamespace(definitions);

	var _detect = /*@__PURE__*/getAugmentedNamespace(detect);

	var _events$1 = /*@__PURE__*/getAugmentedNamespace(events$2);

	var _extrinsic = /*@__PURE__*/getAugmentedNamespace(extrinsic);

	var _interfaces = /*@__PURE__*/getAugmentedNamespace(interfaces);

	var _registry$1 = /*@__PURE__*/getAugmentedNamespace(registry$1);

	var types$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_types$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _types$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _types$1[key];
	    }
	  });
	});



	Object.keys(_calls).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _calls[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _calls[key];
	    }
	  });
	});



	Object.keys(_codec).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _codec[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _codec[key];
	    }
	  });
	});



	Object.keys(_definitions).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _definitions[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _definitions[key];
	    }
	  });
	});



	Object.keys(_detect).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _detect[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _detect[key];
	    }
	  });
	});



	Object.keys(_events$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _events$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _events$1[key];
	    }
	  });
	});



	Object.keys(_extrinsic).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _extrinsic[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _extrinsic[key];
	    }
	  });
	});



	Object.keys(_interfaces).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _interfaces[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _interfaces[key];
	    }
	  });
	});



	Object.keys(_registry$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _registry$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _registry$1[key];
	    }
	  });
	});
	});

	var _encodeTypes = encodeTypes;

	var _index$b = types$1;

	var PortableRegistry = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericPortableRegistry = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);











	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Alias the primitive enum with out known values
	const PRIMITIVE_ALIAS = {
	  Char: 'u32',
	  // Rust char is 4-bytes
	  Str: 'Text'
	}; // These are types where we have a specific decoding/encoding override + helpers

	const PRIMITIVE_PATHS = [// match {node, polkadot, ...}_runtime
	'*_runtime::Call', '*_runtime::Event', // these have a specific encoding or logic (for pallets)
	'pallet_democracy::vote::Vote', 'pallet_identity::types::Data', // these are well-known types with additional encoding
	'sp_core::crypto::AccountId32', 'sp_runtime::generic::era::Era', 'sp_runtime::multiaddress::MultiAddress', // shorten some well-known types
	'primitive_types::*', 'sp_arithmetic::per_things::*', // ink!
	'ink_env::types::*'].map(p => p.split('::')); // Mappings for types that should be converted to set via BitVec

	const SETS = ['pallet_identity::types::BitFlags'].map(p => p.split('::')); // These we never use these as top-level names, they are wrappers

	const WRAPPERS = ['BoundedBTreeMap', 'BoundedVec', 'Box', 'BTreeMap', 'Cow', 'Result', 'Option', 'WeakBoundedVec']; // These are reserved and/or conflicts with built-in Codec definitions

	const RESERVED = ['call', 'entries', 'hash', 'keys', 'new', 'size'];

	function matchParts(first, second) {
	  return first.length === second.length && first.every((a, index) => {
	    const b = second[index].toString();
	    return a === '*' || a === b || a.includes('*') && a.includes('_') && b.includes('_') && matchParts(a.split('_'), b.split('_'));
	  });
	} // check if the path matches the PRIMITIVE_SP (with wildcards)


	function getPrimitivePath(path) {
	  // TODO We need to handle ink! Balance in some way
	  return path.length && PRIMITIVE_PATHS.some(p => matchParts(p, path)) ? path[path.length - 1].toString() : null;
	}

	function removeDuplicateNames(names) {
	  return names.map(([lookupIndex, name]) => [lookupIndex, !name || names.some(([oIndex, oName]) => name === oName && lookupIndex !== oIndex) ? null : name]);
	}

	function extractName(types, id, {
	  params,
	  path
	}) {
	  const lookupIndex = id.toNumber();

	  if (!path.length || WRAPPERS.includes(path[path.length - 1].toString())) {
	    return [lookupIndex, null];
	  }

	  const parts = path.map(p => (0, _util$5.stringUpperFirst)((0, _util$5.stringCamelCase)(p))).filter((p, index) => ( // Remove ::{pallet, traits, types}::
	  index !== 1 || !['Pallet', 'Traits', 'Types'].includes(p.toString())) && ( // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
	  // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
	  index === path.length - 1 || p.toLowerCase() !== path[index + 1].toLowerCase()));
	  let typeName = parts.join('');

	  if (parts.length === 2 && parts[parts.length - 1] === 'RawOrigin' && params.length === 2 && params[1].type.isSome) {
	    // Do magic for RawOrigin lookup
	    const instanceType = types[params[1].type.unwrap().toNumber()];

	    if (instanceType.type.path.length === 2) {
	      typeName = `${typeName}${instanceType.type.path[1].toString()}`;
	    }
	  }

	  return [lookupIndex, typeName];
	}

	function extractNames(registry, types) {
	  const dedup = removeDuplicateNames(types.map(({
	    id,
	    type
	  }) => extractName(types, id, type)));
	  const [names, typesNew] = dedup.reduce(([names, types], [lookupIndex, name], index) => {
	    if (name) {
	      // We set the name for this specific type
	      names[index] = name; // we map to the actual lookupIndex

	      types[name] = registry.createLookupType(lookupIndex);
	    }

	    return [names, types];
	  }, [{}, {}]);
	  registry.register(typesNew);
	  return names;
	}

	var _names = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("names");

	var _typeDefs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("typeDefs");

	var _createSiDef = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("createSiDef");

	var _getLookupId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("getLookupId");

	var _extract = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extract");

	var _extractArray = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractArray");

	var _extractBitSequence = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractBitSequence");

	var _extractCompact = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractCompact");

	var _extractComposite = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractComposite");

	var _extractCompositeSet = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractCompositeSet");

	var _extractFields = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractFields");

	var _extractFieldsAlias = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractFieldsAlias");

	var _extractHistoric = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractHistoric");

	var _extractPrimitive = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractPrimitive");

	var _extractPrimitivePath = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractPrimitivePath");

	var _extractSequence = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractSequence");

	var _extractTuple = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractTuple");

	var _extractVariant = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractVariant");

	var _extractVariantEnum = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractVariantEnum");

	class GenericPortableRegistry extends _Struct.Struct {
	  constructor(registry, value) {
	    super(registry, {
	      types: 'Vec<PortableType>'
	    }, value);
	    Object.defineProperty(this, _extractVariantEnum, {
	      value: _extractVariantEnum2
	    });
	    Object.defineProperty(this, _extractVariant, {
	      value: _extractVariant2
	    });
	    Object.defineProperty(this, _extractTuple, {
	      value: _extractTuple2
	    });
	    Object.defineProperty(this, _extractSequence, {
	      value: _extractSequence2
	    });
	    Object.defineProperty(this, _extractPrimitivePath, {
	      value: _extractPrimitivePath2
	    });
	    Object.defineProperty(this, _extractPrimitive, {
	      value: _extractPrimitive2
	    });
	    Object.defineProperty(this, _extractHistoric, {
	      value: _extractHistoric2
	    });
	    Object.defineProperty(this, _extractFieldsAlias, {
	      value: _extractFieldsAlias2
	    });
	    Object.defineProperty(this, _extractFields, {
	      value: _extractFields2
	    });
	    Object.defineProperty(this, _extractCompositeSet, {
	      value: _extractCompositeSet2
	    });
	    Object.defineProperty(this, _extractComposite, {
	      value: _extractComposite2
	    });
	    Object.defineProperty(this, _extractCompact, {
	      value: _extractCompact2
	    });
	    Object.defineProperty(this, _extractBitSequence, {
	      value: _extractBitSequence2
	    });
	    Object.defineProperty(this, _extractArray, {
	      value: _extractArray2
	    });
	    Object.defineProperty(this, _extract, {
	      value: _extract2
	    });
	    Object.defineProperty(this, _getLookupId, {
	      value: _getLookupId2
	    });
	    Object.defineProperty(this, _createSiDef, {
	      value: _createSiDef2
	    });
	    Object.defineProperty(this, _names, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _typeDefs, {
	      writable: true,
	      value: {}
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names] = extractNames(registry, this.types);
	  }
	  /**
	   * @description The types of the registry
	   */


	  get types() {
	    return this.get('types');
	  }
	  /**
	   * @description Finds a specific type in the registry
	   */


	  getSiType(lookupId) {
	    const found = this.types[(0, _classPrivateFieldLooseBase2.default)(this, _getLookupId)[_getLookupId](lookupId)];

	    (0, _util$5.assert)(found, () => `PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
	    return found.type;
	  }
	  /**
	   * @description Lookup the type definition for the index
	   */


	  getTypeDef(lookupId) {
	    const lookupIndex = (0, _classPrivateFieldLooseBase2.default)(this, _getLookupId)[_getLookupId](lookupId);

	    if (!(0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex]) {
	      // we set first since we will get into circular lookups along the way
	      (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex] = {
	        info: _index$b.TypeDefInfo.DoNotConstruct,
	        lookupIndex,
	        lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
	        type: this.registry.createLookupType(lookupIndex)
	      };

	      const extracted = (0, _classPrivateFieldLooseBase2.default)(this, _extract)[_extract](this.getSiType(lookupId), lookupIndex);

	      Object.keys(extracted).forEach(k => {
	        if (k !== 'lookupName' || extracted[k]) {
	          // these are safe since we are looking through the keys as set
	          (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex][k] = extracted[k];
	        }
	      }); // don't set lookupName on lower-level, we want to always direct to the type

	      if (extracted.info === _index$b.TypeDefInfo.Plain) {
	        (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex].lookupNameRoot = (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
	        delete (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
	      }
	    }

	    return (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex];
	  }

	}

	exports.GenericPortableRegistry = GenericPortableRegistry;

	function _createSiDef2(lookupId) {
	  const typeDef = this.getTypeDef(lookupId);
	  const lookupIndex = lookupId.toNumber(); // Setup for a lookup on complex types

	  return [_index$b.TypeDefInfo.Enum, _index$b.TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
	    docs: typeDef.docs,
	    info: _index$b.TypeDefInfo.Si,
	    lookupIndex,
	    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
	    type: this.registry.createLookupType(lookupId)
	  } : typeDef;
	}

	function _getLookupId2(lookupId) {
	  if ((0, _util$5.isString)(lookupId)) {
	    (0, _util$5.assert)(this.registry.isLookupType(lookupId), () => `PortableRegistry: Expected a lookup string type, found ${lookupId}`);
	    return parseInt(lookupId.replace('Lookup', ''), 10);
	  } else if ((0, _util$5.isNumber)(lookupId)) {
	    return lookupId;
	  }

	  return lookupId.toNumber();
	}

	function _extract2(type, lookupIndex) {
	  const namespace = [...type.path].join('::');
	  let typeDef;
	  const primType = getPrimitivePath(type.path);

	  try {
	    if (primType) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractPrimitivePath)[_extractPrimitivePath](lookupIndex, primType);
	    } else if (type.def.isArray) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractArray)[_extractArray](lookupIndex, type.def.asArray);
	    } else if (type.def.isBitSequence) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractBitSequence)[_extractBitSequence](lookupIndex, type.def.asBitSequence);
	    } else if (type.def.isCompact) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractCompact)[_extractCompact](lookupIndex, type.def.asCompact);
	    } else if (type.def.isComposite) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractComposite)[_extractComposite](lookupIndex, type, type.def.asComposite);
	    } else if (type.def.isHistoricMetaCompat) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractHistoric)[_extractHistoric](lookupIndex, type.def.asHistoricMetaCompat);
	    } else if (type.def.isPrimitive) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractPrimitive)[_extractPrimitive](lookupIndex, type);
	    } else if (type.def.isSequence) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractSequence)[_extractSequence](lookupIndex, type.def.asSequence);
	    } else if (type.def.isTuple) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractTuple)[_extractTuple](lookupIndex, type.def.asTuple);
	    } else if (type.def.isVariant) {
	      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractVariant)[_extractVariant](lookupIndex, type, type.def.asVariant);
	    } else {
	      throw new Error(`No SiTypeDef handler for ${type.def.toString()}`);
	    }
	  } catch (error) {
	    throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${(0, _util$5.stringify)(type)}: ${error.message}`);
	  }

	  return _objectSpread({
	    docs: type.docs.map(d => d.toString()),
	    namespace
	  }, typeDef);
	}

	function _extractArray2(_, {
	  len: length,
	  type
	}) {
	  (0, _util$5.assert)(!length || length.toNumber() <= 256, 'Only support for [Type; <length>], where length <= 256');
	  return (0, _encodeTypes.withTypeString)(this.registry, {
	    info: _index$b.TypeDefInfo.VecFixed,
	    length: length.toNumber(),
	    sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type)
	  });
	}

	function _extractBitSequence2(_, {
	  bitOrderType,
	  bitStoreType
	}) {
	  const bitOrder = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](bitOrderType);

	  const bitStore = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](bitStoreType); // NOTE: Currently the BitVec type is one-way only, i.e. we only use it to decode, not
	  // re-encode stuff. As such we ignore the msb/lsb identifier given by bitOrderType, or rather
	  // we don't pass it though at all


	  (0, _util$5.assert)(['bitvec::order::Lsb0', 'bitvec::order::Msb0'].includes(bitOrder.namespace || ''), () => `Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
	  (0, _util$5.assert)(bitStore.info === _index$b.TypeDefInfo.Plain && bitStore.type === 'u8', () => `Only u8 bitStore is currently supported, found ${bitStore.type}`);
	  return {
	    info: _index$b.TypeDefInfo.Plain,
	    type: 'BitVec'
	  };
	}

	function _extractCompact2(_, {
	  type
	}) {
	  return (0, _encodeTypes.withTypeString)(this.registry, {
	    info: _index$b.TypeDefInfo.Compact,
	    sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type)
	  });
	}

	function _extractComposite2(lookupIndex, {
	  params,
	  path
	}, {
	  fields
	}) {
	  const specialVariant = path[0].toString();

	  if (path.length === 1 && specialVariant === 'BTreeMap') {
	    return (0, _encodeTypes.withTypeString)(this.registry, {
	      info: _index$b.TypeDefInfo.BTreeMap,
	      sub: params.map(({
	        type
	      }) => (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type.unwrap()))
	    });
	  } else if (['Range', 'RangeInclusive'].includes(specialVariant)) {
	    return (0, _encodeTypes.withTypeString)(this.registry, {
	      info: _index$b.TypeDefInfo.Range,
	      sub: fields.map(({
	        name,
	        type
	      }, index) => _objectSpread({
	        name: name.isSome ? name.unwrap().toString() : ['start', 'end'][index]
	      }, (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type)))
	    });
	  }

	  return SETS.some(p => matchParts(p, path)) ? (0, _classPrivateFieldLooseBase2.default)(this, _extractCompositeSet)[_extractCompositeSet](lookupIndex, params, fields) : (0, _classPrivateFieldLooseBase2.default)(this, _extractFields)[_extractFields](lookupIndex, fields);
	}

	function _extractCompositeSet2(_, params, fields) {
	  (0, _util$5.assert)(params.length === 1 && fields.length === 1, 'Set handling expects param/field as single entries');
	  return (0, _encodeTypes.withTypeString)(this.registry, {
	    info: _index$b.TypeDefInfo.Set,
	    length: this.registry.createType(this.registry.createLookupType(fields[0].type)).bitLength(),
	    sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({
	      index,
	      name
	    }) => ({
	      // This will be an issue > 2^53 - 1 ... don't have those (yet)
	      index: index.toNumber(),
	      info: _index$b.TypeDefInfo.Plain,
	      name: name.toString(),
	      type: 'Null'
	    }))
	  });
	}

	function _extractFields2(lookupIndex, fields) {
	  const [isStruct, isTuple] = fields.reduce(([isAllNamed, isAllUnnamed], {
	    name
	  }) => [isAllNamed && name.isSome, isAllUnnamed && name.isNone], [true, true]);
	  (0, _util$5.assert)(isTuple || isStruct, 'Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');

	  if (fields.length === 0) {
	    return {
	      info: _index$b.TypeDefInfo.Null,
	      type: 'Null'
	    };
	  } else if (isTuple && fields.length === 1) {
	    const typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](fields[0].type);

	    return _objectSpread(_objectSpread({}, typeDef), lookupIndex === -1 ? {} : {
	      lookupIndex,
	      lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
	      lookupNameRoot: typeDef.lookupName
	    });
	  }

	  const [sub, alias] = (0, _classPrivateFieldLooseBase2.default)(this, _extractFieldsAlias)[_extractFieldsAlias](fields);

	  return (0, _encodeTypes.withTypeString)(this.registry, _objectSpread(_objectSpread(_objectSpread({
	    info: isTuple // Tuple check first
	    ? _index$b.TypeDefInfo.Tuple : _index$b.TypeDefInfo.Struct
	  }, alias.size ? {
	    alias
	  } : {}), lookupIndex === -1 ? {} : {
	    lookupIndex,
	    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex]
	  }), {}, {
	    sub
	  }));
	}

	function _extractFieldsAlias2(fields) {
	  const alias = new Map();
	  const sub = fields.map(({
	    docs,
	    name,
	    type
	  }) => {
	    const typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type);

	    if (name.isNone) {
	      return typeDef;
	    }

	    let nameField = (0, _util$5.stringCamelCase)(name.unwrap());
	    let nameOrig = null;

	    if (nameField.includes('#')) {
	      nameOrig = nameField;
	      nameField = nameOrig.replace(/#/g, '_');
	    } else if (RESERVED.includes(nameField)) {
	      nameOrig = nameField;
	      nameField = `${nameField}_`;
	    }

	    if (nameOrig) {
	      alias.set(nameField, nameOrig);
	    }

	    return _objectSpread(_objectSpread({}, typeDef), {}, {
	      docs: docs.map(d => d.toString()),
	      name: nameField
	    });
	  });
	  return [sub, alias];
	}

	function _extractHistoric2(_, type) {
	  return _objectSpread(_objectSpread({}, (0, _getTypeDef.getTypeDef)(type)), {}, {
	    displayName: type.toString(),
	    isFromSi: true
	  });
	}

	function _extractPrimitive2(_, type) {
	  const typeStr = type.def.asPrimitive.type.toString();
	  return {
	    info: _index$b.TypeDefInfo.Plain,
	    type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
	  };
	}

	function _extractPrimitivePath2(_, type) {
	  return {
	    info: _index$b.TypeDefInfo.Plain,
	    type
	  };
	}

	function _extractSequence2(lookupIndex, {
	  type
	}) {
	  const sub = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type);

	  if (sub.type === 'u8') {
	    return {
	      info: _index$b.TypeDefInfo.Plain,
	      type: 'Bytes'
	    };
	  }

	  return (0, _encodeTypes.withTypeString)(this.registry, {
	    info: _index$b.TypeDefInfo.Vec,
	    lookupIndex,
	    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
	    sub
	  });
	}

	function _extractTuple2(lookupIndex, ids) {
	  if (ids.length === 0) {
	    return {
	      info: _index$b.TypeDefInfo.Null,
	      type: 'Null'
	    };
	  } else if (ids.length === 1) {
	    return this.getTypeDef(ids[0]);
	  }

	  const sub = ids.map(type => (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type));
	  return (0, _encodeTypes.withTypeString)(this.registry, {
	    info: _index$b.TypeDefInfo.Tuple,
	    lookupIndex,
	    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
	    sub
	  });
	}

	function _extractVariant2(lookupIndex, {
	  params,
	  path
	}, {
	  variants
	}) {
	  const specialVariant = path[0].toString();

	  if (specialVariant === 'Option') {
	    return (0, _encodeTypes.withTypeString)(this.registry, {
	      info: _index$b.TypeDefInfo.Option,
	      sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
	    });
	  } else if (specialVariant === 'Result') {
	    return (0, _encodeTypes.withTypeString)(this.registry, {
	      info: _index$b.TypeDefInfo.Result,
	      sub: params.map(({
	        type
	      }, index) => _objectSpread({
	        name: ['Ok', 'Error'][index]
	      }, (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type.unwrap())))
	    });
	  } else if (variants.length === 0) {
	    return {
	      info: _index$b.TypeDefInfo.Null,
	      type: 'Null'
	    };
	  }

	  return (0, _classPrivateFieldLooseBase2.default)(this, _extractVariantEnum)[_extractVariantEnum](lookupIndex, variants);
	}

	function _extractVariantEnum2(lookupIndex, variants) {
	  const sub = []; // we may get entries out of order, arrange them first before creating with gaps filled
	  // NOTE: Since we mutate, use a copy of the array as an input

	  [...variants].sort((a, b) => a.index.cmp(b.index)).forEach(({
	    fields,
	    index,
	    name
	  }) => {
	    const desired = index.toNumber();

	    while (sub.length !== desired) {
	      sub.push({
	        index: sub.length,
	        info: _index$b.TypeDefInfo.Null,
	        name: `Unused${sub.length}`,
	        type: 'Null'
	      });
	    }

	    sub.push(_objectSpread(_objectSpread({}, (0, _classPrivateFieldLooseBase2.default)(this, _extractFields)[_extractFields](-1, fields)), {}, {
	      index: index.toNumber(),
	      name: name.toString()
	    }));
	  });
	  return (0, _encodeTypes.withTypeString)(this.registry, {
	    info: _index$b.TypeDefInfo.Enum,
	    lookupIndex,
	    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
	    sub
	  });
	}
	});

	var Vote = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GenericVote = void 0;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction
	const AYE_BITS = 0b10000000;
	const NAY_BITS = 0b00000000;
	const CON_MASK = 0b01111111;
	const DEF_CONV = 0b00000000; // the default conviction, None

	/** @internal */

	function decodeVoteBool(value) {
	  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
	}
	/** @internal */


	function decodeVoteU8a(value) {
	  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
	}
	/** @internal */


	function decodeVoteType(registry, value) {
	  const vote = new _Bool.bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;
	  const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);
	  return new Uint8Array([vote | conviction.index]);
	}
	/** @internal */


	function decodeVote(registry, value) {
	  if ((0, _util$5.isUndefined)(value) || value instanceof Boolean || (0, _util$5.isBoolean)(value)) {
	    return decodeVoteBool(new _Bool.bool(registry, value).isTrue);
	  } else if ((0, _util$5.isNumber)(value)) {
	    return decodeVoteBool(value < 0);
	  } else if ((0, _util$5.isU8a)(value)) {
	    return decodeVoteU8a(value);
	  }

	  return decodeVoteType(registry, value);
	}
	/**
	 * @name GenericVote
	 * @description
	 * A number of lock periods, plus a vote, one way or the other.
	 */


	class GenericVote extends _U8aFixed.U8aFixed {
	  constructor(registry, value) {
	    // decoded is just 1 byte
	    // Aye: Most Significant Bit
	    // Conviction: 0000 - 0101
	    const decoded = decodeVote(registry, value);
	    super(registry, decoded, 8);
	    this._aye = void 0;
	    this._conviction = void 0;
	    this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;
	    this._conviction = this.registry.createType('Conviction', decoded[0] & CON_MASK);
	  }
	  /**
	   * @description returns a V2 conviction
	   */


	  get conviction() {
	    return this._conviction;
	  }
	  /**
	   * @description true if the wrapped value is a positive vote
	   */


	  get isAye() {
	    return this._aye;
	  }
	  /**
	   * @description true if the wrapped value is a negative vote
	   */


	  get isNay() {
	    return !this.isAye;
	  }
	  /**
	   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
	   */


	  toHuman(isExpanded) {
	    return {
	      conviction: this.conviction.toHuman(isExpanded),
	      vote: this.isAye ? 'Aye' : 'Nay'
	    };
	  }
	  /**
	   * @description Returns the base runtime type name for this instance
	   */


	  toRawType() {
	    return 'Vote';
	  }

	}

	exports.GenericVote = GenericVote;
	});

	var _index$a = ethereum;

	var _Block = Block;

	var _Call = Call;

	var _ChainProperties = ChainProperties;

	var _ConsensusEngineId = ConsensusEngineId;

	var _Event = Event;

	var _LookupSource = LookupSource;

	var _MultiAddress = MultiAddress;

	var _PortableRegistry = PortableRegistry;

	var _Vote = Vote;

	var generic = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  GenericAccountId: true,
	  GenericAccountIndex: true,
	  GenericBlock: true,
	  GenericCall: true,
	  GenericChainProperties: true,
	  GenericConsensusEngineId: true,
	  GenericEvent: true,
	  GenericEventData: true,
	  GenericLookupSource: true,
	  GenericMultiAddress: true,
	  GenericAddress: true,
	  GenericPortableRegistry: true,
	  GenericVote: true
	};
	Object.defineProperty(exports, "GenericAccountId", {
	  enumerable: true,
	  get: function () {
	    return _AccountId.GenericAccountId;
	  }
	});
	Object.defineProperty(exports, "GenericAccountIndex", {
	  enumerable: true,
	  get: function () {
	    return _AccountIndex.GenericAccountIndex;
	  }
	});
	Object.defineProperty(exports, "GenericBlock", {
	  enumerable: true,
	  get: function () {
	    return _Block.GenericBlock;
	  }
	});
	Object.defineProperty(exports, "GenericCall", {
	  enumerable: true,
	  get: function () {
	    return _Call.GenericCall;
	  }
	});
	Object.defineProperty(exports, "GenericChainProperties", {
	  enumerable: true,
	  get: function () {
	    return _ChainProperties.GenericChainProperties;
	  }
	});
	Object.defineProperty(exports, "GenericConsensusEngineId", {
	  enumerable: true,
	  get: function () {
	    return _ConsensusEngineId.GenericConsensusEngineId;
	  }
	});
	Object.defineProperty(exports, "GenericEvent", {
	  enumerable: true,
	  get: function () {
	    return _Event.GenericEvent;
	  }
	});
	Object.defineProperty(exports, "GenericEventData", {
	  enumerable: true,
	  get: function () {
	    return _Event.GenericEventData;
	  }
	});
	Object.defineProperty(exports, "GenericLookupSource", {
	  enumerable: true,
	  get: function () {
	    return _LookupSource.GenericLookupSource;
	  }
	});
	Object.defineProperty(exports, "GenericMultiAddress", {
	  enumerable: true,
	  get: function () {
	    return _MultiAddress.GenericMultiAddress;
	  }
	});
	Object.defineProperty(exports, "GenericAddress", {
	  enumerable: true,
	  get: function () {
	    return _MultiAddress.GenericMultiAddress;
	  }
	});
	Object.defineProperty(exports, "GenericPortableRegistry", {
	  enumerable: true,
	  get: function () {
	    return _PortableRegistry.GenericPortableRegistry;
	  }
	});
	Object.defineProperty(exports, "GenericVote", {
	  enumerable: true,
	  get: function () {
	    return _Vote.GenericVote;
	  }
	});



	Object.keys(_index$a).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index$a[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$a[key];
	    }
	  });
	});
	});

	var _index$9 = extrinsic$1;

	var _index2$4 = generic;

	var index_types = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_index$9).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _index$9[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$9[key];
	    }
	  });
	});



	Object.keys(_index2$4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _index2$4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index2$4[key];
	    }
	  });
	});



	Object.keys(_index$d).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _index$d[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$d[key];
	    }
	  });
	});
	});

	var toV10_2 = toV10;

	var _defineProperty2$l = interopRequireDefault(defineProperty);

	function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$l(Object(source), true).forEach(function (key) { (0, _defineProperty2$l.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// migrate a storage hasher type
	// see https://github.com/paritytech/substrate/pull/4462

	/** @internal */
	function createStorageHasher(registry, hasher) {
	  // Blake2_128_Concat has been added at index 2, so we increment all the
	  // indexes greater than 2
	  if (hasher.toNumber() >= 2) {
	    return registry.createType('StorageHasherV10', hasher.toNumber() + 1);
	  }

	  return registry.createType('StorageHasherV10', hasher);
	}
	/** @internal */


	function createStorageType(registry, entryType) {
	  if (entryType.isMap) {
	    return [_objectSpread$l(_objectSpread$l({}, entryType.asMap), {}, {
	      hasher: createStorageHasher(registry, entryType.asMap.hasher)
	    }), 1];
	  }

	  if (entryType.isDoubleMap) {
	    return [_objectSpread$l(_objectSpread$l({}, entryType.asDoubleMap), {}, {
	      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
	      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
	    }), 2];
	  }

	  return [entryType.asPlain, 0];
	}
	/** @internal */


	function convertModule(registry, mod) {
	  const storage = mod.storage.unwrapOr(null);
	  return registry.createType('ModuleMetadataV10', _objectSpread$l(_objectSpread$l({}, mod), {}, {
	    storage: storage ? _objectSpread$l(_objectSpread$l({}, storage), {}, {
	      items: storage.items.map(item => _objectSpread$l(_objectSpread$l({}, item), {}, {
	        type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))
	      }))
	    }) : null
	  }));
	}
	/** @internal */


	function toV10(registry, {
	  modules
	}) {
	  return registry.createType('MetadataV10', {
	    modules: modules.map(mod => convertModule(registry, mod))
	  });
	}

	var toV10_1 = /*#__PURE__*/Object.defineProperty({
		toV10: toV10_2
	}, '__esModule', {value: true});

	var toV11_2 = toV11;

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function toV11(registry, {
	  modules
	}) {
	  return registry.createType('MetadataV11', {
	    // This is new in V11, pass V0 here - something non-existing, telling the API to use
	    // the fallback for this information (on-chain detection)
	    extrinsic: {
	      signedExtensions: [],
	      version: 0
	    },
	    modules
	  });
	}

	var toV11_1 = /*#__PURE__*/Object.defineProperty({
		toV11: toV11_2
	}, '__esModule', {value: true});

	var toV12_2 = toV12;

	var _defineProperty2$k = interopRequireDefault(defineProperty);

	function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$k(Object(source), true).forEach(function (key) { (0, _defineProperty2$k.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @internal
	 **/
	function toV12(registry, {
	  extrinsic,
	  modules
	}) {
	  return registry.createType('MetadataV12', {
	    extrinsic,
	    modules: modules.map(mod => registry.createType('ModuleMetadataV12', _objectSpread$k(_objectSpread$k({}, mod), {}, {
	      index: 255
	    })))
	  });
	}

	var toV12_1 = /*#__PURE__*/Object.defineProperty({
		toV12: toV12_2
	}, '__esModule', {value: true});

	var toV13_2 = toV13;

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @internal
	 **/
	function toV13(registry, metadata) {
	  return registry.createType('MetadataV13', metadata);
	}

	var toV13_1 = /*#__PURE__*/Object.defineProperty({
		toV13: toV13_2
	}, '__esModule', {value: true});

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$6.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo2$1.packageInfo]);

	var chain$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Type overrides based on specific nodes
	const typesChain = {};
	var _default = typesChain;
	exports.default = _default;
	});

	var modules = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// type overrides for modules (where duplication between modules exist)
	const typesModules = {
	  assets: {
	    Approval: 'AssetApproval',
	    ApprovalKey: 'AssetApprovalKey',
	    Balance: 'TAssetBalance',
	    DestroyWitness: 'AssetDestroyWitness'
	  },
	  babe: {
	    EquivocationProof: 'BabeEquivocationProof'
	  },
	  balances: {
	    Status: 'BalanceStatus'
	  },
	  beefy: {
	    AuthorityId: 'BeefyId'
	  },
	  contracts: {
	    StorageKey: 'ContractStorageKey'
	  },
	  electionProviderMultiPhase: {
	    Phase: 'ElectionPhase'
	  },
	  ethereum: {
	    Block: 'EthBlock',
	    Header: 'EthHeader',
	    Receipt: 'EthReceipt',
	    Transaction: 'EthTransaction',
	    TransactionStatus: 'EthTransactionStatus'
	  },
	  evm: {
	    Account: 'EvmAccount',
	    Log: 'EvmLog',
	    Vicinity: 'EvmVicinity'
	  },
	  grandpa: {
	    Equivocation: 'GrandpaEquivocation',
	    EquivocationProof: 'GrandpaEquivocationProof'
	  },
	  identity: {
	    Judgement: 'IdentityJudgement'
	  },
	  inclusion: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  paraInclusion: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  paraScheduler: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  paraShared: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  parachains: {
	    Id: 'ParaId'
	  },
	  parasInclusion: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  parasScheduler: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  parasShared: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  proposeParachain: {
	    Proposal: 'ParachainProposal'
	  },
	  proxy: {
	    Announcement: 'ProxyAnnouncement'
	  },
	  scheduler: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  shared: {
	    ValidatorIndex: 'ParaValidatorIndex'
	  },
	  society: {
	    Judgement: 'SocietyJudgement',
	    Vote: 'SocietyVote'
	  },
	  staking: {
	    Compact: 'CompactAssignments'
	  },
	  treasury: {
	    Proposal: 'TreasuryProposal'
	  },
	  xcm: {
	    AssetId: 'XcmAssetId'
	  },
	  xcmPallet: {
	    AssetId: 'XcmAssetId'
	  }
	};
	var _default = typesModules;
	exports.default = _default;
	});

	var centrifugeChain = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const sharedTypes = {
	  // Anchor
	  AnchorData: {
	    anchoredBlock: 'u64',
	    docRoot: 'H256',
	    id: 'H256'
	  },
	  PreCommitData: {
	    expirationBlock: 'u64',
	    identity: 'H256',
	    signingRoot: 'H256'
	  },
	  // Fees
	  Fee: {
	    key: 'Hash',
	    price: 'Balance'
	  },
	  // MultiAccount
	  MultiAccountData: {
	    deposit: 'Balance',
	    depositor: 'AccountId',
	    signatories: 'Vec<AccountId>',
	    threshold: 'u16'
	  },
	  // Bridge
	  ChainId: 'u8',
	  DepositNonce: 'u64',
	  ResourceId: '[u8; 32]',
	  'chainbridge::ChainId': 'u8',
	  // NFT
	  RegistryId: 'H160',
	  TokenId: 'U256',
	  AssetId: {
	    registryId: 'RegistryId',
	    tokenId: 'TokenId'
	  },
	  AssetInfo: {
	    metadata: 'Bytes'
	  },
	  MintInfo: {
	    anchorId: 'Hash',
	    proofs: 'Vec<ProofMint>',
	    staticHashes: '[Hash; 3]'
	  },
	  Proof: {
	    leafHash: 'H256',
	    sortedHashes: 'H256'
	  },
	  ProofMint: {
	    hashes: 'Vec<Hash>',
	    property: 'Bytes',
	    salt: '[u8; 32]',
	    value: 'Bytes'
	  },
	  RegistryInfo: {
	    fields: 'Vec<Bytes>',
	    ownerCanBurn: 'bool'
	  }
	};
	const versioned = [{
	  minmax: [240, 999],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AccountInfo: 'AccountInfoWithRefCount',
	    Address: 'LookupSource',
	    LookupSource: 'IndicesLookupSource',
	    Multiplier: 'Fixed64',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [1000, undefined],
	  types: _objectSpread({}, sharedTypes)
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var kusama$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const sharedTypes = {
	  CompactAssignments: 'CompactAssignmentsWith24',
	  RawSolution: 'RawSolutionWith24',
	  Keys: 'SessionKeys6',
	  ProxyType: {
	    _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
	  }
	};
	const addrIndicesTypes = {
	  AccountInfo: 'AccountInfoWithRefCount',
	  Address: 'LookupSource',
	  CompactAssignments: 'CompactAssignmentsWith16',
	  RawSolution: 'RawSolutionWith16',
	  Keys: 'SessionKeys5',
	  LookupSource: 'IndicesLookupSource',
	  ValidatorPrefs: 'ValidatorPrefsWithCommission'
	};
	const addrAccountIdTypes = {
	  AccountInfo: 'AccountInfoWithRefCount',
	  Address: 'AccountId',
	  CompactAssignments: 'CompactAssignmentsWith16',
	  RawSolution: 'RawSolutionWith16',
	  Keys: 'SessionKeys5',
	  LookupSource: 'AccountId',
	  ValidatorPrefs: 'ValidatorPrefsWithCommission'
	};
	const versioned = [{
	  // 1020 is first CC3
	  minmax: [1019, 1031],
	  types: _objectSpread(_objectSpread({}, addrIndicesTypes), {}, {
	    BalanceLock: 'BalanceLockTo212',
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchError: 'DispatchErrorTo198',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    Keys: 'SessionKeys5',
	    Multiplier: 'Fixed64',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259',
	    ReferendumInfo: 'ReferendumInfoTo239',
	    SlashingSpans: 'SlashingSpansTo204',
	    StakingLedger: 'StakingLedgerTo223',
	    Votes: 'VotesTo230',
	    Weight: 'u32'
	  })
	}, {
	  minmax: [1032, 1042],
	  types: _objectSpread(_objectSpread({}, addrIndicesTypes), {}, {
	    BalanceLock: 'BalanceLockTo212',
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    Keys: 'SessionKeys5',
	    Multiplier: 'Fixed64',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259',
	    ReferendumInfo: 'ReferendumInfoTo239',
	    SlashingSpans: 'SlashingSpansTo204',
	    StakingLedger: 'StakingLedgerTo223',
	    Votes: 'VotesTo230',
	    Weight: 'u32'
	  })
	}, {
	  // actual at 1045 (1043-1044 is dev)
	  minmax: [1043, 1045],
	  types: _objectSpread(_objectSpread({}, addrIndicesTypes), {}, {
	    BalanceLock: 'BalanceLockTo212',
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    Keys: 'SessionKeys5',
	    Multiplier: 'Fixed64',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259',
	    ReferendumInfo: 'ReferendumInfoTo239',
	    StakingLedger: 'StakingLedgerTo223',
	    Votes: 'VotesTo230',
	    Weight: 'u32'
	  })
	}, {
	  minmax: [1046, 1054],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    Multiplier: 'Fixed64',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259',
	    ReferendumInfo: 'ReferendumInfoTo239',
	    StakingLedger: 'StakingLedgerTo240',
	    Weight: 'u32'
	  })
	}, {
	  minmax: [1055, 1056],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    Multiplier: 'Fixed64',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259',
	    StakingLedger: 'StakingLedgerTo240',
	    Weight: 'u32'
	  })
	}, {
	  minmax: [1057, 1061],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [1062, 2012],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [2013, 2022],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [2023, 2024],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [2025, 2027],
	  types: _objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes)
	}, {
	  minmax: [2028, 2029],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AccountInfo: 'AccountInfoWithDualRefCount',
	    CompactAssignments: 'CompactAssignmentsWith16',
	    RawSolution: 'RawSolutionWith16'
	  })
	}, {
	  minmax: [2030, 9000],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsWith16',
	    RawSolution: 'RawSolutionWith16'
	  })
	}, {
	  minmax: [9010, undefined],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AssetInstance: 'AssetInstanceV0',
	    MultiAsset: 'MultiAssetV0',
	    MultiLocation: 'MultiLocationV0',
	    Response: 'ResponseV0',
	    Xcm: 'XcmV0',
	    XcmOrder: 'XcmOrderV0'
	  })
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var node = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const versioned = [{
	  minmax: [0, undefined],
	  types: {// nothing, API tracks master
	  }
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var nodeTemplate = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const versioned = [{
	  minmax: [0, undefined],
	  types: {// nothing, API tracks master
	  }
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var polkadot$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const sharedTypes = {
	  CompactAssignments: 'CompactAssignmentsWith16',
	  RawSolution: 'RawSolutionWith16',
	  Keys: 'SessionKeys6',
	  ProxyType: {
	    _enum: {
	      Any: 0,
	      NonTransfer: 1,
	      Governance: 2,
	      Staking: 3,
	      UnusedSudoBalances: 4,
	      IdentityJudgement: 5,
	      CancelProxy: 6
	    }
	  }
	};
	const addrAccountIdTypes = {
	  AccountInfo: 'AccountInfoWithRefCount',
	  Address: 'AccountId',
	  Keys: 'SessionKeys5',
	  LookupSource: 'AccountId',
	  ValidatorPrefs: 'ValidatorPrefsWithCommission'
	}; // these are override types for Polkadot

	const versioned = [{
	  minmax: [0, 12],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [13, 22],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [23, 24],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [25, 27],
	  types: _objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes)
	}, {
	  minmax: [28, 29],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AccountInfo: 'AccountInfoWithDualRefCount'
	  })
	}, {
	  minmax: [30, undefined],
	  types: _objectSpread({}, sharedTypes)
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var rococo = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	// structs need to be in order

	/* eslint-disable sort-keys */
	const sharedTypes = {
	  FullIdentification: '()',
	  // No staking, only session (as per config)
	  Keys: 'SessionKeys7B'
	};
	const versioned = [{
	  minmax: [0, 200],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AccountInfo: 'AccountInfoWithDualRefCount',
	    Address: 'AccountId',
	    LookupSource: 'AccountId'
	  })
	}, {
	  minmax: [201, 214],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AccountInfo: 'AccountInfoWithDualRefCount'
	  })
	}, {
	  minmax: [215, 228],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    Keys: 'SessionKeys6'
	  })
	}, {
	  minmax: [229, undefined],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AssetInstance: 'AssetInstanceV0',
	    MultiAsset: 'MultiAssetV0',
	    MultiLocation: 'MultiLocationV0',
	    Response: 'ResponseV0',
	    Xcm: 'XcmV0',
	    XcmOrder: 'XcmOrderV0'
	  })
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var shell = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const versioned = [{
	  minmax: [0, undefined],
	  types: {// nothing, limited runtime
	  }
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var statemint = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	// these are override types for Statemine, Statemint, Westmint
	const versioned = [{
	  minmax: [0, undefined],
	  types: {
	    TAssetBalance: 'u128',
	    ProxyType: {
	      _enum: ['Any', 'NonTransfer', 'CancelProxy', 'Assets', 'AssetOwner', 'AssetManager', 'Staking']
	    },
	    AssetInstance: 'AssetInstanceV0',
	    MultiAsset: 'MultiAssetV0',
	    MultiLocation: 'MultiLocationV0',
	    Response: 'ResponseV0',
	    Xcm: 'XcmV0',
	    XcmOrder: 'XcmOrderV0'
	  }
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var westend$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/* eslint-disable sort-keys */
	const sharedTypes = {
	  // 16 validators
	  CompactAssignments: 'CompactAssignmentsWith16',
	  RawSolution: 'RawSolutionWith16',
	  // general
	  Keys: 'SessionKeys6',
	  ProxyType: {
	    _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
	  }
	};
	const addrAccountIdTypes = {
	  AccountInfo: 'AccountInfoWithRefCount',
	  Address: 'AccountId',
	  CompactAssignments: 'CompactAssignmentsWith16',
	  LookupSource: 'AccountId',
	  Keys: 'SessionKeys5',
	  RawSolution: 'RawSolutionWith16',
	  ValidatorPrefs: 'ValidatorPrefsWithCommission'
	};
	const versioned = [{
	  minmax: [1, 2],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    Multiplier: 'Fixed64',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259',
	    Weight: 'u32'
	  })
	}, {
	  minmax: [3, 22],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    OpenTip: 'OpenTipTo225',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [23, 42],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    CompactAssignments: 'CompactAssignmentsTo257',
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [43, 44],
	  types: _objectSpread(_objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes), {}, {
	    DispatchInfo: 'DispatchInfoTo244',
	    Heartbeat: 'HeartbeatTo244',
	    RefCount: 'RefCountTo259'
	  })
	}, {
	  minmax: [45, 47],
	  types: _objectSpread(_objectSpread({}, sharedTypes), addrAccountIdTypes)
	}, {
	  minmax: [48, 49],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AccountInfo: 'AccountInfoWithDualRefCount'
	  })
	}, {
	  minmax: [50, undefined],
	  types: _objectSpread(_objectSpread({}, sharedTypes), {}, {
	    AssetInstance: 'AssetInstanceV0',
	    MultiAsset: 'MultiAssetV0',
	    MultiLocation: 'MultiLocationV0',
	    Response: 'ResponseV0',
	    Xcm: 'XcmV0',
	    XcmOrder: 'XcmOrderV0'
	  })
	}];
	var _default = versioned;
	exports.default = _default;
	});

	var require$$0$2 = centrifugeChain;

	var require$$1$4 = kusama$1;

	var require$$2$3 = node;

	var require$$3$2 = nodeTemplate;

	var require$$4$2 = polkadot$1;

	var require$$5$1 = rococo;

	var require$$6$1 = shell;

	var require$$7$1 = statemint;

	var require$$8$1 = westend$1;

	var spec = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _centrifugeChain = interopRequireDefault(require$$0$2);

	var _kusama = interopRequireDefault(require$$1$4);

	var _node = interopRequireDefault(require$$2$3);

	var _nodeTemplate = interopRequireDefault(require$$3$2);

	var _polkadot = interopRequireDefault(require$$4$2);

	var _rococo = interopRequireDefault(require$$5$1);

	var _shell = interopRequireDefault(require$$6$1);

	var _statemint = interopRequireDefault(require$$7$1);

	var _westend = interopRequireDefault(require$$8$1);

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Type overrides for specific spec types & versions as given in runtimeVersion
	const typesSpec = {
	  'centrifuge-chain': _centrifugeChain.default,
	  kusama: _kusama.default,
	  node: _node.default,
	  'node-template': _nodeTemplate.default,
	  polkadot: _polkadot.default,
	  rococo: _rococo.default,
	  shell: _shell.default,
	  statemine: _statemint.default,
	  statemint: _statemint.default,
	  westend: _westend.default,
	  westmint: _statemint.default
	};
	var _default = typesSpec;
	exports.default = _default;
	});

	var networks = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  packageInfo: true
	};
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$2.packageInfo;
	  }
	});



	Object.keys(_interfaces$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _interfaces$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _interfaces$1[key];
	    }
	  });
	});
	});

	var kusama = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const upgrades = [[0, 1020], [26669, 1021], [38245, 1022], [54248, 1023], [59659, 1024], [67651, 1025], [82191, 1027], [83238, 1028], [101503, 1029], [203466, 1030], [295787, 1031], [461692, 1032], [504329, 1033], [569327, 1038], [587687, 1039], [653183, 1040], [693488, 1042], [901442, 1045], [1375086, 1050], [1445458, 1051], [1472960, 1052], [1475648, 1053], [1491596, 1054], [1574408, 1055], [2064961, 1058], [2201991, 1062], [2671528, 2005], [2704202, 2007], [2728002, 2008], [2832534, 2011], [2962294, 2012], [3240000, 2013], [3274408, 2015], [3323565, 2019], [3534175, 2022], [3860281, 2023], [4143129, 2024], [4401242, 2025], [4841367, 2026], [5961600, 2027], [6137912, 2028], [6561855, 2029], [7100891, 2030], [7468792, 9010], [7668600, 9030], [7812476, 9040], [8010981, 9050], [8073833, 9070], [8555825, 9080], [8945245, 9090]];
	var _default = upgrades;
	exports.default = _default;
	});

	var polkadot = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const upgrades = [[0, 0], [29231, 1], [188836, 5], [199405, 6], [214264, 7], [244358, 8], [303079, 9], [314201, 10], [342400, 11], [443963, 12], [528470, 13], [687751, 14], [746085, 15], [787923, 16], [799302, 17], [1205128, 18], [1603423, 23], [1733218, 24], [2005673, 25], [2436698, 26], [3613564, 27], [3899547, 28], [4345767, 29], [4876134, 30], [5661442, 9050], [6321619, 9080]];
	var _default = upgrades;
	exports.default = _default;
	});

	var westend = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const upgrades = [[214356, 4], [392764, 7], [409740, 8], [809976, 20], [877581, 24], [879238, 25], [889472, 26], [902937, 27], [932751, 28], [991142, 29], [1030162, 31], [1119657, 32], [1199282, 33], [1342534, 34], [1392263, 35], [1431703, 36], [1433369, 37], [1490972, 41], [2087397, 43], [2316688, 44], [2549864, 45], [3925782, 46], [3925843, 47], [4207800, 48], [4627944, 49], [5124076, 50], [5478664, 900], [5482450, 9000], [5584305, 9010], [5784566, 9030], [5879822, 9031], [5896856, 9032], [5897316, 9033], [6117927, 9050], [6210274, 9070], [6379314, 9080], [6979141, 9090]];
	var _default = upgrades;
	exports.default = _default;
	});

	var _networks = networks;

	var require$$0$1 = kusama;

	var require$$1$3 = polkadot;

	var require$$2$2 = westend;

	var upgrades_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;





	var _kusama = interopRequireDefault(require$$0$1);

	var _polkadot = interopRequireDefault(require$$1$3);

	var _westend = interopRequireDefault(require$$2$2);

	// Copyright 2017-2021 @polkadot/types-known authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const allKnown = {
	  kusama: _kusama.default,
	  polkadot: _polkadot.default,
	  westend: _westend.default
	}; // testnets are not available in the networks map

	const NET_EXTRA = {
	  westend: {
	    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
	  }
	};
	/** @internal */

	function checkOrder(network, versions) {
	  const ooo = versions.filter((curr, index) => {
	    const prev = versions[index - 1];
	    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];
	  });
	  (0, _util$5.assert)(!ooo.length, () => `${network}: Mismatched upgrade ordering: ${(0, _util$5.stringify)(ooo)}`);
	  return versions;
	}
	/** @internal */


	function mapRaw([network, versions]) {
	  const chain = _networks.selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];
	  (0, _util$5.assert)(chain, () => `Unable to find info for chain ${network}`);
	  return {
	    genesisHash: (0, _util$5.hexToU8a)(chain.genesisHash[0]),
	    network,
	    versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({
	      blockNumber: new _util$5.BN(blockNumber),
	      specVersion: new _util$5.BN(specVersion)
	    }))
	  };
	} // Type overrides for specific spec types & versions as given in runtimeVersion


	const upgrades = Object.entries(allKnown).map(mapRaw);
	var _default = upgrades;
	exports.default = _default;
	});

	var knownOrigins_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.knownOrigins = void 0;
	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// We want predictive ordering (manually managed)

	/* eslint-disable sort-keys */
	// FIXME: Need some sort of solution for specifying these
	// Since we don't have insight into the origin specification, we can only define what we know about
	// in a pure Substrate/Polkadot implementation, any other custom origins won't be handled at all
	const knownOrigins = {
	  //
	  // (1) Defaults from Substrate
	  //
	  Council: 'CollectiveOrigin',
	  System: 'SystemOrigin',
	  TechnicalCommittee: 'CollectiveOrigin',
	  //
	  // (2) Defaults from Polkadot
	  //
	  Xcm: 'XcmOrigin',
	  XcmPallet: 'XcmOrigin',
	  //
	  // (3) Defaults from Acala
	  //
	  Authority: 'AuthorityOrigin',
	  GeneralCouncil: 'CollectiveOrigin'
	};
	exports.knownOrigins = knownOrigins;
	});

	var require$$1$2 = chain$1;

	var require$$2$1 = modules;

	var require$$3$1 = spec;

	var require$$4$1 = upgrades_1;

	var _knownOrigins = knownOrigins_1;

	var bundle$4 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getModuleTypes = getModuleTypes;
	exports.getSpecExtensions = getSpecExtensions;
	exports.getSpecTypes = getSpecTypes;
	exports.getSpecHasher = getSpecHasher;
	exports.getSpecRpc = getSpecRpc;
	exports.getSpecAlias = getSpecAlias;
	exports.getUpgradeVersion = getUpgradeVersion;
	Object.defineProperty(exports, "knownOrigins", {
	  enumerable: true,
	  get: function () {
	    return _knownOrigins.knownOrigins;
	  }
	});
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$6.packageInfo;
	  }
	});

	var _defineProperty2 = interopRequireDefault(defineProperty);



	var _index = interopRequireDefault(require$$1$2);

	var _modules = interopRequireDefault(require$$2$1);

	var _index2 = interopRequireDefault(require$$3$1);

	var _index3 = interopRequireDefault(require$$4$1);





	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// flatten a VersionedType[] into a Record<string, string>

	/** @internal */
	function filterVersions(versions = [], specVersion) {
	  return versions.filter(({
	    minmax: [min, max]
	  }) => ((0, _util$5.isUndefined)(min) || specVersion >= min) && ((0, _util$5.isUndefined)(max) || specVersion <= max)).reduce((result, {
	    types
	  }) => _objectSpread(_objectSpread({}, result), types), {});
	}
	/**
	 * @description Get types for specific modules (metadata override)
	 */


	function getModuleTypes({
	  knownTypes
	}, section) {
	  var _knownTypes$typesAlia;

	  return _objectSpread(_objectSpread({}, _modules.default[section] || {}), ((_knownTypes$typesAlia = knownTypes.typesAlias) === null || _knownTypes$typesAlia === void 0 ? void 0 : _knownTypes$typesAlia[section]) || {});
	}
	/**
	 * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
	 */


	function getSpecExtensions({
	  knownTypes
	}, chainName, specName) {
	  var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;

	  const _chainName = chainName.toString();

	  const _specName = specName.toString();

	  return _objectSpread(_objectSpread({}, ((_knownTypes$typesBund = knownTypes.typesBundle) === null || _knownTypes$typesBund === void 0 ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) === null || _knownTypes$typesBund2 === void 0 ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[_specName]) === null || _knownTypes$typesBund3 === void 0 ? void 0 : _knownTypes$typesBund3.signedExtensions) || {}), ((_knownTypes$typesBund4 = knownTypes.typesBundle) === null || _knownTypes$typesBund4 === void 0 ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) === null || _knownTypes$typesBund5 === void 0 ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[_chainName]) === null || _knownTypes$typesBund6 === void 0 ? void 0 : _knownTypes$typesBund6.signedExtensions) || {});
	}
	/**
	 * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
	 */


	function getSpecTypes({
	  knownTypes
	}, chainName, specName, specVersion) {
	  var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;

	  const _chainName = chainName.toString();

	  const _specName = specName.toString();

	  const _specVersion = (0, _util$5.bnToBn)(specVersion).toNumber(); // The order here is always, based on -
	  //   - spec then chain
	  //   - typesBundle takes higher precedence
	  //   - types is the final catch-all override


	  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, filterVersions(_index2.default[_specName], _specVersion)), filterVersions(_index.default[_chainName], _specVersion)), filterVersions((_knownTypes$typesBund7 = knownTypes.typesBundle) === null || _knownTypes$typesBund7 === void 0 ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) === null || _knownTypes$typesBund8 === void 0 ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[_specName]) === null || _knownTypes$typesBund9 === void 0 ? void 0 : _knownTypes$typesBund9.types, _specVersion)), filterVersions((_knownTypes$typesBund10 = knownTypes.typesBundle) === null || _knownTypes$typesBund10 === void 0 ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) === null || _knownTypes$typesBund11 === void 0 ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[_chainName]) === null || _knownTypes$typesBund12 === void 0 ? void 0 : _knownTypes$typesBund12.types, _specVersion)), ((_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[_specName]) || {}), ((_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[_chainName]) || {}), knownTypes.types || {});
	}

	function getSpecHasher({
	  knownTypes
	}, chainName, specName) {
	  var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;

	  const _chainName = chainName.toString();

	  const _specName = specName.toString();

	  return knownTypes.hasher || ((_knownTypes$typesBund13 = knownTypes.typesBundle) === null || _knownTypes$typesBund13 === void 0 ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) === null || _knownTypes$typesBund14 === void 0 ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[_chainName]) === null || _knownTypes$typesBund15 === void 0 ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes.typesBundle) === null || _knownTypes$typesBund16 === void 0 ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) === null || _knownTypes$typesBund17 === void 0 ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[_specName]) === null || _knownTypes$typesBund18 === void 0 ? void 0 : _knownTypes$typesBund18.hasher) || null;
	}
	/**
	 * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
	 */


	function getSpecRpc({
	  knownTypes
	}, chainName, specName) {
	  var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;

	  const _chainName = chainName.toString();

	  const _specName = specName.toString();

	  return _objectSpread(_objectSpread({}, ((_knownTypes$typesBund19 = knownTypes.typesBundle) === null || _knownTypes$typesBund19 === void 0 ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) === null || _knownTypes$typesBund20 === void 0 ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[_specName]) === null || _knownTypes$typesBund21 === void 0 ? void 0 : _knownTypes$typesBund21.rpc) || {}), ((_knownTypes$typesBund22 = knownTypes.typesBundle) === null || _knownTypes$typesBund22 === void 0 ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) === null || _knownTypes$typesBund23 === void 0 ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[_chainName]) === null || _knownTypes$typesBund24 === void 0 ? void 0 : _knownTypes$typesBund24.rpc) || {});
	}
	/**
	 * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
	 */


	function getSpecAlias({
	  knownTypes
	}, chainName, specName) {
	  var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;

	  const _chainName = chainName.toString();

	  const _specName = specName.toString(); // as per versions, first spec, then chain then finally non-versioned


	  return _objectSpread(_objectSpread(_objectSpread({}, ((_knownTypes$typesBund25 = knownTypes.typesBundle) === null || _knownTypes$typesBund25 === void 0 ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) === null || _knownTypes$typesBund26 === void 0 ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[_specName]) === null || _knownTypes$typesBund27 === void 0 ? void 0 : _knownTypes$typesBund27.alias) || {}), ((_knownTypes$typesBund28 = knownTypes.typesBundle) === null || _knownTypes$typesBund28 === void 0 ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) === null || _knownTypes$typesBund29 === void 0 ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[_chainName]) === null || _knownTypes$typesBund30 === void 0 ? void 0 : _knownTypes$typesBund30.alias) || {}), knownTypes.typesAlias || {});
	}
	/**
	 * @description Returns a version record for known chains where upgrades are being tracked
	 */


	function getUpgradeVersion(genesisHash, blockNumber) {
	  const known = _index3.default.find(u => genesisHash.eq(u.genesisHash));

	  return known ? [known.versions.reduce((last, version) => {
	    return blockNumber.gt(version.blockNumber) ? version : last;
	  }, undefined), known.versions.find(version => blockNumber.lte(version.blockNumber))] : [undefined, undefined];
	}
	});

	var _bundle$4 = bundle$4;

	var typesKnown = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$4[key];
	    }
	  });
	});
	});

	var _typesKnown = typesKnown;

	var toLatest_2 = toLatest;

	var _defineProperty2$j = interopRequireDefault(defineProperty);





	function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$j(Object(source), true).forEach(function (key) { (0, _defineProperty2$j.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
	/**
	 * Find and apply the correct type override
	 * @internal
	 **/

	function setTypeOverride(sectionTypes, types) {
	  types.forEach(type => {
	    const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));

	    if (override) {
	      type.setOverride(sectionTypes[override]);
	    } else {
	      // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
	      const orig = type.toString();
	      const alias = Object.entries(sectionTypes).reduce((result, [from, to]) => BOXES.reduce((result, [one, two]) => result.replace(`${one}${from}${two}`, `${one}${to}${two}`), result), orig);

	      if (orig !== alias) {
	        type.setOverride(alias);
	      }
	    }
	  });
	}
	/**
	 * Apply module-specific type overrides (always be done as part of toLatest)
	 * @internal
	 **/


	function convertCalls(registry, calls, sectionTypes) {
	  return calls.map(c => {
	    setTypeOverride(sectionTypes, c.args.map(({
	      type
	    }) => type));
	    return registry.createType('FunctionMetadataLatest', c);
	  });
	}
	/**
	 * Apply module-specific type overrides (always be done as part of toLatest)
	 * @internal
	 */


	function convertConstants(registry, constants, sectionTypes) {
	  return constants.map(c => {
	    setTypeOverride(sectionTypes, [c.type]);
	    return registry.createType('ModuleConstantMetadataLatest', c);
	  });
	}
	/**
	 * Apply module-specific type overrides (always be done as part of toLatest)
	 * @internal
	 **/


	function convertEvents(registry, events, sectionTypes) {
	  return events.map(e => {
	    setTypeOverride(sectionTypes, e.args.map(type => type));
	    return registry.createType('EventMetadataLatest', e);
	  });
	}
	/**
	 * Apply module-specific storage type overrides (always part of toLatest)
	 * @internal
	 **/


	function convertStorage(registry, {
	  items,
	  prefix
	}, sectionTypes) {
	  return registry.createType('StorageMetadataLatest', {
	    items: items.map(s => {
	      setTypeOverride(sectionTypes, s.type.isPlain ? [s.type.asPlain] : s.type.isMap ? [s.type.asMap.value, s.type.asMap.key] : s.type.isDoubleMap ? [s.type.asDoubleMap.value, s.type.asDoubleMap.key1, s.type.asDoubleMap.key2] : [s.type.asNMap.value, ...s.type.asNMap.keyVec]);
	      return registry.createType('StorageEntryMetadataLatest', s);
	    }),
	    prefix
	  });
	} // generate & register the OriginCaller type


	function registerOriginCaller(registry, modules, metaVersion) {
	  registry.register({
	    OriginCaller: {
	      _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
	        for (let i = Object.keys(result).length; i < index; i++) {
	          result[`Empty${i}`] = 'Null';
	        }

	        result[name] = _typesKnown.knownOrigins[name] || 'Null';
	        return result;
	      }, {})
	    }
	  });
	}
	/** @internal */


	function createModule(registry, mod, {
	  calls,
	  constants,
	  events,
	  storage
	}) {
	  const sectionTypes = (0, _typesKnown.getModuleTypes)(registry, (0, _util$5.stringCamelCase)(mod.name));
	  return registry.createType('ModuleMetadataLatest', _objectSpread$j(_objectSpread$j({}, mod), {}, {
	    calls: calls && convertCalls(registry, calls, sectionTypes),
	    constants: convertConstants(registry, constants, sectionTypes),
	    events: events && convertEvents(registry, events, sectionTypes),
	    storage: storage && convertStorage(registry, storage, sectionTypes)
	  }));
	}
	/**
	 * Convert the Metadata (which is an alias) to latest - effectively this _always_ get applied to the top-level &
	 * most-recent metadata, since it allows us a chance to actually apply call and storage specific type aliasses
	 * @internal
	 **/


	function toLatest(registry, {
	  extrinsic,
	  modules
	}, metaVersion) {
	  registerOriginCaller(registry, modules, metaVersion);
	  return registry.createType('MetadataLatest', {
	    extrinsic,
	    modules: modules.map(mod => createModule(registry, mod, {
	      calls: mod.calls.unwrapOr(null),
	      constants: mod.constants,
	      events: mod.events.unwrapOr(null),
	      storage: mod.storage.unwrapOr(null)
	    }))
	  });
	}

	var toLatest_1 = /*#__PURE__*/Object.defineProperty({
		toLatest: toLatest_2
	}, '__esModule', {value: true});

	var MagicNumber_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MagicNumber = exports.MAGIC_NUMBER = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding

	exports.MAGIC_NUMBER = MAGIC_NUMBER;

	class MagicNumber extends _index$d.U32 {
	  constructor(registry, value) {
	    super(registry, value);

	    if (!this.isEmpty) {
	      (0, _util$5.assert)(this.eq(MAGIC_NUMBER), () => `MagicNumber mismatch: expected ${registry.createType('u32', MAGIC_NUMBER).toHex()}, found ${this.toHex()}`);
	    }
	  }

	}

	exports.MagicNumber = MagicNumber;
	});

	var flattenUniq_2 = flattenUniq;

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function flattenUniq(list, start = []) {
	  return [...new Set(list.reduce((result, entry) => {
	    if (Array.isArray(entry)) {
	      return flattenUniq(entry, result);
	    }

	    result.push(entry);
	    return result;
	  }, start))];
	}

	var flattenUniq_1 = /*#__PURE__*/Object.defineProperty({
		flattenUniq: flattenUniq_2
	}, '__esModule', {value: true});

	var extractTypes_2 = extractTypes;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// we are attempting to avoid circular refs, hence the path import

	/** @internal */
	function extractTypes(types) {
	  return types.map(type => {
	    const decoded = (0, _getTypeDef.getTypeDef)(type);

	    switch (decoded.info) {
	      case _types$1.TypeDefInfo.Plain:
	        return decoded.type;

	      case _types$1.TypeDefInfo.BTreeSet:
	      case _types$1.TypeDefInfo.Compact:
	      case _types$1.TypeDefInfo.Option:
	      case _types$1.TypeDefInfo.Vec:
	      case _types$1.TypeDefInfo.VecFixed:
	        return extractTypes([decoded.sub.type]);

	      case _types$1.TypeDefInfo.BTreeMap:
	      case _types$1.TypeDefInfo.HashMap:
	      case _types$1.TypeDefInfo.Result:
	      case _types$1.TypeDefInfo.Tuple:
	        return extractTypes(decoded.sub.map(({
	          type
	        }) => type));

	      default:
	        throw new Error(`Unhandled: Unable to create and validate type from ${type}`);
	    }
	  });
	}

	var extractTypes_1 = /*#__PURE__*/Object.defineProperty({
		extractTypes: extractTypes_2
	}, '__esModule', {value: true});

	var _extractTypes = extractTypes_1;

	var _flattenUniq = flattenUniq_1;

	var validateTypes_2 = validateTypes;







	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l$1 = (0, _util$5.logger)('metadata');
	/** @internal */

	function validateTypes(registry, throwError, types) {
	  const missing = (0, _flattenUniq.flattenUniq)((0, _extractTypes.extractTypes)(types)).filter(type => !registry.hasType(type)).sort();

	  if (missing.length !== 0) {
	    const message = `Unknown types found, no types for ${missing.join(', ')}`;

	    if (throwError) {
	      throw new Error(message);
	    } else {
	      l$1.warn(message);
	    }
	  }

	  return types;
	}

	var validateTypes_1 = /*#__PURE__*/Object.defineProperty({
		validateTypes: validateTypes_2
	}, '__esModule', {value: true});

	var _validateTypes = validateTypes_1;

	var getUniqTypes_2 = getUniqTypes;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function unwrapCalls(mod) {
	  return mod.calls ? mod.calls.unwrapOr([]) : [];
	}
	/** @internal */


	function typeToString({
	  type
	}) {
	  return type.toString();
	}
	/** @internal */


	function getCallNames({
	  modules
	}) {
	  return modules.map(mod => unwrapCalls(mod).map(({
	    args
	  }) => args.map(typeToString)));
	}
	/** @internal */


	function getConstantNames({
	  modules
	}) {
	  return modules.map(({
	    constants
	  }) => (constants || []).map(typeToString));
	}
	/** @internal */


	function unwrapEvents(events) {
	  return events ? events.unwrapOr([]) : [];
	}
	/** @internal */


	function getEventNames({
	  modules
	}) {
	  return modules.map(({
	    events
	  }) => unwrapEvents(events).map(({
	    args
	  }) => args.map(a => a.toString())));
	}
	/** @internal */


	function unwrapStorage(storage) {
	  return storage ? storage.unwrapOr({
	    items: []
	  }).items : [];
	}
	/** @internal */


	function getStorageNames({
	  modules
	}) {
	  return modules.map(({
	    storage
	  }) => unwrapStorage(storage).map(({
	    type
	  }) => type.isPlain ? [type.asPlain.toString()] : type.isMap ? [type.asMap.value.toString(), type.asMap.key.toString()] : type.isDoubleMap ? [type.asDoubleMap.value.toString(), type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString()] : [type.asNMap.value.toString(), ...type.asNMap.keyVec.map(k => k.toString())]));
	}
	/** @internal */


	function getUniqTypes(registry, meta, throwError) {
	  return (0, _validateTypes.validateTypes)(registry, throwError, (0, _flattenUniq.flattenUniq)([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]));
	}

	var getUniqTypes_1 = /*#__PURE__*/Object.defineProperty({
		getUniqTypes: getUniqTypes_2
	}, '__esModule', {value: true});

	var toCallsOnly_2 = toCallsOnly;

	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function trimDocs(docs) {
	  const strings = docs.map(doc => doc.toString().trim());
	  const firstEmpty = strings.findIndex(doc => !doc.length);
	  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
	}

	function mapCalls(registry, _calls) {
	  const calls = _calls.unwrapOr(null);

	  return registry.createType('Option<Vec<FunctionMetadataLatest>>', calls ? calls.map(({
	    args,
	    docs,
	    name
	  }) => registry.createType('FunctionMetadataLatest', {
	    args,
	    docs: trimDocs(docs),
	    name
	  })) : null);
	}
	/** @internal */


	function toCallsOnly(registry, {
	  extrinsic,
	  modules
	}) {
	  return registry.createType('MetadataLatest', {
	    extrinsic,
	    modules: modules.map(({
	      calls,
	      index,
	      name
	    }) => ({
	      calls: mapCalls(registry, calls),
	      index,
	      name
	    }))
	  }).toJSON();
	}

	var toCallsOnly_1 = /*#__PURE__*/Object.defineProperty({
		toCallsOnly: toCallsOnly_2
	}, '__esModule', {value: true});

	var _getUniqTypes = getUniqTypes_1;

	var _toCallsOnly = toCallsOnly_1;

	var util$8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "flattenUniq", {
	  enumerable: true,
	  get: function () {
	    return _flattenUniq.flattenUniq;
	  }
	});
	Object.defineProperty(exports, "getUniqTypes", {
	  enumerable: true,
	  get: function () {
	    return _getUniqTypes.getUniqTypes;
	  }
	});
	Object.defineProperty(exports, "toCallsOnly", {
	  enumerable: true,
	  get: function () {
	    return _toCallsOnly.toCallsOnly;
	  }
	});
	Object.defineProperty(exports, "validateTypes", {
	  enumerable: true,
	  get: function () {
	    return _validateTypes.validateTypes;
	  }
	});
	});

	var _toV = toV10_1;

	var _toV2 = toV11_1;

	var _toV3 = toV12_1;

	var _toV4 = toV13_1;

	var _toLatest = toLatest_1;

	var _MagicNumber = MagicNumber_1;

	var _index2$3 = util$8;

	var MetadataVersioned_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MetadataVersioned = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);



















	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const LATEST_VERSION = 13;
	/**
	 * @name MetadataVersioned
	 * @description
	 * The versioned runtime metadata as a decoded structure
	 */

	var _converted = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("converted");

	var _assertVersion = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("assertVersion");

	var _getVersion = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("getVersion");

	var _metadata = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadata");

	class MetadataVersioned extends _index$e.Struct {
	  constructor(registry, value) {
	    super(registry, {
	      magicNumber: _MagicNumber.MagicNumber,
	      metadata: 'MetadataAll'
	    }, value);
	    Object.defineProperty(this, _converted, {
	      writable: true,
	      value: new Map()
	    });
	    Object.defineProperty(this, _assertVersion, {
	      writable: true,
	      value: version => {
	        (0, _util$5.assert)(this.version <= version, () => `Cannot convert metadata from version ${this.version} to ${version}`);
	        return this.version === version;
	      }
	    });
	    Object.defineProperty(this, _getVersion, {
	      writable: true,
	      value: (version, fromPrev) => {
	        const asCurr = `asV${version}`;
	        const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;

	        if (version !== 'latest' && (0, _classPrivateFieldLooseBase2.default)(this, _assertVersion)[_assertVersion](version)) {
	          return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata]()[asCurr];
	        }

	        if (!(0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].has(version)) {
	          (0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));
	        }

	        return (0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].get(version);
	      }
	    });
	    Object.defineProperty(this, _metadata, {
	      writable: true,
	      value: () => {
	        return this.get('metadata');
	      }
	    });
	  }

	  /**
	   * @description Returns the wrapped metadata as a limited calls-only (latest) version
	   */
	  get asCallsOnly() {
	    return new MetadataVersioned(this.registry, {
	      magicNumber: this.magicNumber,
	      metadata: this.registry.createType('MetadataAll', (0, _index2$3.toCallsOnly)(this.registry, this.asLatest), this.version)
	    });
	  }
	  /**
	   * @description Returns the wrapped metadata as a V9 object
	   */


	  get asV9() {
	    (0, _classPrivateFieldLooseBase2.default)(this, _assertVersion)[_assertVersion](9);

	    return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata]().asV9;
	  }
	  /**
	   * @description Returns the wrapped values as a V10 object
	   */


	  get asV10() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](10, _toV.toV10);
	  }
	  /**
	   * @description Returns the wrapped values as a V11 object
	   */


	  get asV11() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](11, _toV2.toV11);
	  }
	  /**
	   * @description Returns the wrapped values as a V12 object
	   */


	  get asV12() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](12, _toV3.toV12);
	  }
	  /**
	   * @description Returns the wrapped values as a V13 object
	   */


	  get asV13() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](13, _toV4.toV13);
	  }
	  /**
	   * @description Returns the wrapped values as a latest version object
	   */


	  get asLatest() {
	    // This is non-existent & latest - applied here to do the module-specific type conversions
	    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion]('latest', _toLatest.toLatest);
	  }
	  /**
	   * @description The magicNumber for the Metadata (known constant)
	   */


	  get magicNumber() {
	    return this.get('magicNumber');
	  }
	  /**
	   * @description the metadata version this structure represents
	   */


	  get version() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata]().index;
	  }

	  getUniqTypes(throwError) {
	    return (0, _index2$3.getUniqTypes)(this.registry, this.asLatest, throwError);
	  }
	  /**
	   * @description Converts the Object to JSON, typically used for RPC transfers
	   */


	  toJSON() {
	    // HACK(y): ensure that we apply the aliases if we have not done so already, this is
	    // needed to ensure we have the correct overrides (which is only applied in toLatest)
	    // eslint-disable-next-line no-unused-expressions
	    this.asLatest;
	    return super.toJSON();
	  }

	}

	exports.MetadataVersioned = MetadataVersioned;
	});

	var _MetadataVersioned = MetadataVersioned_1;

	var Metadata_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Metadata = void 0;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// magic u32 preceding the version id
	const VERSION_IDX = 4; // magic + lowest supported version

	const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);
	const EMPTY_U8A = new Uint8Array();

	function toU8a(value = EMPTY_U8A) {
	  return (0, _util$5.isHex)(value) ? toU8a((0, _util$5.u8aToU8a)(value)) : (0, _util$5.isU8a)(value) && value.length === 0 ? EMPTY_METADATA : value;
	}

	function decodeMetadata(registry, _value) {
	  if (!_value || (0, _util$5.isU8a)(_value) || (0, _util$5.isHex)(_value)) {
	    const value = toU8a(_value);
	    const version = value[VERSION_IDX];

	    try {
	      return new _MetadataVersioned.MetadataVersioned(registry, value);
	    } catch (error) {
	      // This is an f-ing hack as a follow-up to another ugly hack
	      // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
	      // when we fail on V9, try to re-parse it as v10... yes... HACK
	      if (version === 9) {
	        value[VERSION_IDX] = 10;
	        return decodeMetadata(registry, value);
	      }

	      throw error;
	    }
	  }

	  return new _MetadataVersioned.MetadataVersioned(registry, _value);
	}
	/**
	 * @name Metadata
	 * @description
	 * The versioned runtime metadata as a decoded structure
	 */


	class Metadata extends _MetadataVersioned.MetadataVersioned {
	  constructor(registry, value) {
	    super(registry, decodeMetadata(registry, value));
	  }

	}

	exports.Metadata = Metadata;
	});

	var decorateConstants_1 = decorateConstants;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	function decorateConstants(registry, {
	  modules
	}, _metaVersion) {
	  return modules.reduce((result, {
	    constants,
	    name
	  }) => {
	    if (constants.isEmpty) {
	      return result;
	    } // For access, we change the index names, i.e. Democracy.EnactmentPeriod -> democracy.enactmentPeriod


	    result[(0, _util$5.stringCamelCase)(name)] = constants.reduce((newModule, meta) => {
	      // convert to the natural type as received
	      const type = meta.type.toString();
	      const codec = registry.createType(type, (0, _util$5.hexToU8a)(meta.value.toHex()));
	      codec.meta = meta;
	      newModule[(0, _util$5.stringCamelCase)(meta.name)] = codec;
	      return newModule;
	    }, {});
	    return result;
	  }, {});
	}

	var constants$1 = /*#__PURE__*/Object.defineProperty({
		decorateConstants: decorateConstants_1
	}, '__esModule', {value: true});

	var decorateErrors_1 = decorateErrors;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isError({
	  error,
	  index
	}, sectionIndex, errorIndex) {
	  return index.eq(sectionIndex) && error.eq(errorIndex);
	}
	/** @internal */


	function decorateErrors(_, {
	  modules
	}, metaVersion) {
	  return modules.reduce((result, {
	    errors,
	    index,
	    name
	  }, _sectionIndex) => {
	    if (!errors.length) {
	      return result;
	    }

	    const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
	    result[(0, _util$5.stringCamelCase)(name)] = errors.reduce((newModule, meta, errorIndex) => {
	      // we don't camelCase the error name
	      newModule[meta.name.toString()] = {
	        is: moduleError => isError(moduleError, sectionIndex, errorIndex),
	        meta
	      };
	      return newModule;
	    }, {});
	    return result;
	  }, {});
	}

	var errors = /*#__PURE__*/Object.defineProperty({
		decorateErrors: decorateErrors_1
	}, '__esModule', {value: true});

	var decorateEvents_1 = decorateEvents;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isEvent(event, sectionIndex, eventIndex) {
	  return event.index[0] === sectionIndex && event.index[1] === eventIndex;
	}
	/** @internal */


	function decorateEvents(_, {
	  modules
	}, metaVersion) {
	  return modules.filter(({
	    events
	  }) => events.isSome).reduce((result, {
	    events,
	    index,
	    name
	  }, _sectionIndex) => {
	    const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
	    result[(0, _util$5.stringCamelCase)(name)] = events.unwrap().reduce((newModule, meta, eventIndex) => {
	      // we don't camelCase the event name
	      newModule[meta.name.toString()] = {
	        is: eventRecord => isEvent(eventRecord, sectionIndex, eventIndex),
	        meta
	      };
	      return newModule;
	    }, {});
	    return result;
	  }, {});
	}

	var events$1 = /*#__PURE__*/Object.defineProperty({
		decorateEvents: decorateEvents_1
	}, '__esModule', {value: true});

	var createUnchecked_2 = createUnchecked;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isTx(tx, callIndex) {
	  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
	}
	/** @internal */


	function createUnchecked(registry, section, callIndex, callMetadata) {
	  const expectedArgs = callMetadata.args;
	  const funcName = (0, _util$5.stringCamelCase)(callMetadata.name);

	  const extrinsicFn = (...args) => {
	    (0, _util$5.assert)(expectedArgs.length === args.length, () => `Extrinsic ${section}.${funcName} expects ${expectedArgs.length.valueOf()} arguments, got ${args.length}.`);
	    return registry.createType('Call', {
	      args,
	      callIndex
	    }, callMetadata);
	  };

	  extrinsicFn.is = tx => isTx(tx, callIndex);

	  extrinsicFn.callIndex = callIndex;
	  extrinsicFn.meta = callMetadata;
	  extrinsicFn.method = funcName;
	  extrinsicFn.section = section;

	  extrinsicFn.toJSON = () => callMetadata.toJSON();

	  return extrinsicFn;
	}

	var createUnchecked_1 = /*#__PURE__*/Object.defineProperty({
		createUnchecked: createUnchecked_2
	}, '__esModule', {value: true});

	var _createUnchecked = createUnchecked_1;

	var decorateExtrinsics_1 = decorateExtrinsics;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function decorateExtrinsics(registry, {
	  modules
	}, metaVersion) {
	  return modules.filter(({
	    calls
	  }) => calls.isSome).reduce((result, {
	    calls,
	    index,
	    name
	  }, _sectionIndex) => {
	    const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
	    const section = (0, _util$5.stringCamelCase)(name);
	    result[section] = calls.unwrap().reduce((newModule, callMetadata, methodIndex) => {
	      newModule[(0, _util$5.stringCamelCase)(callMetadata.name)] = (0, _createUnchecked.createUnchecked)(registry, section, new Uint8Array([sectionIndex, methodIndex]), callMetadata);
	      return newModule;
	    }, {});
	    return result;
	  }, {});
	}

	var extrinsics = /*#__PURE__*/Object.defineProperty({
		decorateExtrinsics: decorateExtrinsics_1
	}, '__esModule', {value: true});

	var getHasher_2 = getHasher;





	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEFAULT_FN = data => (0, _utilCrypto.xxhashAsU8a)(data, 128);

	const HASHERS = {
	  Blake2_128: data => // eslint-disable-line camelcase
	  (0, _utilCrypto.blake2AsU8a)(data, 128),
	  Blake2_128Concat: data => // eslint-disable-line camelcase
	  (0, _util$5.u8aConcat)((0, _utilCrypto.blake2AsU8a)(data, 128), (0, _util$5.u8aToU8a)(data)),
	  Blake2_256: data => // eslint-disable-line camelcase
	  (0, _utilCrypto.blake2AsU8a)(data, 256),
	  Identity: data => (0, _util$5.u8aToU8a)(data),
	  Twox128: data => (0, _utilCrypto.xxhashAsU8a)(data, 128),
	  Twox256: data => (0, _utilCrypto.xxhashAsU8a)(data, 256),
	  Twox64Concat: data => (0, _util$5.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(data, 64), (0, _util$5.u8aToU8a)(data))
	};
	/** @internal */

	function getHasher(hasher) {
	  return HASHERS[hasher.type] || DEFAULT_FN;
	}

	var getHasher_1 = /*#__PURE__*/Object.defineProperty({
		getHasher: getHasher_2
	}, '__esModule', {value: true});

	var _getHasher = getHasher_1;

	var createFunction_2 = createFunction;

	var _defineProperty2$i = interopRequireDefault(defineProperty);









	function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$i(Object(source), true).forEach(function (key) { (0, _defineProperty2$i.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	/** @internal */
	function createKeyRaw(registry, itemFn, keys, hashers, args) {
	  return (0, _util$5.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(itemFn.prefix, 128), (0, _utilCrypto.xxhashAsU8a)(itemFn.method, 128), ...keys.map((type, index) => (0, _getHasher.getHasher)(hashers[index])(registry.createType(type.toString(), args[index]).toU8a())));
	}
	/** @internal */


	function createKey(registry, itemFn, keys, hashers, args) {
	  const {
	    method,
	    section
	  } = itemFn;
	  (0, _util$5.assert)(Array.isArray(args), () => `Call to ${(0, _util$5.stringCamelCase)(section || 'unknown')}.${(0, _util$5.stringCamelCase)(method || 'unknown')} needs ${keys.length} arguments, provided in tuple format`);
	  (0, _util$5.assert)(args.filter(a => !(0, _util$5.isUndefined)(a)).length === keys.length, () => `Call to ${(0, _util$5.stringCamelCase)(section || 'unknown')}.${(0, _util$5.stringCamelCase)(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`); // as per createKey, always add the length prefix (underlying it is Bytes)

	  return (0, _util$5.compactAddLength)(createKeyRaw(registry, itemFn, keys, hashers, args));
	}
	/** @internal */


	function expandWithMeta({
	  meta,
	  method,
	  prefix,
	  section
	}, _storageFn) {
	  const storageFn = _storageFn;
	  storageFn.meta = meta;
	  storageFn.method = (0, _util$5.stringLowerFirst)(method);
	  storageFn.prefix = prefix;
	  storageFn.section = section; // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
	  // instances (e.g. collective) will not work since it is only matched on param meta

	  storageFn.toJSON = () => _objectSpread$i(_objectSpread$i({}, meta.toJSON()), {}, {
	    storage: {
	      method,
	      prefix,
	      section
	    }
	  });

	  return storageFn;
	}
	/** @internal */


	function extendHeadMeta(registry, {
	  meta: {
	    docs,
	    name,
	    type
	  },
	  section
	}, {
	  method
	}, iterFn) {
	  const outputType = type.isMap ? type.asMap.key : type.isDoubleMap ? type.asDoubleMap.key1 : type.asNMap.keyVec[0]; // metadata with a fallback value using the type of the key, the normal
	  // meta fallback only applies to actual entry values, create one for head

	  iterFn.meta = registry.createType('StorageEntryMetadataLatest', {
	    docs,
	    fallback: registry.createType('Bytes'),
	    modifier: registry.createType('StorageEntryModifierLatest', 1),
	    // required
	    name,
	    type: registry.createType('StorageEntryTypeLatest', registry.createType('Type', outputType), 0)
	  });
	  return (...args) => registry.createType('StorageKey', iterFn(...args), {
	    method,
	    section
	  });
	}
	/** @internal */


	function extendPrefixedMap(registry, itemFn, storageFn) {
	  const {
	    meta: {
	      type
	    },
	    method,
	    section
	  } = itemFn;
	  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
	    (0, _util$5.assert)(args.length === 0 || type.isDoubleMap && args.length === 1 || type.isNMap && args.length < type.asNMap.hashers.length, () => `Iteration ${(0, _util$5.stringCamelCase)(section || 'unknown')}.${(0, _util$5.stringCamelCase)(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);

	    if (args.length) {
	      if (type.isDoubleMap) {
	        return new _index$e.Raw(registry, createKeyRaw(registry, itemFn, [type.asDoubleMap.key1], [type.asDoubleMap.hasher], args));
	      } else if (type.isNMap) {
	        let keys = [...type.asNMap.keyVec];
	        let hashers = [...type.asNMap.hashers]; // pick the first n entries where n = args.length which is already verified above to be less that the full arguments.

	        keys = keys.slice(0, args.length);
	        hashers = hashers.slice(0, args.length);
	        return new _index$e.Raw(registry, createKeyRaw(registry, itemFn, keys, hashers, args));
	      }
	    }

	    return new _index$e.Raw(registry, createKeyRaw(registry, itemFn, [], [], []));
	  });
	  return storageFn;
	}
	/** @internal */


	function createFunction(registry, itemFn, options) {
	  const {
	    meta: {
	      type
	    }
	  } = itemFn; // Can only have zero or one argument:
	  //   - storage.system.account(address)
	  //   - storage.timestamp.blockPeriod()
	  // For higher-map queries the params are passed in as an tuple, [key1, key2]

	  const storageFn = expandWithMeta(itemFn, arg => type.isPlain ? options.skipHashing ? (0, _util$5.compactAddLength)((0, _util$5.u8aToU8a)(options.key)) : createKey(registry, itemFn, [], [], []) : type.isMap ? createKey(registry, itemFn, [type.asMap.key], [type.asMap.hasher], [arg]) : type.isDoubleMap ? createKey(registry, itemFn, [type.asDoubleMap.key1, type.asDoubleMap.key2], [type.asDoubleMap.hasher, type.asDoubleMap.key2Hasher], arg) : createKey(registry, itemFn, type.asNMap.keyVec, type.asNMap.hashers, arg));

	  if (type.isMap || type.isDoubleMap || type.isNMap) {
	    extendPrefixedMap(registry, itemFn, storageFn);
	  }

	  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || (0, _util$5.compactStripLength)(storageFn())[1];

	  return storageFn;
	}

	var createFunction_1 = /*#__PURE__*/Object.defineProperty({
		createFunction: createFunction_2
	}, '__esModule', {value: true});

	var _createFunction = createFunction_1;

	var substrate_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.substrate = void 0;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Small helper function to factorize code on this page.

	/** @internal */
	function createRuntimeFunction(method, key, {
	  docs,
	  type
	}) {
	  return registry => (0, _createFunction.createFunction)(registry, {
	    meta: {
	      docs: registry.createType('Vec<Text>', [docs]),
	      modifier: registry.createType('StorageEntryModifierLatest', 1),
	      // required
	      name: registry.createType('Text', method),
	      toJSON: () => key,
	      type: registry.createType('StorageEntryTypeLatest', type, 0)
	    },
	    method,
	    prefix: 'Substrate',
	    section: 'substrate'
	  }, {
	    key,
	    skipHashing: true
	  });
	}

	const substrate = {
	  changesTrieConfig: createRuntimeFunction('changesTrieConfig', ':changes_trie', {
	    docs: ' Changes trie configuration is stored under this key.',
	    type: 'u32'
	  }),
	  childStorageKeyPrefix: createRuntimeFunction('childStorageKeyPrefix', ':child_storage:', {
	    docs: ' Prefix of child storage keys.',
	    type: 'u32'
	  }),
	  code: createRuntimeFunction('code', ':code', {
	    docs: ' Wasm code of the runtime.',
	    type: 'Bytes'
	  }),
	  extrinsicIndex: createRuntimeFunction('extrinsicIndex', ':extrinsic_index', {
	    docs: ' Current extrinsic index (u32) is stored under this key.',
	    type: 'u32'
	  }),
	  heapPages: createRuntimeFunction('heapPages', ':heappages', {
	    docs: ' Number of wasm linear memory pages required for execution of the runtime.',
	    type: 'u64'
	  })
	};
	exports.substrate = substrate;
	});

	var _substrate = substrate_1;

	var getStorage_2 = getStorage;



	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function getStorage(registry) {
	  return {
	    substrate: Object.entries(_substrate.substrate).reduce((storage, [key, fn]) => {
	      storage[key] = fn(registry);
	      return storage;
	    }, {})
	  };
	}

	var getStorage_1 = /*#__PURE__*/Object.defineProperty({
		getStorage: getStorage_2
	}, '__esModule', {value: true});

	var _getStorage = getStorage_1;

	var decorateStorage_1 = decorateStorage;

	var _defineProperty2$h = interopRequireDefault(defineProperty);







	function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$h(Object(source), true).forEach(function (key) { (0, _defineProperty2$h.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	/** @internal */
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	function decorateStorage(registry, {
	  modules
	}, _metaVersion) {
	  return modules.reduce((result, moduleMetadata) => {
	    if (moduleMetadata.storage.isNone) {
	      return result;
	    }

	    const {
	      name
	    } = moduleMetadata;
	    const section = (0, _util$5.stringCamelCase)(name);
	    const unwrapped = moduleMetadata.storage.unwrap();
	    const prefix = unwrapped.prefix.toString(); // For access, we change the index names, i.e. System.Account -> system.account

	    result[section] = unwrapped.items.reduce((newModule, meta) => {
	      const method = meta.name.toString();
	      newModule[(0, _util$5.stringLowerFirst)(method)] = (0, _createFunction.createFunction)(registry, {
	        meta,
	        method,
	        prefix,
	        section
	      }, {});
	      return newModule;
	    }, {});
	    return result;
	  }, _objectSpread$h({}, (0, _getStorage.getStorage)(registry)));
	}

	var storage = /*#__PURE__*/Object.defineProperty({
		decorateStorage: decorateStorage_1
	}, '__esModule', {value: true});

	var _Metadata = Metadata_1;

	var _index$8 = constants$1;

	var _index2$2 = errors;

	var _index3$2 = events$1;

	var _index4 = extrinsics;

	var _index5 = storage;

	var decorate$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.expandMetadata = expandMetadata;
	Object.defineProperty(exports, "decorateConstants", {
	  enumerable: true,
	  get: function () {
	    return _index$8.decorateConstants;
	  }
	});
	Object.defineProperty(exports, "decorateErrors", {
	  enumerable: true,
	  get: function () {
	    return _index2$2.decorateErrors;
	  }
	});
	Object.defineProperty(exports, "decorateEvents", {
	  enumerable: true,
	  get: function () {
	    return _index3$2.decorateEvents;
	  }
	});
	Object.defineProperty(exports, "decorateExtrinsics", {
	  enumerable: true,
	  get: function () {
	    return _index4.decorateExtrinsics;
	  }
	});
	Object.defineProperty(exports, "decorateStorage", {
	  enumerable: true,
	  get: function () {
	    return _index5.decorateStorage;
	  }
	});















	// Copyright 2017-2021 @polkadot/types authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * Expands the metadata by decoration into consts, query and tx sections
	 */
	function expandMetadata(registry, metadata) {
	  (0, _util$5.assert)(metadata instanceof _Metadata.Metadata, 'You need to pass a valid Metadata instance to Decorated');
	  const latest = metadata.asLatest;
	  const version = metadata.version;
	  return {
	    consts: (0, _index$8.decorateConstants)(registry, latest, version),
	    errors: (0, _index2$2.decorateErrors)(registry, latest, version),
	    events: (0, _index3$2.decorateEvents)(registry, latest, version),
	    query: (0, _index5.decorateStorage)(registry, latest, version),
	    tx: (0, _index4.decorateExtrinsics)(registry, latest, version)
	  };
	}
	});

	var _index$7 = signedExtensions;

	var _indexTypes = index_types;

	var _index$6 = decorate$1;

	var _createType = createType_1;

	var registry = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TypeRegistry = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);















	var baseTypes = _interopRequireWildcard(_indexTypes);

	var definitions = _interopRequireWildcard(require$$0$3);











	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const l = (0, _util$5.logger)('registry'); // create error mapping from metadata

	function injectErrors(_, metadata, metadataErrors) {
	  const modules = metadata.asLatest.modules; // decorate the errors

	  modules.forEach(({
	    errors,
	    index,
	    name
	  }, _sectionIndex) => {
	    const sectionIndex = metadata.version >= 12 ? index.toNumber() : _sectionIndex;
	    const sectionName = (0, _util$5.stringCamelCase)(name);
	    errors.forEach(({
	      docs,
	      name
	    }, index) => {
	      const eventIndex = new Uint8Array([sectionIndex, index]);
	      metadataErrors[(0, _util$5.u8aToHex)(eventIndex)] = {
	        docs: docs.map(d => d.toString()),
	        index,
	        method: name.toString(),
	        name: name.toString(),
	        section: sectionName
	      };
	    });
	  });
	} // create event classes from metadata


	function injectEvents(registry, metadata, metadataEvents) {
	  // decorate the events
	  metadata.asLatest.modules.filter(({
	    events
	  }) => events.isSome).forEach(({
	    events,
	    index,
	    name
	  }, _sectionIndex) => {
	    const sectionIndex = metadata.version >= 12 ? index.toNumber() : _sectionIndex;
	    const sectionName = (0, _util$5.stringCamelCase)(name);
	    events.unwrap().forEach((meta, methodIndex) => {
	      const methodName = meta.name.toString();
	      const typeDef = meta.args.map(arg => (0, _getTypeDef.getTypeDef)(arg));
	      let Types = null; // Lazy create the actual type classes right at the point of use

	      const getTypes = () => {
	        if (!Types) {
	          Types = typeDef.map(typeDef => (0, _createClass$1.getTypeClass)(registry, typeDef));
	        }

	        return Types;
	      };

	      metadataEvents[(0, _util$5.u8aToHex)(new Uint8Array([sectionIndex, methodIndex]))] = class extends _Event.GenericEventData {
	        constructor(registry, value) {
	          super(registry, value, getTypes(), typeDef, meta, sectionName, methodName);
	        }

	      };
	    });
	  });
	} // create extrinsic mapping from metadata


	function injectExtrinsics(registry, metadata, metadataCalls) {
	  const extrinsics = (0, _index$6.decorateExtrinsics)(registry, metadata.asLatest, metadata.version); // decorate the extrinsics

	  Object.values(extrinsics).forEach(methods => Object.values(methods).forEach(method => {
	    metadataCalls[(0, _util$5.u8aToHex)(method.callIndex)] = method;
	  }));
	} // extract additional properties from the metadata


	function extractProperties(registry, metadata) {
	  var _constants$system;

	  const original = registry.getChainProperties();
	  const constants = (0, _index$6.decorateConstants)(registry, metadata.asLatest, metadata.version);
	  const ss58Format = (_constants$system = constants.system) === null || _constants$system === void 0 ? void 0 : _constants$system.ss58Prefix;

	  if (!ss58Format) {
	    return original;
	  }

	  const {
	    tokenDecimals,
	    tokenSymbol
	  } = original || {};
	  return registry.createType('ChainProperties', {
	    ss58Format,
	    tokenDecimals,
	    tokenSymbol
	  });
	}

	var _classes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("classes");

	var _definitions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("definitions");

	var _metadata = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadata");

	var _metadataCalls = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataCalls");

	var _metadataErrors = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataErrors");

	var _metadataEvents = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataEvents");

	var _unknownTypes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("unknownTypes");

	var _chainProperties = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("chainProperties");

	var _hasher = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("hasher");

	var _knownDefaults = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("knownDefaults");

	var _knownDefinitions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("knownDefinitions");

	var _knownTypes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("knownTypes");

	var _signedExtensions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signedExtensions");

	var _userExtensions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("userExtensions");

	class TypeRegistry {
	  constructor(createdAtHash) {
	    Object.defineProperty(this, _classes, {
	      writable: true,
	      value: new Map()
	    });
	    Object.defineProperty(this, _definitions, {
	      writable: true,
	      value: new Map()
	    });
	    Object.defineProperty(this, _metadata, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _metadataCalls, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _metadataErrors, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _metadataEvents, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _unknownTypes, {
	      writable: true,
	      value: new Map()
	    });
	    Object.defineProperty(this, _chainProperties, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _hasher, {
	      writable: true,
	      value: _utilCrypto.blake2AsU8a
	    });
	    Object.defineProperty(this, _knownDefaults, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _knownDefinitions, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _knownTypes, {
	      writable: true,
	      value: {}
	    });
	    Object.defineProperty(this, _signedExtensions, {
	      writable: true,
	      value: _index$7.fallbackExtensions
	    });
	    Object.defineProperty(this, _userExtensions, {
	      writable: true,
	      value: void 0
	    });
	    this.createdAtHash = void 0;
	    (0, _classPrivateFieldLooseBase2.default)(this, _knownDefaults)[_knownDefaults] = _objectSpread({
	      Json: _Json.Json,
	      Metadata: _Metadata.Metadata,
	      Raw: _Raw.Raw
	    }, baseTypes);
	    (0, _classPrivateFieldLooseBase2.default)(this, _knownDefinitions)[_knownDefinitions] = definitions;
	    this.init();

	    if (createdAtHash) {
	      this.createdAtHash = this.createType('Hash', createdAtHash);
	    }
	  }

	  init() {
	    // start clean
	    (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes] = new Map();
	    (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions] = new Map();
	    (0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes] = new Map();
	    (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes] = {}; // register know, first classes then on-demand-created definitions

	    this.register((0, _classPrivateFieldLooseBase2.default)(this, _knownDefaults)[_knownDefaults]);
	    Object.values((0, _classPrivateFieldLooseBase2.default)(this, _knownDefinitions)[_knownDefinitions]).forEach(({
	      types
	    }) => this.register(types));
	    return this;
	  }

	  get chainDecimals() {
	    var _classPrivateFieldLoo;

	    if ((_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo !== void 0 && _classPrivateFieldLoo.tokenDecimals.isSome) {
	      const allDecimals = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties].tokenDecimals.unwrap();

	      if (allDecimals.length) {
	        return allDecimals.map(b => b.toNumber());
	      }
	    }

	    return [12];
	  }

	  get chainSS58() {
	    var _classPrivateFieldLoo2;

	    return (_classPrivateFieldLoo2 = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo2 !== void 0 && _classPrivateFieldLoo2.ss58Format.isSome ? (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties].ss58Format.unwrap().toNumber() : undefined;
	  }

	  get chainTokens() {
	    var _classPrivateFieldLoo3;

	    if ((_classPrivateFieldLoo3 = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo3 !== void 0 && _classPrivateFieldLoo3.tokenSymbol.isSome) {
	      const allTokens = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties].tokenSymbol.unwrap();

	      if (allTokens.length) {
	        return allTokens.map(s => s.toString());
	      }
	    }

	    return [_util$5.formatBalance.getDefaults().unit];
	  }
	  /**
	   * @description Returns tru if the type is in a Compat format
	   */


	  isLookupType(value) {
	    return /Lookup\d+$/.test(value);
	  }
	  /**
	   * @description Creates a lookup string from the supplied id
	   */


	  createLookupType(lookupId) {
	    return `Lookup${lookupId.toString()}`;
	  }

	  get knownTypes() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes];
	  }

	  get lookup() {
	    throw new Error('Unimplemented'); // return this.metadata.lookup;
	  }

	  get metadata() {
	    (0, _util$5.assert)((0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata], 'Metadata has not been set on this registry');
	    return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata];
	  }

	  get unknownTypes() {
	    return [...(0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes].keys()];
	  }

	  get signedExtensions() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions];
	  }
	  /**
	   * @describe Creates an instance of the class
	   */


	  createClass(type) {
	    return (0, _createClass$1.createClass)(this, type);
	  }
	  /**
	   * @description Creates an instance of a type as registered
	   */


	  createType(type, ...params) {
	    return (0, _createType.createTypeUnsafe)(this, type, params);
	  }
	  /**
	   * @description Creates an instance of a type as registered
	   */


	  createTypeUnsafe(type, params, options) {
	    return (0, _createType.createTypeUnsafe)(this, type, params, options);
	  } // find a specific call


	  findMetaCall(callIndex) {
	    const hexIndex = (0, _util$5.u8aToHex)(callIndex);
	    return (0, _util$5.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _metadataCalls)[_metadataCalls][hexIndex], `findMetaCall: Unable to find Call with index ${hexIndex}/[${callIndex.toString()}]`);
	  } // finds an error


	  findMetaError(errorIndex) {
	    const hexIndex = (0, _util$5.u8aToHex)((0, _util$5.isU8a)(errorIndex) ? errorIndex : new Uint8Array([errorIndex.index.toNumber(), errorIndex.error.toNumber()]));
	    return (0, _util$5.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _metadataErrors)[_metadataErrors][hexIndex], `findMetaError: Unable to find Error with index ${hexIndex}/[${errorIndex.toString()}]`);
	  }

	  findMetaEvent(eventIndex) {
	    const hexIndex = (0, _util$5.u8aToHex)(eventIndex);
	    return (0, _util$5.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _metadataEvents)[_metadataEvents][hexIndex], `findMetaEvent: Unable to find Event with index ${hexIndex}/[${eventIndex.toString()}]`);
	  }

	  get(name, withUnknown) {
	    let Type = (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].get(name); // we have not already created the type, attempt it


	    if (!Type) {
	      const definition = (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].get(name);

	      let BaseType; // we have a definition, so create the class now (lazily)

	      if (definition) {
	        BaseType = (0, _createClass$1.createClass)(this, definition);
	      } else if (withUnknown) {
	        l.warn(`Unable to resolve type ${name}, it will fail on construction`);

	        (0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes].set(name, true);

	        BaseType = _DoNotConstruct.DoNotConstruct.with(name);
	      }

	      if (BaseType) {
	        // NOTE If we didn't extend here, we would have strange artifacts. An example is
	        // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
	        // Additionally, we now pass through the registry, which is a link to ourselves
	        Type = class extends BaseType {};

	        (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(name, Type);
	      }
	    }

	    return Type;
	  }

	  getChainProperties() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties];
	  }

	  getClassName(clazz) {
	    const entry = [...(0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].entries()].find(([, test]) => test === clazz);
	    return entry ? entry[0] : undefined;
	  }

	  getDefinition(typeName) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].get(typeName);
	  }

	  getModuleInstances(specName, moduleName) {
	    var _classPrivateFieldLoo4, _classPrivateFieldLoo5, _classPrivateFieldLoo6, _classPrivateFieldLoo7, _classPrivateFieldLoo8;

	    return (_classPrivateFieldLoo4 = (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes]) === null || _classPrivateFieldLoo4 === void 0 ? void 0 : (_classPrivateFieldLoo5 = _classPrivateFieldLoo4.typesBundle) === null || _classPrivateFieldLoo5 === void 0 ? void 0 : (_classPrivateFieldLoo6 = _classPrivateFieldLoo5.spec) === null || _classPrivateFieldLoo6 === void 0 ? void 0 : (_classPrivateFieldLoo7 = _classPrivateFieldLoo6[specName]) === null || _classPrivateFieldLoo7 === void 0 ? void 0 : (_classPrivateFieldLoo8 = _classPrivateFieldLoo7.instances) === null || _classPrivateFieldLoo8 === void 0 ? void 0 : _classPrivateFieldLoo8[moduleName];
	  }

	  getOrThrow(name, msg) {
	    return (0, _util$5.assertReturn)(this.get(name), msg || `type ${name} not found`);
	  }

	  getOrUnknown(name) {
	    return this.get(name, true);
	  }

	  getSignedExtensionExtra() {
	    return (0, _index$7.expandExtensionTypes)((0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions], 'payload', (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions]);
	  }

	  getSignedExtensionTypes() {
	    return (0, _index$7.expandExtensionTypes)((0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions], 'extrinsic', (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions]);
	  }

	  hasClass(name) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].has(name);
	  }

	  hasDef(name) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].has(name);
	  }

	  hasType(name) {
	    return !(0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes].get(name) && (this.hasClass(name) || this.hasDef(name));
	  }

	  hash(data) {
	    return this.createType('CodecHash', (0, _classPrivateFieldLooseBase2.default)(this, _hasher)[_hasher](data));
	  }

	  // eslint-disable-next-line no-dupe-class-members
	  register(arg1, arg2) {
	    // NOTE Constructors appear as functions here
	    if ((0, _util$5.isFunction)(arg1)) {
	      (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(arg1.name, arg1);
	    } else if ((0, _util$5.isString)(arg1)) {
	      (0, _util$5.assert)((0, _util$5.isFunction)(arg2), () => `Expected class definition passed to '${arg1}' registration`);
	      (0, _util$5.assert)(arg1 !== arg2.toString(), () => `Unable to register circular ${arg1} === ${arg1}`);

	      (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(arg1, arg2);
	    } else {
	      this._registerObject(arg1);
	    }
	  }

	  _registerObject(obj) {
	    Object.entries(obj).forEach(([name, type]) => {
	      if ((0, _util$5.isFunction)(type)) {
	        // This _looks_ a bit funny, but `typeof Clazz === 'function'
	        (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(name, type);
	      } else {
	        const def = (0, _util$5.isString)(type) ? type : (0, _util$5.stringify)(type);
	        (0, _util$5.assert)(name !== def, () => `Unable to register circular ${name} === ${def}`); // we already have this type, remove the classes registered for it

	        if ((0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].has(name)) {
	          (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].delete(name);
	        }

	        (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].set(name, def);
	      }
	    });
	  } // sets the chain properties


	  setChainProperties(properties) {
	    if (properties) {
	      (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties] = properties;
	    }
	  }

	  setHasher(hasher) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _hasher)[_hasher] = hasher || _utilCrypto.blake2AsU8a;
	  }

	  setKnownTypes(knownTypes) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes] = knownTypes;
	  } // sets the metadata


	  setMetadata(metadata, signedExtensions, userExtensions) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata] = metadata.asLatest;
	    injectExtrinsics(this, metadata, (0, _classPrivateFieldLooseBase2.default)(this, _metadataCalls)[_metadataCalls]);
	    injectErrors(this, metadata, (0, _classPrivateFieldLooseBase2.default)(this, _metadataErrors)[_metadataErrors]);
	    injectEvents(this, metadata, (0, _classPrivateFieldLooseBase2.default)(this, _metadataEvents)[_metadataEvents]); // setup the available extensions

	    this.setSignedExtensions(signedExtensions || (metadata.asLatest.extrinsic.version.gt(_util$5.BN_ZERO) ? metadata.asLatest.extrinsic.signedExtensions.map(key => key.toString()) : _index$7.fallbackExtensions), userExtensions); // setup the chain properties with format overrides

	    this.setChainProperties(extractProperties(this, metadata));
	  } // sets the available signed extensions


	  setSignedExtensions(signedExtensions = _index$7.fallbackExtensions, userExtensions) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions] = signedExtensions;
	    (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions] = userExtensions;
	    const unknown = (0, _index$7.findUnknownExtensions)((0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions], (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions]);

	    if (unknown.length) {
	      l.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
	    }
	  }

	}

	exports.TypeRegistry = TypeRegistry;
	});

	var _registry = registry;

	var create = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_createClass$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _createClass$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _createClass$1[key];
	    }
	  });
	});



	Object.keys(_createType).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _createType[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _createType[key];
	    }
	  });
	});



	Object.keys(_encodeTypes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _encodeTypes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _encodeTypes[key];
	    }
	  });
	});



	Object.keys(_getTypeDef).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _getTypeDef[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _getTypeDef[key];
	    }
	  });
	});



	Object.keys(_registry).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _registry[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _registry[key];
	    }
	  });
	});



	Object.keys(_typeSplit).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _typeSplit[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _typeSplit[key];
	    }
	  });
	});
	});

	var metadata = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "Metadata", {
	  enumerable: true,
	  get: function () {
	    return _Metadata.Metadata;
	  }
	});
	Object.defineProperty(exports, "decorateConstants", {
	  enumerable: true,
	  get: function () {
	    return _index$6.decorateConstants;
	  }
	});
	Object.defineProperty(exports, "decorateExtrinsics", {
	  enumerable: true,
	  get: function () {
	    return _index$6.decorateExtrinsics;
	  }
	});
	Object.defineProperty(exports, "decorateStorage", {
	  enumerable: true,
	  get: function () {
	    return _index$6.decorateStorage;
	  }
	});
	Object.defineProperty(exports, "expandMetadata", {
	  enumerable: true,
	  get: function () {
	    return _index$6.expandMetadata;
	  }
	});
	});

	var require$$1$1 = jsonrpc_1;

	var _index2$1 = create;

	var _index3$1 = metadata;

	var bundle$3 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  typeDefinitions: true,
	  rpcDefinitions: true,
	  TypeDefInfo: true,
	  packageInfo: true,
	  unwrapStorageType: true
	};
	Object.defineProperty(exports, "rpcDefinitions", {
	  enumerable: true,
	  get: function () {
	    return _jsonrpc.default;
	  }
	});
	Object.defineProperty(exports, "TypeDefInfo", {
	  enumerable: true,
	  get: function () {
	    return _types$1.TypeDefInfo;
	  }
	});
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo2$1.packageInfo;
	  }
	});
	Object.defineProperty(exports, "unwrapStorageType", {
	  enumerable: true,
	  get: function () {
	    return _StorageKey.unwrapStorageType;
	  }
	});
	exports.typeDefinitions = void 0;

	var typeDefinitions = _interopRequireWildcard(require$$0$3);

	exports.typeDefinitions = typeDefinitions;

	var _jsonrpc = interopRequireDefault(require$$1$1);



	Object.keys(_index$e).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index$e[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$e[key];
	    }
	  });
	});



	Object.keys(_index2$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index2$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index2$1[key];
	    }
	  });
	});



	Object.keys(_indexTypes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _indexTypes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _indexTypes[key];
	    }
	  });
	});



	Object.keys(_index3$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index3$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index3$1[key];
	    }
	  });
	});







	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	});

	var _bundle$3 = bundle$3;

	var types = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$3[key];
	    }
	  });
	});
	});

	var _rxjs = /*@__PURE__*/getAugmentedNamespace(esm5);

	var detectedCapabilities_1 = detectedCapabilities;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const NumberMap = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'];

	function mapCapabilities({
	  accountIdLength,
	  refcount1Length,
	  refcount2Length,
	  refcount3Length
	}, [leasePeriodsPerSlot, slotRangeCount], [stakingVersion], [keys, accountInfo]) {
	  const types = {}; // AccountInfo

	  if (accountInfo) {
	    const length = accountInfo.length;

	    if (length === refcount1Length) {
	      types.AccountInfo = 'AccountInfoWithRefCount';
	    } else if (length === refcount2Length) {
	      types.AccountInfo = 'AccountInfoWithDualRefCount';
	    } else if (length === refcount3Length) {
	      types.AccountInfo = 'AccountInfoWithTripleRefCount';
	    }
	  } // ValidatorPrefs


	  if (stakingVersion) {
	    if (stakingVersion.index >= 4) {
	      // v1 = index 0, V5 = index 4
	      types.ValidatorPrefs = 'ValidatorPrefsWithBlocked';
	    } else {
	      types.ValidatorPrefs = 'ValidatorPrefsWithCommission';
	    }
	  } // Keys


	  if (keys) {
	    try {
	      const [offset, numItems] = (0, _util$5.compactFromU8a)(keys);
	      const tupleLength = (keys.length - offset) / numItems.toNumber();
	      const numIds = tupleLength / accountIdLength;
	      const numIdsRound = Math.floor(numIds);
	      (0, _util$5.assert)(numIds >= 2 && numIds <= 11, () => `Detected ${numIds} in Keys, should be >= 2 and <= 11`);

	      if (numIdsRound !== numIds) {
	        // Beefy?
	        if ((numIdsRound - 1) * accountIdLength + 33 === tupleLength) {
	          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	          // @ts-ignore
	          types.Keys = `SessionKeys${numIdsRound - 1}B`;
	        } else {
	          (0, _util$5.assert)(false, () => `Expected integer number of keys, found ${numIds.toFixed(2)}`);
	        }
	      } else {
	        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	        // @ts-ignore
	        types.Keys = `SessionKeys${numIds - 1}`;
	      }
	    } catch {// ignore
	    }
	  } // auctions


	  if (leasePeriodsPerSlot && slotRangeCount) {
	    const _enum = [];

	    for (let i = 0; leasePeriodsPerSlot.gtn(i); i++) {
	      for (let j = i; leasePeriodsPerSlot.gtn(j); j++) {
	        _enum.push(`${NumberMap[i]}${NumberMap[j]}`);
	      }
	    }

	    types.SlotRange = {
	      _enum
	    };
	    types.WinningData = `[WinningDataEntry; ${slotRangeCount.toNumber()}]`;
	  }

	  return types;
	}

	function filterEntries(original) {
	  const included = original.map(c => !!c);
	  return {
	    filtered: original.filter((_, index) => included[index]),
	    included,
	    original
	  };
	}

	function extractResults(results, map) {
	  let offset = -1;
	  return map.included.map(isIncluded => isIncluded ? results[++offset] : null);
	}
	/**
	 * @description Query the chain for the specific capabilities
	 */


	function detectedCapabilities(api, blockHash) {
	  var _api$consts$auctions, _api$consts$auctions2, _api$query$staking, _api$query$session, _api$query$system, _api$query$system$acc;

	  const emptyAccountId = api.registry.createType('AccountId');
	  const consts = filterEntries([(_api$consts$auctions = api.consts.auctions) === null || _api$consts$auctions === void 0 ? void 0 : _api$consts$auctions.leasePeriodsPerSlot, (_api$consts$auctions2 = api.consts.auctions) === null || _api$consts$auctions2 === void 0 ? void 0 : _api$consts$auctions2.slotRangeCount]);
	  const queries = filterEntries([(_api$query$staking = api.query.staking) === null || _api$query$staking === void 0 ? void 0 : _api$query$staking.storageVersion]);
	  const raws = filterEntries([(_api$query$session = api.query.session) === null || _api$query$session === void 0 ? void 0 : _api$query$session.queuedKeys.key(), (_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : (_api$query$system$acc = _api$query$system.account) === null || _api$query$system$acc === void 0 ? void 0 : _api$query$system$acc.key(emptyAccountId)]);
	  return (0, _rxjs.combineLatest)([consts.filtered.length ? blockHash // FIXME consts don't have .at as of yet...
	  ? (0, _rxjs.of)([]) : (0, _rxjs.of)(consts.filtered) : (0, _rxjs.of)([]), queries.filtered.length ? blockHash ? (0, _rxjs.combineLatest)(queries.filtered.map(c => c.at(blockHash))) : api.queryMulti(queries.filtered) : (0, _rxjs.of)([]), raws.filtered.length ? blockHash ? (0, _rxjs.combineLatest)(raws.filtered.map(k => api.rpc.state.getStorage.raw(k, blockHash))) : (0, _rxjs.combineLatest)(raws.filtered.map(k => api.rpc.state.getStorage.raw(k))) : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([cResults, qResults, rResults]) => mapCapabilities({
	    accountIdLength: emptyAccountId.encodedLength,
	    refcount1Length: api.registry.createType('AccountInfoWithRefCount').encodedLength,
	    refcount2Length: api.registry.createType('AccountInfoWithDualRefCount').encodedLength,
	    refcount3Length: api.registry.createType('AccountInfoWithTripleRefCount').encodedLength
	  }, extractResults(cResults, consts), extractResults(qResults, queries), extractResults(rResults, raws))), (0, _rxjs.take)(1), (0, _rxjs.catchError)(() => (0, _rxjs.of)({})));
	}

	var capabilities = /*#__PURE__*/Object.defineProperty({
		detectedCapabilities: detectedCapabilities_1
	}, '__esModule', {value: true});

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$9.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo$5.packageInfo, _packageInfo$8.packageInfo, _packageInfo2$1.packageInfo]);

	// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	(0, _util$5.detectPackage)(_packageInfo$8.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo$7.packageInfo, _packageInfo2$1.packageInfo]);

	var refCountDelay_2 = refCountDelay;



	// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function refCountDelay(delay = 1750) {
	  return source => {
	    // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
	    let [state, refCount, connection, scheduler] = [0, 0, _rxjs.Subscription.EMPTY, _rxjs.Subscription.EMPTY];
	    return new _rxjs.Observable(ob => {
	      source.subscribe(ob);

	      if (refCount++ === 0) {
	        if (state === 1) {
	          scheduler.unsubscribe();
	        } else {
	          connection = source.connect();
	        }

	        state = 3;
	      }

	      return () => {
	        if (--refCount === 0) {
	          if (state === 2) {
	            state = 0;
	            scheduler.unsubscribe();
	          } else {
	            // state === 3
	            state = 1;
	            scheduler = _rxjs.asapScheduler.schedule(() => {
	              state = 0;
	              connection.unsubscribe();
	            }, delay);
	          }
	        }
	      };
	    });
	  };
	}

	var refCountDelay_1 = /*#__PURE__*/Object.defineProperty({
		refCountDelay: refCountDelay_2
	}, '__esModule', {value: true});

	var _refCountDelay = refCountDelay_1;

	var drr_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.drr = void 0;







	// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l = (0, _util$5.logger)('drr');

	const CMP = (a, b) => (0, _util$5.stringify)({
	  t: a
	}) === (0, _util$5.stringify)({
	  t: b
	});

	const ERR = error => {
	  l.error(error.message);
	  throw error;
	};

	const NOOP = () => undefined;
	/**
	 * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
	 *
	 * @ignore
	 * @internal
	 */


	const drr = ({
	  delay,
	  skipChange = false,
	  skipTimeout = false
	} = {}) => source$ => source$.pipe((0, _rxjs.catchError)(ERR), skipChange ? (0, _rxjs.tap)(NOOP) : (0, _rxjs.distinctUntilChanged)(CMP), (0, _rxjs.publishReplay)(1), skipTimeout ? (0, _rxjs.refCount)() : (0, _refCountDelay.refCountDelay)(delay));

	exports.drr = drr;
	});

	var _drr = drr_1;

	var memo_2 = memo;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Wraps a derive, doing 2 things to optimize calls -
	//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed
	//   2. wraps the observable in a drr() (which includes an unsub delay)

	/** @internal */
	function memo(instanceId, inner) {
	  const options = {
	    getInstanceId: () => instanceId
	  };
	  const cached = (0, _util$5.memoize)((...params) => new _rxjs.Observable(observer => {
	    const subscription = inner(...params).subscribe(observer);
	    return () => {
	      cached.unmemoize(...params);
	      subscription.unsubscribe();
	    };
	  }).pipe((0, _drr.drr)()), options);
	  return cached;
	}

	var memo_1 = /*#__PURE__*/Object.defineProperty({
		memo: memo_2
	}, '__esModule', {value: true});

	var _memo = memo_1;

	var util$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_drr).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _drr[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _drr[key];
	    }
	  });
	});



	Object.keys(_memo).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _memo[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _memo[key];
	    }
	  });
	});



	Object.keys(_refCountDelay).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _refCountDelay[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _refCountDelay[key];
	    }
	  });
	});
	});

	var _types = types;

	var _index$5 = util$7;

	var bundle$2 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  RpcCore: true,
	  packageInfo: true
	};
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$8.packageInfo;
	  }
	});
	exports.RpcCore = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);









	Object.keys(_index$5).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index$5[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index$5[key];
	    }
	  });
	});



	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const l = (0, _util$5.logger)('rpc-core');
	const EMPTY_META = {
	  fallback: undefined,
	  modifier: {
	    isOptional: true
	  },
	  type: {
	    asMap: {
	      linked: {
	        isTrue: false
	      }
	    },
	    isMap: false
	  }
	}; // utility method to create a nicely-formatted error

	/** @internal */

	function logErrorMessage(method, {
	  params,
	  type
	}, error) {
	  const inputs = params.map(({
	    isOptional,
	    name,
	    type
	  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
	  l.error(`${method}(${inputs}): ${type}:: ${error.message}`);
	}

	function isTreatAsHex(key) {
	  // :code is problematic - it does not have the length attached, which is
	  // unlike all other storage entries where it is indeed properly encoded
	  return ['0x3a636f6465'].includes(key.toHex());
	}
	/**
	 * @name Rpc
	 * @summary The API may use a HTTP or WebSockets provider.
	 * @description It allows for querying a Polkadot Client Node.
	 * WebSockets provider is recommended since HTTP provider only supports basic querying.
	 *
	 * ```mermaid
	 * graph LR;
	 *   A[Api] --> |WebSockets| B[WsProvider];
	 *   B --> |endpoint| C[ws://127.0.0.1:9944]
	 * ```
	 *
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * import Rpc from '@polkadot/rpc-core';
	 * import { WsProvider } from '@polkadot/rpc-provider/ws';
	 *
	 * const provider = new WsProvider('ws://127.0.0.1:9944');
	 * const rpc = new Rpc(provider);
	 * ```
	 */


	var _instanceId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("instanceId");

	var _registryDefault = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registryDefault");

	var _getBlockRegistry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("getBlockRegistry");

	var _storageCache = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("storageCache");

	class RpcCore {
	  /**
	   * @constructor
	   * Default constructor for the Api Object
	   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
	   */
	  constructor(instanceId, registry, provider, userRpc = {}) {
	    Object.defineProperty(this, _instanceId, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _registryDefault, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _getBlockRegistry, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _storageCache, {
	      writable: true,
	      value: new Map()
	    });
	    this.mapping = new Map();
	    this.provider = void 0;
	    this.sections = [];
	    // eslint-disable-next-line @typescript-eslint/unbound-method
	    (0, _util$5.assert)(provider && (0, _util$5.isFunction)(provider.send), 'Expected Provider to API create');
	    (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] = instanceId;
	    (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault] = registry;
	    this.provider = provider;
	    const sectionNames = Object.keys(_types.rpcDefinitions); // these are the base keys (i.e. part of jsonrpc)

	    this.sections.push(...sectionNames); // decorate all interfaces, defined and user on this instance

	    this.addUserInterfaces(userRpc);
	  }
	  /**
	   * @description Returns the connected status of a provider
	   */


	  get isConnected() {
	    return this.provider.isConnected;
	  }
	  /**
	   * @description Manually connect from the attached provider
	   */


	  connect() {
	    return this.provider.connect();
	  }
	  /**
	   * @description Manually disconnect from the attached provider
	   */


	  disconnect() {
	    return this.provider.disconnect();
	  }
	  /**
	   * @description Sets a registry swap (typically from Api)
	   */


	  setRegistrySwap(registrySwap) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] = (0, _util$5.memoize)(registrySwap, {
	      getInstanceId: () => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId]
	    });
	  }

	  addUserInterfaces(userRpc) {
	    // add any extra user-defined sections
	    this.sections.push(...Object.keys(userRpc).filter(key => !this.sections.includes(key))); // decorate the sections with base and user methods

	    this.sections.forEach(sectionName => {
	      var _ref, _ref2;

	      (_ref = this)[_ref2 = sectionName] || (_ref[_ref2] = {});
	      const section = this[sectionName];
	      Object.entries(_objectSpread(_objectSpread({}, this._createInterface(sectionName, _types.rpcDefinitions[sectionName] || {})), this._createInterface(sectionName, userRpc[sectionName] || {}))).forEach(([key, value]) => {
	        section[key] || (section[key] = value);
	      });
	    });
	  }

	  _createInterface(section, methods) {
	    return Object.entries(methods).filter(([method, {
	      endpoint
	    }]) => !this.mapping.has(endpoint || `${section}_${method}`)).reduce((exposed, [method, {
	      endpoint
	    }]) => {
	      const def = methods[method];
	      const isSubscription = !!def.pubsub;
	      const jsonrpc = endpoint || `${section}_${method}`;
	      this.mapping.set(jsonrpc, _objectSpread(_objectSpread({}, def), {}, {
	        isSubscription,
	        jsonrpc,
	        method,
	        section
	      }));
	      exposed[method] = isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def);
	      return exposed;
	    }, {});
	  }

	  _memomize(creator, def) {
	    const memoized = (0, _util$5.memoize)(creator('scale'), {
	      getInstanceId: () => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId]
	    });
	    memoized.json = creator('json');
	    memoized.raw = creator('raw');
	    memoized.meta = def;
	    return memoized;
	  }

	  _createMethodSend(section, method, def) {
	    const rpcName = def.endpoint || `${section}_${method}`;
	    const hashIndex = def.params.findIndex(({
	      isHistoric
	    }) => isHistoric);
	    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable

	    const callWithRegistry = async (outputAs, values) => {
	      const blockHash = hashIndex === -1 ? null : values[hashIndex];
	      const {
	        registry
	      } = outputAs === 'scale' && blockHash && (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] ? await (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry]((0, _util$5.u8aToU8a)(blockHash)) : {
	        registry: (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault]
	      };

	      const params = this._formatInputs(registry, null, def, values);

	      const data = await this.provider.send(rpcName, params.map(param => param.toJSON()));
	      return outputAs === 'scale' ? this._formatOutput(registry, blockHash, method, def, params, data) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', data);
	    };

	    const creator = outputAs => (...values) => {
	      const isDelayed = outputAs === 'scale' && hashIndex !== -1 && !!values[hashIndex];
	      return new _rxjs.Observable(observer => {
	        callWithRegistry(outputAs, values).then(value => {
	          observer.next(value);
	          observer.complete();
	        }).catch(error => {
	          logErrorMessage(method, def, error);
	          observer.error(error);
	          observer.complete();
	        });
	        return () => {
	          var _memoized;

	          // delete old results from cache
	          (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);
	        };
	      }).pipe((0, _rxjs.publishReplay)(1), // create a Replay(1)
	      isDelayed ? (0, _index$5.refCountDelay)() // Unsubscribe after delay
	      : (0, _rxjs.refCount)());
	    };

	    memoized = this._memomize(creator, def);
	    return memoized;
	  } // create a subscriptor, it subscribes once and resolves with the id as subscribe


	  _createSubscriber({
	    paramsJson,
	    subName,
	    subType,
	    update
	  }, errorHandler) {
	    return new Promise((resolve, reject) => {
	      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {
	        errorHandler(error);
	        reject(error);
	      });
	    });
	  }

	  _createMethodSubscribe(section, method, def) {
	    const [updateType, subMethod, unsubMethod] = def.pubsub;
	    const subName = `${section}_${subMethod}`;
	    const unsubName = `${section}_${unsubMethod}`;
	    const subType = `${section}_${updateType}`;
	    let memoized = null;

	    const creator = outputAs => (...values) => {
	      return new _rxjs.Observable(observer => {
	        // Have at least an empty promise, as used in the unsubscribe
	        let subscriptionPromise = Promise.resolve(null);

	        const registry = (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault];

	        const errorHandler = error => {
	          logErrorMessage(method, def, error);
	          observer.error(error);
	        };

	        try {
	          const params = this._formatInputs(registry, null, def, values);

	          const paramsJson = params.map(param => param.toJSON());

	          const update = (error, result) => {
	            if (error) {
	              logErrorMessage(method, def, error);
	              return;
	            }

	            try {
	              observer.next(outputAs === 'scale' ? this._formatOutput(registry, null, method, def, params, result) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', result));
	            } catch (error) {
	              observer.error(error);
	            }
	          };

	          subscriptionPromise = this._createSubscriber({
	            paramsJson,
	            subName,
	            subType,
	            update
	          }, errorHandler);
	        } catch (error) {
	          errorHandler(error);
	        } // Teardown logic


	        return () => {
	          var _memoized2;

	          // Delete from cache, so old results don't hang around
	          (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.unmemoize(...values); // Unsubscribe from provider

	          subscriptionPromise.then(subscriptionId => (0, _util$5.isNull)(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));
	        };
	      }).pipe((0, _index$5.drr)());
	    };

	    memoized = this._memomize(creator, def);
	    return memoized;
	  }

	  _formatInputs(registry, blockHash, def, inputs) {
	    const reqArgCount = def.params.filter(({
	      isOptional
	    }) => !isOptional).length;
	    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;
	    (0, _util$5.assert)(inputs.length >= reqArgCount && inputs.length <= def.params.length, () => `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
	    return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {
	      blockHash
	    }));
	  }

	  _formatOutput(registry, blockHash, method, rpc, params, result) {
	    if (rpc.type === 'StorageData') {
	      const key = params[0];
	      return this._formatStorageData(registry, blockHash, key, result);
	    } else if (rpc.type === 'StorageChangeSet') {
	      const keys = params[0];
	      return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);
	    } else if (rpc.type === 'Vec<StorageChangeSet>') {
	      const mapped = result.map(({
	        block,
	        changes
	      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]); // we only query at a specific block, not a range - flatten

	      return method === 'queryStorageAt' ? mapped[0][1] : mapped;
	    }

	    return registry.createTypeUnsafe(rpc.type, [result], {
	      blockHash
	    });
	  }

	  _formatStorageData(registry, blockHash, key, value) {
	    const isEmpty = (0, _util$5.isNull)(value); // we convert to Uint8Array since it maps to the raw encoding, all
	    // data will be correctly encoded (incl. numbers, excl. :code)

	    const input = isEmpty ? null : isTreatAsHex(key) ? value : (0, _util$5.u8aToU8a)(value);
	    return this._newType(registry, blockHash, key, input, isEmpty);
	  }

	  _formatStorageSet(registry, blockHash, keys, changes) {
	    // For StorageChangeSet, the changes has the [key, value] mappings
	    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values
	    // one at a time, all based on the query types. Three values can be returned -
	    //   - Codec - There is a valid value, non-empty
	    //   - null - The storage key is empty

	    return keys.reduce((results, key, index) => {
	      results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
	      return results;
	    }, []);
	  }

	  _formatStorageSetEntry(registry, blockHash, key, changes, witCache, entryIndex) {
	    const hexKey = key.toHex();
	    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback
	    //   - in the case of an array of values, fill the hole from the cache
	    //   - if a single result value, don't fill - it is not an update hole
	    //   - fallback to an empty option in all cases

	    const value = (0, _util$5.isUndefined)(found) ? witCache && (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];
	    const isEmpty = (0, _util$5.isNull)(value);
	    const input = isEmpty || isTreatAsHex(key) ? value : (0, _util$5.u8aToU8a)(value); // store the retrieved result - the only issue with this cache is that there is no
	    // clearing of it, so very long running processes (not just a couple of hours, longer)
	    // will increase memory beyond what is allowed.

	    (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].set(hexKey, value);

	    return this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
	  }

	  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
	    // single return value (via state.getStorage), decode the value based on the
	    // outputType that we have specified. Fallback to Raw on nothing
	    const type = key.outputType || 'Raw';
	    const meta = key.meta || EMPTY_META;
	    const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;

	    try {
	      return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback ? (0, _util$5.hexToU8a)(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {
	        blockHash,
	        isPedantic: true
	      }) : input], {
	        blockHash,
	        isOptional: meta.modifier.isOptional,
	        isPedantic: !meta.modifier.isOptional
	      });
	    } catch (error) {
	      throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
	    }
	  }

	}

	exports.RpcCore = RpcCore;
	});

	var _bundle$2 = bundle$2;

	var rpcCore = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$2[key];
	    }
	  });
	});
	});

	var approvalFlagsToBools_2 = approvalFlagsToBools;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/** @internal */
	function approvalFlagsToBools(flags) {
	  const bools = [];
	  flags.forEach(flag => {
	    const str = flag.toString(2); // read from lowest bit to highest

	    for (const bit of str.split('').reverse()) {
	      bools.push(!!parseInt(bit, 10));
	    }
	  }); // slice off trailing "false" values, as in substrate

	  const lastApproval = bools.lastIndexOf(true);
	  return lastApproval >= 0 ? bools.slice(0, lastApproval + 1) : [];
	}

	var approvalFlagsToBools_1 = /*#__PURE__*/Object.defineProperty({
		approvalFlagsToBools: approvalFlagsToBools_2
	}, '__esModule', {value: true});

	var cacheImpl = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.deriveNoopCache = exports.deriveMapCache = void 0;
	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const mapCache = new Map();
	const deriveMapCache = {
	  del: key => {
	    mapCache.delete(key);
	  },
	  forEach: cb => {
	    const entries = mapCache.entries();

	    for (const entry in entries) {
	      cb(entry[0], entry[1]);
	    }
	  },
	  get: key => {
	    return mapCache.get(key);
	  },
	  set: (key, value) => {
	    mapCache.set(key, value);
	  }
	};
	exports.deriveMapCache = deriveMapCache;
	const deriveNoopCache = {
	  del: () => undefined,
	  forEach: () => undefined,
	  get: () => undefined,
	  set: (_, value) => value
	};
	exports.deriveNoopCache = deriveNoopCache;
	});

	var _cacheImpl = cacheImpl;

	var cache = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setDeriveCache = setDeriveCache;
	exports.deriveCache = void 0;



	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
	let deriveCache;
	exports.deriveCache = deriveCache;

	function wrapCache(keyStart, cache) {
	  return {
	    del: partial => cache.del(`${keyStart}${partial}`),
	    forEach: cache.forEach,
	    get: partial => {
	      const key = `${keyStart}${partial}`;
	      const cached = cache.get(key);

	      if (cached) {
	        cached.x = Date.now();
	        cache.set(key, cached);
	        return cached.v;
	      }

	      return undefined;
	    },
	    set: (partial, v) => {
	      cache.set(`${keyStart}${partial}`, {
	        v,
	        x: Date.now()
	      });
	    }
	  };
	}

	function clearCache(cache) {
	  // clear all expired values
	  const now = Date.now();
	  const all = [];
	  cache.forEach((key, {
	    x
	  }) => {
	    now - x > CHACHE_EXPIRY && all.push(key);
	  }); // don't do delete inside loop, just in-case

	  all.forEach(key => cache.del(key));
	}

	function setDeriveCache(prefix = '', cache) {
	  exports.deriveCache = deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : _cacheImpl.deriveNoopCache;

	  if (cache) {
	    clearCache(cache);
	  }
	}

	setDeriveCache();
	});

	var _rpcCore = rpcCore;

	var _approvalFlagsToBools = approvalFlagsToBools_1;

	var _cache = cache;

	var util$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  drr: true,
	  memo: true
	};
	Object.defineProperty(exports, "drr", {
	  enumerable: true,
	  get: function () {
	    return _rpcCore.drr;
	  }
	});
	Object.defineProperty(exports, "memo", {
	  enumerable: true,
	  get: function () {
	    return _rpcCore.memo;
	  }
	});





	Object.keys(_approvalFlagsToBools).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _approvalFlagsToBools[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _approvalFlagsToBools[key];
	    }
	  });
	});



	Object.keys(_cache).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _cache[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _cache[key];
	    }
	  });
	});



	Object.keys(_cacheImpl).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _cacheImpl[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _cacheImpl[key];
	    }
	  });
	});
	});

	var _index$4 = util$6;

	var accountId_2 = accountId;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function retrieve$1(api, address) {
	  const decoded = (0, _util$5.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());

	  if (decoded.length > 8) {
	    return (0, _rxjs.of)(api.registry.createType('AccountId', decoded));
	  }

	  const accountIndex = api.registry.createType('AccountIndex', decoded);
	  return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _rxjs.map)(accountId => (0, _util$5.assertReturn)(accountId, 'Unable to retrieve accountId')));
	}
	/**
	 * @name accountId
	 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
	 * @description  An [[AccountId]]
	 */


	function accountId(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, address => retrieve$1(api, address));
	}

	var accountId_1 = /*#__PURE__*/Object.defineProperty({
		accountId: accountId_2
	}, '__esModule', {value: true});

	var flags_2 = flags;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
	  const isIncluded = id => address ? id.toString() === address.toString() : false;

	  return {
	    isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(isIncluded),
	    isSociety: (societyMembers || []).some(isIncluded),
	    isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === (address === null || address === void 0 ? void 0 : address.toString()),
	    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
	  };
	}
	/**
	 * @name info
	 * @description Returns account membership flags
	 */


	function flags(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, address => {
	    var _api$query$councilSec, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;

	    const councilSection = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';
	    return (0, _rxjs.combineLatest)([address && (_api$query$councilSec = api.query[councilSection]) !== null && _api$query$councilSec !== void 0 && _api$query$councilSec.members ? api.query[councilSection].members() : (0, _rxjs.of)(undefined), address && (_api$query$council = api.query.council) !== null && _api$query$council !== void 0 && _api$query$council.members ? api.query.council.members() : (0, _rxjs.of)([]), address && (_api$query$technicalC = api.query.technicalCommittee) !== null && _api$query$technicalC !== void 0 && _api$query$technicalC.members ? api.query.technicalCommittee.members() : (0, _rxjs.of)([]), address && (_api$query$society = api.query.society) !== null && _api$query$society !== void 0 && _api$query$society.members ? api.query.society.members() : (0, _rxjs.of)([]), address && (_api$query$sudo = api.query.sudo) !== null && _api$query$sudo !== void 0 && _api$query$sudo.key ? api.query.sudo.key() : (0, _rxjs.of)(undefined)]).pipe((0, _rxjs.map)(result => parseFlags(address, result)));
	  });
	}

	var flags_1 = /*#__PURE__*/Object.defineProperty({
		flags: flags_2
	}, '__esModule', {value: true});

	var idAndIndex_2 = idAndIndex;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function retrieve(api, address) {
	  try {
	    // yes, this can fail, don't care too much, catch will catch it
	    const decoded = (0, _util$5.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());

	    if (decoded.length > 8) {
	      const accountId = api.registry.createType('AccountId', decoded);
	      return api.derive.accounts.idToIndex(accountId).pipe((0, _rxjs.map)(accountIndex => [accountId, accountIndex]));
	    }

	    const accountIndex = api.registry.createType('AccountIndex', decoded);
	    return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _rxjs.map)(accountId => [accountId, accountIndex]));
	  } catch (error) {
	    return (0, _rxjs.of)([undefined, undefined]);
	  }
	}
	/**
	 * @name idAndIndex
	 * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
	 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
	 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
	 * });
	 * ```
	 */


	function idAndIndex(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, address => retrieve(api, address));
	}

	var idAndIndex_1 = /*#__PURE__*/Object.defineProperty({
		idAndIndex: idAndIndex_2
	}, '__esModule', {value: true});

	var idToIndex_2 = idToIndex;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name idToIndex
	 * @param {( AccountId | string )} accountId - An accounts Id in different formats.
	 * @returns Returns the corresponding AccountIndex.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
	 * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
	 *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
	 * });
	 * ```
	 */
	function idToIndex(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => api.derive.accounts.indexes().pipe((0, _rxjs.map)(indexes => (indexes || {})[accountId.toString()])));
	}

	var idToIndex_1 = /*#__PURE__*/Object.defineProperty({
		idToIndex: idToIndex_2
	}, '__esModule', {value: true});

	var identity_2 = identity$1;
	var hasIdentity_1 = hasIdentity;
	var hasIdentityMulti_1 = hasIdentityMulti;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const UNDEF_HEX = {
	  toHex: () => undefined
	};

	function dataAsString(data) {
	  return data.isRaw ? (0, _util$5.u8aToString)(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
	}

	function extractOther(additional) {
	  return additional.reduce((other, [_key, _value]) => {
	    const key = dataAsString(_key);
	    const value = dataAsString(_value);

	    if (key && value) {
	      other[key] = value;
	    }

	    return other;
	  }, {});
	}

	function extractIdentity(identityOfOpt, superOf) {
	  if (!(identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome)) {
	    return {
	      judgements: []
	    };
	  }

	  const {
	    info,
	    judgements
	  } = identityOfOpt.unwrap();
	  const topDisplay = dataAsString(info.display);
	  return {
	    display: superOf && dataAsString(superOf[1]) || topDisplay,
	    displayParent: superOf && topDisplay,
	    email: dataAsString(info.email),
	    image: dataAsString(info.image),
	    judgements,
	    legal: dataAsString(info.legal),
	    other: extractOther(info.additional),
	    parent: superOf && superOf[0],
	    pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
	    riot: dataAsString(info.riot),
	    twitter: dataAsString(info.twitter),
	    web: dataAsString(info.web)
	  };
	}

	function getParent(api, identityOfOpt, superOfOpt) {
	  if (identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome) {
	    // this identity has something set
	    return (0, _rxjs.of)([identityOfOpt, undefined]);
	  } else if (superOfOpt !== null && superOfOpt !== void 0 && superOfOpt.isSome) {
	    const superOf = superOfOpt.unwrap(); // we have a super

	    return (0, _rxjs.combineLatest)([api.query.identity.identityOf(superOf[0]), (0, _rxjs.of)(superOf)]);
	  } // nothing of value returned


	  return (0, _rxjs.of)([undefined, undefined]);
	}

	function getBase(api, accountId) {
	  var _api$query$identity;

	  return accountId && (_api$query$identity = api.query.identity) !== null && _api$query$identity !== void 0 && _api$query$identity.identityOf ? api.queryMulti([[api.query.identity.identityOf, accountId], [api.query.identity.superOf, accountId]]) : (0, _rxjs.of)([undefined, undefined]);
	}
	/**
	 * @name identity
	 * @description Returns identity info for an account
	 */


	function identity$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => getBase(api, accountId).pipe((0, _rxjs.switchMap)(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), (0, _rxjs.map)(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
	}

	function hasIdentity(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => api.derive.accounts.hasIdentityMulti([accountId]).pipe((0, _rxjs.map)(([first]) => first)));
	}

	function hasIdentityMulti(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountIds => {
	    var _api$query$identity2;

	    return (_api$query$identity2 = api.query.identity) !== null && _api$query$identity2 !== void 0 && _api$query$identity2.identityOf ? (0, _rxjs.combineLatest)([api.query.identity.identityOf.multi(accountIds), api.query.identity.superOf.multi(accountIds)]).pipe((0, _rxjs.map)(([identities, supers]) => identities.map((identityOfOpt, index) => {
	      const superOfOpt = supers[index];
	      const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
	      let display;

	      if (identityOfOpt && identityOfOpt.isSome) {
	        const value = dataAsString(identityOfOpt.unwrap().info.display);

	        if (value && !(0, _util$5.isHex)(value)) {
	          display = value;
	        }
	      }

	      return {
	        display,
	        hasIdentity: !!(display || parentId),
	        parentId
	      };
	    }))) : (0, _rxjs.of)(accountIds.map(() => ({
	      hasIdentity: false
	    })));
	  });
	}

	var identity_1 = /*#__PURE__*/Object.defineProperty({
		identity: identity_2,
		hasIdentity: hasIdentity_1,
		hasIdentityMulti: hasIdentityMulti_1
	}, '__esModule', {value: true});

	var indexToId_2 = indexToId;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name indexToId
	 * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
	 * @returns Returns the corresponding AccountId.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.accounts.indexToId('F7Hs', (accountId) => {
	 *   console.log(`The AccountId of F7Hs is ${accountId}`);
	 * });
	 * ```
	 */
	function indexToId(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountIndex => api.query.indices ? api.query.indices.accounts(accountIndex).pipe((0, _rxjs.map)(optResult => optResult.unwrapOr([])[0])) : (0, _rxjs.of)(undefined));
	}

	var indexToId_1 = /*#__PURE__*/Object.defineProperty({
		indexToId: indexToId_2
	}, '__esModule', {value: true});

	var indexes_2$1 = indexes$1;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	let indicesCache = null;

	function queryAccounts(api) {
	  return api.query.indices.accounts.entries().pipe((0, _rxjs.map)(entries => entries.reduce((indexes, [key, idOpt]) => {
	    if (idOpt.isSome) {
	      indexes[idOpt.unwrap()[0].toString()] = key.args[0];
	    }

	    return indexes;
	  }, {})));
	}
	/**
	 * @name indexes
	 * @returns Returns all the indexes on the system.
	 * @description This is an unwieldly query since it loops through
	 * all of the enumsets and returns all of the values found. This could be up to 32k depending
	 * on the number of active accounts in the system
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.accounts.indexes((indexes) => {
	 *   console.log('All existing AccountIndexes', indexes);
	 * });
	 * ```
	 */


	function indexes$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => indicesCache ? (0, _rxjs.of)(indicesCache) : (api.query.indices ? queryAccounts(api).pipe((0, _rxjs.startWith)({})) : (0, _rxjs.of)({})).pipe((0, _rxjs.map)(indices => {
	    indicesCache = indices;
	    return indices;
	  })));
	}

	var indexes_1$1 = /*#__PURE__*/Object.defineProperty({
		indexes: indexes_2$1
	}, '__esModule', {value: true});

	var info_2$4 = info$4;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function retrieveNick(api, accountId) {
	  var _api$query$nicks;

	  return (accountId && (_api$query$nicks = api.query.nicks) !== null && _api$query$nicks !== void 0 && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId) : (0, _rxjs.of)(undefined)).pipe((0, _rxjs.map)(nameOf => nameOf !== null && nameOf !== void 0 && nameOf.isSome ? (0, _util$5.u8aToString)(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber()) : undefined));
	}
	/**
	 * @name info
	 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
	 */


	function info$4(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, address => api.derive.accounts.idAndIndex(address).pipe((0, _rxjs.switchMap)(([accountId, accountIndex]) => (0, _rxjs.combineLatest)([(0, _rxjs.of)({
	    accountId,
	    accountIndex
	  }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)])), (0, _rxjs.map)(([{
	    accountId,
	    accountIndex
	  }, identity, nickname]) => ({
	    accountId,
	    accountIndex,
	    identity,
	    nickname
	  }))));
	}

	var info_1$4 = /*#__PURE__*/Object.defineProperty({
		info: info_2$4
	}, '__esModule', {value: true});

	var _accountId = accountId_1;

	var _flags = flags_1;

	var _idAndIndex = idAndIndex_1;

	var _idToIndex = idToIndex_1;

	var _identity = identity_1;

	var _indexToId = indexToId_1;

	var _indexes$1 = indexes_1$1;

	var _info$4 = info_1$4;

	var accounts$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_accountId).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _accountId[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _accountId[key];
	    }
	  });
	});



	Object.keys(_flags).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _flags[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _flags[key];
	    }
	  });
	});



	Object.keys(_idAndIndex).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _idAndIndex[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _idAndIndex[key];
	    }
	  });
	});



	Object.keys(_idToIndex).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _idToIndex[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _idToIndex[key];
	    }
	  });
	});



	Object.keys(_identity).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _identity[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _identity[key];
	    }
	  });
	});



	Object.keys(_indexToId).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _indexToId[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _indexToId[key];
	    }
	  });
	});



	Object.keys(_indexes$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _indexes$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _indexes$1[key];
	    }
	  });
	});



	Object.keys(_info$4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _info$4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _info$4[key];
	    }
	  });
	});
	});

	var all_2 = all;

	var _defineProperty2$g = interopRequireDefault(defineProperty);







	function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$g(Object(source), true).forEach(function (key) { (0, _defineProperty2$g.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const VESTING_ID = '0x76657374696e6720';

	function calcLocked(api, bestNumber, locks) {
	  let lockedBalance = api.registry.createType('Balance');
	  let lockedBreakdown = [];
	  let vestingLocked = api.registry.createType('Balance');
	  let allLocked = false;

	  if (Array.isArray(locks)) {
	    // only get the locks that are valid until passed the current block
	    lockedBreakdown = locks.filter(({
	      until
	    }) => !until || bestNumber && until.gt(bestNumber));
	    allLocked = lockedBreakdown.some(({
	      amount
	    }) => amount && amount.isMax());
	    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({
	      id
	    }) => id.eq(VESTING_ID)).reduce((result, {
	      amount
	    }) => result.iadd(amount), new _util$5.BN(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699

	    const notAll = lockedBreakdown.filter(({
	      amount
	    }) => amount && !amount.isMax());

	    if (notAll.length) {
	      lockedBalance = api.registry.createType('Balance', (0, _util$5.bnMax)(...notAll.map(({
	        amount
	      }) => amount)));
	    }
	  }

	  return {
	    allLocked,
	    lockedBalance,
	    lockedBreakdown,
	    vestingLocked
	  };
	}

	function calcShared(api, bestNumber, data, locks) {
	  const {
	    allLocked,
	    lockedBalance,
	    lockedBreakdown,
	    vestingLocked
	  } = calcLocked(api, bestNumber, locks);
	  return _objectSpread$g(_objectSpread$g({}, data), {}, {
	    availableBalance: api.registry.createType('Balance', allLocked ? 0 : (0, _util$5.bnMax)(new _util$5.BN(0), data.freeBalance.sub(lockedBalance))),
	    lockedBalance,
	    lockedBreakdown,
	    vestingLocked
	  });
	}

	function calcBalances$1(api, [data, bestNumber, [vesting, allLocks]]) {
	  const shared = calcShared(api, bestNumber, data, allLocks[0]); // Calculate the vesting balances,
	  //  - offset = balance locked at startingBlock
	  //  - perBlock is the unlock amount

	  const emptyVest = api.registry.createType('VestingInfo');
	  const {
	    locked: vestingTotal,
	    perBlock,
	    startingBlock
	  } = vesting || emptyVest;
	  const isStarted = bestNumber.gt(startingBlock);
	  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _util$5.BN(0);
	  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);
	  const isVesting = isStarted && !shared.vestingLocked.isZero();
	  return _objectSpread$g(_objectSpread$g({}, shared), {}, {
	    accountId: data.accountId,
	    accountNonce: data.accountNonce,
	    additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
	    isVesting,
	    vestedBalance,
	    vestedClaimable: api.registry.createType('Balance', isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0),
	    vestingEndBlock: api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0),
	    vestingPerBlock: perBlock,
	    vestingTotal
	  });
	} // old


	function queryOld(api, accountId) {
	  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _rxjs.map)(([locks, optVesting]) => {
	    let vestingNew = null;

	    if (optVesting.isSome) {
	      const {
	        offset: locked,
	        perBlock,
	        startingBlock
	      } = optVesting.unwrap();
	      vestingNew = api.registry.createType('VestingInfo', {
	        locked,
	        perBlock,
	        startingBlock
	      });
	    }

	    return [vestingNew, [locks]];
	  }));
	}

	const isNonNullable = nullable => !!nullable; // current (balances, vesting)


	function queryCurrent(api, accountId, balanceInstances = ['balances']) {
	  var _api$query$vesting;

	  const calls = balanceInstances.map(m => {
	    var _m, _api$query;

	    return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customLocks) || ((_api$query = api.query[m]) === null || _api$query === void 0 ? void 0 : _api$query.locks);
	  });
	  const lockEmpty = calls.map(c => !c);
	  const queries = calls.filter(isNonNullable).map(c => [c, accountId]);
	  return ((_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.queryMulti([[api.query.vesting.vesting, accountId], ...queries]) // TODO We need to check module instances here as well, not only the balances module
	  : queries.length ? api.queryMulti(queries).pipe((0, _rxjs.map)(r => [api.registry.createType('Option<VestingInfo>'), ...r])) : (0, _rxjs.of)([api.registry.createType('Option<VestingInfo>')])).pipe((0, _rxjs.map)(([opt, ...locks]) => {
	    let offset = -1;
	    return [opt.unwrapOr(null), lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offset])];
	  }));
	}
	/**
	 * @name all
	 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
	 * @returns An object containing the results of various balance queries
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const ALICE = 'F7Hs';
	 *
	 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
	 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
	 * });
	 * ```
	 */


	function all(instanceId, api) {
	  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
	  return (0, _index$4.memo)(instanceId, address => api.derive.balances.account(address).pipe((0, _rxjs.switchMap)(account => {
	    var _api$query$system, _api$query$balances;

	    return !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util$5.isFunction)((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) || (0, _util$5.isFunction)((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryCurrent(api, account.accountId, balanceInstances) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, []]]);
	  }), (0, _rxjs.map)(result => calcBalances$1(api, result))));
	}

	var all_1 = /*#__PURE__*/Object.defineProperty({
		all: all_2
	}, '__esModule', {value: true});

	var account_2$1 = account$1;

	var _defineProperty2$f = interopRequireDefault(defineProperty);







	function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$f(Object(source), true).forEach(function (key) { (0, _defineProperty2$f.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function zeroBalance(api) {
	  return api.registry.createType('Balance');
	}

	function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
	  const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
	  return {
	    freeBalance,
	    frozenFee,
	    frozenMisc,
	    reservedBalance,
	    votingBalance
	  };
	}

	function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
	  return _objectSpread$f({
	    accountId,
	    accountNonce,
	    additional: additional.map(b => getBalance(api, b))
	  }, getBalance(api, primary));
	} // old


	function queryBalancesFree(api, accountId) {
	  return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe((0, _rxjs.map)(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]]));
	}

	function queryNonceOnly(api, accountId) {
	  const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];

	  return (0, _util$5.isFunction)(api.query.system.account) ? api.query.system.account(accountId).pipe((0, _rxjs.map)(({
	    nonce
	  }) => fill(nonce))) : (0, _util$5.isFunction)(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId).pipe((0, _rxjs.map)(nonce => fill(nonce))) : (0, _rxjs.of)(fill(api.registry.createType('Index')));
	}

	function queryBalancesAccount(api, accountId, modules = ['balances']) {
	  const balances = modules.map(m => {
	    var _m, _api$query$m;

	    return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customAccount) || ((_api$query$m = api.query[m]) === null || _api$query$m === void 0 ? void 0 : _api$query$m.account);
	  }).filter(q => (0, _util$5.isFunction)(q)).map(q => [q, accountId]);

	  const extract = (nonce, data) => [nonce, data.map(({
	    feeFrozen,
	    free,
	    miscFrozen,
	    reserved
	  }) => [free, reserved, feeFrozen, miscFrozen])]; // NOTE this is for the first case where we do have instances specified


	  return balances.length ? (0, _util$5.isFunction)(api.query.system.account) ? api.queryMulti([[api.query.system.account, accountId], ...balances]).pipe((0, _rxjs.map)(([{
	    nonce
	  }, ...balances]) => extract(nonce, balances))) : api.queryMulti([[api.query.system.accountNonce, accountId], ...balances]).pipe((0, _rxjs.map)(([nonce, ...balances]) => extract(nonce, balances))) : queryNonceOnly(api, accountId);
	}

	function querySystemAccount(api, accountId) {
	  // AccountInfo is current, support old, eg. Edgeware
	  return api.query.system.account(accountId).pipe((0, _rxjs.map)(infoOrTuple => {
	    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
	    const nonce = infoOrTuple.nonce || infoOrTuple[0];

	    if (!data || data.isEmpty) {
	      return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];
	    }

	    const {
	      feeFrozen,
	      free,
	      miscFrozen,
	      reserved
	    } = data;
	    return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];
	  }));
	}
	/**
	 * @name account
	 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
	 * @returns An object containing the results of various balance queries
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const ALICE = 'F7Hs';
	 *
	 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
	 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
	 * });
	 * ```
	 */


	function account$1(instanceId, api) {
	  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
	  return (0, _index$4.memo)(instanceId, address => api.derive.accounts.accountId(address).pipe((0, _rxjs.switchMap)(accountId => {
	    var _api$query$system, _api$query$balances, _api$query$balances2;

	    return accountId ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(accountId), balanceInstances ? queryBalancesAccount(api, accountId, balanceInstances) : (0, _util$5.isFunction)((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) ? querySystemAccount(api, accountId) : (0, _util$5.isFunction)((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryBalancesAccount(api, accountId) : (0, _util$5.isFunction)((_api$query$balances2 = api.query.balances) === null || _api$query$balances2 === void 0 ? void 0 : _api$query$balances2.freeBalance) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : (0, _rxjs.of)([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]]);
	  }), (0, _rxjs.map)(result => calcBalances(api, result))));
	}

	var account_1$1 = /*#__PURE__*/Object.defineProperty({
		account: account_2$1
	}, '__esModule', {value: true});

	var fees_2$1 = fees$1;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name fees
	 * @returns An object containing the combined results of the storage queries for
	 * all relevant fees as declared in the substrate chain spec.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.balances.fees(({ creationFee, transferFee }) => {
	 *   console.log(`The fee for creating a new account on this chain is ${creationFee} units. The fee required for making a transfer is ${transferFee} units.`);
	 * });
	 * ```
	 */
	function fees$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$consts$balances, _api$consts$balances2, _api$consts$balances3, _api$consts$transacti, _api$consts$transacti2;

	    return (0, _rxjs.of)([// deprecated - remove
	    ((_api$consts$balances = api.consts.balances) === null || _api$consts$balances === void 0 ? void 0 : _api$consts$balances.creationFee) || api.registry.createType('Balance'), ((_api$consts$balances2 = api.consts.balances) === null || _api$consts$balances2 === void 0 ? void 0 : _api$consts$balances2.transferFee) || api.registry.createType('Balance'), // current
	    ((_api$consts$balances3 = api.consts.balances) === null || _api$consts$balances3 === void 0 ? void 0 : _api$consts$balances3.existentialDeposit) || api.registry.createType('Balance'), ((_api$consts$transacti = api.consts.transactionPayment) === null || _api$consts$transacti === void 0 ? void 0 : _api$consts$transacti.transactionBaseFee) || api.registry.createType('Balance'), ((_api$consts$transacti2 = api.consts.transactionPayment) === null || _api$consts$transacti2 === void 0 ? void 0 : _api$consts$transacti2.transactionByteFee) || api.registry.createType('Balance')]).pipe((0, _rxjs.map)(([creationFee, transferFee, existentialDeposit, transactionBaseFee, transactionByteFee]) => ({
	      creationFee,
	      existentialDeposit,
	      transactionBaseFee,
	      transactionByteFee,
	      transferFee
	    })));
	  });
	}

	var fees_1$1 = /*#__PURE__*/Object.defineProperty({
		fees: fees_2$1
	}, '__esModule', {value: true});

	var votingBalances_2 = votingBalances;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function votingBalances(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, addresses => !addresses || !addresses.length ? (0, _rxjs.of)([]) : (0, _rxjs.combineLatest)(addresses.map(accountId => api.derive.balances.account(accountId))));
	}

	var votingBalances_1 = /*#__PURE__*/Object.defineProperty({
		votingBalances: votingBalances_2
	}, '__esModule', {value: true});

	var _all = all_1;

	var _account$1 = account_1$1;

	var _fees$1 = fees_1$1;

	var _votingBalances = votingBalances_1;

	var balances = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  votingBalance: true,
	  all: true
	};
	Object.defineProperty(exports, "all", {
	  enumerable: true,
	  get: function () {
	    return _all.all;
	  }
	});
	exports.votingBalance = void 0;





	Object.keys(_account$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _account$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _account$1[key];
	    }
	  });
	});



	Object.keys(_fees$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _fees$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _fees$1[key];
	    }
	  });
	});



	Object.keys(_votingBalances).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _votingBalances[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _votingBalances[key];
	    }
	  });
	});
	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const votingBalance = _all.all;
	exports.votingBalance = votingBalance;
	});

	var filterBountiesProposals_1 = filterBountiesProposals;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function filterBountiesProposals(api, allProposals) {
	  const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
	  const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
	  return allProposals.filter(proposal => bountyProposalCalls.find(bountyCall => bountyCall.is(proposal.proposal)));
	}

	var filterBountyProposals = /*#__PURE__*/Object.defineProperty({
		filterBountiesProposals: filterBountiesProposals_1
	}, '__esModule', {value: true});

	var _filterBountyProposals = filterBountyProposals;

	var bounties_2 = bounties$1;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
	  const bounties = [];
	  maybeBounties.forEach((bounty, index) => {
	    if (bounty.isSome) {
	      bounties.push({
	        bounty: bounty.unwrap(),
	        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
	        index: ids[index],
	        proposals: bountyProposals.filter(bountyProposal => ids[index].eq(bountyProposal.proposal.args[0]))
	      });
	    }
	  });
	  return bounties;
	}

	function bounties$1(instanceId, api) {
	  const bountyBase = api.query.bounties || api.query.treasury;
	  return (0, _index$4.memo)(instanceId, () => (0, _rxjs.combineLatest)([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : (0, _rxjs.of)(0)]).pipe((0, _rxjs.switchMap)(() => (0, _rxjs.combineLatest)([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : (0, _rxjs.of)([])])), (0, _rxjs.switchMap)(([keys, proposals]) => {
	    const ids = keys.map(({
	      args: [id]
	    }) => id);
	    return (0, _rxjs.combineLatest)([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), (0, _rxjs.of)(ids), (0, _rxjs.of)((0, _filterBountyProposals.filterBountiesProposals)(api, proposals))]);
	  }), (0, _rxjs.map)(parseResult$2)));
	}

	var bounties_1 = /*#__PURE__*/Object.defineProperty({
		bounties: bounties_2
	}, '__esModule', {value: true});

	var _bounties = bounties_1;

	var bounties = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_bounties).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bounties[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bounties[key];
	    }
	  });
	});
	});

	var bestNumber_2 = bestNumber;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bestNumber
	 * @returns The latest block number.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.chain.bestNumber((blockNumber) => {
	 *   console.log(`the current best block is #${blockNumber}`);
	 * });
	 * ```
	 */
	function bestNumber(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.chain.subscribeNewHeads().pipe((0, _rxjs.map)(header => header.number.unwrap())));
	}

	var bestNumber_1 = /*#__PURE__*/Object.defineProperty({
		bestNumber: bestNumber_2
	}, '__esModule', {value: true});

	var bestNumberFinalized_2 = bestNumberFinalized;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bestNumberFinalized
	 * @returns A BlockNumber
	 * @description Get the latest finalized block number.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.chain.bestNumberFinalized((blockNumber) => {
	 *   console.log(`the current finalized block is #${blockNumber}`);
	 * });
	 * ```
	 */
	function bestNumberFinalized(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.rpc.chain.subscribeFinalizedHeads().pipe((0, _rxjs.map)(header => header.number.unwrap())));
	}

	var bestNumberFinalized_1 = /*#__PURE__*/Object.defineProperty({
		bestNumberFinalized: bestNumberFinalized_2
	}, '__esModule', {value: true});

	var bestNumberLag_2 = bestNumberLag;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name bestNumberLag
	 * @returns A number of blocks
	 * @description Calculates the lag between finalized head and best head
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.chain.bestNumberLag((lag) => {
	 *   console.log(`finalized is ${lag} blocks behind head`);
	 * });
	 * ```
	 */
	function bestNumberLag(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => (0, _rxjs.combineLatest)([api.derive.chain.bestNumber(), api.derive.chain.bestNumberFinalized()]).pipe((0, _rxjs.map)(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
	}

	var bestNumberLag_1 = /*#__PURE__*/Object.defineProperty({
		bestNumberLag: bestNumberLag_2
	}, '__esModule', {value: true});

	var extractAuthor_1 = extractAuthor;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function extractAuthor(digest, sessionValidators = []) {
	  const [citem] = digest.logs.filter(({
	    type
	  }) => type === 'Consensus');
	  const [pitem] = digest.logs.filter(({
	    type
	  }) => type === 'PreRuntime');
	  const [sitem] = digest.logs.filter(({
	    type
	  }) => type === 'Seal');
	  let accountId; // This is critical to be first for BABE (before Consensus)
	  // If not first, we end up dropping the author at session-end

	  if (pitem) {
	    try {
	      const [engine, data] = pitem.asPreRuntime;
	      accountId = engine.extractAuthor(data, sessionValidators);
	    } catch {// ignore
	    }
	  }

	  if (!accountId && citem) {
	    try {
	      const [engine, data] = citem.asConsensus;
	      accountId = engine.extractAuthor(data, sessionValidators);
	    } catch {// ignore
	    }
	  } // SEAL, still used in e.g. Kulupu for pow


	  if (!accountId && sitem) {
	    try {
	      const [engine, data] = sitem.asSeal;
	      accountId = engine.extractAuthor(data, sessionValidators);
	    } catch {// ignore
	    }
	  }

	  return accountId;
	}

	var util$5 = /*#__PURE__*/Object.defineProperty({
		extractAuthor: extractAuthor_1
	}, '__esModule', {value: true});

	var _util$3 = util$5;

	var createHeaderExtended_1 = createHeaderExtended;

	var _classPrivateFieldLooseBase2$2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2$2 = interopRequireDefault(classPrivateFieldLooseKey);



	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function createHeaderExtended(registry, header, validators) {
	  // an instance of the base extrinsic for us to extend
	  const HeaderBase = registry.createClass('Header');

	  var _author = /*#__PURE__*/(0, _classPrivateFieldLooseKey2$2.default)("author");

	  var _validators = /*#__PURE__*/(0, _classPrivateFieldLooseKey2$2.default)("validators");

	  class Implementation extends HeaderBase {
	    constructor(registry, header, validators) {
	      super(registry, header);
	      Object.defineProperty(this, _author, {
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, _validators, {
	        writable: true,
	        value: void 0
	      });
	      (0, _classPrivateFieldLooseBase2$2.default)(this, _author)[_author] = (0, _util$3.extractAuthor)(this.digest, validators);
	      (0, _classPrivateFieldLooseBase2$2.default)(this, _validators)[_validators] = validators;
	      this.createdAtHash = header === null || header === void 0 ? void 0 : header.createdAtHash;
	    }
	    /**
	     * @description Convenience method, returns the author for the block
	     */


	    get author() {
	      return (0, _classPrivateFieldLooseBase2$2.default)(this, _author)[_author];
	    }
	    /**
	     * @description Convenience method, returns the validators for the block
	     */


	    get validators() {
	      return (0, _classPrivateFieldLooseBase2$2.default)(this, _validators)[_validators];
	    }

	  }

	  return new Implementation(registry, header, validators);
	}

	var HeaderExtended = /*#__PURE__*/Object.defineProperty({
		createHeaderExtended: createHeaderExtended_1
	}, '__esModule', {value: true});

	var createSignedBlockExtended_1 = createSignedBlockExtended;

	var _classPrivateFieldLooseBase2$1 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2$1 = interopRequireDefault(classPrivateFieldLooseKey);



	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function mapExtrinsics(extrinsics, records) {
	  return extrinsics.map((extrinsic, index) => {
	    let dispatchError;
	    let dispatchInfo;
	    const events = records.filter(({
	      phase
	    }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({
	      event
	    }) => {
	      if (event.section === 'system') {
	        if (event.method === 'ExtrinsicSuccess') {
	          dispatchInfo = event.data[0];
	        } else if (event.method === 'ExtrinsicFailed') {
	          dispatchError = event.data[0];
	          dispatchInfo = event.data[1];
	        }
	      }

	      return event;
	    });
	    return {
	      dispatchError,
	      dispatchInfo,
	      events,
	      extrinsic
	    };
	  });
	}

	function createSignedBlockExtended(registry, block, events, validators) {
	  // an instance of the base extrinsic for us to extend
	  const SignedBlockBase = registry.createClass('SignedBlock');

	  var _author = /*#__PURE__*/(0, _classPrivateFieldLooseKey2$1.default)("author");

	  var _events = /*#__PURE__*/(0, _classPrivateFieldLooseKey2$1.default)("events");

	  var _extrinsics = /*#__PURE__*/(0, _classPrivateFieldLooseKey2$1.default)("extrinsics");

	  class Implementation extends SignedBlockBase {
	    constructor(registry, block, events, validators) {
	      super(registry, block);
	      Object.defineProperty(this, _author, {
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, _events, {
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, _extrinsics, {
	        writable: true,
	        value: void 0
	      });
	      (0, _classPrivateFieldLooseBase2$1.default)(this, _author)[_author] = (0, _util$3.extractAuthor)(this.block.header.digest, validators);
	      (0, _classPrivateFieldLooseBase2$1.default)(this, _events)[_events] = events || [];
	      (0, _classPrivateFieldLooseBase2$1.default)(this, _extrinsics)[_extrinsics] = mapExtrinsics(this.block.extrinsics, (0, _classPrivateFieldLooseBase2$1.default)(this, _events)[_events]);
	      this.createdAtHash = block === null || block === void 0 ? void 0 : block.createdAtHash;
	    }
	    /**
	     * @description Convenience method, returns the author for the block
	     */


	    get author() {
	      return (0, _classPrivateFieldLooseBase2$1.default)(this, _author)[_author];
	    }
	    /**
	     * @description Convenience method, returns the events associated with the block
	     */


	    get events() {
	      return (0, _classPrivateFieldLooseBase2$1.default)(this, _events)[_events];
	    }
	    /**
	     * @description Returns the extrinsics and their events, mapped
	     */


	    get extrinsics() {
	      return (0, _classPrivateFieldLooseBase2$1.default)(this, _extrinsics)[_extrinsics];
	    }

	  }

	  return new Implementation(registry, block, events, validators);
	}

	var SignedBlockExtended = /*#__PURE__*/Object.defineProperty({
		createSignedBlockExtended: createSignedBlockExtended_1
	}, '__esModule', {value: true});

	var _HeaderExtended = HeaderExtended;

	var _SignedBlockExtended = SignedBlockExtended;

	var type = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "createHeaderExtended", {
	  enumerable: true,
	  get: function () {
	    return _HeaderExtended.createHeaderExtended;
	  }
	});
	Object.defineProperty(exports, "createSignedBlockExtended", {
	  enumerable: true,
	  get: function () {
	    return _SignedBlockExtended.createSignedBlockExtended;
	  }
	});
	});

	var _index19 = type;

	var getHeader_2 = getHeader;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name getHeader
	 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
	 * @returns An array containing the block header and the block author
	 * @description Get a specific block header and extend it with the author
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const { author, number } = await api.derive.chain.getHeader('0x123...456');
	 *
	 * console.log(`block #${number} was authored by ${author}`);
	 * ```
	 */
	function getHeader(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, hash => (0, _rxjs.combineLatest)([api.rpc.chain.getHeader(hash), api.query.session ? api.query.session.validators.at(hash) : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([header, validators]) => (0, _index19.createHeaderExtended)(header.registry, header, validators)), (0, _rxjs.catchError)(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
	  // we supplied an invalid hash. (Due to defaults, storeage will have an
	  // empty value, so only the RPC is affected). So return undefined
	  (0, _rxjs.of)())));
	}

	var getHeader_1 = /*#__PURE__*/Object.defineProperty({
		getHeader: getHeader_2
	}, '__esModule', {value: true});

	var getBlock_2 = getBlock;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name getBlock
	 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
	 * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * const { author, block } = await api.derive.chain.getBlock('0x123...456');
	 *
	 * console.log(`block #${block.header.number} was authored by ${author}`);
	 * ```
	 */
	function getBlock(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, hash => (0, _rxjs.combineLatest)([api.rpc.chain.getBlock(hash), api.query.system.events.at(hash), api.query.session ? api.query.session.validators.at(hash) : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([signedBlock, events, validators]) => (0, _index19.createSignedBlockExtended)(api.registry, signedBlock, events, validators)), (0, _rxjs.catchError)(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
	  // we supplied an invalid hash. (Due to defaults, storage will have an
	  // empty value, so only the RPC is affected). So return undefined
	  (0, _rxjs.of)())));
	}

	var getBlock_1 = /*#__PURE__*/Object.defineProperty({
		getBlock: getBlock_2
	}, '__esModule', {value: true});

	var subscribeNewBlocks_2 = subscribeNewBlocks;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name subscribeNewBlocks
	 * @returns The latest block & events for that block
	 */
	function subscribeNewBlocks(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.chain.subscribeNewHeads().pipe((0, _rxjs.switchMap)(header => {
	    const blockHash = header.createdAtHash || header.hash;
	    return (0, _rxjs.combineLatest)(api.rpc.chain.getBlock(blockHash), api.query.system.events.at(blockHash), (0, _rxjs.of)(header));
	  }), (0, _rxjs.map)(([block, events, header]) => (0, _index19.createSignedBlockExtended)(block.registry, block, events, header.validators))));
	}

	var subscribeNewBlocks_1 = /*#__PURE__*/Object.defineProperty({
		subscribeNewBlocks: subscribeNewBlocks_2
	}, '__esModule', {value: true});

	var subscribeNewHeads_2 = subscribeNewHeads;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @name subscribeNewHeads
	 * @returns A header with the current header (including extracted author)
	 * @description An observable of the current block header and it's author
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.chain.subscribeNewHeads((header) => {
	 *   console.log(`block #${header.number} was authored by ${header.author}`);
	 * });
	 * ```
	 */
	function subscribeNewHeads(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => (0, _rxjs.combineLatest)([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : (0, _rxjs.of)(undefined)]).pipe((0, _rxjs.map)(([header, validators]) => {
	    header.createdAtHash = header.hash;
	    return (0, _index19.createHeaderExtended)(header.registry, header, validators);
	  })));
	}

	var subscribeNewHeads_1 = /*#__PURE__*/Object.defineProperty({
		subscribeNewHeads: subscribeNewHeads_2
	}, '__esModule', {value: true});

	var _bestNumber = bestNumber_1;

	var _bestNumberFinalized = bestNumberFinalized_1;

	var _bestNumberLag = bestNumberLag_1;

	var _getHeader = getHeader_1;

	var _getBlock = getBlock_1;

	var _subscribeNewBlocks = subscribeNewBlocks_1;

	var _subscribeNewHeads = subscribeNewHeads_1;

	var chain = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_bestNumber).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bestNumber[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bestNumber[key];
	    }
	  });
	});



	Object.keys(_bestNumberFinalized).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bestNumberFinalized[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bestNumberFinalized[key];
	    }
	  });
	});



	Object.keys(_bestNumberLag).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bestNumberLag[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bestNumberLag[key];
	    }
	  });
	});



	Object.keys(_getHeader).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _getHeader[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _getHeader[key];
	    }
	  });
	});



	Object.keys(_getBlock).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _getBlock[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _getBlock[key];
	    }
	  });
	});



	Object.keys(_subscribeNewBlocks).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _subscribeNewBlocks[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _subscribeNewBlocks[key];
	    }
	  });
	});



	Object.keys(_subscribeNewHeads).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _subscribeNewHeads[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _subscribeNewHeads[key];
	    }
	  });
	});
	});

	var fees_2 = fees;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// query via constants (current applicable path)
	function queryConstants(api) {
	  return (0, _rxjs.of)([// deprecated
	  api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current
	  api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);
	}
	/**
	 * @name fees
	 * @returns An object containing the combined results of the queries for
	 * all relevant contract fees as declared in the substrate chain spec.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.contracts.fees(([creationFee, transferFee]) => {
	 *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
	 * });
	 * ```
	 */


	function fees(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    return queryConstants(api).pipe((0, _rxjs.map)(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
	      callBaseFee,
	      contractFee,
	      creationFee,
	      rentByteFee,
	      rentDepositOffset,
	      surchargeReward,
	      tombstoneDeposit,
	      transactionBaseFee,
	      transactionByteFee,
	      transferFee
	    })));
	  });
	}

	var fees_1 = /*#__PURE__*/Object.defineProperty({
		fees: fees_2
	}, '__esModule', {value: true});

	var _fees = fees_1;

	var contracts = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_fees).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _fees[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _fees[key];
	    }
	  });
	});
	});

	var getInstance_2 = getInstance;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function getInstance(api, section) {
	  const instances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), section);
	  return instances && instances.length ? instances[0] : section;
	}

	var getInstance_1 = /*#__PURE__*/Object.defineProperty({
		getInstance: getInstance_2
	}, '__esModule', {value: true});

	var _getInstance = getInstance_1;

	var members_2$4 = members$4;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function members$4(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$section;

	    return (0, _util$5.isFunction)((_api$query$section = api.query[section]) === null || _api$query$section === void 0 ? void 0 : _api$query$section.members) ? api.query[section].members() : (0, _rxjs.of)([]);
	  });
	}

	var members_1$4 = /*#__PURE__*/Object.defineProperty({
		members: members_2$4
	}, '__esModule', {value: true});

	var prime_2$3 = prime$3;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function prime$3(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query;

	    return (0, _util$5.isFunction)((_api$query = api.query[section]) === null || _api$query === void 0 ? void 0 : _api$query.prime) ? api.query[section].prime().pipe((0, _rxjs.map)(optPrime => optPrime.unwrapOr(null))) : (0, _rxjs.of)(null);
	  });
	}

	var prime_1$3 = /*#__PURE__*/Object.defineProperty({
		prime: prime_2$3
	}, '__esModule', {value: true});

	var hasProposals_1$3 = hasProposals$3;
	var proposalCount_1$3 = proposalCount$3;
	var proposalHashes_1$3 = proposalHashes$3;
	var proposals_2$5 = proposals$5;
	var proposal_1$3 = proposal$3;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function parse$4(api, [hashes, proposals, votes]) {
	  return proposals.map((proposalOpt, index) => proposalOpt && proposalOpt.isSome ? {
	    hash: api.registry.createType('Hash', hashes[index]),
	    proposal: proposalOpt.unwrap(),
	    votes: votes[index].unwrapOr(null)
	  } : null).filter(proposal => !!proposal);
	}

	function _proposalsFrom(instanceId, api, section) {
	  return (0, _index$4.memo)(instanceId, hashes => {
	    var _api$query$section;

	    return ((0, _util$5.isFunction)((_api$query$section = api.query[section]) === null || _api$query$section === void 0 ? void 0 : _api$query$section.proposals) && hashes.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(hashes), // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
	    // however we have had cases on Edgeware where the indices have moved around after an
	    // upgrade, which results in invalid on-chain data
	    (0, _rxjs.combineLatest)(hashes.map(hash => // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
	    // however we have had cases on Edgeware where the indices have moved around after an
	    // upgrade, which results in invalid on-chain data
	    api.query[section].proposalOf(hash).pipe((0, _rxjs.catchError)(() => (0, _rxjs.of)(null))))), api.query[section].voting.multi(hashes)]) : (0, _rxjs.of)([[], [], []])).pipe((0, _rxjs.map)(result => parse$4(api, result)));
	  });
	}

	function hasProposals$3(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$section2;

	    return (0, _rxjs.of)((0, _util$5.isFunction)((_api$query$section2 = api.query[section]) === null || _api$query$section2 === void 0 ? void 0 : _api$query$section2.proposals));
	  });
	}

	function proposalCount$3(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);
	  return (0, _index$4.memo)(instanceId, () => (0, _util$5.isFunction)(api.query[section].proposalCount) ? api.query[section].proposalCount() : (0, _rxjs.of)(null));
	}

	function proposalHashes$3(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$section3;

	    return (0, _util$5.isFunction)((_api$query$section3 = api.query[section]) === null || _api$query$section3 === void 0 ? void 0 : _api$query$section3.proposals) ? api.query[section].proposals() : (0, _rxjs.of)([]);
	  });
	}

	function proposals$5(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);

	  const proposalsFrom = _proposalsFrom(instanceId, api, section);

	  const getHashes = proposalHashes$3(instanceId, api, _section);
	  return (0, _index$4.memo)(instanceId, () => getHashes().pipe((0, _rxjs.switchMap)(proposalsFrom)));
	}

	function proposal$3(instanceId, api, _section) {
	  const section = (0, _getInstance.getInstance)(api, _section);

	  const proposalsFrom = _proposalsFrom(instanceId, api, section);

	  return (0, _index$4.memo)(instanceId, hash => {
	    var _api$query$section4;

	    return (0, _util$5.isFunction)((_api$query$section4 = api.query[section]) === null || _api$query$section4 === void 0 ? void 0 : _api$query$section4.proposals) ? proposalsFrom([hash]).pipe((0, _rxjs.map)(([proposal]) => proposal)) : (0, _rxjs.of)(null);
	  });
	}

	var proposals_1$5 = /*#__PURE__*/Object.defineProperty({
		hasProposals: hasProposals_1$3,
		proposalCount: proposalCount_1$3,
		proposalHashes: proposalHashes_1$3,
		proposals: proposals_2$5,
		proposal: proposal_1$3
	}, '__esModule', {value: true});

	var _members$5 = members_1$4;

	var _prime$3 = prime_1$3;

	var _proposals$5 = proposals_1$5;

	var collective = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_members$5).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _members$5[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _members$5[key];
	    }
	  });
	});



	Object.keys(_prime$3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _prime$3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _prime$3[key];
	    }
	  });
	});



	Object.keys(_proposals$5).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _proposals$5[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _proposals$5[key];
	    }
	  });
	});
	});

	var _index$3 = collective;

	var members_2$3 = members$3;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function members$3(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.members)(instanceId, api, 'council'));
	}

	var members_1$3 = /*#__PURE__*/Object.defineProperty({
		members: members_2$3
	}, '__esModule', {value: true});

	var prime_2$2 = prime$2;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function prime$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.prime)(instanceId, api, 'council'));
	}

	var prime_1$2 = /*#__PURE__*/Object.defineProperty({
		prime: prime_2$2
	}, '__esModule', {value: true});

	var hasProposals_1$2 = hasProposals$2;
	var proposal_1$2 = proposal$2;
	var proposalCount_1$2 = proposalCount$2;
	var proposalHashes_1$2 = proposalHashes$2;
	var proposals_2$4 = proposals$4;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hasProposals$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.hasProposals)(instanceId, api, 'council'));
	}

	function proposal$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposal)(instanceId, api, 'council'));
	}

	function proposalCount$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposalCount)(instanceId, api, 'council'));
	}

	function proposalHashes$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposalHashes)(instanceId, api, 'council'));
	}

	function proposals$4(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposals)(instanceId, api, 'council'));
	}

	var proposals_1$4 = /*#__PURE__*/Object.defineProperty({
		hasProposals: hasProposals_1$2,
		proposal: proposal_1$2,
		proposalCount: proposalCount_1$2,
		proposalHashes: proposalHashes_1$2,
		proposals: proposals_2$4
	}, '__esModule', {value: true});

	var votes_2 = votes;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isVoter(value) {
	  return !Array.isArray(value);
	}

	function retrieveStakeOf(elections) {
	  return elections.stakeOf.entries().pipe((0, _rxjs.map)(entries => entries.map(([{
	    args: [accountId]
	  }, stake]) => [accountId, stake])));
	}

	function retrieveVoteOf(elections) {
	  return elections.votesOf.entries().pipe((0, _rxjs.map)(entries => entries.map(([{
	    args: [accountId]
	  }, votes]) => [accountId, votes])));
	}

	function retrievePrev(api, elections) {
	  return (0, _rxjs.combineLatest)([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe((0, _rxjs.map)(([stakes, votes]) => {
	    const result = [];
	    votes.forEach(([voter, votes]) => {
	      result.push([voter, {
	        stake: api.registry.createType('Balance'),
	        votes
	      }]);
	    });
	    stakes.forEach(([staker, stake]) => {
	      const entry = result.find(([voter]) => voter.eq(staker));

	      if (entry) {
	        entry[1].stake = stake;
	      } else {
	        result.push([staker, {
	          stake,
	          votes: []
	        }]);
	      }
	    });
	    return result;
	  }));
	}

	function retrieveCurrent(elections) {
	  return elections.voting.entries().pipe((0, _rxjs.map)(entries => entries.map(([{
	    args: [accountId]
	  }, value]) => [accountId, isVoter(value) ? {
	    stake: value.stake,
	    votes: value.votes
	  } : {
	    stake: value[0],
	    votes: value[1]
	  }])));
	}

	function votes(instanceId, api) {
	  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
	  return (0, _index$4.memo)(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : (0, _rxjs.of)([]));
	}

	var votes_1 = /*#__PURE__*/Object.defineProperty({
		votes: votes_2
	}, '__esModule', {value: true});

	var votesOf_2 = votesOf;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function votesOf(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => api.derive.council.votes().pipe((0, _rxjs.map)(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {
	    stake: api.registry.createType('Balance'),
	    votes: []
	  }])[1])));
	}

	var votesOf_1 = /*#__PURE__*/Object.defineProperty({
		votesOf: votesOf_2
	}, '__esModule', {value: true});

	var _members$4 = members_1$3;

	var _prime$2 = prime_1$2;

	var _proposals$4 = proposals_1$4;

	var _votes = votes_1;

	var _votesOf = votesOf_1;

	var council = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_members$4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _members$4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _members$4[key];
	    }
	  });
	});



	Object.keys(_prime$2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _prime$2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _prime$2[key];
	    }
	  });
	});



	Object.keys(_proposals$4).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _proposals$4[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _proposals$4[key];
	    }
	  });
	});



	Object.keys(_votes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _votes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _votes[key];
	    }
	  });
	});



	Object.keys(_votesOf).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _votesOf[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _votesOf[key];
	    }
	  });
	});
	});

	var childKey_2 = childKey;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function createChildKey({
	  trieIndex
	}) {
	  return (0, _util$5.u8aToHex)((0, _util$5.u8aConcat)(':child_storage:default:', (0, _utilCrypto.blake2AsU8a)((0, _util$5.u8aConcat)('crowdloan', trieIndex.toU8a()))));
	}

	function childKey(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, paraId => api.query.crowdloan.funds(paraId).pipe((0, _rxjs.map)(optInfo => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
	}

	var childKey_1 = /*#__PURE__*/Object.defineProperty({
		childKey: childKey_2
	}, '__esModule', {value: true});

	var extractContributed_1 = extractContributed;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function extractContributed(paraId, events) {
	  var _events$createdAtHash;

	  const added = [];
	  const removed = [];
	  return events.filter(({
	    event: {
	      data: [, eventParaId],
	      method,
	      section
	    }
	  }) => section === 'crowdloan' && ['Contributed', 'Withdrew'].includes(method) && eventParaId.eq(paraId)).reduce((result, {
	    event: {
	      data: [accountId],
	      method
	    }
	  }) => {
	    if (method === 'Contributed') {
	      result.added.push(accountId.toHex());
	    } else {
	      result.removed.push(accountId.toHex());
	    }

	    return result;
	  }, {
	    added,
	    blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
	    removed
	  });
	}

	var util$4 = /*#__PURE__*/Object.defineProperty({
		extractContributed: extractContributed_1
	}, '__esModule', {value: true});

	var _util$2 = util$4;

	var contributions_2 = contributions;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

	function _getUpdates(api, paraId) {
	  let added = [];
	  let removed = [];
	  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
	    const changes = (0, _util$2.extractContributed)(paraId, events);

	    if (changes.added.length || changes.removed.length) {
	      var _events$createdAtHash;

	      added = added.concat(...changes.added);
	      removed = removed.concat(...changes.removed);
	      return (0, _rxjs.of)({
	        added,
	        addedDelta: changes.added,
	        blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
	        removed,
	        removedDelta: changes.removed
	      });
	    }

	    return _rxjs.EMPTY;
	  }), (0, _rxjs.startWith)({
	    added,
	    addedDelta: [],
	    blockHash: '-',
	    removed,
	    removedDelta: []
	  }));
	}

	function _eventTriggerAll(api, paraId) {
	  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
	    var _events$createdAtHash2;

	    const items = events.filter(({
	      event: {
	        data: [eventParaId],
	        method,
	        section
	      }
	    }) => section === 'crowdloan' && ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) && eventParaId.eq(paraId));
	    return items.length ? (0, _rxjs.of)(((_events$createdAtHash2 = events.createdAtHash) === null || _events$createdAtHash2 === void 0 ? void 0 : _events$createdAtHash2.toHex()) || '-') : _rxjs.EMPTY;
	  }), (0, _rxjs.startWith)('-'));
	}

	function _getKeysPaged(api, childKey) {
	  const startSubject = new _rxjs.BehaviorSubject(undefined);
	  return startSubject.pipe((0, _rxjs.switchMap)(startKey => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K, startKey)), (0, _rxjs.tap)(keys => {
	    setTimeout(() => {
	      keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
	    }, 0);
	  }), (0, _rxjs.toArray)(), // toArray since we want to startSubject to be completed
	  (0, _rxjs.map)(keyArr => (0, _util$5.arrayFlatten)(keyArr)));
	}

	function _getAll(api, paraId, childKey) {
	  return _eventTriggerAll(api, paraId).pipe((0, _rxjs.switchMap)(() => // FIXME Needs testing and being enabled
	  // eslint-disable-next-line no-constant-condition
	  (0, _util$5.isFunction)(api.rpc.childstate.getKeysPaged) && false ? _getKeysPaged(api, childKey) : api.rpc.childstate.getKeys(childKey, '0x')), (0, _rxjs.map)(keys => keys.map(k => k.toHex())));
	}

	function _contributions$2(api, paraId, childKey) {
	  return (0, _rxjs.combineLatest)([_getAll(api, paraId, childKey), _getUpdates(api, paraId)]).pipe((0, _rxjs.map)(([keys, {
	    added,
	    blockHash,
	    removed
	  }]) => {
	    const contributorsMap = {};
	    keys.forEach(k => {
	      contributorsMap[k] = true;
	    });
	    added.forEach(k => {
	      contributorsMap[k] = true;
	    });
	    removed.forEach(k => {
	      delete contributorsMap[k];
	    });
	    return {
	      blockHash,
	      contributorsHex: Object.keys(contributorsMap)
	    };
	  }));
	}

	function contributions(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, paraId => api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)(childKey => childKey ? _contributions$2(api, paraId, childKey) : (0, _rxjs.of)({
	    blockHash: '-',
	    contributorsHex: []
	  }))));
	}

	var contributions_1 = /*#__PURE__*/Object.defineProperty({
		contributions: contributions_2
	}, '__esModule', {value: true});

	var ownContributions_1 = ownContributions;

	var _defineProperty2$e = interopRequireDefault(defineProperty);







	function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(Object(source), true).forEach(function (key) { (0, _defineProperty2$e.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _getValues(api, childKey, keys) {
	  // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
	  return (0, _rxjs.combineLatest)(keys.map(k => api.rpc.childstate.getStorage(childKey, k))).pipe((0, _rxjs.map)(values => values.map(v => api.registry.createType('Option<StorageData>', v)).map(o => o.isSome ? api.registry.createType('Balance', o.unwrap()) : api.registry.createType('Balance')).reduce((all, b, index) => _objectSpread$e(_objectSpread$e({}, all), {}, {
	    [keys[index]]: b
	  }), {})));
	}

	function _watchOwnChanges(api, paraId, childkey, keys) {
	  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
	    const changes = (0, _util$2.extractContributed)(paraId, events);
	    const filtered = keys.filter(k => changes.added.includes(k) || changes.removed.includes(k));
	    return filtered.length ? _getValues(api, childkey, filtered) : _rxjs.EMPTY;
	  }), (0, _rxjs.startWith)({}));
	}

	function _contributions$1(api, paraId, childKey, keys) {
	  return (0, _rxjs.combineLatest)([_getValues(api, childKey, keys), _watchOwnChanges(api, paraId, childKey, keys)]).pipe((0, _rxjs.map)(([all, latest]) => _objectSpread$e(_objectSpread$e({}, all), latest)));
	}

	function ownContributions(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)(childKey => childKey && keys.length ? _contributions$1(api, paraId, childKey, keys) : (0, _rxjs.of)({}))));
	}

	var onwContributions = /*#__PURE__*/Object.defineProperty({
		ownContributions: ownContributions_1
	}, '__esModule', {value: true});

	var _childKey = childKey_1;

	var _contributions = contributions_1;

	var _onwContributions = onwContributions;

	var crowdloan = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_childKey).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _childKey[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _childKey[key];
	    }
	  });
	});



	Object.keys(_contributions).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _contributions[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _contributions[key];
	    }
	  });
	});



	Object.keys(_onwContributions).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _onwContributions[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _onwContributions[key];
	    }
	  });
	});
	});

	var dispatchQueue_2 = dispatchQueue;

	var _defineProperty2$d = interopRequireDefault(defineProperty);







	function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$d(Object(source), true).forEach(function (key) { (0, _defineProperty2$d.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const DEMOCRACY_ID = (0, _util$5.stringToHex)('democrac');

	function queryQueue(api) {
	  return api.query.democracy.dispatchQueue().pipe((0, _rxjs.switchMap)(dispatches => (0, _rxjs.combineLatest)([(0, _rxjs.of)(dispatches), api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))])), (0, _rxjs.map)(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
	    at,
	    image: images[dispatchIndex],
	    imageHash,
	    index
	  }))));
	}

	function schedulerEntries(api) {
	  // We don't get entries, but rather we get the keys (triggered via finished referendums) and
	  // the subscribe to those keys - this means we pickup when the schedulers actually executes
	  // at a block, the entry for that block will become empty
	  return api.derive.democracy.referendumsFinished().pipe((0, _rxjs.switchMap)(() => api.query.scheduler.agenda.keys()), (0, _rxjs.switchMap)(keys => {
	    const blockNumbers = keys.map(({
	      args: [blockNumber]
	    }) => blockNumber);
	    return blockNumbers.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(blockNumbers), // this should simply be api.query.scheduler.agenda.multi<Vec<Option<Scheduled>>>,
	    // however we have had cases on Darwinia where the indices have moved around after an
	    // upgrade, which results in invalid on-chain data
	    (0, _rxjs.combineLatest)(blockNumbers.map(blockNumber => api.query.scheduler.agenda(blockNumber).pipe( // this does create an issue since it discards all at that block
	    (0, _rxjs.catchError)(() => (0, _rxjs.of)(null)))))]) : (0, _rxjs.of)([[], []]);
	  }));
	}

	function queryScheduler(api) {
	  return schedulerEntries(api).pipe((0, _rxjs.switchMap)(([blockNumbers, agendas]) => {
	    const result = [];
	    blockNumbers.forEach((at, index) => {
	      (agendas[index] || []).filter(opt => opt.isSome).forEach(optScheduled => {
	        const scheduled = optScheduled.unwrap();

	        if (scheduled.maybeId.isSome) {
	          const id = scheduled.maybeId.unwrap().toHex();

	          if (id.startsWith(DEMOCRACY_ID)) {
	            const [, index] = api.registry.createType('(u64, ReferendumIndex)', id);
	            const imageHash = scheduled.call.args[0];
	            result.push({
	              at,
	              imageHash,
	              index
	            });
	          }
	        }
	      });
	    });
	    return result.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(result), api.derive.democracy.preimages(result.map(({
	      imageHash
	    }) => imageHash))]) : (0, _rxjs.of)([[], []]);
	  }), (0, _rxjs.map)(([infos, images]) => infos.map((info, index) => _objectSpread$d(_objectSpread$d({}, info), {}, {
	    image: images[index]
	  }))));
	}

	function dispatchQueue(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$scheduler;

	    return (0, _util$5.isFunction)((_api$query$scheduler = api.query.scheduler) === null || _api$query$scheduler === void 0 ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : (0, _rxjs.of)([]);
	  });
	}

	var dispatchQueue_1 = /*#__PURE__*/Object.defineProperty({
		dispatchQueue: dispatchQueue_2
	}, '__esModule', {value: true});

	var locks_2 = locks;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];

	function parseEnd(api, vote, {
	  approved,
	  end
	}) {
	  return [end, approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add(api.consts.democracy.enactmentPeriod.muln(LOCKUPS[vote.conviction.index])) : _util$5.BN_ZERO];
	}

	function parseLock(api, [referendumId, accountVote], referendum) {
	  const {
	    balance,
	    vote
	  } = accountVote.asStandard;
	  const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [_util$5.BN_ZERO, _util$5.BN_ZERO];
	  return {
	    balance,
	    isDelegated: false,
	    isFinished: referendum.isFinished,
	    referendumEnd,
	    referendumId,
	    unlockAt,
	    vote
	  };
	}

	function delegateLocks(api, {
	  balance,
	  conviction,
	  target
	}) {
	  return api.derive.democracy.locks(target).pipe((0, _rxjs.map)(available => available.map(({
	    isFinished,
	    referendumEnd,
	    referendumId,
	    unlockAt,
	    vote
	  }) => ({
	    balance,
	    isDelegated: true,
	    isFinished,
	    referendumEnd,
	    referendumId,
	    unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add(api.consts.democracy.enactmentPeriod.muln(LOCKUPS[conviction.index])),
	    vote: api.registry.createType('Vote', {
	      aye: vote.isAye,
	      conviction
	    })
	  }))));
	}

	function directLocks(api, {
	  votes
	}) {
	  if (!votes.length) {
	    return (0, _rxjs.of)([]);
	  }

	  return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe((0, _rxjs.map)(referendums => votes.map((vote, index) => [vote, referendums[index].unwrapOr(null)]).filter(item => !!item[1] && (0, _util$5.isUndefined)(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
	}

	function locks(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe((0, _rxjs.switchMap)(voting => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : (0, _rxjs.of)([]))) : (0, _rxjs.of)([]));
	}

	var locks_1 = /*#__PURE__*/Object.defineProperty({
		locks: locks_2
	}, '__esModule', {value: true});

	var nextExternal_2 = nextExternal;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function withImage(api, nextOpt) {
	  if (nextOpt.isNone) {
	    return (0, _rxjs.of)(null);
	  }

	  const [imageHash, threshold] = nextOpt.unwrap();
	  return api.derive.democracy.preimage(imageHash).pipe((0, _rxjs.map)(image => ({
	    image,
	    imageHash,
	    threshold
	  })));
	}

	function nextExternal(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$democracy;

	    return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe((0, _rxjs.switchMap)(nextOpt => withImage(api, nextOpt))) : (0, _rxjs.of)(null);
	  });
	}

	var nextExternal_1 = /*#__PURE__*/Object.defineProperty({
		nextExternal: nextExternal_2
	}, '__esModule', {value: true});

	var compareRationals_1 = compareRationals;
	var calcPassing_1 = calcPassing;
	var calcVotes_1 = calcVotes;
	var getStatus_1 = getStatus;
	var parseImage_1 = parseImage;

	var _defineProperty2$c = interopRequireDefault(defineProperty);



	function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { (0, _defineProperty2$c.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function isOldInfo(info) {
	  return !!info.proposalHash;
	}

	function isCurrentStatus(status) {
	  return !!status.tally;
	}

	function isCurrentPreimage(api, imageOpt) {
	  return !!imageOpt && !api.query.democracy.dispatchQueue;
	}

	function compareRationals(n1, d1, n2, d2) {
	  while (true) {
	    const q1 = n1.div(d1);
	    const q2 = n2.div(d2);

	    if (q1.lt(q2)) {
	      return true;
	    } else if (q2.lt(q1)) {
	      return false;
	    }

	    const r1 = n1.mod(d1);
	    const r2 = n2.mod(d2);

	    if (r2.isZero()) {
	      return false;
	    } else if (r1.isZero()) {
	      return true;
	    }

	    n1 = d2;
	    n2 = d1;
	    d1 = r2;
	    d2 = r1;
	  }
	}

	function calcPassingOther(threshold, sqrtElectorate, {
	  votedAye,
	  votedNay,
	  votedTotal
	}) {
	  const sqrtVoters = (0, _util$5.bnSqrt)(votedTotal);
	  return sqrtVoters.isZero() ? false : threshold.isSupermajorityapproval ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
	}

	function calcPassing(threshold, sqrtElectorate, state) {
	  return threshold.isSimplemajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
	}

	function calcVotesPrev(votesFor) {
	  return votesFor.reduce((state, derived) => {
	    const {
	      balance,
	      vote
	    } = derived;
	    const isDefault = vote.conviction.index === 0;
	    const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);

	    if (vote.isAye) {
	      state.allAye.push(derived);
	      state.voteCountAye++;
	      state.votedAye.iadd(counted);
	    } else {
	      state.allNay.push(derived);
	      state.voteCountNay++;
	      state.votedNay.iadd(counted);
	    }

	    state.voteCount++;
	    state.votedTotal.iadd(counted);
	    return state;
	  }, {
	    allAye: [],
	    allNay: [],
	    voteCount: 0,
	    voteCountAye: 0,
	    voteCountNay: 0,
	    votedAye: new _util$5.BN(0),
	    votedNay: new _util$5.BN(0),
	    votedTotal: new _util$5.BN(0)
	  });
	}

	function calcVotesCurrent(tally, votes) {
	  const allAye = [];
	  const allNay = [];
	  votes.forEach(derived => {
	    if (derived.vote.isAye) {
	      allAye.push(derived);
	    } else {
	      allNay.push(derived);
	    }
	  });
	  return {
	    allAye,
	    allNay,
	    voteCount: allAye.length + allNay.length,
	    voteCountAye: allAye.length,
	    voteCountNay: allNay.length,
	    votedAye: tally.ayes,
	    votedNay: tally.nays,
	    votedTotal: tally.turnout
	  };
	}

	function calcVotes(sqrtElectorate, referendum, votes) {
	  const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
	  return _objectSpread$c(_objectSpread$c({}, state), {}, {
	    isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
	    votes
	  });
	}

	function getStatus(info) {
	  if (info.isNone) {
	    return null;
	  }

	  const unwrapped = info.unwrap();

	  if (isOldInfo(unwrapped)) {
	    return unwrapped;
	  } else if (unwrapped.isOngoing) {
	    return unwrapped.asOngoing;
	  } // done, we don't include it here... only currently active


	  return null;
	}

	function constructProposal(api, [bytes, proposer, balance, at]) {
	  let proposal;

	  try {
	    proposal = api.registry.createType('Proposal', bytes.toU8a(true));
	  } catch (error) {
	    console.error(error);
	  }

	  return {
	    at,
	    balance,
	    proposal,
	    proposer
	  };
	}

	function parseImage(api, imageOpt) {
	  if (imageOpt.isNone) {
	    return;
	  }

	  if (isCurrentPreimage(api, imageOpt)) {
	    const status = imageOpt.unwrap();

	    if (status.isMissing) {
	      return;
	    }

	    const {
	      data,
	      deposit,
	      provider,
	      since
	    } = status.asAvailable;
	    return constructProposal(api, [data, provider, deposit, since]);
	  }

	  return constructProposal(api, imageOpt.unwrap());
	}

	var util$3 = /*#__PURE__*/Object.defineProperty({
		compareRationals: compareRationals_1,
		calcPassing: calcPassing_1,
		calcVotes: calcVotes_1,
		getStatus: getStatus_1,
		parseImage: parseImage_1
	}, '__esModule', {value: true});

	var _util2 = util$3;

	var preimage_2 = preimage;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function preimage(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, hash => api.query.democracy.preimages(hash).pipe((0, _rxjs.map)(imageOpt => (0, _util2.parseImage)(api, imageOpt))));
	}

	var preimage_1 = /*#__PURE__*/Object.defineProperty({
		preimage: preimage_2
	}, '__esModule', {value: true});

	var preimages_2 = preimages;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function preimages(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, hashes => hashes.length ? api.query.democracy.preimages.multi(hashes).pipe((0, _rxjs.map)(images => images.map(imageOpt => (0, _util2.parseImage)(api, imageOpt)))) : (0, _rxjs.of)([]));
	}

	var preimages_1 = /*#__PURE__*/Object.defineProperty({
		preimages: preimages_2
	}, '__esModule', {value: true});

	var proposals_2$3 = proposals$3;

	var _defineProperty2$b = interopRequireDefault(defineProperty);







	function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { (0, _defineProperty2$b.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	function isNewDepositors(depositors) {
	  // Detect balance...
	  // eslint-disable-next-line @typescript-eslint/unbound-method
	  return (0, _util$5.isFunction)(depositors[1].mul);
	}

	function parse$3([proposals, images, optDepositors]) {
	  return proposals.filter(([,, proposer], index) => {
	    var _optDepositors$index;

	    return !!((_optDepositors$index = optDepositors[index]) !== null && _optDepositors$index !== void 0 && _optDepositors$index.isSome) && !proposer.isEmpty;
	  }).map(([index, imageHash, proposer], proposalIndex) => {
	    const depositors = optDepositors[proposalIndex].unwrap();
	    return _objectSpread$b(_objectSpread$b({}, isNewDepositors(depositors) ? {
	      balance: depositors[1],
	      seconds: depositors[0]
	    } : {
	      balance: depositors[0],
	      seconds: depositors[1]
	    }), {}, {
	      image: images[proposalIndex],
	      imageHash,
	      index,
	      proposer
	    });
	  });
	}

	function proposals$3(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$democracy, _api$query$democracy2;

	    return (0, _util$5.isFunction)((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) && (0, _util$5.isFunction)((_api$query$democracy2 = api.query.democracy) === null || _api$query$democracy2 === void 0 ? void 0 : _api$query$democracy2.preimages) ? api.query.democracy.publicProps().pipe((0, _rxjs.switchMap)(proposals => proposals.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))]) : (0, _rxjs.of)([[], [], []])), (0, _rxjs.map)(parse$3)) : (0, _rxjs.of)([]);
	  });
	}

	var proposals_1$3 = /*#__PURE__*/Object.defineProperty({
		proposals: proposals_2$3
	}, '__esModule', {value: true});

	var referendumIds_2 = referendumIds;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function referendumIds(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$democracy;

	    return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.lowestUnbaked ? api.queryMulti([api.query.democracy.lowestUnbaked, api.query.democracy.referendumCount]).pipe((0, _rxjs.map)(([first, total]) => total.gt(first) // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
	    ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i)) : [])) : (0, _rxjs.of)([]);
	  });
	}

	var referendumIds_1 = /*#__PURE__*/Object.defineProperty({
		referendumIds: referendumIds_2
	}, '__esModule', {value: true});

	var referendums_2 = referendums;

	var _defineProperty2$a = interopRequireDefault(defineProperty);





	function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { (0, _defineProperty2$a.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function referendums(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.democracy.referendumsActive().pipe((0, _rxjs.switchMap)(referendums => referendums.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(referendums), api.derive.democracy._referendumsVotes(referendums)]) : (0, _rxjs.of)([[], []])), (0, _rxjs.map)(([referendums, votes]) => referendums.map((referendum, index) => _objectSpread$a(_objectSpread$a({}, referendum), votes[index])))));
	}

	var referendums_1 = /*#__PURE__*/Object.defineProperty({
		referendums: referendums_2
	}, '__esModule', {value: true});

	var referendumsActive_2 = referendumsActive;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function referendumsActive(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.democracy.referendumIds().pipe((0, _rxjs.switchMap)(ids => ids.length ? api.derive.democracy.referendumsInfo(ids) : (0, _rxjs.of)([]))));
	}

	var referendumsActive_1 = /*#__PURE__*/Object.defineProperty({
		referendumsActive: referendumsActive_2
	}, '__esModule', {value: true});

	var referendumsFinished_2 = referendumsFinished;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function referendumsFinished(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.democracy.referendumIds().pipe((0, _rxjs.switchMap)(ids => api.query.democracy.referendumInfoOf.multi(ids)), (0, _rxjs.map)(infos => infos.map(optInfo => optInfo.unwrapOr(null)).filter(info => !!info && info.isFinished).map(info => info.asFinished))));
	}

	var referendumsFinished_1 = /*#__PURE__*/Object.defineProperty({
		referendumsFinished: referendumsFinished_2
	}, '__esModule', {value: true});

	var _referendumVotes_1 = _referendumVotes;
	var _referendumsVotes_1 = _referendumsVotes;
	var _referendumInfo_1 = _referendumInfo;
	var referendumsInfo_2 = referendumsInfo;

	var _defineProperty2$9 = interopRequireDefault(defineProperty);









	function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { (0, _defineProperty2$9.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function votesPrev(api, referendumId) {
	  return api.query.democracy.votersFor(referendumId).pipe((0, _rxjs.switchMap)(votersFor => (0, _rxjs.combineLatest)([(0, _rxjs.of)(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : (0, _rxjs.of)([]), api.derive.balances.votingBalances(votersFor)])), (0, _rxjs.map)(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
	    accountId,
	    balance: balances[index].votingBalance || api.registry.createType('Balance'),
	    isDelegating: false,
	    vote: votes[index] || api.registry.createType('Vote')
	  }))));
	}

	function extractVotes(mapped, referendumId) {
	  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) => // FIXME We are ignoring split votes
	  votes.reduce((result, [, vote]) => {
	    if (vote.isStandard) {
	      result.push(_objectSpread$9({
	        accountId,
	        isDelegating: false
	      }, vote.asStandard));
	    }

	    return result;
	  }, result), []);
	}

	function votesCurr(api, referendumId) {
	  return api.query.democracy.votingOf.entries().pipe((0, _rxjs.map)(allVoting => {
	    const mapped = allVoting.map(([{
	      args: [accountId]
	    }, voting]) => [accountId, voting]);
	    const votes = extractVotes(mapped, referendumId);
	    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]); // add delegations

	    delegations.forEach(([accountId, {
	      balance,
	      conviction,
	      target
	    }]) => {
	      // Are we delegating to a delegator
	      const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
	      const to = votes.find(({
	        accountId
	      }) => accountId.eq(toDelegator ? toDelegator[0] : target)); // this delegation has a target

	      if (to) {
	        votes.push({
	          accountId,
	          balance,
	          isDelegating: true,
	          vote: api.registry.createType('Vote', {
	            aye: to.vote.isAye,
	            conviction
	          })
	        });
	      }
	    });
	    return votes;
	  }));
	}

	function _referendumVotes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, referendum => (0, _rxjs.combineLatest)([api.derive.democracy.sqrtElectorate(), (0, _util$5.isFunction)(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe((0, _rxjs.map)(([sqrtElectorate, votes]) => (0, _util2.calcVotes)(sqrtElectorate, referendum, votes))));
	}

	function _referendumsVotes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, referendums => referendums.length ? (0, _rxjs.combineLatest)(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : (0, _rxjs.of)([]));
	}

	function _referendumInfo(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (index, info) => {
	    const status = (0, _util2.getStatus)(info);
	    return status ? api.query.democracy.preimages(status.proposalHash).pipe((0, _rxjs.map)(preimage => ({
	      image: (0, _util2.parseImage)(api, preimage),
	      imageHash: status.proposalHash,
	      index: api.registry.createType('ReferendumIndex', index),
	      status
	    }))) : (0, _rxjs.of)(null);
	  });
	}

	function referendumsInfo(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe((0, _rxjs.switchMap)(infos => (0, _rxjs.combineLatest)(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), (0, _rxjs.map)(infos => infos.filter(referendum => !!referendum))) : (0, _rxjs.of)([]));
	}

	var referendumsInfo_1 = /*#__PURE__*/Object.defineProperty({
		_referendumVotes: _referendumVotes_1,
		_referendumsVotes: _referendumsVotes_1,
		_referendumInfo: _referendumInfo_1,
		referendumsInfo: referendumsInfo_2
	}, '__esModule', {value: true});

	var sqrtElectorate_2 = sqrtElectorate;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function sqrtElectorate(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.balances.totalIssuance().pipe((0, _rxjs.map)(totalIssuance => (0, _util$5.bnSqrt)(totalIssuance))));
	}

	var sqrtElectorate_1 = /*#__PURE__*/Object.defineProperty({
		sqrtElectorate: sqrtElectorate_2
	}, '__esModule', {value: true});

	var _dispatchQueue = dispatchQueue_1;

	var _locks = locks_1;

	var _nextExternal = nextExternal_1;

	var _preimage = preimage_1;

	var _preimages = preimages_1;

	var _proposals$3 = proposals_1$3;

	var _referendumIds = referendumIds_1;

	var _referendums = referendums_1;

	var _referendumsActive = referendumsActive_1;

	var _referendumsFinished = referendumsFinished_1;

	var _referendumsInfo = referendumsInfo_1;

	var _sqrtElectorate = sqrtElectorate_1;

	var democracy = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_dispatchQueue).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _dispatchQueue[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _dispatchQueue[key];
	    }
	  });
	});



	Object.keys(_locks).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _locks[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _locks[key];
	    }
	  });
	});



	Object.keys(_nextExternal).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _nextExternal[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _nextExternal[key];
	    }
	  });
	});



	Object.keys(_preimage).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _preimage[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _preimage[key];
	    }
	  });
	});



	Object.keys(_preimages).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _preimages[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _preimages[key];
	    }
	  });
	});



	Object.keys(_proposals$3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _proposals$3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _proposals$3[key];
	    }
	  });
	});



	Object.keys(_referendumIds).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _referendumIds[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _referendumIds[key];
	    }
	  });
	});



	Object.keys(_referendums).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _referendums[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _referendums[key];
	    }
	  });
	});



	Object.keys(_referendumsActive).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _referendumsActive[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _referendumsActive[key];
	    }
	  });
	});



	Object.keys(_referendumsFinished).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _referendumsFinished[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _referendumsFinished[key];
	    }
	  });
	});



	Object.keys(_referendumsInfo).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _referendumsInfo[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _referendumsInfo[key];
	    }
	  });
	});



	Object.keys(_sqrtElectorate).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _sqrtElectorate[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _sqrtElectorate[key];
	    }
	  });
	});
	});

	var info_2$3 = info$3;

	var _defineProperty2$8 = interopRequireDefault(defineProperty);





	function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { (0, _defineProperty2$8.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function isSeatHolder(value) {
	  return !Array.isArray(value);
	}

	function isCandidateTuple(value) {
	  return Array.isArray(value);
	}

	function getAccountTuple(value) {
	  return isSeatHolder(value) ? [value.who, value.stake] : value;
	}

	function getCandidate(value) {
	  return isCandidateTuple(value) ? value[0] : value;
	}

	function sortAccounts([, balanceA], [, balanceB]) {
	  return balanceB.cmp(balanceA);
	}

	function queryElections(api) {
	  const elections = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : api.query.elections ? 'elections' : null;
	  const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'council') || ['council'];
	  return (elections ? api.queryMulti([api.query[council].members, api.query[elections].candidates, api.query[elections].members, api.query[elections].runnersUp]) : (0, _rxjs.combineLatest)([api.query[council].members(), (0, _rxjs.of)([]), (0, _rxjs.of)([]), (0, _rxjs.of)([])])).pipe((0, _rxjs.map)(([councilMembers, candidates, members, runnersUp]) => _objectSpread$8(_objectSpread$8({}, elections ? {
	    candidacyBond: api.consts[elections].candidacyBond,
	    desiredRunnersUp: api.consts[elections].desiredRunnersUp,
	    desiredSeats: api.consts[elections].desiredMembers,
	    termDuration: api.consts[elections].termDuration,
	    votingBond: api.consts[elections].votingBond
	  } : {}), {}, {
	    candidateCount: api.registry.createType('u32', candidates.length),
	    candidates: candidates.map(getCandidate),
	    members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),
	    runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
	  })));
	}
	/**
	 * @name info
	 * @returns An object containing the combined results of the storage queries for
	 * all relevant election module properties.
	 * @example
	 * <BR>
	 *
	 * ```javascript
	 * api.derive.elections.info(({ members, candidates }) => {
	 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
	 * });
	 * ```
	 */


	function info$3(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => queryElections(api));
	}

	var info_1$3 = /*#__PURE__*/Object.defineProperty({
		info: info_2$3
	}, '__esModule', {value: true});

	var _info$3 = info_1$3;

	var elections = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_info$3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _info$3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _info$3[key];
	    }
	  });
	});
	});

	var receivedHeartbeats_2 = receivedHeartbeats;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function mapResult([result, validators, heartbeats, numBlocks]) {
	  validators.forEach((validator, index) => {
	    const validatorId = validator.toString();
	    const blockCount = numBlocks[index];
	    const hasMessage = !heartbeats[index].isEmpty;
	    const prev = result[validatorId];

	    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
	      result[validatorId] = {
	        blockCount,
	        hasMessage,
	        isOnline: hasMessage || blockCount.gt(_util$5.BN_ZERO)
	      };
	    }
	  });
	  return result;
	}
	/**
	 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
	 */


	function receivedHeartbeats(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$imOnline;

	    return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe((0, _rxjs.switchMap)(({
	      currentIndex,
	      validators
	    }) => (0, _rxjs.combineLatest)([(0, _rxjs.of)({}), (0, _rxjs.of)(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))])), (0, _rxjs.map)(mapResult)) : (0, _rxjs.of)({});
	  });
	}

	var receivedHeartbeats_1 = /*#__PURE__*/Object.defineProperty({
		receivedHeartbeats: receivedHeartbeats_2
	}, '__esModule', {value: true});

	var _receivedHeartbeats = receivedHeartbeats_1;

	var imOnline = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_receivedHeartbeats).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _receivedHeartbeats[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _receivedHeartbeats[key];
	    }
	  });
	});
	});

	var members_2$2 = members$2;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function members$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.members)(instanceId, api, 'membership'));
	}

	var members_1$2 = /*#__PURE__*/Object.defineProperty({
		members: members_2$2
	}, '__esModule', {value: true});

	var prime_2$1 = prime$1;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function prime$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.prime)(instanceId, api, 'membership'));
	}

	var prime_1$1 = /*#__PURE__*/Object.defineProperty({
		prime: prime_2$1
	}, '__esModule', {value: true});

	var hasProposals_1$1 = hasProposals$1;
	var proposal_1$1 = proposal$1;
	var proposalCount_1$1 = proposalCount$1;
	var proposalHashes_1$1 = proposalHashes$1;
	var proposals_2$2 = proposals$2;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hasProposals$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.hasProposals)(instanceId, api, 'membership'));
	}

	function proposal$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposal)(instanceId, api, 'membership'));
	}

	function proposalCount$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposalCount)(instanceId, api, 'membership'));
	}

	function proposalHashes$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposalHashes)(instanceId, api, 'membership'));
	}

	function proposals$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposals)(instanceId, api, 'membership'));
	}

	var proposals_1$2 = /*#__PURE__*/Object.defineProperty({
		hasProposals: hasProposals_1$1,
		proposal: proposal_1$1,
		proposalCount: proposalCount_1$1,
		proposalHashes: proposalHashes_1$1,
		proposals: proposals_2$2
	}, '__esModule', {value: true});

	var _members$3 = members_1$2;

	var _prime$1 = prime_1$1;

	var _proposals$2 = proposals_1$2;

	var membership = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_members$3).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _members$3[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _members$3[key];
	    }
	  });
	});



	Object.keys(_prime$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _prime$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _prime$1[key];
	    }
	  });
	});



	Object.keys(_proposals$2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _proposals$2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _proposals$2[key];
	    }
	  });
	});
	});

	var didUpdateToBool_1 = didUpdateToBool;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function didUpdateToBool(didUpdate, id) {
	  return didUpdate.isSome ? didUpdate.unwrap().some(paraId => paraId.eq(id)) : false;
	}

	var util$2 = /*#__PURE__*/Object.defineProperty({
		didUpdateToBool: didUpdateToBool_1
	}, '__esModule', {value: true});

	var _util$1 = util$2;

	var info_2$2 = info$2;

	var _defineProperty2$7 = interopRequireDefault(defineProperty);







	function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { (0, _defineProperty2$7.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function parseActive(id, active) {
	  const found = active.find(([paraId]) => paraId === id);

	  if (found && found[1].isSome) {
	    const [collatorId, retriable] = found[1].unwrap();
	    return _objectSpread$7({
	      collatorId
	    }, retriable.isWithRetries ? {
	      isRetriable: true,
	      retries: retriable.asWithRetries.toNumber()
	    } : {
	      isRetriable: false,
	      retries: 0
	    });
	  }

	  return null;
	}

	function parseCollators(id, collatorQueue) {
	  return collatorQueue.map(queue => {
	    const found = queue.find(([paraId]) => paraId === id);
	    return found ? found[1] : null;
	  });
	}

	function parse$2(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
	  if (info.isNone) {
	    return null;
	  }

	  return {
	    active: parseActive(id, active),
	    didUpdate: (0, _util$1.didUpdateToBool)(didUpdate, id),
	    heads,
	    id,
	    info: _objectSpread$7({
	      id
	    }, info.unwrap()),
	    pendingSwapId: pendingSwap.unwrapOr(null),
	    relayDispatchQueue,
	    retryCollators: parseCollators(id, retryQueue),
	    selectedCollators: parseCollators(id, selectedThreads)
	  };
	}

	function info$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe((0, _rxjs.map)(result => parse$2(api.registry.createType('ParaId', id), result))) : (0, _rxjs.of)(null));
	}

	var info_1$2 = /*#__PURE__*/Object.defineProperty({
		info: info_2$2
	}, '__esModule', {value: true});

	var overview_2$1 = overview$1;

	var _defineProperty2$6 = interopRequireDefault(defineProperty);







	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { (0, _defineProperty2$6.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function parse$1([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
	  return ids.map((id, index) => ({
	    didUpdate: (0, _util$1.didUpdateToBool)(didUpdate, id),
	    id,
	    info: _objectSpread$6({
	      id
	    }, infos[index].unwrapOr(null)),
	    pendingSwapId: pendingSwaps[index].unwrapOr(null),
	    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
	  }));
	}

	function overview$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => {
	    var _api$query$registrar;

	    return (_api$query$registrar = api.query.registrar) !== null && _api$query$registrar !== void 0 && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe((0, _rxjs.switchMap)(paraIds => (0, _rxjs.combineLatest)([(0, _rxjs.of)(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), (0, _rxjs.map)(parse$1)) : (0, _rxjs.of)([]);
	  });
	}

	var overview_1$1 = /*#__PURE__*/Object.defineProperty({
		overview: overview_2$1
	}, '__esModule', {value: true});

	var _info$2 = info_1$2;

	var _overview$1 = overview_1$1;

	var parachains = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_info$2).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _info$2[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _info$2[key];
	    }
	  });
	});



	Object.keys(_overview$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _overview$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _overview$1[key];
	    }
	  });
	});
	});

	var eraLength_2 = eraLength;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function eraLength(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.session.info().pipe((0, _rxjs.map)(info => info.eraLength)));
	}

	var eraLength_1 = /*#__PURE__*/Object.defineProperty({
		eraLength: eraLength_2
	}, '__esModule', {value: true});

	var eraProgress_2 = eraProgress;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function eraProgress(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.session.progress().pipe((0, _rxjs.map)(info => info.eraProgress)));
	}

	var eraProgress_1 = /*#__PURE__*/Object.defineProperty({
		eraProgress: eraProgress_2
	}, '__esModule', {value: true});

	var indexes_2 = indexes;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// parse into Indexes
	function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
	  return {
	    activeEra,
	    activeEraStart,
	    currentEra,
	    currentIndex,
	    validatorCount
	  };
	} // query based on latest


	function queryStaking(api) {
	  return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe((0, _rxjs.map)(([currentIndex, activeOpt, currentEra, validatorCount]) => {
	    const {
	      index,
	      start
	    } = activeOpt.unwrapOrDefault();
	    return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);
	  }));
	} // query based on latest


	function querySession(api) {
	  return api.query.session.currentIndex().pipe((0, _rxjs.map)(currentIndex => parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));
	} // empty set when none is available


	function empty(api) {
	  return (0, _rxjs.of)(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));
	}

	function indexes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
	}

	var indexes_1 = /*#__PURE__*/Object.defineProperty({
		indexes: indexes_2
	}, '__esModule', {value: true});

	var info_2$1 = info$1;

	var _defineProperty2$5 = interopRequireDefault(defineProperty);





	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { (0, _defineProperty2$5.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	/**
	 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
	 */
	function info$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.session.indexes().pipe((0, _rxjs.map)(indexes => {
	    var _api$consts, _api$consts$babe, _api$consts2, _api$consts2$staking;

	    const sessionLength = ((_api$consts = api.consts) === null || _api$consts === void 0 ? void 0 : (_api$consts$babe = _api$consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.epochDuration) || api.registry.createType('u64', 1);
	    const sessionsPerEra = ((_api$consts2 = api.consts) === null || _api$consts2 === void 0 ? void 0 : (_api$consts2$staking = _api$consts2.staking) === null || _api$consts2$staking === void 0 ? void 0 : _api$consts2$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1);
	    return _objectSpread$5(_objectSpread$5({}, indexes), {}, {
	      eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
	      isEpoch: !!api.query.babe,
	      sessionLength,
	      sessionsPerEra
	    });
	  })));
	}

	var info_1$1 = /*#__PURE__*/Object.defineProperty({
		info: info_2$1
	}, '__esModule', {value: true});

	var progress_2 = progress;

	var _defineProperty2$4 = interopRequireDefault(defineProperty);





	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { (0, _defineProperty2$4.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
	  const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
	  const sessionProgress = currentSlot.sub(epochStartSlot);
	  const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
	  return _objectSpread$4(_objectSpread$4({}, info), {}, {
	    eraProgress: api.registry.createType('BlockNumber', eraProgress),
	    sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
	  });
	}

	function queryAura(api) {
	  return api.derive.session.info().pipe((0, _rxjs.map)(info => _objectSpread$4(_objectSpread$4({}, info), {}, {
	    eraProgress: api.registry.createType('BlockNumber'),
	    sessionProgress: api.registry.createType('BlockNumber')
	  })));
	}

	function queryBabe(api) {
	  return api.derive.session.info().pipe((0, _rxjs.switchMap)(info => {
	    var _api$query$staking;

	    return (0, _rxjs.combineLatest)([(0, _rxjs.of)(info), // we may have no staking, but have babe (permissioned)
	    (_api$query$staking = api.query.staking) !== null && _api$query$staking !== void 0 && _api$query$staking.erasStartSessionIndex ? api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot, [api.query.staking.erasStartSessionIndex, info.activeEra]]) : api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot])]);
	  }), (0, _rxjs.map)(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]]));
	}
	/**
	 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
	 */


	function progress(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.babe ? queryBabe(api).pipe((0, _rxjs.map)(([info, slots]) => createDerive(api, info, slots))) : queryAura(api));
	}

	var progress_1 = /*#__PURE__*/Object.defineProperty({
		progress: progress_2
	}, '__esModule', {value: true});

	var sessionProgress_2 = sessionProgress;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function sessionProgress(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.session.progress().pipe((0, _rxjs.map)(info => info.sessionProgress)));
	}

	var sessionProgress_1 = /*#__PURE__*/Object.defineProperty({
		sessionProgress: sessionProgress_2
	}, '__esModule', {value: true});

	var _eraLength = eraLength_1;

	var _eraProgress = eraProgress_1;

	var _indexes = indexes_1;

	var _info$1 = info_1$1;

	var _progress = progress_1;

	var _sessionProgress = sessionProgress_1;

	var session = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_eraLength).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _eraLength[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _eraLength[key];
	    }
	  });
	});



	Object.keys(_eraProgress).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _eraProgress[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _eraProgress[key];
	    }
	  });
	});



	Object.keys(_indexes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _indexes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _indexes[key];
	    }
	  });
	});



	Object.keys(_info$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _info$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _info$1[key];
	    }
	  });
	});



	Object.keys(_progress).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _progress[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _progress[key];
	    }
	  });
	});



	Object.keys(_sessionProgress).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _sessionProgress[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _sessionProgress[key];
	    }
	  });
	});
	});

	var candidates_2 = candidates;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @description Get the candidate info for a society
	 */
	function candidates(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.society.candidates().pipe((0, _rxjs.switchMap)(candidates => (0, _rxjs.combineLatest)([(0, _rxjs.of)(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({
	    who
	  }) => who))])), (0, _rxjs.map)(([candidates, suspended]) => candidates.map(({
	    kind,
	    value,
	    who
	  }, index) => ({
	    accountId: who,
	    isSuspended: suspended[index].isSome,
	    kind,
	    value
	  })))));
	}

	var candidates_1 = /*#__PURE__*/Object.defineProperty({
		candidates: candidates_2
	}, '__esModule', {value: true});

	var info_2 = info;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @description Get the overall info for a society
	 */
	function info(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.queryMulti([api.query.society.bids, api.query.society.defender, api.query.society.founder, api.query.society.head, api.query.society.maxMembers, api.query.society.pot]).pipe((0, _rxjs.map)(([bids, defender, founder, head, maxMembers, pot]) => ({
	    bids,
	    defender: defender.unwrapOr(undefined),
	    founder: founder.unwrapOr(undefined),
	    hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
	    head: head.unwrapOr(undefined),
	    maxMembers,
	    pot
	  }))));
	}

	var info_1 = /*#__PURE__*/Object.defineProperty({
		info: info_2
	}, '__esModule', {value: true});

	var member_2 = member;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @description Get the member info for a society
	 */
	function member(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => api.derive.society._members([accountId]).pipe((0, _rxjs.map)(([result]) => result)));
	}

	var member_1 = /*#__PURE__*/Object.defineProperty({
		member: member_2
	}, '__esModule', {value: true});

	var _members_1 = _members$2;
	var members_2$1 = members$1;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _members$2(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountIds => (0, _rxjs.combineLatest)([(0, _rxjs.of)(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe((0, _rxjs.map)(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
	    accountId,
	    isDefenderVoter: defenderVotes[index].isSome,
	    isSuspended: suspended[index].isTrue,
	    payouts: payouts[index],
	    strikes: strikes[index],
	    vote: defenderVotes[index].unwrapOr(undefined),
	    vouching: vouching[index].unwrapOr(undefined)
	  })))));
	}
	/**
	 * @description Get the member info for a society
	 */


	function members$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.society.members().pipe((0, _rxjs.switchMap)(members => api.derive.society._members(members))));
	}

	var members_1$1 = /*#__PURE__*/Object.defineProperty({
		_members: _members_1,
		members: members_2$1
	}, '__esModule', {value: true});

	var _candidates = candidates_1;

	var _info = info_1;

	var _member = member_1;

	var _members$1 = members_1$1;

	var society = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_candidates).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _candidates[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _candidates[key];
	    }
	  });
	});



	Object.keys(_info).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _info[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _info[key];
	    }
	  });
	});



	Object.keys(_member).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _member[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _member[key];
	    }
	  });
	});



	Object.keys(_members$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _members$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _members$1[key];
	    }
	  });
	});
	});

	var accounts_1 = accounts;
	var account_2 = account;

	var _defineProperty2$3 = interopRequireDefault(defineProperty);







	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { (0, _defineProperty2$3.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const QUERY_OPTS = {
	  withDestination: true,
	  withLedger: true,
	  withNominations: true,
	  withPrefs: true
	};

	function groupByEra(list) {
	  return list.reduce((map, {
	    era,
	    value
	  }) => {
	    const key = era.toString();
	    map[key] = (map[key] || _util$5.BN_ZERO).add(value.unwrap());
	    return map;
	  }, {});
	}

	function calculateUnlocking(api, stakingLedger, sessionInfo) {
	  const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({
	    era
	  }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
	    remainingEras: new _util$5.BN(eraString).isub(sessionInfo.activeEra),
	    value: api.registry.createType('Balance', value)
	  }));
	  return results.length ? results : undefined;
	}

	function redeemableSum(api, stakingLedger, sessionInfo) {
	  return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {
	    era,
	    value
	  }) => {
	    return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;
	  }, new _util$5.BN(0)));
	}

	function parseResult$1(api, sessionInfo, keys, query) {
	  return _objectSpread$3(_objectSpread$3(_objectSpread$3({}, keys), query), {}, {
	    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
	    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
	  });
	}
	/**
	 * @description From a list of stashes, fill in all the relevant staking details
	 */


	function accounts(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountIds => api.derive.session.info().pipe((0, _rxjs.switchMap)(sessionInfo => (0, _rxjs.combineLatest)([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe((0, _rxjs.map)(([keys, queries]) => queries.map((query, index) => parseResult$1(api, sessionInfo, keys[index], query)))))));
	}
	/**
	 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
	 */


	function account(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, accountId => api.derive.staking.accounts([accountId]).pipe((0, _rxjs.map)(([first]) => first)));
	}

	var account_1 = /*#__PURE__*/Object.defineProperty({
		accounts: accounts_1,
		account: account_2
	}, '__esModule', {value: true});

	var currentPoints_2 = currentPoints;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0

	/**
	 * @description Retrieve the staking overview, including elected and points earned
	 */
	function currentPoints(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.derive.session.indexes().pipe((0, _rxjs.switchMap)(({
	    activeEra
	  }) => api.query.staking.erasRewardPoints(activeEra))));
	}

	var currentPoints_1 = /*#__PURE__*/Object.defineProperty({
		currentPoints: currentPoints_2
	}, '__esModule', {value: true});

	var _eraExposure_1 = _eraExposure;
	var eraExposure_1 = eraExposure;
	var _erasExposure_1 = _erasExposure$1;
	var erasExposure_2 = erasExposure;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CACHE_KEY$4 = 'eraExposure';

	function mapStakers(era, stakers) {
	  const nominators = {};
	  const validators = {};
	  stakers.forEach(([key, exposure]) => {
	    const validatorId = key.args[1].toString();
	    validators[validatorId] = exposure;
	    exposure.others.forEach(({
	      who
	    }, validatorIndex) => {
	      const nominatorId = who.toString();
	      nominators[nominatorId] = nominators[nominatorId] || [];
	      nominators[nominatorId].push({
	        validatorId,
	        validatorIndex
	      });
	    });
	  });
	  return {
	    era,
	    nominators,
	    validators
	  };
	}

	function _eraExposure(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (era, withActive) => {
	    const cacheKey = `${CACHE_KEY$4}-${era.toString()}`;
	    const cached = withActive ? undefined : _index$4.deriveCache.get(cacheKey);
	    return cached ? (0, _rxjs.of)(cached) : api.query.staking.erasStakersClipped.entries(era).pipe((0, _rxjs.map)(stakers => {
	      const value = mapStakers(era, stakers);
	      !withActive && _index$4.deriveCache.set(cacheKey, value);
	      return value;
	    }));
	  });
	}

	function eraExposure(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, era => api.derive.staking._eraExposure(era, true));
	}

	function _erasExposure$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (eras, withActive) => eras.length ? (0, _rxjs.combineLatest)(eras.map(era => api.derive.staking._eraExposure(era, withActive))) : (0, _rxjs.of)([]));
	}

	function erasExposure(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._erasExposure(eras, withActive))));
	}

	var erasExposure_1 = /*#__PURE__*/Object.defineProperty({
		_eraExposure: _eraExposure_1,
		eraExposure: eraExposure_1,
		_erasExposure: _erasExposure_1,
		erasExposure: erasExposure_2
	}, '__esModule', {value: true});

	var erasHistoric_2 = erasHistoric;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function erasHistoric(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, withActive => api.queryMulti([api.query.staking.activeEra, api.query.staking.historyDepth]).pipe((0, _rxjs.map)(([activeEraOpt, historyDepth]) => {
	    const result = [];
	    const max = historyDepth.toNumber();
	    const activeEra = activeEraOpt.unwrapOrDefault().index;
	    let lastEra = activeEra;

	    while (lastEra.gte(_util$5.BN_ZERO) && result.length < max) {
	      if (lastEra !== activeEra || withActive === true) {
	        result.push(api.registry.createType('EraIndex', lastEra));
	      }

	      lastEra = lastEra.sub(_util$5.BN_ONE);
	    } // go from oldest to newest


	    return result.reverse();
	  })));
	}

	var erasHistoric_1 = /*#__PURE__*/Object.defineProperty({
		erasHistoric: erasHistoric_2
	}, '__esModule', {value: true});

	var filterEras_1 = filterEras;

	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function filterEras(eras, list) {
	  return eras.filter(era => !list.some(entry => era.eq(entry.era)));
	}

	var util$1 = /*#__PURE__*/Object.defineProperty({
		filterEras: filterEras_1
	}, '__esModule', {value: true});

	var _util = util$1;

	var _erasPoints_1 = _erasPoints$1;
	var erasPoints_2 = erasPoints;









	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CACHE_KEY$3 = 'eraPoints';

	function mapValidators({
	  individual
	}) {
	  return [...individual.entries()].filter(([, points]) => points.gt(_util$5.BN_ZERO)).reduce((result, [validatorId, points]) => {
	    result[validatorId.toString()] = points;
	    return result;
	  }, {});
	}

	function mapPoints(eras, points) {
	  return eras.map((era, index) => ({
	    era,
	    eraPoints: points[index].total,
	    validators: mapValidators(points[index])
	  }));
	}

	function _erasPoints$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (eras, withActive) => {
	    if (!eras.length) {
	      return (0, _rxjs.of)([]);
	    }

	    const cached = withActive ? [] : eras.map(era => _index$4.deriveCache.get(`${CACHE_KEY$3}-${era.toString()}`)).filter(value => !!value);
	    const remaining = (0, _util.filterEras)(eras, cached);
	    return !remaining.length ? (0, _rxjs.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, _rxjs.map)(points => {
	      const query = mapPoints(remaining, points);
	      !withActive && query.forEach(q => _index$4.deriveCache.set(`${CACHE_KEY$3}-${q.era.toString()}`, q));
	      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));
	    }));
	  });
	}

	function erasPoints(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._erasPoints(eras, withActive))));
	}

	var erasPoints_1 = /*#__PURE__*/Object.defineProperty({
		_erasPoints: _erasPoints_1,
		erasPoints: erasPoints_2
	}, '__esModule', {value: true});

	var _eraPrefs_1 = _eraPrefs;
	var eraPrefs_1 = eraPrefs;
	var _erasPrefs_1 = _erasPrefs$1;
	var erasPrefs_2 = erasPrefs;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CACHE_KEY$2 = 'eraPrefs';

	function mapPrefs(era, all) {
	  const validators = {};
	  all.forEach(([key, prefs]) => {
	    validators[key.args[1].toString()] = prefs;
	  });
	  return {
	    era,
	    validators
	  };
	}

	function _eraPrefs(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (era, withActive) => {
	    const cacheKey = `${CACHE_KEY$2}-${era.toString()}`;
	    const cached = withActive ? undefined : _index$4.deriveCache.get(cacheKey);
	    return cached ? (0, _rxjs.of)(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe((0, _rxjs.map)(prefs => {
	      const value = mapPrefs(era, prefs);
	      !withActive && _index$4.deriveCache.set(cacheKey, value);
	      return value;
	    }));
	  });
	}

	function eraPrefs(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, era => api.derive.staking._eraPrefs(era, true));
	}

	function _erasPrefs$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (eras, withActive) => eras.length ? (0, _rxjs.combineLatest)(eras.map(era => api.derive.staking._eraPrefs(era, withActive))) : (0, _rxjs.of)([]));
	}

	function erasPrefs(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._erasPrefs(eras, withActive))));
	}

	var erasPrefs_1 = /*#__PURE__*/Object.defineProperty({
		_eraPrefs: _eraPrefs_1,
		eraPrefs: eraPrefs_1,
		_erasPrefs: _erasPrefs_1,
		erasPrefs: erasPrefs_2
	}, '__esModule', {value: true});

	var _erasRewards_1 = _erasRewards$1;
	var erasRewards_2 = erasRewards;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CACHE_KEY$1 = 'eraRewards';

	function mapRewards(eras, optRewards) {
	  return eras.map((era, index) => ({
	    era,
	    eraReward: optRewards[index].unwrapOrDefault()
	  }));
	}

	function _erasRewards$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (eras, withActive) => {
	    if (!eras.length) {
	      return (0, _rxjs.of)([]);
	    }

	    const cached = withActive ? [] : eras.map(era => _index$4.deriveCache.get(`${CACHE_KEY$1}-${era.toString()}`)).filter(value => !!value);
	    const remaining = (0, _util.filterEras)(eras, cached);

	    if (!remaining.length) {
	      return (0, _rxjs.of)(cached);
	    }

	    return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, _rxjs.map)(optRewards => {
	      const query = mapRewards(remaining, optRewards);
	      !withActive && query.forEach(q => _index$4.deriveCache.set(`${CACHE_KEY$1}-${q.era.toString()}`, q));
	      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));
	    }));
	  });
	}

	function erasRewards(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._erasRewards(eras, withActive))));
	}

	var erasRewards_1 = /*#__PURE__*/Object.defineProperty({
		_erasRewards: _erasRewards_1,
		erasRewards: erasRewards_2
	}, '__esModule', {value: true});

	var _eraSlashes_1 = _eraSlashes;
	var eraSlashes_1 = eraSlashes;
	var _erasSlashes_1 = _erasSlashes$1;
	var erasSlashes_2 = erasSlashes;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const CACHE_KEY = 'eraSlashes';

	function mapSlashes(era, noms, vals) {
	  const nominators = {};
	  const validators = {};
	  noms.forEach(([key, optBalance]) => {
	    nominators[key.args[1].toString()] = optBalance.unwrap();
	  });
	  vals.forEach(([key, optRes]) => {
	    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
	  });
	  return {
	    era,
	    nominators,
	    validators
	  };
	}

	function _eraSlashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (era, withActive) => {
	    const cacheKey = `${CACHE_KEY}-${era.toString()}`;
	    const cached = withActive ? undefined : _index$4.deriveCache.get(cacheKey);
	    return cached ? (0, _rxjs.of)(cached) : (0, _rxjs.combineLatest)([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe((0, _rxjs.map)(([noms, vals]) => {
	      const value = mapSlashes(era, noms, vals);
	      !withActive && _index$4.deriveCache.set(cacheKey, value);
	      return value;
	    }));
	  });
	}

	function eraSlashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, era => api.derive.staking._eraSlashes(era, true));
	}

	function _erasSlashes$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (eras, withActive) => eras.length ? (0, _rxjs.combineLatest)(eras.map(era => api.derive.staking._eraSlashes(era, withActive))) : (0, _rxjs.of)([]));
	}

	function erasSlashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._erasSlashes(eras, withActive))));
	}

	var erasSlashes_1 = /*#__PURE__*/Object.defineProperty({
		_eraSlashes: _eraSlashes_1,
		eraSlashes: eraSlashes_1,
		_erasSlashes: _erasSlashes_1,
		erasSlashes: erasSlashes_2
	}, '__esModule', {value: true});

	var electedInfo_2 = electedInfo;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEFAULT_FLAGS$1 = {
	  withController: true,
	  withExposure: true,
	  withPrefs: true
	};

	function combineAccounts(nextElected, validators) {
	  return (0, _util$5.arrayFlatten)([nextElected, validators.filter(v => !nextElected.find(n => n.eq(v)))]);
	}

	function electedInfo(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (flags = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe((0, _rxjs.switchMap)(({
	    nextElected,
	    validators
	  }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe((0, _rxjs.map)(info => ({
	    info,
	    nextElected,
	    validators
	  }))))));
	}

	var electedInfo_1 = /*#__PURE__*/Object.defineProperty({
		electedInfo: electedInfo_2
	}, '__esModule', {value: true});

	var keys_2 = keys$1;
	var keysMulti_1 = keysMulti;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function extractsIds(stashId, queuedKeys, nextKeys) {
	  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
	  const nextSessionIds = nextKeys.unwrapOr([]);
	  return {
	    nextSessionIds,
	    sessionIds
	  };
	}

	function keys$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, stashId => api.derive.staking.keysMulti([stashId]).pipe((0, _rxjs.map)(([first]) => first)));
	}

	function keysMulti(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, stashIds => stashIds.length ? api.query.session.queuedKeys().pipe((0, _rxjs.switchMap)(queuedKeys => {
	    var _api$consts$session;

	    return (0, _rxjs.combineLatest)([(0, _rxjs.of)(queuedKeys), (_api$consts$session = api.consts.session) !== null && _api$consts$session !== void 0 && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(stashId => [api.consts.session.dedupKeyPrefix, stashId])) : api.query.session.nextKeys.multi(stashIds)]);
	  }), (0, _rxjs.map)(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : (0, _rxjs.of)([]));
	}

	var keys_1 = /*#__PURE__*/Object.defineProperty({
		keys: keys_2,
		keysMulti: keysMulti_1
	}, '__esModule', {value: true});

	var overview_2 = overview;

	var _defineProperty2$2 = interopRequireDefault(defineProperty);





	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { (0, _defineProperty2$2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	/**
	 * @description Retrieve the staking overview, including elected and points earned
	 */
	function overview(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => (0, _rxjs.combineLatest)([api.derive.session.indexes(), api.derive.staking.validators()]).pipe((0, _rxjs.map)(([indexes, {
	    nextElected,
	    validators
	  }]) => _objectSpread$2(_objectSpread$2({}, indexes), {}, {
	    nextElected,
	    validators
	  }))));
	}

	var overview_1 = /*#__PURE__*/Object.defineProperty({
		overview: overview_2
	}, '__esModule', {value: true});

	var _ownExposures_1 = _ownExposures;
	var ownExposure_2 = ownExposure;
	var ownExposures_1 = ownExposures;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _ownExposures(instanceId, api) {
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  return (0, _index$4.memo)(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(era => [api.query.staking.erasStakersClipped, [era, accountId]]), ...eras.map(era => [api.query.staking.erasStakers, [era, accountId]])]).pipe((0, _rxjs.map)(all => eras.map((era, index) => ({
	    clipped: all[index],
	    era,
	    exposure: all[eras.length + index]
	  })))) : (0, _rxjs.of)([]));
	}

	function ownExposure(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, era) => api.derive.staking._ownExposures(accountId, [era], true).pipe((0, _rxjs.map)(([first]) => first)));
	}

	function ownExposures(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => {
	    return api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._ownExposures(accountId, eras, withActive)));
	  });
	}

	var ownExposure_1 = /*#__PURE__*/Object.defineProperty({
		_ownExposures: _ownExposures_1,
		ownExposure: ownExposure_2,
		ownExposures: ownExposures_1
	}, '__esModule', {value: true});

	var _ownSlashes_1 = _ownSlashes$1;
	var ownSlash_1 = ownSlash;
	var ownSlashes_2 = ownSlashes;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _ownSlashes$1(instanceId, api) {
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  return (0, _index$4.memo)(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(era => [api.query.staking.validatorSlashInEra, [era, accountId]]), ...eras.map(era => [api.query.staking.nominatorSlashInEra, [era, accountId]])]).pipe((0, _rxjs.map)(values => eras.map((era, index) => ({
	    era,
	    total: values[index].isSome ? values[index].unwrap()[1] : values[index + eras.length].unwrapOrDefault()
	  })))) : (0, _rxjs.of)([]));
	}

	function ownSlash(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true).pipe((0, _rxjs.map)(([first]) => first)));
	}

	function ownSlashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => {
	    return api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._ownSlashes(accountId, eras, withActive)));
	  });
	}

	var ownSlashes_1 = /*#__PURE__*/Object.defineProperty({
		_ownSlashes: _ownSlashes_1,
		ownSlash: ownSlash_1,
		ownSlashes: ownSlashes_2
	}, '__esModule', {value: true});

	var query_2 = query;
	var queryMulti_1 = queryMulti;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
	  return {
	    accountId: stashId,
	    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
	    exposure,
	    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
	    rewardDestination,
	    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
	    stashId,
	    validatorPrefs
	  };
	}

	function getLedgers(api, optIds, {
	  withLedger = false
	}) {
	  const ids = optIds.filter(opt => withLedger && !!opt && opt.isSome).map(opt => opt.unwrap());
	  const emptyLed = api.registry.createType('Option<StakingLedger>');
	  return (ids.length ? api.query.staking.ledger.multi(ids) : (0, _rxjs.of)([])).pipe((0, _rxjs.map)(optLedgers => {
	    let offset = -1;
	    return optIds.map(opt => opt && opt.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
	  }));
	}

	function getStashInfo(api, stashIds, activeEra, {
	  withController,
	  withDestination,
	  withExposure,
	  withLedger,
	  withNominations,
	  withPrefs
	}) {
	  const emptyNoms = api.registry.createType('Option<Nominations>');
	  const emptyRewa = api.registry.createType('RewardDestination');
	  const emptyExpo = api.registry.createType('Exposure');
	  const emptyPrefs = api.registry.createType('ValidatorPrefs');
	  return (0, _rxjs.combineLatest)([withController || withLedger ? api.query.staking.bonded.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => null)), withNominations ? api.query.staking.nominators.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => emptyNoms)), withDestination ? api.query.staking.payee.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => emptyRewa)), withPrefs ? api.query.staking.validators.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => emptyPrefs)), withExposure ? api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId])) : (0, _rxjs.of)(stashIds.map(() => emptyExpo))]);
	}

	function getBatch(api, activeEra, stashIds, flags) {
	  return getStashInfo(api, stashIds, activeEra, flags).pipe((0, _rxjs.switchMap)(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe((0, _rxjs.map)(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
	} //

	/**
	 * @description From a stash, retrieve the controllerId and all relevant details
	 */


	function query(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, flags) => api.derive.staking.queryMulti([accountId], flags).pipe((0, _rxjs.map)(([first]) => first)));
	}

	function queryMulti(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe((0, _rxjs.switchMap)(({
	    activeEra
	  }) => {
	    const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));
	    return getBatch(api, activeEra, stashIds, flags);
	  })) : (0, _rxjs.of)([]));
	}

	var query_1 = /*#__PURE__*/Object.defineProperty({
		query: query_2,
		queryMulti: queryMulti_1
	}, '__esModule', {value: true});

	var _stakerExposures_1 = _stakerExposures;
	var stakerExposures_1 = stakerExposures;
	var stakerExposure_2 = stakerExposure;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _stakerExposures(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountIds, eras, withActive) => {
	    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());
	    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _rxjs.map)(exposures => stakerIds.map(stakerId => exposures.map(({
	      era,
	      nominators: allNominators,
	      validators: allValidators
	    }) => {
	      const isValidator = !!allValidators[stakerId];
	      const validators = {};
	      const nominating = allNominators[stakerId] || [];

	      if (isValidator) {
	        validators[stakerId] = allValidators[stakerId];
	      } else if (nominating) {
	        nominating.forEach(({
	          validatorId
	        }) => {
	          validators[validatorId] = allValidators[validatorId];
	        });
	      }

	      return {
	        era,
	        isEmpty: !Object.keys(validators).length,
	        isValidator,
	        nominating,
	        validators
	      };
	    }))));
	  });
	}

	function stakerExposures(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
	}

	function stakerExposure(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.stakerExposures([accountId, withActive]).pipe((0, _rxjs.map)(([first]) => first)));
	}

	var stakerExposure_1 = /*#__PURE__*/Object.defineProperty({
		_stakerExposures: _stakerExposures_1,
		stakerExposures: stakerExposures_1,
		stakerExposure: stakerExposure_2
	}, '__esModule', {value: true});

	var _stakerPoints_1 = _stakerPoints$1;
	var stakerPoints_2 = stakerPoints;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _stakerPoints$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, eras, withActive) => {
	    const stakerId = api.registry.createType('AccountId', accountId).toString();
	    return api.derive.staking._erasPoints(eras, withActive).pipe((0, _rxjs.map)(points => points.map(({
	      era,
	      eraPoints,
	      validators
	    }) => ({
	      era,
	      eraPoints,
	      points: validators[stakerId] || api.registry.createType('RewardPoint')
	    }))));
	  });
	}

	function stakerPoints(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerPoints(accountId, eras, withActive))));
	}

	var stakerPoints_1 = /*#__PURE__*/Object.defineProperty({
		_stakerPoints: _stakerPoints_1,
		stakerPoints: stakerPoints_2
	}, '__esModule', {value: true});

	var _stakerPrefs_1 = _stakerPrefs$1;
	var stakerPrefs_2 = stakerPrefs;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _stakerPrefs$1(instanceId, api) {
	  // eslint-disable-next-line @typescript-eslint/no-unused-vars
	  return (0, _index$4.memo)(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map(era => [era, accountId])).pipe((0, _rxjs.map)(all => all.map((validatorPrefs, index) => ({
	    era: eras[index],
	    validatorPrefs
	  })))));
	}

	function stakerPrefs(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerPrefs(accountId, eras, withActive))));
	}

	var stakerPrefs_1 = /*#__PURE__*/Object.defineProperty({
		_stakerPrefs: _stakerPrefs_1,
		stakerPrefs: stakerPrefs_2
	}, '__esModule', {value: true});

	var _stakerRewardsEras_1 = _stakerRewardsEras;
	var _stakerRewards_1 = _stakerRewards$1;
	var stakerRewards_2 = stakerRewards;
	var stakerRewardsMultiEras_1 = stakerRewardsMultiEras;
	var stakerRewardsMulti_1 = stakerRewardsMulti;

	var _defineProperty2$1 = interopRequireDefault(defineProperty);







	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { (0, _defineProperty2$1.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
	  return exposures.map(({
	    era,
	    isEmpty,
	    isValidator,
	    nominating,
	    validators: eraValidators
	  }) => {
	    const {
	      eraPoints,
	      validators: allValPoints
	    } = erasPoints.find(p => p.era.eq(era)) || {
	      eraPoints: _util$5.BN_ZERO,
	      validators: {}
	    };
	    const {
	      eraReward
	    } = erasRewards.find(r => r.era.eq(era)) || {
	      eraReward: api.registry.createType('Balance')
	    };
	    const {
	      validators: allValPrefs
	    } = erasPrefs.find(p => p.era.eq(era)) || {
	      validators: {}
	    };
	    const validators = {};
	    const stakerId = stashId.toString();
	    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
	      var _allValPrefs$validato, _exposure$total;

	      const valPoints = allValPoints[validatorId] || _util$5.BN_ZERO;
	      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || _util$5.BN_ZERO;
	      const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || _util$5.BN_ZERO;
	      let avail = _util$5.BN_ZERO;
	      let value;

	      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
	        avail = eraReward.mul(valPoints).div(eraPoints);
	        const valCut = valComm.mul(avail).div(_util$5.BN_BILLION);
	        let staked;

	        if (validatorId === stakerId) {
	          staked = exposure.own.unwrap();
	        } else {
	          const stakerExp = exposure.others.find(({
	            who
	          }) => who.eq(stakerId));
	          staked = stakerExp ? stakerExp.value.unwrap() : _util$5.BN_ZERO;
	        }

	        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : _util$5.BN_ZERO);
	      }

	      validators[validatorId] = {
	        total: api.registry.createType('Balance', avail),
	        value: api.registry.createType('Balance', value)
	      };
	    });
	    return {
	      era,
	      eraReward,
	      isEmpty,
	      isValidator,
	      nominating,
	      validators
	    };
	  });
	}

	function allUniqValidators(rewards) {
	  return rewards.reduce(([all, perStash], rewards) => {
	    const uniq = [];
	    perStash.push(uniq);
	    rewards.forEach(({
	      validators
	    }) => Object.keys(validators).forEach(validatorId => {
	      if (!uniq.includes(validatorId)) {
	        uniq.push(validatorId);

	        if (!all.includes(validatorId)) {
	          all.push(validatorId);
	        }
	      }
	    }));
	    return [all, perStash];
	  }, [[], []]);
	}

	function removeClaimed(validators, queryValidators, reward) {
	  const rm = [];
	  Object.keys(reward.validators).forEach(validatorId => {
	    const index = validators.indexOf(validatorId);

	    if (index !== -1) {
	      const valLedger = queryValidators[index].stakingLedger;

	      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(era => reward.era.eq(era))) {
	        rm.push(validatorId);
	      }
	    }
	  });
	  rm.forEach(validatorId => {
	    delete reward.validators[validatorId];
	  });
	}

	function filterRewards(eras, valInfo, {
	  rewards,
	  stakingLedger
	}) {
	  const filter = eras.filter(era => !stakingLedger.claimedRewards.some(e => e.eq(era)));
	  const validators = valInfo.map(([v]) => v);
	  const queryValidators = valInfo.map(([, q]) => q);
	  return rewards.filter(({
	    isEmpty
	  }) => !isEmpty).filter(reward => {
	    if (!filter.some(filter => reward.era.eq(filter))) {
	      return false;
	    }

	    removeClaimed(validators, queryValidators, reward);
	    return true;
	  }).filter(({
	    validators
	  }) => Object.keys(validators).length !== 0).map(reward => _objectSpread$1(_objectSpread$1({}, reward), {}, {
	    nominators: reward.nominating.filter(n => reward.validators[n.validatorId])
	  }));
	}

	function _stakerRewardsEras(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (eras, withActive) => (0, _rxjs.combineLatest)([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));
	}

	function _stakerRewards$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountIds, eras, withActive) => (0, _rxjs.combineLatest)([api.derive.staking.queryMulti(accountIds, {
	    withLedger: true
	  }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe((0, _rxjs.switchMap)(([queries, exposures, erasResult]) => {
	    const allRewards = queries.map(({
	      stakingLedger,
	      stashId
	    }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));

	    if (withActive) {
	      return (0, _rxjs.of)(allRewards);
	    }

	    const [allValidators, stashValidators] = allUniqValidators(allRewards);
	    return api.derive.staking.queryMulti(allValidators, {
	      withLedger: true
	    }).pipe((0, _rxjs.map)(queriedVals => queries.map(({
	      stakingLedger
	    }, index) => filterRewards(eras, stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]), {
	      rewards: allRewards[index],
	      stakingLedger
	    }))));
	  })));
	}

	function stakerRewards(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerRewards([accountId], eras, withActive)), (0, _rxjs.map)(([first]) => first)));
	}

	function stakerRewardsMultiEras(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : (0, _rxjs.of)([]));
	}

	function stakerRewardsMulti(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
	}

	var stakerRewards_1 = /*#__PURE__*/Object.defineProperty({
		_stakerRewardsEras: _stakerRewardsEras_1,
		_stakerRewards: _stakerRewards_1,
		stakerRewards: stakerRewards_2,
		stakerRewardsMultiEras: stakerRewardsMultiEras_1,
		stakerRewardsMulti: stakerRewardsMulti_1
	}, '__esModule', {value: true});

	var _stakerSlashes_1 = _stakerSlashes$1;
	var stakerSlashes_2 = stakerSlashes;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function _stakerSlashes$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, eras, withActive) => {
	    const stakerId = api.registry.createType('AccountId', accountId).toString();
	    return api.derive.staking._erasSlashes(eras, withActive).pipe((0, _rxjs.map)(slashes => slashes.map(({
	      era,
	      nominators,
	      validators
	    }) => ({
	      era,
	      total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
	    }))));
	  });
	}

	function stakerSlashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerSlashes(accountId, eras, withActive))));
	}

	var stakerSlashes_1 = /*#__PURE__*/Object.defineProperty({
		_stakerSlashes: _stakerSlashes_1,
		stakerSlashes: stakerSlashes_2
	}, '__esModule', {value: true});

	var stashes_2 = stashes;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function onBondedEvent(api) {
	  let current = Date.now();
	  return api.query.system.events().pipe((0, _rxjs.map)(events => {
	    current = events.filter(({
	      event,
	      phase
	    }) => {
	      try {
	        return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';
	      } catch {
	        return false;
	      }
	    }) ? Date.now() : current;
	    return current;
	  }), (0, _rxjs.startWith)(current), (0, _index$4.drr)({
	    skipTimeout: true
	  }));
	}
	/**
	 * @description Retrieve the list of all validator stashes
	 */


	function stashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => onBondedEvent(api).pipe((0, _rxjs.switchMap)(() => api.query.staking.validators.keys()), (0, _rxjs.map)(keys => keys.map(({
	    args: [validatorId]
	  }) => validatorId).filter(a => a))));
	}

	var stashes_1 = /*#__PURE__*/Object.defineProperty({
		stashes: stashes_2
	}, '__esModule', {value: true});

	var nextElected_1 = nextElected;
	var validators_2 = validators;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function nextElected(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not
	  // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
	  (0, _rxjs.switchMap)(({
	    currentEra
	  }) => api.query.staking.erasStakers.keys(currentEra)), (0, _rxjs.map)(keys => keys.map(({
	    args: [, accountId]
	  }) => accountId))) : api.query.staking.currentElected());
	}
	/**
	 * @description Retrieve latest list of validators
	 */


	function validators(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
	  // in all actual real-world deployed chains, it does create some confusion for limited template chains
	  (0, _rxjs.combineLatest)([api.query.session ? api.query.session.validators() : (0, _rxjs.of)([]), api.query.staking ? api.derive.staking.nextElected() : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([validators, nextElected]) => ({
	    nextElected: nextElected.length ? nextElected : validators,
	    validators
	  }))));
	}

	var validators_1 = /*#__PURE__*/Object.defineProperty({
		nextElected: nextElected_1,
		validators: validators_2
	}, '__esModule', {value: true});

	var waitingInfo_2 = waitingInfo;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const DEFAULT_FLAGS = {
	  withController: true,
	  withPrefs: true
	};

	function waitingInfo(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (flags = DEFAULT_FLAGS) => (0, _rxjs.combineLatest)([api.derive.staking.validators(), api.derive.staking.stashes()]).pipe((0, _rxjs.switchMap)(([{
	    nextElected
	  }, stashes]) => {
	    const elected = nextElected.map(a => a.toString());
	    const waiting = stashes.filter(v => !elected.includes(v.toString()));
	    return api.derive.staking.queryMulti(waiting, flags).pipe((0, _rxjs.map)(info => ({
	      info,
	      waiting
	    })));
	  })));
	}

	var waitingInfo_1 = /*#__PURE__*/Object.defineProperty({
		waitingInfo: waitingInfo_2
	}, '__esModule', {value: true});

	var _account = account_1;

	var _currentPoints = currentPoints_1;

	var _erasExposure = erasExposure_1;

	var _erasHistoric = erasHistoric_1;

	var _erasPoints = erasPoints_1;

	var _erasPrefs = erasPrefs_1;

	var _erasRewards = erasRewards_1;

	var _erasSlashes = erasSlashes_1;

	var _electedInfo = electedInfo_1;

	var _keys = keys_1;

	var _overview = overview_1;

	var _ownExposure = ownExposure_1;

	var _ownSlashes = ownSlashes_1;

	var _query = query_1;

	var _stakerExposure = stakerExposure_1;

	var _stakerPoints = stakerPoints_1;

	var _stakerPrefs = stakerPrefs_1;

	var _stakerRewards = stakerRewards_1;

	var _stakerSlashes = stakerSlashes_1;

	var _stashes = stashes_1;

	var _validators = validators_1;

	var _waitingInfo = waitingInfo_1;

	var staking = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_account).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _account[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _account[key];
	    }
	  });
	});



	Object.keys(_currentPoints).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _currentPoints[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _currentPoints[key];
	    }
	  });
	});



	Object.keys(_erasExposure).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _erasExposure[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _erasExposure[key];
	    }
	  });
	});



	Object.keys(_erasHistoric).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _erasHistoric[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _erasHistoric[key];
	    }
	  });
	});



	Object.keys(_erasPoints).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _erasPoints[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _erasPoints[key];
	    }
	  });
	});



	Object.keys(_erasPrefs).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _erasPrefs[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _erasPrefs[key];
	    }
	  });
	});



	Object.keys(_erasRewards).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _erasRewards[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _erasRewards[key];
	    }
	  });
	});



	Object.keys(_erasSlashes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _erasSlashes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _erasSlashes[key];
	    }
	  });
	});



	Object.keys(_electedInfo).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _electedInfo[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _electedInfo[key];
	    }
	  });
	});



	Object.keys(_keys).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _keys[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _keys[key];
	    }
	  });
	});



	Object.keys(_overview).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _overview[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _overview[key];
	    }
	  });
	});



	Object.keys(_ownExposure).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _ownExposure[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _ownExposure[key];
	    }
	  });
	});



	Object.keys(_ownSlashes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _ownSlashes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _ownSlashes[key];
	    }
	  });
	});



	Object.keys(_query).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _query[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _query[key];
	    }
	  });
	});



	Object.keys(_stakerExposure).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _stakerExposure[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stakerExposure[key];
	    }
	  });
	});



	Object.keys(_stakerPoints).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _stakerPoints[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stakerPoints[key];
	    }
	  });
	});



	Object.keys(_stakerPrefs).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _stakerPrefs[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stakerPrefs[key];
	    }
	  });
	});



	Object.keys(_stakerRewards).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _stakerRewards[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stakerRewards[key];
	    }
	  });
	});



	Object.keys(_stakerSlashes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _stakerSlashes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stakerSlashes[key];
	    }
	  });
	});



	Object.keys(_stashes).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _stashes[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _stashes[key];
	    }
	  });
	});



	Object.keys(_validators).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _validators[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _validators[key];
	    }
	  });
	});



	Object.keys(_waitingInfo).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _waitingInfo[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _waitingInfo[key];
	    }
	  });
	});
	});

	var members_2 = members;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function members(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.members)(instanceId, api, 'technicalCommittee'));
	}

	var members_1 = /*#__PURE__*/Object.defineProperty({
		members: members_2
	}, '__esModule', {value: true});

	var prime_2 = prime;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function prime(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.prime)(instanceId, api, 'technicalCommittee'));
	}

	var prime_1 = /*#__PURE__*/Object.defineProperty({
		prime: prime_2
	}, '__esModule', {value: true});

	var hasProposals_1 = hasProposals;
	var proposal_1 = proposal;
	var proposalCount_1 = proposalCount;
	var proposalHashes_1 = proposalHashes;
	var proposals_2$1 = proposals$1;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function hasProposals(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.hasProposals)(instanceId, api, 'technicalCommittee'));
	}

	function proposal(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposal)(instanceId, api, 'technicalCommittee'));
	}

	function proposalCount(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposalCount)(instanceId, api, 'technicalCommittee'));
	}

	function proposalHashes(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposalHashes)(instanceId, api, 'technicalCommittee'));
	}

	function proposals$1(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, (0, _index$3.proposals)(instanceId, api, 'technicalCommittee'));
	}

	var proposals_1$1 = /*#__PURE__*/Object.defineProperty({
		hasProposals: hasProposals_1,
		proposal: proposal_1,
		proposalCount: proposalCount_1,
		proposalHashes: proposalHashes_1,
		proposals: proposals_2$1
	}, '__esModule', {value: true});

	var _members = members_1;

	var _prime = prime_1;

	var _proposals$1 = proposals_1$1;

	var technicalCommittee = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_members).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _members[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _members[key];
	    }
	  });
	});



	Object.keys(_prime).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _prime[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _prime[key];
	    }
	  });
	});



	Object.keys(_proposals$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _proposals$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _proposals$1[key];
	    }
	  });
	});
	});

	var proposals_2 = proposals;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function parseResult(api, {
	  allIds,
	  allProposals,
	  approvalIds,
	  councilProposals,
	  proposalCount
	}) {
	  const approvals = [];
	  const proposals = [];
	  const councilTreasury = councilProposals.filter(({
	    proposal
	  }) => api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal));
	  allIds.forEach((id, index) => {
	    if (allProposals[index].isSome) {
	      const council = councilTreasury.filter(({
	        proposal
	      }) => id.eq(proposal.args[0])).sort((a, b) => a.proposal.method.localeCompare(b.proposal.method));
	      const isApproval = approvalIds.some(approvalId => approvalId.eq(id));
	      const derived = {
	        council,
	        id,
	        proposal: allProposals[index].unwrap()
	      };

	      if (isApproval) {
	        approvals.push(derived);
	      } else {
	        proposals.push(derived);
	      }
	    }
	  });
	  return {
	    approvals,
	    proposalCount,
	    proposals
	  };
	}

	function retrieveProposals(api, proposalCount, approvalIds) {
	  const proposalIds = [];
	  const count = proposalCount.toNumber();

	  for (let index = 0; index < count; index++) {
	    if (!approvalIds.some(id => id.eqn(index))) {
	      proposalIds.push(api.registry.createType('ProposalIndex', index));
	    }
	  }

	  const allIds = [...proposalIds, ...approvalIds];
	  return (0, _rxjs.combineLatest)([api.query.treasury.proposals.multi(allIds), api.derive.council ? api.derive.council.proposals() : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([allProposals, councilProposals]) => parseResult(api, {
	    allIds,
	    allProposals,
	    approvalIds,
	    councilProposals,
	    proposalCount
	  })));
	}
	/**
	 * @description Retrieve all active and approved treasury proposals, along with their info
	 */


	function proposals(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, () => api.query.treasury ? (0, _rxjs.combineLatest)([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe((0, _rxjs.switchMap)(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : (0, _rxjs.of)({
	    approvals: [],
	    proposalCount: api.registry.createType('ProposalIndex'),
	    proposals: []
	  }));
	}

	var proposals_1 = /*#__PURE__*/Object.defineProperty({
		proposals: proposals_2
	}, '__esModule', {value: true});

	var _proposals = proposals_1;

	var treasury = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_proposals).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _proposals[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _proposals[key];
	    }
	  });
	});
	});

	var events_2 = events;





	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function events(instanceId, api) {
	  return (0, _index$4.memo)(instanceId, at => (0, _rxjs.combineLatest)([api.query.system.events.at(at), api.rpc.chain.getBlock(at)]).pipe((0, _rxjs.map)(([events, block]) => ({
	    block,
	    events
	  }))));
	}

	var events_1 = /*#__PURE__*/Object.defineProperty({
		events: events_2
	}, '__esModule', {value: true});

	var constants = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MORTAL_PERIOD = exports.MAX_FINALITY_LAG = exports.FALLBACK_PERIOD = exports.FALLBACK_MAX_HASH_COUNT = void 0;



	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const FALLBACK_MAX_HASH_COUNT = 250; // default here to 5 min eras, adjusted based on the actual blocktime

	exports.FALLBACK_MAX_HASH_COUNT = FALLBACK_MAX_HASH_COUNT;
	const FALLBACK_PERIOD = new _util$5.BN(6 * 1000);
	exports.FALLBACK_PERIOD = FALLBACK_PERIOD;
	const MAX_FINALITY_LAG = new _util$5.BN(5);
	exports.MAX_FINALITY_LAG = MAX_FINALITY_LAG;
	const MORTAL_PERIOD = new _util$5.BN(5 * 60 * 1000);
	exports.MORTAL_PERIOD = MORTAL_PERIOD;
	});

	var _constants = constants;

	var signingInfo_2 = signingInfo;







	// Copyright 2017-2021 @polkadot/api-derive authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function latestNonce(api, address) {
	  return api.derive.balances.account(address).pipe((0, _rxjs.map)(({
	    accountNonce
	  }) => accountNonce));
	}

	function nextNonce(api, address) {
	  var _api$rpc$system;

	  return (_api$rpc$system = api.rpc.system) !== null && _api$rpc$system !== void 0 && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
	}

	function signingHeader(api) {
	  return (0, _rxjs.combineLatest)([api.rpc.chain.getHeader(), api.rpc.chain.getFinalizedHead()]).pipe((0, _rxjs.switchMap)(([bestHeader, finHash]) => // retrieve the headers - in the case of the current block, we use the parent
	  // to minimize (not completely remove) the impact that forks do have on the system
	  // (when at genesis, just return the current header as the last known)
	  bestHeader.parentHash.isEmpty ? (0, _rxjs.of)([bestHeader, bestHeader]) : (0, _rxjs.combineLatest)([api.rpc.chain.getHeader(bestHeader.parentHash), api.rpc.chain.getHeader(finHash)])), (0, _rxjs.map)(([current, finalized]) => // determine the hash to use, current when lag > max, else finalized
	  current.number.unwrap().sub(finalized.number.unwrap()).gt(_constants.MAX_FINALITY_LAG) ? current : finalized));
	}

	function signingInfo(_instanceId, api) {
	  // no memo, we want to do this fresh on each run
	  return (address, nonce, era) => (0, _rxjs.combineLatest)([// retrieve nonce if none was specified
	  (0, _util$5.isUndefined)(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : (0, _rxjs.of)(api.registry.createType('Index', nonce)), // if no era (create) or era > 0 (mortal), do block retrieval
	  (0, _util$5.isUndefined)(era) || (0, _util$5.isNumber)(era) && era > 0 ? signingHeader(api) : (0, _rxjs.of)(null)]).pipe((0, _rxjs.map)(([nonce, header]) => {
	    var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;

	    return {
	      header,
	      mortalLength: Math.min(((_api$consts$system = api.consts.system) === null || _api$consts$system === void 0 ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) === null || _api$consts$system$bl === void 0 ? void 0 : _api$consts$system$bl.toNumber()) || _constants.FALLBACK_MAX_HASH_COUNT, _constants.MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || _constants.FALLBACK_PERIOD).iadd(_constants.MAX_FINALITY_LAG).toNumber()),
	      nonce
	    };
	  }));
	}

	var signingInfo_1 = /*#__PURE__*/Object.defineProperty({
		signingInfo: signingInfo_2
	}, '__esModule', {value: true});

	var _events = events_1;

	var _signingInfo = signingInfo_1;

	var tx = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.keys(_events).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _events[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _events[key];
	    }
	  });
	});



	Object.keys(_signingInfo).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _signingInfo[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _signingInfo[key];
	    }
	  });
	});
	});

	var require$$1 = accounts$1;

	var require$$2 = balances;

	var require$$3 = bounties;

	var require$$4 = chain;

	var require$$5 = contracts;

	var require$$6 = council;

	var require$$7 = crowdloan;

	var require$$8 = democracy;

	var require$$9 = elections;

	var require$$10 = imOnline;

	var require$$11 = membership;

	var require$$12 = parachains;

	var require$$13 = session;

	var require$$14 = society;

	var require$$15 = staking;

	var require$$16 = technicalCommittee;

	var require$$17 = treasury;

	var require$$18 = tx;

	var bundle$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  derive: true,
	  decorateDerive: true,
	  packageInfo: true
	};
	exports.decorateDerive = decorateDerive;
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$9.packageInfo;
	  }
	});
	exports.derive = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var accounts = _interopRequireWildcard(require$$1);

	var balances = _interopRequireWildcard(require$$2);

	var bounties = _interopRequireWildcard(require$$3);

	var chain = _interopRequireWildcard(require$$4);

	var contracts = _interopRequireWildcard(require$$5);

	var council = _interopRequireWildcard(require$$6);

	var crowdloan = _interopRequireWildcard(require$$7);

	var democracy = _interopRequireWildcard(require$$8);

	var elections = _interopRequireWildcard(require$$9);

	var imOnline = _interopRequireWildcard(require$$10);

	var membership = _interopRequireWildcard(require$$11);

	var parachains = _interopRequireWildcard(require$$12);

	var session = _interopRequireWildcard(require$$13);

	var society = _interopRequireWildcard(require$$14);

	var staking = _interopRequireWildcard(require$$15);

	var technicalCommittee = _interopRequireWildcard(require$$16);

	var treasury = _interopRequireWildcard(require$$17);

	var tx = _interopRequireWildcard(require$$18);





	Object.keys(_index19).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _index19[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _index19[key];
	    }
	  });
	});

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const derive = {
	  accounts,
	  balances,
	  bounties,
	  chain,
	  contracts,
	  council,
	  crowdloan,
	  democracy,
	  elections,
	  imOnline,
	  membership,
	  parachains,
	  session,
	  society,
	  staking,
	  technicalCommittee,
	  treasury,
	  tx
	};
	exports.derive = derive;
	// Enable derive only if some of these modules are available
	const checks = {
	  contracts: {
	    instances: ['contracts']
	  },
	  council: {
	    instances: ['council'],
	    withDetect: true
	  },
	  crowdloan: {
	    instances: ['crowdloan']
	  },
	  democracy: {
	    instances: ['democracy']
	  },
	  elections: {
	    instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
	    withDetect: true
	  },
	  imOnline: {
	    instances: ['imOnline']
	  },
	  membership: {
	    instances: ['membership']
	  },
	  parachains: {
	    instances: ['parachains', 'registrar']
	  },
	  session: {
	    instances: ['session']
	  },
	  society: {
	    instances: ['society']
	  },
	  staking: {
	    instances: ['staking']
	  },
	  technicalCommittee: {
	    instances: ['technicalCommittee'],
	    withDetect: true
	  },
	  treasury: {
	    instances: ['treasury']
	  }
	};
	/**
	 * Returns an object that will inject `api` into all the functions inside
	 * `allSections`, and keep the object architecture of `allSections`.
	 */

	/** @internal */

	function injectFunctions(instanceId, api, allSections) {
	  const queryKeys = Object.keys(api.query);
	  const specName = api.runtimeVersion.specName.toString();
	  return Object.keys(allSections).filter(sectionName => !checks[sectionName] || checks[sectionName].instances.some(q => queryKeys.includes(q)) || checks[sectionName].withDetect && checks[sectionName].instances.some(q => (api.registry.getModuleInstances(specName, q) || []).some(q => queryKeys.includes(q)))).reduce((derives, sectionName) => {
	    const section = allSections[sectionName];
	    derives[sectionName] = Object.entries(section).reduce((methods, [methodName, creator]) => {
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call
	      methods[methodName] = creator(instanceId, api);
	      return methods;
	    }, {});
	    return derives;
	  }, {});
	} // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
	// For now we just drop the custom derive typings

	/** @internal */


	function decorateDerive(instanceId, api, custom = {}) {
	  return _objectSpread(_objectSpread({}, injectFunctions(instanceId, api, derive)), injectFunctions(instanceId, api, custom));
	}
	});

	var _bundle$1 = bundle$1;

	var apiDerive = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle$1).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle$1[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle$1[key];
	    }
	  });
	});
	});

	var decorateSections_1 = decorateSections;

	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	// Most generic typings for `api.derive.*.*`
	// Exact typings for a particular section `api.derive.section.*`
	// Exact typings for all sections `api.derive.*.*`
	// A technically unsafe version of Object.keys(obj) that assumes that
	// obj only has known properties of T
	function keys(obj) {
	  return Object.keys(obj);
	}
	/**
	 * This is a methods decorator which keeps all type information.
	 */


	function decorateMethods(section, decorateMethod) {
	  return keys(section).reduce((acc, methodName) => {
	    const method = section[methodName]; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

	    acc[methodName] = decorateMethod(method);
	    return acc;
	  }, {});
	}
	/**
	 * This is a section decorator which keeps all type information.
	 */


	function decorateSections(allSections, decorateMethod) {
	  return keys(allSections).reduce((acc, sectionName) => {
	    acc[sectionName] = decorateMethods(allSections[sectionName], decorateMethod);
	    return acc;
	  }, {});
	}

	var decorate = /*#__PURE__*/Object.defineProperty({
		decorateSections: decorateSections_1
	}, '__esModule', {value: true});

	var logging = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.l = void 0;



	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l = (0, _util$5.logger)('api/util');
	exports.l = l;
	});

	var _logging = logging;

	var filterEvents_2 = filterEvents;



	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function filterEvents(extHash, {
	  block: {
	    extrinsics,
	    header
	  }
	}, allEvents, status) {
	  // extrinsics to hashes
	  const myHash = extHash.toHex();
	  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block

	  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there

	  if (index === -1) {
	    // only warn on filtering with isInBlock (finalization finalizes after)
	    if (status.isInBlock) {
	      _logging.l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);
	    }

	    return;
	  }

	  return allEvents.filter(({
	    phase
	  }) => // only ApplyExtrinsic has the extrinsic index
	  phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));
	}

	var filterEvents_1 = /*#__PURE__*/Object.defineProperty({
		filterEvents: filterEvents_2
	}, '__esModule', {value: true});

	var isKeyringPair_2 = isKeyringPair;



	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function isKeyringPair(account) {
	  return (0, _util$5.isFunction)(account.sign);
	}

	var isKeyringPair_1 = /*#__PURE__*/Object.defineProperty({
		isKeyringPair: isKeyringPair_2
	}, '__esModule', {value: true});

	var _decorate = decorate;

	var _filterEvents = filterEvents_1;

	var _isKeyringPair = isKeyringPair_1;

	var util = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  filterEvents: true,
	  isKeyringPair: true,
	  l: true
	};
	Object.defineProperty(exports, "filterEvents", {
	  enumerable: true,
	  get: function () {
	    return _filterEvents.filterEvents;
	  }
	});
	Object.defineProperty(exports, "isKeyringPair", {
	  enumerable: true,
	  get: function () {
	    return _isKeyringPair.isKeyringPair;
	  }
	});
	Object.defineProperty(exports, "l", {
	  enumerable: true,
	  get: function () {
	    return _logging.l;
	  }
	});



	Object.keys(_decorate).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _decorate[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _decorate[key];
	    }
	  });
	});
	});

	var Result = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SubmittableResult = void 0;

	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const recordIdentity = record => record;

	function filterAndApply(events, section, methods, onFound) {
	  return events.filter(({
	    event
	  }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));
	}

	function extractError(events = []) {
	  return filterAndApply(events, 'system', ['ExtrinsicFailed'], ({
	    event: {
	      data
	    }
	  }) => data[0])[0];
	}

	function extractInfo(events = []) {
	  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], ({
	    event: {
	      data,
	      method
	    }
	  }) => method === 'ExtrinsicSuccess' ? data[0] : data[1])[0];
	}

	class SubmittableResult {
	  constructor({
	    dispatchError,
	    dispatchInfo,
	    events,
	    internalError,
	    status
	  }) {
	    this.dispatchError = void 0;
	    this.dispatchInfo = void 0;
	    this.internalError = void 0;
	    this.events = void 0;
	    this.status = void 0;
	    this.dispatchError = dispatchError || extractError(events);
	    this.dispatchInfo = dispatchInfo || extractInfo(events);
	    this.events = events || [];
	    this.internalError = internalError;
	    this.status = status;
	  }

	  get isCompleted() {
	    return this.isError || this.status.isInBlock || this.status.isFinalized;
	  }

	  get isError() {
	    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
	  }

	  get isFinalized() {
	    return this.status.isFinalized;
	  }

	  get isInBlock() {
	    return this.status.isInBlock;
	  }

	  get isWarning() {
	    return this.status.isRetracted;
	  }
	  /**
	   * @description Filters EventRecords for the specified method & section (there could be multiple)
	   */


	  filterRecords(section, method) {
	    return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
	  }
	  /**
	   * @description Finds an EventRecord for the specified method & section
	   */


	  findRecord(section, method) {
	    return this.filterRecords(section, method)[0];
	  }
	  /**
	   * @description Creates a human representation of the output
	   */


	  toHuman(isExtended) {
	    var _this$dispatchError, _this$dispatchInfo, _this$internalError;

	    return {
	      dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),
	      dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),
	      events: this.events.map(event => event.toHuman(isExtended)),
	      internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),
	      status: this.status.toHuman(isExtended)
	    };
	  }

	}

	exports.SubmittableResult = SubmittableResult;
	});

	var _index$2 = util;

	var _Result = Result;

	var createClass_2 = createClass;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);









	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const identity = input => input;

	function createClass({
	  api,
	  apiType,
	  decorateMethod
	}) {
	  // an instance of the base extrinsic for us to extend
	  const ExtrinsicBase = api.registry.createClass('Extrinsic');

	  var _ignoreStatusCb = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ignoreStatusCb");

	  var _transformResult = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("transformResult");

	  var _makeEraOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("makeEraOptions");

	  var _makeSignOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("makeSignOptions");

	  var _makeSignAndSendOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("makeSignAndSendOptions");

	  var _observeSign = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeSign");

	  var _observeStatus = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeStatus");

	  var _observeSend = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeSend");

	  var _observeSubscribe = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeSubscribe");

	  var _optionsOrNonce = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("optionsOrNonce");

	  var _signViaSigner = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signViaSigner");

	  var _updateSigner = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("updateSigner");

	  class Submittable extends ExtrinsicBase {
	    constructor(registry, extrinsic) {
	      super(registry, extrinsic, {
	        version: api.extrinsicType
	      });
	      Object.defineProperty(this, _ignoreStatusCb, {
	        writable: true,
	        value: void 0
	      });
	      Object.defineProperty(this, _transformResult, {
	        writable: true,
	        value: identity
	      });
	      Object.defineProperty(this, _makeEraOptions, {
	        writable: true,
	        value: (options, {
	          header,
	          mortalLength,
	          nonce
	        }) => {
	          if (!header) {
	            if ((0, _util$5.isNumber)(options.era)) {
	              // since we have no header, it is immortal, remove any option overrides
	              // so we only supply the genesisHash and no era to the construction
	              delete options.era;
	              delete options.blockHash;
	            }

	            return (0, _classPrivateFieldLooseBase2.default)(this, _makeSignOptions)[_makeSignOptions](options, {
	              nonce
	            });
	          }

	          return (0, _classPrivateFieldLooseBase2.default)(this, _makeSignOptions)[_makeSignOptions](options, {
	            blockHash: header.hash,
	            era: this.registry.createType('ExtrinsicEra', {
	              current: header.number,
	              period: options.era || mortalLength
	            }),
	            nonce
	          });
	        }
	      });
	      Object.defineProperty(this, _makeSignOptions, {
	        writable: true,
	        value: (options, extras) => {
	          return _objectSpread(_objectSpread(_objectSpread({
	            blockHash: api.genesisHash,
	            genesisHash: api.genesisHash
	          }, options), extras), {}, {
	            runtimeVersion: api.runtimeVersion,
	            signedExtensions: api.registry.signedExtensions,
	            version: api.extrinsicType
	          });
	        }
	      });
	      Object.defineProperty(this, _makeSignAndSendOptions, {
	        writable: true,
	        value: (optionsOrStatus, statusCb) => {
	          let options = {};

	          if ((0, _util$5.isFunction)(optionsOrStatus)) {
	            statusCb = optionsOrStatus;
	          } else {
	            options = _objectSpread({}, optionsOrStatus);
	          }

	          return [options, statusCb];
	        }
	      });
	      Object.defineProperty(this, _observeSign, {
	        writable: true,
	        value: (account, optionsOrNonce) => {
	          const address = (0, _index$2.isKeyringPair)(account) ? account.address : account.toString();

	          const options = (0, _classPrivateFieldLooseBase2.default)(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce);

	          let updateId;
	          return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe((0, _rxjs.first)(), (0, _rxjs.mergeMap)(async signingInfo => {
	            const eraOptions = (0, _classPrivateFieldLooseBase2.default)(this, _makeEraOptions)[_makeEraOptions](options, signingInfo);

	            if ((0, _index$2.isKeyringPair)(account)) {
	              this.sign(account, eraOptions);
	            } else {
	              updateId = await (0, _classPrivateFieldLooseBase2.default)(this, _signViaSigner)[_signViaSigner](address, eraOptions, signingInfo.header);
	            }
	          }), (0, _rxjs.mapTo)(updateId));
	        }
	      });
	      Object.defineProperty(this, _observeStatus, {
	        writable: true,
	        value: (hash, status) => {
	          if (!status.isFinalized && !status.isInBlock) {
	            return (0, _rxjs.of)((0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult](new _Result.SubmittableResult({
	              status
	            })));
	          }

	          const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
	          return api.derive.tx.events(blockHash).pipe((0, _rxjs.map)(({
	            block,
	            events
	          }) => (0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult](new _Result.SubmittableResult({
	            events: (0, _index$2.filterEvents)(hash, block, events, status),
	            status
	          }))), (0, _rxjs.catchError)(internalError => (0, _rxjs.of)((0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult](new _Result.SubmittableResult({
	            internalError,
	            status
	          })))));
	        }
	      });
	      Object.defineProperty(this, _observeSend, {
	        writable: true,
	        value: (updateId = -1) => {
	          return api.rpc.author.submitExtrinsic(this).pipe((0, _rxjs.tap)(hash => {
	            (0, _classPrivateFieldLooseBase2.default)(this, _updateSigner)[_updateSigner](updateId, hash);
	          }));
	        }
	      });
	      Object.defineProperty(this, _observeSubscribe, {
	        writable: true,
	        value: (updateId = -1) => {
	          const hash = this.hash;
	          return api.rpc.author.submitAndWatchExtrinsic(this).pipe((0, _rxjs.switchMap)(status => (0, _classPrivateFieldLooseBase2.default)(this, _observeStatus)[_observeStatus](hash, status)), (0, _rxjs.tap)(status => {
	            (0, _classPrivateFieldLooseBase2.default)(this, _updateSigner)[_updateSigner](updateId, status);
	          }));
	        }
	      });
	      Object.defineProperty(this, _optionsOrNonce, {
	        writable: true,
	        value: (optionsOrNonce = {}) => {
	          return (0, _util$5.isBn)(optionsOrNonce) || (0, _util$5.isNumber)(optionsOrNonce) ? {
	            nonce: optionsOrNonce
	          } : optionsOrNonce;
	        }
	      });
	      Object.defineProperty(this, _signViaSigner, {
	        writable: true,
	        value: async (address, options, header) => {
	          const signer = options.signer || api.signer;
	          (0, _util$5.assert)(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
	          const payload = this.registry.createType('SignerPayload', _objectSpread(_objectSpread({}, options), {}, {
	            address,
	            blockNumber: header ? header.number : 0,
	            method: this.method
	          }));
	          let result;

	          if (signer.signPayload) {
	            result = await signer.signPayload(payload.toPayload());
	          } else if (signer.signRaw) {
	            result = await signer.signRaw(payload.toRaw());
	          } else {
	            throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
	          } // Here we explicitly call `toPayload()` again instead of working with an object
	          // (reference) as passed to the signer. This means that we are sure that the
	          // payload data is not modified from our inputs, but the signer


	          super.addSignature(address, result.signature, payload.toPayload());
	          return result.id;
	        }
	      });
	      Object.defineProperty(this, _updateSigner, {
	        writable: true,
	        value: (updateId, status) => {
	          if (updateId !== -1 && api.signer && api.signer.update) {
	            api.signer.update(updateId, status);
	          }
	        }
	      });
	      (0, _classPrivateFieldLooseBase2.default)(this, _ignoreStatusCb)[_ignoreStatusCb] = apiType === 'rxjs';
	    } // dry run an extrinsic


	    dryRun(account, optionsOrHash) {
	      if ((0, _util$5.isString)(optionsOrHash) || (0, _util$5.isU8a)(optionsOrHash)) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
	        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), optionsOrHash));
	      } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call


	      return decorateMethod(() => (0, _classPrivateFieldLooseBase2.default)(this, _observeSign)[_observeSign](account, optionsOrHash).pipe((0, _rxjs.switchMap)(() => api.rpc.system.dryRun(this.toHex()))))();
	    } // calculate the payment info for this transaction (if signed and submitted)


	    paymentInfo(account, optionsOrHash) {
	      if ((0, _util$5.isString)(optionsOrHash) || (0, _util$5.isU8a)(optionsOrHash)) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
	        return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), optionsOrHash));
	      }

	      const [allOptions] = (0, _classPrivateFieldLooseBase2.default)(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrHash);

	      const address = (0, _index$2.isKeyringPair)(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

	      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe((0, _rxjs.first)(), (0, _rxjs.switchMap)(signingInfo => {
	        // setup our options (same way as in signAndSend)
	        const eraOptions = (0, _classPrivateFieldLooseBase2.default)(this, _makeEraOptions)[_makeEraOptions](allOptions, signingInfo);

	        const signOptions = (0, _classPrivateFieldLooseBase2.default)(this, _makeSignOptions)[_makeSignOptions](eraOptions, {});

	        this.signFake(address, signOptions);
	        return api.rpc.payment.queryInfo(this.toHex());
	      })))();
	    } // send with an immediate Hash result


	    // send implementation for both immediate Hash and statusCb variants
	    send(statusCb) {
	      const isSubscription = api.hasSubscriptions && ((0, _classPrivateFieldLooseBase2.default)(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

	      return decorateMethod(isSubscription ? (0, _classPrivateFieldLooseBase2.default)(this, _observeSubscribe)[_observeSubscribe] : (0, _classPrivateFieldLooseBase2.default)(this, _observeSend)[_observeSend])(statusCb);
	    }
	    /**
	     * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)
	     * @deprecated
	     */


	    sign(account, optionsOrNonce) {
	      super.sign(account, (0, _classPrivateFieldLooseBase2.default)(this, _makeSignOptions)[_makeSignOptions]((0, _classPrivateFieldLooseBase2.default)(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce), {}));
	      return this;
	    }
	    /**
	     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
	     */


	    signAsync(account, optionsOrNonce) {
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
	      return decorateMethod(() => (0, _classPrivateFieldLooseBase2.default)(this, _observeSign)[_observeSign](account, optionsOrNonce).pipe((0, _rxjs.mapTo)(this)))();
	    } // signAndSend with an immediate Hash result


	    // signAndSend implementation for all 3 cases above
	    signAndSend(account, optionsOrStatus, optionalStatusCb) {
	      const [options, statusCb] = (0, _classPrivateFieldLooseBase2.default)(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrStatus, optionalStatusCb);

	      const isSubscription = api.hasSubscriptions && ((0, _classPrivateFieldLooseBase2.default)(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

	      return decorateMethod(() => (0, _classPrivateFieldLooseBase2.default)(this, _observeSign)[_observeSign](account, options).pipe((0, _rxjs.switchMap)(updateId => isSubscription ? (0, _classPrivateFieldLooseBase2.default)(this, _observeSubscribe)[_observeSubscribe](updateId) : (0, _classPrivateFieldLooseBase2.default)(this, _observeSend)[_observeSend](updateId))) // FIXME This is wrong, SubmittableResult is _not_ a codec
	      )(statusCb);
	    } // adds a transform to the result, applied before result is returned


	    withResultTransform(transform) {
	      (0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult] = transform;
	      return this;
	    }

	  }

	  return Submittable;
	}

	var createClass_1 = /*#__PURE__*/Object.defineProperty({
		createClass: createClass_2
	}, '__esModule', {value: true});

	var _createClass = createClass_1;

	var createSubmittable_2 = createSubmittable;



	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function createSubmittable(apiType, api, decorateMethod) {
	  const Submittable = (0, _createClass.createClass)({
	    api,
	    apiType,
	    decorateMethod
	  });
	  return extrinsic => new Submittable(api.registry, extrinsic);
	}

	var createSubmittable_1 = /*#__PURE__*/Object.defineProperty({
		createSubmittable: createSubmittable_2
	}, '__esModule', {value: true});

	var _createSubmittable = createSubmittable_1;

	var submittable = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "createSubmittable", {
	  enumerable: true,
	  get: function () {
	    return _createSubmittable.createSubmittable;
	  }
	});
	Object.defineProperty(exports, "SubmittableResult", {
	  enumerable: true,
	  get: function () {
	    return _Result.SubmittableResult;
	  }
	});
	});

	var augmentObject_2 = augmentObject;



	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	const l = (0, _util$5.logger)('api/augment');

	function logLength(type, values, and = []) {
	  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';
	}

	function logValues(type, values) {
	  return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';
	} // log details to console


	function warn(prefix, type, [added, removed]) {
	  if (added.length || removed.length) {
	    l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
	  }
	}

	function extractKeys(src, dst) {
	  return [Object.keys(src), Object.keys(dst)];
	}

	function findSectionExcludes(a, b) {
	  return a.filter(section => !b.includes(section));
	}

	function extractSections(src, dst) {
	  const [srcSections, dstSections] = extractKeys(src, dst);
	  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];
	}

	function findMethodExcludes(src, dst) {
	  const srcSections = Object.keys(src);
	  const dstSections = Object.keys(dst);
	  return dstSections.filter(section => srcSections.includes(section)).reduce((rmMethods, section) => {
	    const srcMethods = Object.keys(src[section]);
	    return rmMethods.concat(...Object.keys(dst[section]).filter(method => !srcMethods.includes(method)).map(method => `${section}.${method}`));
	  }, []);
	}

	function extractMethods(src, dst) {
	  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];
	}
	/**
	 * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
	 * already available, but rather just adds new missing ites into the result object.
	 * @internal
	 */


	function augmentObject(prefix, src, dst, fromEmpty = false) {
	  if (fromEmpty) {
	    Object.keys(dst).forEach(key => {
	      delete dst[key];
	    });
	  }

	  if (prefix && Object.keys(dst).length) {
	    warn(prefix, 'modules', extractSections(src, dst));
	    warn(prefix, 'calls', extractMethods(src, dst));
	  }

	  return Object.keys(src).reduce((newSection, sectionName) => {
	    const section = src[sectionName];
	    newSection[sectionName] = Object.keys(section).reduce((result, methodName) => {
	      // TODO When it does match, check the actual details and warn when there are differences
	      if (!result[methodName]) {
	        result[methodName] = section[methodName];
	      }

	      return result;
	    }, dst[sectionName] || {});
	    return newSection;
	  }, dst);
	}

	var augmentObject_1 = /*#__PURE__*/Object.defineProperty({
		augmentObject: augmentObject_2
	}, '__esModule', {value: true});

	var extractStorageArgs_1 = extractStorageArgs;



	// Copyright 2017-2019 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function sig(_, {
	  method,
	  section
	}, args) {
	  return `${section}.${method}(${args.join(', ')})`;
	}

	function doDoubleMap(registry, creator, args) {
	  const {
	    key1,
	    key2
	  } = creator.meta.type.asDoubleMap;
	  (0, _util$5.assert)(args.length === 2, () => `${sig(registry, creator, [key1, key2])} is a double map, requiring 2 arguments, ${args.length} found`); // pass as tuple

	  return [creator, args];
	}

	function doMap(registry, creator, args) {
	  const {
	    key
	  } = creator.meta.type.asMap;
	  (0, _util$5.assert)(args.length === 1, () => `${sig(registry, creator, [key])} is a map, requiring 1 argument, ${args.length} found`); // expand

	  return args.length ? [creator, args[0]] : [creator];
	}

	function doNMap(registry, creator, args) {
	  const {
	    keyVec
	  } = creator.meta.type.asNMap;
	  (0, _util$5.assert)(args.length === keyVec.length, () => `${sig(registry, creator, keyVec)} is a multi map, requiring ${keyVec.length} arguments, ${args.length} found`); // pass as tuple

	  return [creator, args];
	} // sets up the arguments in the form of [creator, args] ready to be used in a storage
	// call. Additionally, it verifies that the correct number of arguments have been passed


	function extractStorageArgs(registry, creator, _args) {
	  const args = _args.filter(arg => !(0, _util$5.isUndefined)(arg));

	  if (creator.meta.type.isDoubleMap) {
	    return doDoubleMap(registry, creator, args);
	  } else if (creator.meta.type.isMap) {
	    return doMap(registry, creator, args);
	  } else if (creator.meta.type.isNMap) {
	    return doNMap(registry, creator, args);
	  }

	  (0, _util$5.assert)(args.length === 0, () => `${sig(registry, creator, [])} does not take any arguments, ${args.length} found`); // no args

	  return [creator];
	}

	var validate = /*#__PURE__*/Object.defineProperty({
		extractStorageArgs: extractStorageArgs_1
	}, '__esModule', {value: true});

	var Events_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Events = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);

	var _eventemitter2 = interopRequireDefault(eventemitter3);

	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _eventemitter = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("eventemitter");

	class Events {
	  constructor() {
	    Object.defineProperty(this, _eventemitter, {
	      writable: true,
	      value: new _eventemitter2.default()
	    });
	  }

	  emit(type, ...args) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);
	  }
	  /**
	   * @description Attach an eventemitter handler to listen to a specific event
	   *
	   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
	   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * api.on('connected', (): void => {
	   *   console.log('API has been connected to the endpoint');
	   * });
	   *
	   * api.on('disconnected', (): void => {
	   *   console.log('API has been disconnected from the endpoint');
	   * });
	   * ```
	   */


	  on(type, handler) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, handler);

	    return this;
	  }
	  /**
	   * @description Remove the given eventemitter handler
	   *
	   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
	   * @param handler The callback to unregister.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * const handler = (): void => {
	   *  console.log('Connected !);
	   * };
	   *
	   * // Start listening
	   * api.on('connected', handler);
	   *
	   * // Stop listening
	   * api.off('connected', handler);
	   * ```
	   */


	  off(type, handler) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, handler);

	    return this;
	  }
	  /**
	   * @description Attach an one-time eventemitter handler to listen to a specific event
	   *
	   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
	   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * api.once('connected', (): void => {
	   *   console.log('API has been connected to the endpoint');
	   * });
	   *
	   * api.once('disconnected', (): void => {
	   *   console.log('API has been disconnected from the endpoint');
	   * });
	   * ```
	   */


	  once(type, handler) {
	    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once(type, handler);

	    return this;
	  }

	}

	exports.Events = Events;
	});

	var _apiDerive = apiDerive;

	var _rpcProvider = rpcProvider;

	var _index2 = submittable;

	var _augmentObject = augmentObject_1;

	var _validate = validate;

	var _Events = Events_1;

	var Decorate_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Decorate = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);























	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// the max amount of keys/values that we will retrieve at once
	const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

	const PAGE_SIZE_V = 250; // limited since the data may be very large (e.g. misfiring elections)

	const l = (0, _util$5.logger)('api/init');
	let instanceCounter = 0;

	var _instanceId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("instanceId");

	var _registry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registry");

	class Decorate extends _Events.Events {
	  // HACK Use BN import so decorateDerive works... yes, wtf.
	  // latest extrinsic version

	  /**
	   * This is the one and only method concrete children classes need to implement.
	   * It's a higher-order function, which takes one argument
	   * `method: Method extends (...args: any[]) => Observable<any>`
	   * (and one optional `options`), and should return the user facing method.
	   * For example:
	   * - For ApiRx, `decorateMethod` should just be identity, because the input
	   * function is already an Observable
	   * - For ApiPromise, `decorateMethod` should return a function that takes all
	   * the parameters from `method`, adds an optional `callback` argument, and
	   * returns a Promise.
	   *
	   * We could easily imagine other user-facing interfaces, which are simply
	   * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
	   * via `decorateMethod`.
	   */

	  /**
	   * @description Create an instance of the class
	   *
	   * @param options Options object to create API instance or a Provider instance
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * import Api from '@polkadot/api/promise';
	   *
	   * const api = new Api().isReady();
	   *
	   * api.rpc.subscribeNewHeads((header) => {
	   *   console.log(`new block #${header.number.toNumber()}`);
	   * });
	   * ```
	   */
	  constructor(options, type, decorateMethod) {
	    var _options$source;

	    super();
	    Object.defineProperty(this, _instanceId, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _registry, {
	      writable: true,
	      value: void 0
	    });
	    this.__phantom = new _util$5.BN(0);
	    this._consts = {};
	    this._derive = void 0;
	    this._errors = {};
	    this._events = {};
	    this._extrinsics = void 0;
	    this._extrinsicType = 4;
	    this._genesisHash = void 0;
	    this._isConnected = void 0;
	    this._isReady = false;
	    this._options = void 0;
	    this._query = {};
	    this._queryMulti = void 0;
	    this._rpc = void 0;
	    this._rpcCore = void 0;
	    this._runtimeChain = void 0;
	    this._runtimeMetadata = void 0;
	    this._runtimeVersion = void 0;
	    this._rx = {
	      consts: {},
	      query: {},
	      tx: {}
	    };
	    this._type = void 0;
	    this._decorateMethod = void 0;

	    this._rxDecorateMethod = method => {
	      return method;
	    };

	    (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] = `${++instanceCounter}`;
	    (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.registry) || options.registry || new _types.TypeRegistry();
	    this._rx.registry = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry];
	    const thisProvider = options.source ? options.source._rpcCore.provider.clone() : options.provider || new _rpcProvider.WsProvider();
	    this._decorateMethod = decorateMethod;
	    this._options = options;
	    this._type = type; // The RPC interface decorates the known interfaces on init

	    this._rpcCore = new _rpcCore.RpcCore((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], thisProvider, this._options.rpc);
	    this._isConnected = new _rxjs.BehaviorSubject(this._rpcCore.provider.isConnected);
	    this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
	  }
	  /**
	   * @description Return the current used registry
	   */


	  get registry() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry];
	  }
	  /**
	   * @description Creates an instance of a type as registered
	   */


	  createType(type, ...params) {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].createType(type, ...params);
	  }
	  /**
	   * @description Register additional user-defined of chain-specific types in the type registry
	   */


	  registerTypes(types) {
	    types && (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].register(types);
	  }
	  /**
	   * @returns `true` if the API operates with subscriptions
	   */


	  get hasSubscriptions() {
	    return this._rpcCore.provider.hasSubscriptions;
	  }
	  /**
	   * @returns `true` if the API decorate multi-key queries
	   */


	  get supportMulti() {
	    return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
	  }

	  _createDecorated(registry, fromEmpty, blockHash, decoratedApi) {
	    if (!decoratedApi) {
	      decoratedApi = {
	        consts: {},
	        errors: {},
	        events: {},
	        query: {}
	      };
	    }

	    if (!registry.decoratedMeta) {
	      registry.decoratedMeta = (0, _types.expandMetadata)(registry.registry, registry.metadata);
	    } // adjust the versioned registry


	    (0, _augmentObject.augmentObject)('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
	    (0, _augmentObject.augmentObject)('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
	    (0, _augmentObject.augmentObject)('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
	    const storage = blockHash ? this._decorateStorageAt(registry.decoratedMeta, this._decorateMethod, blockHash) : this._decorateStorage(registry.decoratedMeta, this._decorateMethod);
	    (0, _augmentObject.augmentObject)('query', storage, decoratedApi.query, fromEmpty);
	    return {
	      decoratedApi,
	      decoratedMeta: registry.decoratedMeta
	    };
	  }

	  _injectMetadata(registry, fromEmpty) {
	    // clear the decoration, we are redoing it here
	    if (fromEmpty || !registry.decoratedApi) {
	      registry.decoratedApi = {
	        consts: {},
	        errors: {},
	        events: {},
	        query: {}
	      };
	    }

	    const {
	      decoratedApi,
	      decoratedMeta
	    } = this._createDecorated(registry, fromEmpty, null, registry.decoratedApi);

	    this._consts = decoratedApi.consts;
	    this._errors = decoratedApi.errors;
	    this._events = decoratedApi.events;
	    this._query = decoratedApi.query;

	    if (fromEmpty || !this._extrinsics) {
	      this._extrinsics = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
	      this._rx.tx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
	    } else {
	      (0, _augmentObject.augmentObject)('tx', this._decorateExtrinsics(decoratedMeta, this._decorateMethod), this._extrinsics, false);
	      (0, _augmentObject.augmentObject)(null, this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod), this._rx.tx, false);
	    } // rx


	    (0, _augmentObject.augmentObject)(null, this._decorateStorage(decoratedMeta, this._rxDecorateMethod), this._rx.query, fromEmpty);
	    (0, _augmentObject.augmentObject)(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
	  }
	  /**
	   * @deprecated
	   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
	   */


	  injectMetadata(metadata, fromEmpty, registry) {
	    this._injectMetadata({
	      metadata,
	      registry: registry || (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry],
	      specName: (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].createType('Text'),
	      specVersion: _util$5.BN_ZERO
	    }, fromEmpty);
	  }

	  _decorateFunctionMeta(input, output) {
	    output.meta = input.meta;
	    output.method = input.method;
	    output.section = input.section;
	    output.toJSON = input.toJSON;

	    if (input.callIndex) {
	      output.callIndex = input.callIndex;
	    }

	    return output;
	  } // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
	  // manner to cater for both old and new:
	  //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
	  //   - when non-zero, remove anything that is not in the array (we don't do this)


	  _filterRpc(methods, additional) {
	    // add any specific user-base RPCs
	    if (Object.keys(additional).length !== 0) {
	      this._rpcCore.addUserInterfaces(additional); // re-decorate, only adding any new additional interfaces


	      this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);

	      this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
	    }

	    this._filterRpcMethods(methods);
	  }

	  _filterRpcMethods(exposed) {
	    const hasResults = exposed.length !== 0;
	    const allKnown = [...this._rpcCore.mapping.entries()];
	    const allKeys = allKnown.reduce((allKeys, [, {
	      alias,
	      endpoint,
	      method,
	      pubsub,
	      section
	    }]) => {
	      allKeys.push(`${section}_${method}`);

	      if (pubsub) {
	        allKeys.push(`${section}_${pubsub[1]}`);
	        allKeys.push(`${section}_${pubsub[2]}`);
	      }

	      if (alias) {
	        allKeys.push(...alias);
	      }

	      if (endpoint) {
	        allKeys.push(endpoint);
	      }

	      return allKeys;
	    }, []);
	    const unknown = exposed.filter(k => !allKeys.includes(k));
	    const deletion = allKnown.filter(([k]) => hasResults && !exposed.includes(k) && k !== 'rpc_methods');

	    if (unknown.length) {
	      l.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
	    } // loop through all entries we have (populated in decorate) and filter as required
	    // only remove when we have results and method missing, or with no results if optional


	    deletion.forEach(([, {
	      method,
	      section
	    }]) => {
	      delete this._rpc[section][method];
	      delete this._rx.rpc[section][method];
	    });
	  }

	  _decorateRpc(rpc, decorateMethod, input = {}) {
	    return rpc.sections.reduce((out, _sectionName) => {
	      const sectionName = _sectionName;

	      if (!out[sectionName]) {
	        // out and section here are horrors to get right from a typing perspective :(
	        out[sectionName] = Object.entries(rpc[sectionName]).reduce((section, [methodName, method]) => {
	          //  skip subscriptions where we have a non-subscribe interface
	          if (this.hasSubscriptions || !(methodName.startsWith('subscribe') || methodName.startsWith('unsubscribe'))) {
	            section[methodName] = decorateMethod(method, {
	              methodName
	            }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

	            section[methodName].json = decorateMethod(method.json, {
	              methodName
	            }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

	            section[methodName].raw = decorateMethod(method.raw, {
	              methodName
	            }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

	            section[methodName].meta = method.meta;
	          }

	          return section;
	        }, {});
	      }

	      return out;
	    }, input);
	  } // only be called if supportMulti is true


	  _decorateMulti(decorateMethod) {
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
	    return decorateMethod(calls => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(calls.map(arg => Array.isArray(arg) ? [arg[0].creator, ...arg.slice(1)] : [arg.creator])));
	  }

	  _decorateExtrinsics({
	    tx
	  }, decorateMethod) {
	    const creator = (0, _index2.createSubmittable)(this._type, this._rx, decorateMethod);
	    return Object.entries(tx).reduce((out, [name, section]) => {
	      out[name] = Object.entries(section).reduce((out, [name, method]) => {
	        out[name] = this._decorateExtrinsicEntry(method, creator);
	        return out;
	      }, {});
	      return out;
	    }, creator);
	  }

	  _decorateExtrinsicEntry(method, creator) {
	    const decorated = (...params) => creator(method(...params)); // pass through the `.is`


	    decorated.is = other => method.is(other); // eslint-disable-next-line @typescript-eslint/no-unsafe-return


	    return this._decorateFunctionMeta(method, decorated);
	  }

	  _decorateStorage({
	    query
	  }, decorateMethod) {
	    return Object.entries(query).reduce((out, [name, section]) => {
	      out[name] = Object.entries(section).reduce((out, [name, method]) => {
	        out[name] = this._decorateStorageEntry(method, decorateMethod);
	        return out;
	      }, {});
	      return out;
	    }, {});
	  }

	  _decorateStorageAt({
	    query
	  }, decorateMethod, blockHash) {
	    return Object.entries(query).reduce((out, [name, section]) => {
	      out[name] = Object.entries(section).reduce((out, [name, method]) => {
	        out[name] = this._decorateStorageEntryAt(method, decorateMethod, blockHash);
	        return out;
	      }, {});
	      return out;
	    }, {});
	  }

	  _decorateStorageEntry(creator, decorateMethod) {
	    // get the storage arguments, with DoubleMap as an array entry, otherwise spread
	    const getArgs = args => (0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args); // Disable this where it occurs for each field we are decorating

	    /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


	    const decorated = this._decorateStorageCall(creator, decorateMethod);

	    decorated.creator = creator;
	    decorated.at = decorateMethod((hash, ...args) => this._rpcCore.state.getStorage(getArgs(args), hash));
	    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));

	    decorated.is = key => key.section === creator.section && key.method === creator.method;

	    decorated.key = (...args) => (0, _util$5.u8aToHex)((0, _util$5.compactStripLength)(creator(creator.meta.type.isPlain ? undefined : creator.meta.type.isMap ? args[0] : creator.meta.type.isDoubleMap ? [args[0], args[1]] : args))[1]);

	    decorated.keyPrefix = (...keys) => (0, _util$5.u8aToHex)(creator.keyPrefix(...keys));

	    decorated.range = decorateMethod((range, ...args) => this._decorateStorageRange(decorated, args, range));
	    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
	    decorated.sizeAt = decorateMethod((hash, ...args) => this._rpcCore.state.getStorageSize(getArgs(args), hash)); // FIXME NMap support
	    // .keys() & .entries() only available on map types

	    if (creator.iterKey && (creator.meta.type.isMap || creator.meta.type.isDoubleMap || creator.meta.type.isNMap)) {
	      decorated.entries = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapEntries(creator, null, args)));
	      decorated.entriesAt = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (hash, ...args) => this._retrieveMapEntries(creator, hash, args)));
	      decorated.entriesPaged = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], opts => this._retrieveMapEntriesPaged(creator, opts)));
	      decorated.keys = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapKeys(creator, null, args)));
	      decorated.keysAt = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (hash, ...args) => this._retrieveMapKeys(creator, hash, args)));
	      decorated.keysPaged = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], opts => this._retrieveMapKeysPaged(creator, opts)));
	    }

	    if (this.supportMulti) {
	      // When using double map storage function, user need to pass double map key as an array
	      decorated.multi = decorateMethod(args => this._retrieveMulti(args.map(arg => [creator, arg])));
	    }
	    /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


	    return this._decorateFunctionMeta(creator, decorated);
	  }

	  _decorateStorageEntryAt(creator, decorateMethod, blockHash) {
	    // get the storage arguments, with DoubleMap as an array entry, otherwise spread
	    const getArgs = args => (0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args); // Disable this where it occurs for each field we are decorating

	    /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


	    const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
	    decorated.creator = creator;
	    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));

	    decorated.is = key => key.section === creator.section && key.method === creator.method;

	    decorated.key = (...args) => (0, _util$5.u8aToHex)((0, _util$5.compactStripLength)(creator(creator.meta.type.isPlain ? undefined : creator.meta.type.isMap ? args[0] : creator.meta.type.isDoubleMap ? [args[0], args[1]] : args))[1]);

	    decorated.keyPrefix = (...keys) => (0, _util$5.u8aToHex)(creator.keyPrefix(...keys));

	    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash)); // FIXME NMap support
	    // .keys() & .entries() only available on map types

	    if (creator.iterKey && (creator.meta.type.isMap || creator.meta.type.isDoubleMap)) {
	      decorated.entries = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapEntries(creator, blockHash, args)));
	      decorated.keys = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapKeys(creator, blockHash, args)));
	    }
	    /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


	    return this._decorateFunctionMeta(creator, decorated);
	  } // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
	  // we make a subscription, alternatively we push this through a single-shot query


	  _decorateStorageCall(creator, decorateMethod) {
	    return decorateMethod((...args) => {
	      return this.hasSubscriptions ? this._rpcCore.state.subscribeStorage([(0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args)]).pipe((0, _rxjs.map)(([data]) => data) // extract first/only result from list
	      ) : this._rpcCore.state.getStorage((0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args));
	    }, {
	      methodName: creator.method,
	      overrideNoSub: (...args) => this._rpcCore.state.getStorage((0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args))
	    });
	  }

	  _decorateStorageRange(decorated, args, range) {
	    const outputType = (0, _types.unwrapStorageType)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], decorated.creator.meta.type, decorated.creator.meta.modifier.isOptional);
	    return this._rpcCore.state.queryStorage([decorated.key(...args)], ...range).pipe((0, _rxjs.map)(result => result.map(([blockHash, [value]]) => [blockHash, this.createType(outputType, value.isSome ? value.unwrap().toHex() : undefined)])));
	  } // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes


	  _retrieveMulti(keys) {
	    if (!keys.length) {
	      return (0, _rxjs.of)([]);
	    }

	    const queryCall = this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
	    return (0, _rxjs.combineLatest)((0, _util$5.arrayChunk)(keys, PAGE_SIZE_V).map(keys => queryCall(keys))).pipe((0, _rxjs.map)(_util$5.arrayFlatten));
	  }

	  _retrieveMapKeys({
	    iterKey,
	    meta,
	    method,
	    section
	  }, at, args) {
	    (0, _util$5.assert)(iterKey && (meta.type.isMap || meta.type.isDoubleMap || meta.type.isNMap), 'keys can only be retrieved on maps, linked maps and double maps');
	    const headKey = iterKey(...args).toHex();
	    const startSubject = new _rxjs.BehaviorSubject(headKey);
	    const queryCall = at ? startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at) : startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
	    return startSubject.pipe((0, _rxjs.switchMap)(queryCall), (0, _rxjs.map)(keys => keys.map(key => key.setMeta(meta, section, method))), (0, _rxjs.tap)(keys => {
	      setTimeout(() => {
	        keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
	      }, 0);
	    }), (0, _rxjs.toArray)(), // toArray since we want to startSubject to be completed
	    (0, _rxjs.map)(_util$5.arrayFlatten));
	  }

	  _retrieveMapKeysPaged({
	    iterKey,
	    meta,
	    method,
	    section
	  }, opts) {
	    (0, _util$5.assert)(iterKey && (meta.type.isMap || meta.type.isDoubleMap || meta.type.isNMap), 'keys can only be retrieved on maps, linked maps and double maps');
	    const headKey = iterKey(...opts.args).toHex();
	    return this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey).pipe((0, _rxjs.map)(keys => keys.map(key => key.setMeta(meta, section, method))));
	  }

	  _retrieveMapEntries(entry, at, args) {
	    const query = at ? keyset => this._rpcCore.state.queryStorageAt(keyset, at) : keyset => this._rpcCore.state.queryStorageAt(keyset);
	    return this._retrieveMapKeys(entry, at, args).pipe((0, _rxjs.switchMap)(keys => keys.length ? (0, _rxjs.combineLatest)((0, _util$5.arrayChunk)(keys, PAGE_SIZE_V).map(query)).pipe((0, _rxjs.map)(valsArr => (0, _util$5.arrayFlatten)(valsArr).map((value, index) => [keys[index], value]))) : (0, _rxjs.of)([])));
	  }

	  _retrieveMapEntriesPaged(entry, opts) {
	    return this._retrieveMapKeysPaged(entry, opts).pipe((0, _rxjs.switchMap)(keys => keys.length ? this._rpcCore.state.queryStorageAt(keys).pipe((0, _rxjs.map)(valsArr => valsArr.map((value, index) => [keys[index], value]))) : (0, _rxjs.of)([])));
	  }

	  _decorateDeriveRx(decorateMethod) {
	    var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;

	    const specName = (_this$_runtimeVersion = this._runtimeVersion) === null || _this$_runtimeVersion === void 0 ? void 0 : _this$_runtimeVersion.specName.toString();

	    const derives = _objectSpread(_objectSpread({}, this._options.derives), ((_this$_options$typesB = this._options.typesBundle) === null || _this$_options$typesB === void 0 ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) === null || _this$_options$typesB2 === void 0 ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName !== null && specName !== void 0 ? specName : '']) === null || _this$_options$typesB3 === void 0 ? void 0 : _this$_options$typesB3.derives) || {}); // Pull in derive from api-derive


	    const derive = (0, _apiDerive.decorateDerive)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], this._rx, derives);
	    return (0, _decorate.decorateSections)(derive, decorateMethod);
	  }

	  _decorateDerive(decorateMethod) {
	    return (0, _decorate.decorateSections)(this._rx.derive, decorateMethod);
	  }
	  /**
	   * Put the `this.onCall` function of ApiRx here, because it is needed by
	   * `api._rx`.
	   */


	}

	exports.Decorate = Decorate;
	});

	var _capabilities = capabilities;

	var _Decorate = Decorate_1;

	var Init_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Init = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);















	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	const KEEPALIVE_INTERVAL = 10000;
	const l = (0, _util$5.logger)('api/init');

	var _healthTimer = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("healthTimer");

	var _registries = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registries");

	var _updateSub = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("updateSub");

	var _onProviderConnect = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onProviderConnect");

	var _onProviderDisconnect = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onProviderDisconnect");

	var _onProviderError = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onProviderError");

	class Init extends _Decorate.Decorate {
	  constructor(options, type, decorateMethod) {
	    super(options, type, decorateMethod); // all injected types added to the registry for overrides

	    Object.defineProperty(this, _healthTimer, {
	      writable: true,
	      value: null
	    });
	    Object.defineProperty(this, _registries, {
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, _updateSub, {
	      writable: true,
	      value: null
	    });
	    Object.defineProperty(this, _onProviderConnect, {
	      writable: true,
	      value: async () => {
	        this._isConnected.next(true);

	        this.emit('connected');

	        try {
	          const [hasMeta, cryptoReady] = await Promise.all([this._loadMeta(), this._options.initWasm === false ? Promise.resolve(true) : (0, _utilCrypto.cryptoWaitReady)()]);

	          this._subscribeHealth();

	          if (hasMeta && !this._isReady && cryptoReady) {
	            this._isReady = true;
	            this.emit('ready', this);
	          }
	        } catch (_error) {
	          const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
	          l.error(error);
	          this.emit('error', error);
	        }
	      }
	    });
	    Object.defineProperty(this, _onProviderDisconnect, {
	      writable: true,
	      value: () => {
	        this._isConnected.next(false);

	        this._unsubscribeHealth();

	        this.emit('disconnected');
	      }
	    });
	    Object.defineProperty(this, _onProviderError, {
	      writable: true,
	      value: error => {
	        this.emit('error', error);
	      }
	    });
	    this.registry.setKnownTypes(options); // We only register the types (global) if this is not a cloned instance.
	    // Do right up-front, so we get in the user types before we are actually
	    // doing anything on-chain, this ensures we have the overrides in-place

	    if (!options.source) {
	      this.registerTypes(options.types);
	    } else {
	      (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries] = (0, _classPrivateFieldLooseBase2.default)(options.source, _registries)[_registries];
	    }

	    this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
	    this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);

	    if (this.supportMulti) {
	      this._queryMulti = this._decorateMulti(this._decorateMethod);
	      this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
	    }

	    this._rx.signer = options.signer;

	    this._rpcCore.setRegistrySwap(blockHash => this.getBlockRegistry(blockHash));

	    if (this.hasSubscriptions) {
	      this._rpcCore.provider.on('disconnected', (0, _classPrivateFieldLooseBase2.default)(this, _onProviderDisconnect)[_onProviderDisconnect]);

	      this._rpcCore.provider.on('error', (0, _classPrivateFieldLooseBase2.default)(this, _onProviderError)[_onProviderError]);

	      this._rpcCore.provider.on('connected', (0, _classPrivateFieldLooseBase2.default)(this, _onProviderConnect)[_onProviderConnect]);
	    } else {
	      l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
	    } // If the provider was instantiated earlier, and has already emitted a
	    // 'connected' event, then the `on('connected')` won't fire anymore. To
	    // cater for this case, we call manually `this._onProviderConnect`.


	    if (this._rpcCore.provider.isConnected) {
	      // eslint-disable-next-line @typescript-eslint/no-floating-promises
	      (0, _classPrivateFieldLooseBase2.default)(this, _onProviderConnect)[_onProviderConnect]();
	    }
	  }
	  /**
	   * @description Decorates a registry based on the runtime version
	   */


	  _initRegistry(registry, chain, version, metadata, chainProps) {
	    registry.setChainProperties(chainProps || this.registry.getChainProperties());
	    registry.setKnownTypes(this._options);
	    registry.register((0, _typesKnown.getSpecTypes)(registry, chain, version.specName, version.specVersion));
	    registry.setHasher((0, _typesKnown.getSpecHasher)(registry, chain, version.specName)); // for bundled types, pull through the aliases defined

	    if (registry.knownTypes.typesBundle) {
	      registry.knownTypes.typesAlias = (0, _typesKnown.getSpecAlias)(registry, chain, version.specName);
	    }

	    registry.setMetadata(metadata, undefined, _objectSpread(_objectSpread({}, (0, _typesKnown.getSpecExtensions)(registry, chain, version.specName)), this._options.signedExtensions || {}));
	  }
	  /**
	   * @description Returns the default versioned registry
	   */


	  _getDefaultRegistry() {
	    // get the default registry version
	    const thisRegistry = (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].find(({
	      isDefault
	    }) => isDefault);

	    (0, _util$5.assert)(thisRegistry, 'Initialization error, cannot find the default registry');
	    return thisRegistry;
	  }
	  /**
	   * @description Returns a decorated API instance at a specific point in time
	   */


	  async at(blockHash) {
	    const u8aHash = (0, _util$5.u8aToU8a)(blockHash);
	    const registry = await this.getBlockRegistry(u8aHash); // always create a new decoration for this specific hash

	    return this._createDecorated(registry, true, u8aHash).decoratedApi;
	  }
	  /**
	   * @description Sets up a registry based on the block hash defined
	   */


	  async getBlockRegistry(blockHash) {
	    const existingViaHash = (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].find(({
	      lastBlockHash
	    }) => lastBlockHash && (0, _util$5.u8aEq)(lastBlockHash, blockHash));

	    if (existingViaHash) {
	      return existingViaHash;
	    } // ensure we have everything required


	    (0, _util$5.assert)(this._genesisHash && this._runtimeVersion, 'Cannot retrieve data on an uninitialized chain'); // We have to assume that on the RPC layer the calls used here does not call back into
	    // the registry swap, so getHeader & getRuntimeVersion should not be historic

	    const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash) ? {
	      number: _util$5.BN_ZERO,
	      parentHash: this._genesisHash
	    } : await (0, _rxjs.firstValueFrom)(this._rpcCore.chain.getHeader.json(blockHash)));
	    (0, _util$5.assert)(!header.parentHash.isEmpty, 'Unable to retrieve header and parent from supplied hash'); // get the runtime version, either on-chain or via an known upgrade history

	    const [firstVersion, lastVersion] = (0, _typesKnown.getUpgradeVersion)(this._genesisHash, header.number);
	    const version = this.registry.createType('RuntimeVersionPartial', firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)) ? {
	      specName: this._runtimeVersion.specName,
	      specVersion: firstVersion.specVersion
	    } : await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getRuntimeVersion.json(header.parentHash))); // check for pre-existing registries. We also check specName, e.g. it
	    // could be changed like in Westmint with upgrade from  shell -> westmint

	    const existingViaVersion = (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].find(({
	      specName,
	      specVersion
	    }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));

	    if (existingViaVersion) {
	      existingViaVersion.lastBlockHash = blockHash;
	      return existingViaVersion;
	    } // nothing has been found, construct new


	    const registry = new _types.TypeRegistry(blockHash);
	    const metadata = new _types.Metadata(registry, await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata.raw(header.parentHash)));

	    this._initRegistry(registry, this._runtimeChain, version, metadata); // add our new registry


	    const result = {
	      lastBlockHash: blockHash,
	      metadata,
	      registry,
	      specName: version.specName,
	      specVersion: version.specVersion
	    };

	    (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].push(result); // TODO This could be useful for historic, disabled due to cross-looping, i.e. .at queries
	    // this._detectCapabilities(registry, blockHash);


	    return result;
	  }

	  async _loadMeta() {
	    var _this$_options$source;

	    // on re-connection to the same chain, we don't want to re-do everything from chain again
	    if (this._isReady) {
	      return true;
	    }

	    this._unsubscribeUpdates(); // only load from on-chain if we are not a clone (default path), alternatively
	    // just use the values from the source instance provided


	    [this._genesisHash, this._runtimeMetadata] = (_this$_options$source = this._options.source) !== null && _this$_options$source !== void 0 && _this$_options$source._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
	    return this._initFromMeta(this._runtimeMetadata);
	  } // eslint-disable-next-line @typescript-eslint/require-await


	  async _metaFromSource(source) {
	    this._extrinsicType = source.extrinsicVersion;
	    this._runtimeChain = source.runtimeChain;
	    this._runtimeVersion = source.runtimeVersion;
	    const methods = []; // manually build a list of all available methods in this RPC, we are
	    // going to filter on it to align the cloned RPC without making a call

	    Object.keys(source.rpc).forEach(section => {
	      Object.keys(source.rpc[section]).forEach(method => {
	        methods.push(`${section}_${method}`);
	      });
	    });

	    this._filterRpc(methods, (0, _typesKnown.getSpecRpc)(this.registry, source.runtimeChain, source.runtimeVersion.specName));

	    return [source.genesisHash, source.runtimeMetadata];
	  }

	  _detectCapabilities(registry, blockHash) {
	    (0, _rxjs.firstValueFrom)((0, _capabilities.detectedCapabilities)(this._rx, blockHash)).then(types => {
	      if (Object.keys(types).length) {
	        registry.register(types);
	        l.debug(() => `Capabilities detected${blockHash ? ` (${(0, _util$5.u8aToHex)((0, _util$5.u8aToU8a)(blockHash))})` : ''}: ${(0, _util$5.stringify)(types)}`);
	      }
	    }).catch(undefined);
	    return true;
	  } // subscribe to metadata updates, inject the types on changes


	  _subscribeUpdates() {
	    if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
	      return;
	    }

	    (0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe((0, _rxjs.switchMap)(version => {
	      var _this$_runtimeVersion;

	      return (// only retrieve the metadata when the on-chain version has been changed
	        (_this$_runtimeVersion = this._runtimeVersion) !== null && _this$_runtimeVersion !== void 0 && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? (0, _rxjs.of)(false) : this._rpcCore.state.getMetadata().pipe((0, _rxjs.map)(metadata => {
	          l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
	          this._runtimeMetadata = metadata;
	          this._runtimeVersion = version;
	          this._rx.runtimeVersion = version; // update the default registry version

	          const thisRegistry = this._getDefaultRegistry(); // setup the data as per the current versions


	          thisRegistry.metadata = metadata;
	          thisRegistry.specVersion = version.specVersion; // clear the registry types to ensure that we override correctly

	          this._initRegistry(thisRegistry.registry.init(), this._runtimeChain, version, metadata);

	          this._injectMetadata(thisRegistry, false);

	          return this._detectCapabilities(thisRegistry.registry);
	        }))
	      );
	    })).subscribe();
	  }

	  async _metaFromChain(optMetadata) {
	    const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([(0, _rxjs.firstValueFrom)(this._rpcCore.chain.getBlockHash(0)), (0, _rxjs.firstValueFrom)(this._rpcCore.state.getRuntimeVersion()), (0, _rxjs.firstValueFrom)(this._rpcCore.system.chain()), (0, _rxjs.firstValueFrom)(this._rpcCore.system.properties()), (0, _rxjs.firstValueFrom)(this._rpcCore.rpc.methods()), optMetadata ? Promise.resolve(null) : (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata())]); // set our chain version & genesisHash as returned

	    this._runtimeChain = chain;
	    this._runtimeVersion = runtimeVersion;
	    this._rx.runtimeVersion = runtimeVersion; // retrieve metadata, either from chain  or as pass-in via options

	    const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
	    const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new _types.Metadata(this.registry, optMetadata[metadataKey]) : await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata())); // initializes the registry & RPC

	    this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);

	    this._filterRpc(rpcMethods.methods.map(t => t.toString()), (0, _typesKnown.getSpecRpc)(this.registry, chain, runtimeVersion.specName));

	    this._subscribeUpdates(); // setup the initial registry, when we have none


	    if (!(0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].length) {
	      (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].push({
	        isDefault: true,
	        metadata,
	        registry: this.registry,
	        specName: runtimeVersion.specName,
	        specVersion: runtimeVersion.specVersion
	      });
	    } // get unique types & validate


	    metadata.getUniqTypes(this._options.throwOnUnknown || false);
	    return [genesisHash, metadata];
	  }

	  _initFromMeta(metadata) {
	    this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
	    this._rx.extrinsicType = this._extrinsicType;
	    this._rx.genesisHash = this._genesisHash;
	    this._rx.runtimeVersion = this._runtimeVersion; // must be set here
	    // inject metadata and adjust the types as detected

	    this._injectMetadata(this._getDefaultRegistry(), true); // derive is last, since it uses the decorated rx


	    this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
	    this._derive = this._decorateDerive(this._decorateMethod); // detect the on-chain capabilities

	    this._detectCapabilities(this.registry);

	    return true;
	  }

	  _subscribeHealth() {
	    // Only enable the health keepalive on WS, not needed on HTTP
	    (0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer] = this.hasSubscriptions ? setInterval(() => {
	      (0, _rxjs.firstValueFrom)(this._rpcCore.system.health()).catch(() => undefined);
	    }, KEEPALIVE_INTERVAL) : null;
	  }

	  _unsubscribeHealth() {
	    if ((0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer]) {
	      clearInterval((0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer]);
	      (0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer] = null;
	    }
	  }

	  _unsubscribeUpdates() {
	    if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub]) {
	      (0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub].unsubscribe();

	      (0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub] = null;
	    }
	  }

	  _unsubscribe() {
	    this._unsubscribeHealth();

	    this._unsubscribeUpdates();
	  }

	}

	exports.Init = Init;
	});

	var _Init = Init_1;

	var Getters_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Getters = void 0;







	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	function assertResult(value) {
	  return (0, _util$5.assertReturn)(value, 'Api needs to be initialized before using, listen on \'ready\'');
	}

	class Getters extends _Init.Init {
	  /**
	   * @description Contains the parameter types (constants) of all modules.
	   *
	   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * console.log(api.consts.democracy.enactmentPeriod.toString())
	   * ```
	   */
	  get consts() {
	    return assertResult(this._consts);
	  }
	  /**
	   * @description Derived results that are injected into the API, allowing for combinations of various query results.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * api.derive.chain.bestNumber((number) => {
	   *   console.log('best number', number);
	   * });
	   * ```
	   */


	  get derive() {
	    return assertResult(this._derive);
	  }
	  /**
	   * @description Errors from metadata
	   */


	  get errors() {
	    return assertResult(this._errors);
	  }
	  /**
	   * @description Events from metadata
	   */


	  get events() {
	    return assertResult(this._events);
	  }
	  /**
	   * @description  Returns the version of extrinsics in-use on this chain
	   */


	  get extrinsicVersion() {
	    return this._extrinsicType;
	  }
	  /**
	   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
	   */


	  get genesisHash() {
	    return assertResult(this._genesisHash);
	  }
	  /**
	   * @description true is the underlying provider is connected
	   */


	  get isConnected() {
	    return this._isConnected.getValue();
	  }
	  /**
	   * @description The library information name & version (from package.json)
	   */


	  get libraryInfo() {
	    return `${_packageInfo$5.packageInfo.name} v${_packageInfo$5.packageInfo.version}`;
	  }
	  /**
	   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
	   *
	   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * api.query.system.account(<accountId>, ([nonce, balance]) => {
	   *   console.log('new free balance', balance.free, 'new nonce', nonce);
	   * });
	   * ```
	   */


	  get query() {
	    return assertResult(this._query);
	  }
	  /**
	   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * const unsub = await api.queryMulti(
	   *   [
	   *     // you can include the storage without any parameters
	   *     api.query.balances.totalIssuance,
	   *     // or you can pass parameters to the storage query
	   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
	   *   ],
	   *   ([existential, [, { free }]]) => {
	   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
	   *
	   *     unsub();
	   *   }
	   * );
	   * ```
	   */


	  get queryMulti() {
	    return assertResult(this._queryMulti);
	  }
	  /**
	   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
	   *
	   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * api.rpc.chain.subscribeNewHeads((header) => {
	   *   console.log('new header', header);
	   * });
	   * ```
	   */


	  get rpc() {
	    return assertResult(this._rpc);
	  }
	  /**
	   * @description Contains the chain information for the current node.
	   */


	  get runtimeChain() {
	    return assertResult(this._runtimeChain);
	  }
	  /**
	   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
	   */


	  get runtimeMetadata() {
	    return assertResult(this._runtimeMetadata);
	  }
	  /**
	   * @description Contains the version information for the current runtime.
	   */


	  get runtimeVersion() {
	    return assertResult(this._runtimeVersion);
	  }
	  /**
	   * @description The underlying Rx API interface
	   */


	  get rx() {
	    return assertResult(this._rx);
	  }
	  /**
	   * @description The type of this API instance, either 'rxjs' or 'promise'
	   */


	  get type() {
	    return this._type;
	  }
	  /**
	   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * api.tx.balances
	   *   .transfer(<recipientId>, <balance>)
	   *   .signAndSend(<keyPair>, ({status}) => {
	   *     console.log('tx status', status.asFinalized.toHex());
	   *   });
	   * ```
	   */


	  get tx() {
	    return assertResult(this._extrinsics);
	  }

	}

	exports.Getters = Getters;
	});

	var _Getters = Getters_1;

	var base = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ApiBase = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);





	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	class ApiBase extends _Getters.Getters {
	  /**
	   * @description Create an instance of the class
	   *
	   * @param options Options object to create API instance or a Provider instance
	   *
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * import Api from '@polkadot/api/promise';
	   *
	   * const api = new Api().isReady();
	   *
	   * api.rpc.subscribeNewHeads((header) => {
	   *   console.log(`new block #${header.number.toNumber()}`);
	   * });
	   * ```
	   */
	  constructor(options = {}, type, decorateMethod) {
	    super(options, type, decorateMethod);
	  }
	  /**
	   * @description Connect from the underlying provider, halting all network traffic
	   */


	  connect() {
	    return this._rpcCore.connect();
	  }
	  /**
	   * @description Disconnect from the underlying provider, halting all network traffic
	   */


	  disconnect() {
	    this._unsubscribe();

	    return this._rpcCore.disconnect();
	  }
	  /**
	   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
	   */


	  findCall(callIndex) {
	    return this.registry.findMetaCall((0, _util$5.u8aToU8a)(callIndex));
	  }
	  /**
	   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
	   */


	  findError(errorIndex) {
	    return this.registry.findMetaError((0, _util$5.u8aToU8a)(errorIndex));
	  }
	  /**
	   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
	   */


	  setSigner(signer) {
	    this._rx.signer = signer;
	  }
	  /**
	   * @description Signs a raw signer payload, string or Uint8Array
	   */


	  async sign(address, data, {
	    signer
	  } = {}) {
	    if ((0, _util$5.isString)(address)) {
	      const _signer = signer || this._rx.signer;

	      (0, _util$5.assert)(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
	      return (await _signer.signRaw(_objectSpread(_objectSpread({
	        type: 'bytes'
	      }, data), {}, {
	        address
	      }))).signature;
	    }

	    return (0, _util$5.u8aToHex)(address.sign((0, _util$5.u8aToU8a)(data.data)));
	  }

	}

	exports.ApiBase = ApiBase;
	});

	var Combinator_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Combinator = void 0;

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);



	// Copyright 2017-2021 @polkadot/api authors & contributors
	// SPDX-License-Identifier: Apache-2.0
	var _allHasFired = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("allHasFired");

	var _callback = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("callback");

	var _fired = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("fired");

	var _fns = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("fns");

	var _isActive = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isActive");

	var _results = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("results");

	var _subscriptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("subscriptions");

	class Combinator {
	  constructor(fns, callback) {
	    Object.defineProperty(this, _allHasFired, {
	      writable: true,
	      value: false
	    });
	    Object.defineProperty(this, _callback, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _fired, {
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, _fns, {
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, _isActive, {
	      writable: true,
	      value: true
	    });
	    Object.defineProperty(this, _results, {
	      writable: true,
	      value: []
	    });
	    Object.defineProperty(this, _subscriptions, {
	      writable: true,
	      value: []
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback] = callback; // eslint-disable-next-line @typescript-eslint/require-await

	    (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions] = fns.map(async (input, index) => {
	      const [fn, ...args] = Array.isArray(input) ? input : [input];

	      (0, _classPrivateFieldLooseBase2.default)(this, _fired)[_fired].push(false);

	      (0, _classPrivateFieldLooseBase2.default)(this, _fns)[_fns].push(fn); // Not quite 100% how to have a variable number at the front here
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types


	      return fn(...args, this._createCallback(index));
	    });
	  }

	  _allHasFired() {
	    var _classPrivateFieldLoo;

	    (_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _allHasFired))[_allHasFired] || (_classPrivateFieldLoo[_allHasFired] = (0, _classPrivateFieldLooseBase2.default)(this, _fired)[_fired].filter(hasFired => !hasFired).length === 0);
	    return (0, _classPrivateFieldLooseBase2.default)(this, _allHasFired)[_allHasFired];
	  }

	  _createCallback(index) {
	    return value => {
	      (0, _classPrivateFieldLooseBase2.default)(this, _fired)[_fired][index] = true;
	      (0, _classPrivateFieldLooseBase2.default)(this, _results)[_results][index] = value;

	      this._triggerUpdate();
	    };
	  }

	  _triggerUpdate() {
	    if (!(0, _classPrivateFieldLooseBase2.default)(this, _isActive)[_isActive] || !(0, _util$5.isFunction)((0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback]) || !this._allHasFired()) {
	      return;
	    }

	    try {
	      // eslint-disable-next-line @typescript-eslint/no-floating-promises
	      (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback]((0, _classPrivateFieldLooseBase2.default)(this, _results)[_results]);
	    } catch (error) {// swallow, we don't want the handler to trip us up
	    }
	  }

	  unsubscribe() {
	    if (!(0, _classPrivateFieldLooseBase2.default)(this, _isActive)[_isActive]) {
	      return;
	    }

	    (0, _classPrivateFieldLooseBase2.default)(this, _isActive)[_isActive] = false; // eslint-disable-next-line @typescript-eslint/no-misused-promises

	    (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions].forEach(async subscription => {
	      try {
	        const unsubscribe = await subscription;

	        if ((0, _util$5.isFunction)(unsubscribe)) {
	          unsubscribe();
	        }
	      } catch (error) {// ignore
	      }
	    });
	  }

	}

	exports.Combinator = Combinator;
	});

	var _index$1 = base;

	var _Combinator = Combinator_1;

	var promise = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.decorateMethod = decorateMethod;
	exports.ApiPromise = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);









	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// extract the arguments and callback params from a value array possibly containing a callback
	function extractArgs(args, needsCallback) {
	  let callback;
	  const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.
	  // actualArgs will then hold the actual arguments to be passed to `method`

	  if (args.length && (0, _util$5.isFunction)(args[args.length - 1])) {
	    callback = actualArgs.pop();
	  } // When we need a subscription, ensure that a valid callback is actually passed


	  (0, _util$5.assert)(!needsCallback || (0, _util$5.isFunction)(callback), 'Expected a callback to be passed with subscriptions');
	  return [actualArgs, callback];
	} // a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once


	function promiseTracker(resolve, reject) {
	  let isCompleted = false;
	  return {
	    reject: error => {
	      if (!isCompleted) {
	        isCompleted = true;
	        reject(error);
	      }

	      return _rxjs.EMPTY;
	    },
	    resolve: value => {
	      if (!isCompleted) {
	        isCompleted = true;
	        resolve(value);
	      }
	    }
	  };
	} // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe


	function decorateCall(method, actualArgs) {
	  return new Promise((resolve, reject) => {
	    // single result tracker - either reject with Error or resolve with Codec result
	    const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves

	    const subscription = method(...actualArgs).pipe((0, _rxjs.catchError)(error => tracker.reject(error))).subscribe(result => {
	      tracker.resolve(result);
	      setTimeout(() => subscription.unsubscribe(), 0);
	    });
	  });
	} // Decorate a subscription where we have a result callback specified


	function decorateSubscribe(method, actualArgs, resultCb) {
	  return new Promise((resolve, reject) => {
	    // either reject with error or resolve with unsubscribe callback
	    const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback

	    const subscription = method(...actualArgs).pipe((0, _rxjs.catchError)(error => tracker.reject(error)), (0, _rxjs.tap)(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {
	      // queue result (back of queue to clear current)
	      setTimeout(() => resultCb(result), 0);
	    });
	  });
	}
	/**
	 * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
	 */


	function decorateMethod(method, options) {
	  const needsCallback = options && options.methodName && options.methodName.includes('subscribe');
	  return function (...args) {
	    const [actualArgs, resultCb] = extractArgs(args, !!needsCallback);
	    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);
	  };
	}
	/**
	 * # @polkadot/api/promise
	 *
	 * ## Overview
	 *
	 * @name ApiPromise
	 * @description
	 * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
	 *
	 * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
	 *
	 * @see [[ApiRx]]
	 *
	 * ## Usage
	 *
	 * Making rpc calls -
	 * <BR>
	 *
	 * ```javascript
	 * import ApiPromise from '@polkadot/api/promise';
	 *
	 * // initialise via static create
	 * const api = await ApiPromise.create();
	 *
	 * // make a subscription to the network head
	 * api.rpc.chain.subscribeNewHeads((header) => {
	 *   console.log(`Chain is at #${header.number}`);
	 * });
	 * ```
	 * <BR>
	 *
	 * Subscribing to chain state -
	 * <BR>
	 *
	 * ```javascript
	 * import { ApiPromise, WsProvider } from '@polkadot/api';
	 *
	 * // initialise a provider with a specific endpoint
	 * const provider = new WsProvider('wss://example.com:9944')
	 *
	 * // initialise via isReady & new with specific provider
	 * const api = await new ApiPromise({ provider }).isReady;
	 *
	 * // retrieve the block target time
	 * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
	 * let last = 0;
	 *
	 * // subscribe to the current block timestamp, updates automatically (callback provided)
	 * api.query.timestamp.now((timestamp) => {
	 *   const elapsed = last
	 *     ? `, ${timestamp.toNumber() - last}s since last`
	 *     : '';
	 *
	 *   last = timestamp.toNumber();
	 *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
	 * });
	 * ```
	 * <BR>
	 *
	 * Submitting a transaction -
	 * <BR>
	 *
	 * ```javascript
	 * import ApiPromise from '@polkadot/api/promise';
	 *
	 * ApiPromise.create().then((api) => {
	 *   const [nonce] = await api.query.system.account(keyring.alice.address);
	 *
	 *   api.tx.balances
	 *     // create transfer
	 *     transfer(keyring.bob.address, 12345)
	 *     // sign the transcation
	 *     .sign(keyring.alice, { nonce })
	 *     // send the transaction (optional status callback)
	 *     .send((status) => {
	 *       console.log(`current status ${status.type}`);
	 *     })
	 *     // retrieve the submitted extrinsic hash
	 *     .then((hash) => {
	 *       console.log(`submitted with hash ${hash}`);
	 *     });
	 * });
	 * ```
	 */


	var _isReadyPromise = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyPromise");

	var _isReadyOrErrorPromise = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyOrErrorPromise");

	class ApiPromise extends _index$1.ApiBase {
	  /**
	   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
	   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
	   * provider (see the constructor arguments)
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * import Api from '@polkadot/api/promise';
	   *
	   * Api.create().then(async (api) => {
	   *   const timestamp = await api.query.timestamp.now();
	   *
	   *   console.log(`lastest block timestamp ${timestamp}`);
	   * });
	   * ```
	   */
	  static create(options) {
	    const instance = new ApiPromise(options);

	    if (options && options.throwOnConnect) {
	      return instance.isReadyOrError;
	    } // Swallow any rejections on isReadyOrError
	    // (in Node 15.x this creates issues, when not being looked at)


	    instance.isReadyOrError.catch(() => {// ignore
	    });
	    return instance.isReady;
	  }
	  /**
	   * @description Creates an instance of the ApiPromise class
	   * @param options Options to create an instance. This can be either [[ApiOptions]] or
	   * an [[WsProvider]].
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * import Api from '@polkadot/api/promise';
	   *
	   * new Api().isReady.then((api) => {
	   *   api.rpc.subscribeNewHeads((header) => {
	   *     console.log(`new block #${header.number.toNumber()}`);
	   *   });
	   * });
	   * ```
	   */


	  constructor(options) {
	    super(options, 'promise', decorateMethod);
	    Object.defineProperty(this, _isReadyPromise, {
	      writable: true,
	      value: void 0
	    });
	    Object.defineProperty(this, _isReadyOrErrorPromise, {
	      writable: true,
	      value: void 0
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
	      super.once('ready', () => resolve(this));
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise] = new Promise((resolve, reject) => {
	      const tracker = promiseTracker(resolve, reject);
	      super.once('ready', () => tracker.resolve(this));
	      super.once('error', e => tracker.reject(e));
	    });
	  }
	  /**
	   * @description Promise that resolves the first time we are connected and loaded
	   */


	  get isReady() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise];
	  }
	  /**
	   * @description Promise that resolves if we can connect, or reject if there is an error
	   */


	  get isReadyOrError() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise];
	  }
	  /**
	   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
	   */


	  clone() {
	    return new ApiPromise(_objectSpread(_objectSpread({}, this._options), {}, {
	      source: this
	    }));
	  }
	  /**
	   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
	   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
	   * @param callback A callback that will return an Array of all the values this combinator has been applied to
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
	   *
	   * // combines values from balance & nonce as it updates
	   * api.combineLatest([
	   *   api.rpc.chain.subscribeNewHeads,
	   *   (cb) => api.query.system.account(address, cb)
	   * ], ([head, [balance, nonce]]) => {
	   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
	   * });
	   * ```
	   */
	  // eslint-disable-next-line @typescript-eslint/require-await


	  async combineLatest(fns, callback) {
	    const combinator = new _Combinator.Combinator(fns, callback);
	    return () => {
	      combinator.unsubscribe();
	    };
	  }

	}

	exports.ApiPromise = ApiPromise;
	});

	var rx = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.decorateMethod = decorateMethod;
	exports.ApiRx = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _classPrivateFieldLooseBase2 = interopRequireDefault(classPrivateFieldLooseBase);

	var _classPrivateFieldLooseKey2 = interopRequireDefault(classPrivateFieldLooseKey);





	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function decorateMethod(method) {
	  return method;
	}
	/**
	 * # @polkadot/api/rx
	 *
	 *  ## Overview
	 *
	 * @name ApiRx
	 *
	 * @description
	 * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.
	 *
	 * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.
	 *
	 * @see [[ApiPromise]]
	 *
	 * ## Usage
	 *
	 * Making rpc calls -
	 * <BR>
	 *
	 * ```javascript
	 * import ApiRx from '@polkadot/api/rx';
	 *
	 * // initialize via Promise & static create
	 * const api = await ApiRx.create().toPromise();
	 *
	 * // make a call to retrieve the current network head
	 * api.rpc.chain.subscribeNewHeads().subscribe((header) => {
	 *   console.log(`Chain is at #${header.number}`);
	 * });
	 * ```
	 * <BR>
	 *
	 * Subscribing to chain state -
	 * <BR>
	 *
	 * ```javascript
	 * import { combineLatest, pairwise, switchMap } from 'rxjs';
	 * import { ApiRx, WsProvider } from '@polkadot/api';
	 *
	 *
	 * // initialize a provider with a specific endpoint
	 * const provider = new WsProvider('wss://example.com:9944')
	 *
	 * // initialize via isReady & new with specific provider
	 * new ApiRx({ provider })
	 *   .isReady
	 *   .pipe(
	 *     switchMap((api) =>
	 *       combineLatest([
	 *         api.query.timestamp.blockPeriod(),
	 *         api.query.timestamp.now().pipe(pairwise())
	 *       ])
	 *     )
	 *   )
	 *   .subscribe(([blockPeriod, timestamp]) => {
	 *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();
	 *      console.log(`timestamp ${timestamp[1]} \nelapsed ${elapsed} \n(${blockPeriod}s target)`);
	 *   });
	 * ```
	 * <BR>
	 *
	 * Submitting a transaction -
	 * <BR>
	 *
	 * ```javascript
	 * import { first, switchMap } from 'rxjs';
	 * import ApiRx from '@polkadot/api/rx';
	 *
	 * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)
	 * import testingPairs from '@polkadot/keyring/testingPairs';
	 * const keyring = testingPairs();
	 *
	 * // get api via Promise
	 * const api = await ApiRx.create().toPromise();
	 *
	 * // retrieve nonce for the account
	 * api.query.system
	 *   .account(keyring.alice.address)
	 *   .pipe(
	 *      first(),
	 *      // pipe nonce into transfer
	 *      switchMap(([nonce]) =>
	 *        api.tx.balances
	 *          // create transfer
	 *          .transfer(keyring.bob.address, 12345)
	 *          // sign the transaction
	 *          .sign(keyring.alice, { nonce })
	 *          // send the transaction
	 *          .send()
	 *      )
	 *   )
	 *   // subscribe to overall result
	 *   .subscribe(({ status }) => {
	 *     if (status.isInBlock) {
	 *       console.log('Completed at block hash', status.asFinalized.toHex());
	 *     }
	 *   });
	 * ```
	 */


	var _isReadyRx = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyRx");

	class ApiRx extends _index$1.ApiBase {
	  /**
	   * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.
	   * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * import { switchMap } from 'rxjs';
	   * import Api from '@polkadot/api/rx';
	   *
	   * Api.create()
	   *   .pipe(
	   *     switchMap((api) =>
	   *       api.rpc.chain.subscribeNewHeads()
	   *   ))
	   *   .subscribe((header) => {
	   *     console.log(`new block #${header.number.toNumber()}`);
	   *   });
	   * ```
	   */
	  static create(options) {
	    return new ApiRx(options).isReady;
	  }
	  /**
	   * @description Create an instance of the ApiRx class
	   * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]
	   * @example
	   * <BR>
	   *
	   * ```javascript
	   * import { switchMap } from 'rxjs';
	   * import Api from '@polkadot/api/rx';
	   *
	   * new Api().isReady
	   *   .pipe(
	   *     switchMap((api) =>
	   *       api.rpc.chain.subscribeNewHeads()
	   *   ))
	   *   .subscribe((header) => {
	   *     console.log(`new block #${header.number.toNumber()}`);
	   *   });
	   * ```
	   */


	  constructor(options) {
	    super(options, 'rxjs', decorateMethod);
	    Object.defineProperty(this, _isReadyRx, {
	      writable: true,
	      value: void 0
	    });
	    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx] = (0, _rxjs.from)( // You can create an observable from an event, however my mind groks this form better
	    new Promise(resolve => {
	      super.on('ready', () => resolve(this));
	    }));
	  }
	  /**
	   * @description Observable that returns the first time we are connected and loaded
	   */


	  get isReady() {
	    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx];
	  }
	  /**
	   * @description Returns a clone of this ApiRx instance (new underlying provider connection)
	   */


	  clone() {
	    return new ApiRx(_objectSpread(_objectSpread({}, this._options), {}, {
	      source: this
	    }));
	  }

	}

	exports.ApiRx = ApiRx;
	});

	var _keyring = keyring;

	var _index = promise;

	var _index3 = rx;

	var bundle = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "Keyring", {
	  enumerable: true,
	  get: function () {
	    return _keyring.Keyring;
	  }
	});
	Object.defineProperty(exports, "WsProvider", {
	  enumerable: true,
	  get: function () {
	    return _rpcProvider.WsProvider;
	  }
	});
	Object.defineProperty(exports, "HttpProvider", {
	  enumerable: true,
	  get: function () {
	    return _rpcProvider.HttpProvider;
	  }
	});
	Object.defineProperty(exports, "packageInfo", {
	  enumerable: true,
	  get: function () {
	    return _packageInfo$5.packageInfo;
	  }
	});
	Object.defineProperty(exports, "ApiPromise", {
	  enumerable: true,
	  get: function () {
	    return _index.ApiPromise;
	  }
	});
	Object.defineProperty(exports, "decorateMethodPromise", {
	  enumerable: true,
	  get: function () {
	    return _index.decorateMethod;
	  }
	});
	Object.defineProperty(exports, "SubmittableResult", {
	  enumerable: true,
	  get: function () {
	    return _index2.SubmittableResult;
	  }
	});
	Object.defineProperty(exports, "ApiRx", {
	  enumerable: true,
	  get: function () {
	    return _index3.ApiRx;
	  }
	});
	Object.defineProperty(exports, "decorateMethodRx", {
	  enumerable: true,
	  get: function () {
	    return _index3.decorateMethod;
	  }
	});
	});

	var _bundle = bundle;

	var api = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	Object.keys(_bundle).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _bundle[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _bundle[key];
	    }
	  });
	});
	});

	var require$$0 = api;

	// Import the API
	var ApiPromise = require$$0.ApiPromise;
	// Known account we want to use (available on dev chain, with funds)
	var Alice = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
	function main() {
	    return __awaiter(this, void 0, void 0, function () {
	        var api, _a, previousFree, previousNonce;
	        return __generator(this, function (_b) {
	            switch (_b.label) {
	                case 0: return [4 /*yield*/, ApiPromise.create()];
	                case 1:
	                    api = _b.sent();
	                    return [4 /*yield*/, api.query.system.account(Alice)];
	                case 2:
	                    _a = _b.sent(), previousFree = _a.data.free, previousNonce = _a.nonce;
	                    console.log(Alice + " has a balance of " + previousFree + ", nonce " + previousNonce);
	                    console.log("You may leave this example running and start example 06 or transfer any value to " + Alice);
	                    // Here we subscribe to any balance changes and update the on-screen value
	                    api.query.system.account(Alice, function (_a) {
	                        var currentFree = _a.data.free, currentNonce = _a.nonce;
	                        // Calculate the delta
	                        var change = currentFree.sub(previousFree);
	                        // Only display positive value changes (Since we are pulling `previous` above already,
	                        // the initial balance change will also be zero)
	                        if (!change.isZero()) {
	                            console.log("New balance change of " + change + ", nonce " + currentNonce);
	                            previousFree = currentFree;
	                            previousNonce = currentNonce;
	                        }
	                    });
	                    return [2 /*return*/];
	            }
	        });
	    });
	}
	main().catch(console.error);

	var test = {

	};

	return test;

}(_xTextdecoder, _xTextencoder, _xRandomvalues, _wasmCryptoAsmjs, _wasmCryptoWasm, buffer$3, crypto$2, _xFetch, _xWs));
//# sourceMappingURL=bundle.js.map
